
testSD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d570  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003694  0801d810  0801d810  0002d810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08020ea4  08020ea4  00030ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08020eac  08020eac  00030eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08020eb0  08020eb0  00030eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  24000000  08020eb4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000761c  24000088  08020f38  00040088  2**3
                  ALLOC
  8 ._user_heap_stack 00006004  240076a4  08020f38  000476a4  2**0
                  ALLOC
  9 .lwip_sec     000019d0  30040000  08020f38  00050000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00052b8d  00000000  00000000  000400b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000082e8  00000000  00000000  00092c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000023b8  00000000  00000000  0009af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002230  00000000  00000000  0009d2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0004b54f  00000000  00000000  0009f510  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00030334  00000000  00000000  000eaa5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001aa5c1  00000000  00000000  0011ad93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  002c5354  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009b24  00000000  00000000  002c53d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801d7f8 	.word	0x0801d7f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0801d7f8 	.word	0x0801d7f8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <SystemInit+0x104>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <SystemInit+0x104>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <SystemInit+0x104>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a3a      	ldr	r2, [pc, #232]	; (8000784 <SystemInit+0x104>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0x108>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b36      	ldr	r3, [pc, #216]	; (8000788 <SystemInit+0x108>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a34      	ldr	r2, [pc, #208]	; (8000788 <SystemInit+0x108>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <SystemInit+0x10c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x10c>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <SystemInit+0x10c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2f      	ldr	r3, [pc, #188]	; (800078c <SystemInit+0x10c>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492e      	ldr	r1, [pc, #184]	; (800078c <SystemInit+0x10c>)
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x110>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <SystemInit+0x108>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	d907      	bls.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemInit+0x108>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a26      	ldr	r2, [pc, #152]	; (8000788 <SystemInit+0x108>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemInit+0x10c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <SystemInit+0x10c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemInit+0x10c>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <SystemInit+0x10c>)
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemInit+0x114>)
 800070c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemInit+0x10c>)
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemInit+0x118>)
 8000712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <SystemInit+0x10c>)
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SystemInit+0x11c>)
 8000718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <SystemInit+0x10c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <SystemInit+0x10c>)
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <SystemInit+0x11c>)
 8000724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <SystemInit+0x10c>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <SystemInit+0x10c>)
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SystemInit+0x11c>)
 8000730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <SystemInit+0x10c>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <SystemInit+0x10c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a13      	ldr	r2, [pc, #76]	; (800078c <SystemInit+0x10c>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <SystemInit+0x10c>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x120>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x120>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x124>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <SystemInit+0x128>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x12c>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x130>)
 800076c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000770:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000772:	4b04      	ldr	r3, [pc, #16]	; (8000784 <SystemInit+0x104>)
 8000774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000778:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00
 8000788:	52002000 	.word	0x52002000
 800078c:	58024400 	.word	0x58024400
 8000790:	eaf6ed7f 	.word	0xeaf6ed7f
 8000794:	02020200 	.word	0x02020200
 8000798:	01ff0000 	.word	0x01ff0000
 800079c:	01010280 	.word	0x01010280
 80007a0:	580000c0 	.word	0x580000c0
 80007a4:	5c001000 	.word	0x5c001000
 80007a8:	ffff0000 	.word	0xffff0000
 80007ac:	51008108 	.word	0x51008108
 80007b0:	52004000 	.word	0x52004000

080007b4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007bc:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <SCB_EnableICache+0x3c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007cc:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <SCB_EnableICache+0x3c>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <SCB_EnableICache+0x3c>)
 80007d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80007e0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <SCB_EnableDCache+0x7c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000802:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <SCB_EnableDCache+0x7c>)
 8000808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800080c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	0b5b      	lsrs	r3, r3, #13
 8000812:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000816:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	08db      	lsrs	r3, r3, #3
 800081c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000820:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	015a      	lsls	r2, r3, #5
 8000826:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800082a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000830:	490f      	ldr	r1, [pc, #60]	; (8000870 <SCB_EnableDCache+0x7c>)
 8000832:	4313      	orrs	r3, r2
 8000834:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	1e5a      	subs	r2, r3, #1
 800083c:	60ba      	str	r2, [r7, #8]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1ef      	bne.n	8000822 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	60fa      	str	r2, [r7, #12]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d1e5      	bne.n	8000818 <SCB_EnableDCache+0x24>
 800084c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <SCB_EnableDCache+0x7c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	4a06      	ldr	r2, [pc, #24]	; (8000870 <SCB_EnableDCache+0x7c>)
 8000856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800085a:	6153      	str	r3, [r2, #20]
 800085c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000860:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <SCB_CleanInvalidateDCache+0x6c>)
 800087c:	2200      	movs	r2, #0
 800087e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <SCB_CleanInvalidateDCache+0x6c>)
 8000888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800088c:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	0b5b      	lsrs	r3, r3, #13
 8000892:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000896:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	08db      	lsrs	r3, r3, #3
 800089c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008a0:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	015a      	lsls	r2, r3, #5
 80008a6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008aa:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80008b0:	490b      	ldr	r1, [pc, #44]	; (80008e0 <SCB_CleanInvalidateDCache+0x6c>)
 80008b2:	4313      	orrs	r3, r2
 80008b4:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ef      	bne.n	80008a2 <SCB_CleanInvalidateDCache+0x2e>
    } while(sets-- != 0U);
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	1e5a      	subs	r2, r3, #1
 80008c6:	60fa      	str	r2, [r7, #12]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d1e5      	bne.n	8000898 <SCB_CleanInvalidateDCache+0x24>
 80008cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008d0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e4:	b5b0      	push	{r4, r5, r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008ea:	f000 fb25 	bl	8000f38 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80008ee:	f7ff ff61 	bl	80007b4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80008f2:	f7ff ff7f 	bl	80007f4 <SCB_EnableDCache>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008fa:	637b      	str	r3, [r7, #52]	; 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fc:	bf00      	nop
 80008fe:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <main+0x104>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000906:	2b00      	cmp	r3, #0
 8000908:	d004      	beq.n	8000914 <main+0x30>
 800090a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800090c:	1e5a      	subs	r2, r3, #1
 800090e:	637a      	str	r2, [r7, #52]	; 0x34
 8000910:	2b00      	cmp	r3, #0
 8000912:	dcf4      	bgt.n	80008fe <main+0x1a>
  if ( timeout < 0 )
 8000914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000916:	2b00      	cmp	r3, #0
 8000918:	da01      	bge.n	800091e <main+0x3a>
  {
  Error_Handler();
 800091a:	f000 fb73 	bl	8001004 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091e:	f000 fe11 	bl	8001544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000922:	f000 f86f 	bl	8000a04 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <main+0x104>)
 8000928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092c:	4a2e      	ldr	r2, [pc, #184]	; (80009e8 <main+0x104>)
 800092e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000932:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000936:	4b2c      	ldr	r3, [pc, #176]	; (80009e8 <main+0x104>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000944:	2000      	movs	r0, #0
 8000946:	f004 fea5 	bl	8005694 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800094a:	2100      	movs	r1, #0
 800094c:	2000      	movs	r0, #0
 800094e:	f004 febb 	bl	80056c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000958:	bf00      	nop
 800095a:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <main+0x104>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000962:	2b00      	cmp	r3, #0
 8000964:	d104      	bne.n	8000970 <main+0x8c>
 8000966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000968:	1e5a      	subs	r2, r3, #1
 800096a:	637a      	str	r2, [r7, #52]	; 0x34
 800096c:	2b00      	cmp	r3, #0
 800096e:	dcf4      	bgt.n	800095a <main+0x76>
if ( timeout < 0 )
 8000970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000972:	2b00      	cmp	r3, #0
 8000974:	da01      	bge.n	800097a <main+0x96>
{
Error_Handler();
 8000976:	f000 fb45 	bl	8001004 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 fa4f 	bl	8000e1c <MX_GPIO_Init>
  MX_DMA_Init();
 800097e:	f000 fa2d 	bl	8000ddc <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8000982:	f000 f9b9 	bl	8000cf8 <MX_SDMMC1_SD_Init>
  MX_USART3_UART_Init();
 8000986:	f000 f9dd 	bl	8000d44 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800098a:	f00b f843 	bl	800ba14 <MX_FATFS_Init>
  MX_ADC3_Init();
 800098e:	f000 f91f 	bl	8000bd0 <MX_ADC3_Init>
  MX_LWIP_Init();
 8000992:	f00b fae5 	bl	800bf60 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  SCB_CleanInvalidateDCache();
 8000996:	f7ff ff6d 	bl	8000874 <SCB_CleanInvalidateDCache>
  FRESULT res;

  //	BYTE work[_MAX_SS];
  //  res = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));

  res = f_mount(&SDFatFS, "", 0);//f_mount(&SDFatFS, SDPath, 1);
 800099a:	2200      	movs	r2, #0
 800099c:	4913      	ldr	r1, [pc, #76]	; (80009ec <main+0x108>)
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <main+0x10c>)
 80009a0:	f00f f9da 	bl	800fd58 <f_mount>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* open the file */
  res = f_open(&myFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80009aa:	220a      	movs	r2, #10
 80009ac:	4911      	ldr	r1, [pc, #68]	; (80009f4 <main+0x110>)
 80009ae:	4812      	ldr	r0, [pc, #72]	; (80009f8 <main+0x114>)
 80009b0:	f00f fa18 	bl	800fde4 <f_open>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* write to a file */
  char myData[] = "Hello from STM32H7, sdio in 4 bits mode";
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <main+0x118>)
 80009bc:	f107 0408 	add.w	r4, r7, #8
 80009c0:	461d      	mov	r5, r3
 80009c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009ce:	e884 0003 	stmia.w	r4, {r0, r1}
  f_write(&myFile, &myData, sizeof(myData), (void *)&myBytes);
 80009d2:	f107 0108 	add.w	r1, r7, #8
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <main+0x11c>)
 80009d8:	2228      	movs	r2, #40	; 0x28
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <main+0x114>)
 80009dc:	f00f fd86 	bl	80104ec <f_write>

  /* close the file */
  f_close(&myFile);
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x114>)
 80009e2:	f010 f8b9 	bl	8010b58 <f_close>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <main+0x102>
 80009e8:	58024400 	.word	0x58024400
 80009ec:	0801d810 	.word	0x0801d810
 80009f0:	24003558 	.word	0x24003558
 80009f4:	0801d814 	.word	0x0801d814
 80009f8:	24000270 	.word	0x24000270
 80009fc:	0801d820 	.word	0x0801d820
 8000a00:	24001354 	.word	0x24001354

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0cc      	sub	sp, #304	; 0x130
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000a0e:	224c      	movs	r2, #76	; 0x4c
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f01b ffc8 	bl	801c9a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f01b ffc1 	bl	801c9a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	23bc      	movs	r3, #188	; 0xbc
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f01b ffb9 	bl	801c9a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a36:	2004      	movs	r0, #4
 8000a38:	f004 fe5a 	bl	80056f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	4b5f      	ldr	r3, [pc, #380]	; (8000bc0 <SystemClock_Config+0x1bc>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a5e      	ldr	r2, [pc, #376]	; (8000bc0 <SystemClock_Config+0x1bc>)
 8000a48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b5c      	ldr	r3, [pc, #368]	; (8000bc0 <SystemClock_Config+0x1bc>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	4b5a      	ldr	r3, [pc, #360]	; (8000bc4 <SystemClock_Config+0x1c0>)
 8000a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5e:	4a59      	ldr	r2, [pc, #356]	; (8000bc4 <SystemClock_Config+0x1c0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a66:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <SystemClock_Config+0x1c0>)
 8000a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6a:	f003 0201 	and.w	r2, r3, #1
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a76:	bf00      	nop
 8000a78:	4b51      	ldr	r3, [pc, #324]	; (8000bc0 <SystemClock_Config+0x1bc>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a84:	d1f8      	bne.n	8000a78 <SystemClock_Config+0x74>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a86:	4b50      	ldr	r3, [pc, #320]	; (8000bc8 <SystemClock_Config+0x1c4>)
 8000a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8a:	4a4f      	ldr	r2, [pc, #316]	; (8000bc8 <SystemClock_Config+0x1c4>)
 8000a8c:	f023 0303 	bic.w	r3, r3, #3
 8000a90:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a92:	2302      	movs	r3, #2
 8000a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2340      	movs	r3, #64	; 0x40
 8000aa0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000ab6:	233c      	movs	r3, #60	; 0x3c
 8000ab8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac2:	2304      	movs	r3, #4
 8000ac4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fe5d 	bl	80057a4 <HAL_RCC_OscConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000af0:	f000 fa88 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af4:	233f      	movs	r3, #63	; 0x3f
 8000af6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2303      	movs	r3, #3
 8000afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0c:	2340      	movs	r3, #64	; 0x40
 8000b0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b12:	2340      	movs	r3, #64	; 0x40
 8000b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b20:	2340      	movs	r3, #64	; 0x40
 8000b22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b2a:	2104      	movs	r1, #4
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f005 fa49 	bl	8005fc4 <HAL_RCC_ClockConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8000b38:	f000 fa64 	bl	8001004 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_SDMMC
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4a22      	ldr	r2, [pc, #136]	; (8000bcc <SystemClock_Config+0x1c8>)
 8000b42:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	2204      	movs	r2, #4
 8000b4a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	2209      	movs	r2, #9
 8000b52:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 1;
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2201      	movs	r2, #1
 8000b5a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	2202      	movs	r2, #2
 8000b62:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2201      	movs	r2, #1
 8000b6a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	22c0      	movs	r2, #192	; 0xc0
 8000b72:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000b74:	f107 0308 	add.w	r3, r7, #8
 8000b78:	2220      	movs	r2, #32
 8000b7a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000b84:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	2200      	movs	r2, #0
 8000b96:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000b98:	f107 0308 	add.w	r3, r7, #8
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0308 	add.w	r3, r7, #8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fd90 	bl	80066cc <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x1b2>
  {
    Error_Handler();
 8000bb2:	f000 fa27 	bl	8001004 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024800 	.word	0x58024800
 8000bc4:	58000400 	.word	0x58000400
 8000bc8:	58024400 	.word	0x58024400
 8000bcc:	00090002 	.word	0x00090002

08000bd0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000bea:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <MX_ADC3_Init+0x118>)
 8000bec:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000bf0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bf4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000bf6:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bfc:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c04:	2204      	movs	r2, #4
 8000c06:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000c0e:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000c14:	4b33      	ldr	r3, [pc, #204]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000c1a:	4b32      	ldr	r3, [pc, #200]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c20:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c26:	4b2f      	ldr	r3, [pc, #188]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c2e:	2203      	movs	r2, #3
 8000c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c32:	4b2c      	ldr	r3, [pc, #176]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000c3e:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c46:	4827      	ldr	r0, [pc, #156]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c48:	f000 fef2 	bl	8001a30 <HAL_ADC_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000c52:	f000 f9d7 	bl	8001004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c56:	2301      	movs	r3, #1
 8000c58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5a:	2306      	movs	r3, #6
 8000c5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_387CYCLES_5;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	481a      	ldr	r0, [pc, #104]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c7a:	f001 f879 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC3_Init+0xb8>
  {
    Error_Handler();
 8000c84:	f000 f9be 	bl	8001004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_ADC3_Init+0x11c>)
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	4619      	mov	r1, r3
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000c96:	f001 f86b 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC3_Init+0xd4>
  {
    Error_Handler();
 8000ca0:	f000 f9b0 	bl	8001004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_ADC3_Init+0x120>)
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ca8:	2312      	movs	r3, #18
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000cb2:	f001 f85d 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC3_Init+0xf0>
  {
    Error_Handler();
 8000cbc:	f000 f9a2 	bl	8001004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_ADC3_Init+0x124>)
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cc4:	2318      	movs	r3, #24
 8000cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_ADC3_Init+0x114>)
 8000cce:	f001 f84f 	bl	8001d70 <HAL_ADC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000cd8:	f000 f994 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2400248c 	.word	0x2400248c
 8000ce8:	58026000 	.word	0x58026000
 8000cec:	04300002 	.word	0x04300002
 8000cf0:	08600004 	.word	0x08600004
 8000cf4:	0c900008 	.word	0x0c900008

08000cf8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000cfe:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <MX_SDMMC1_SD_Init+0x48>)
 8000d00:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d14:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d1e:	2208      	movs	r2, #8
 8000d20:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_SDMMC1_SD_Init+0x44>)
 8000d2a:	f007 fb93 	bl	8008454 <HAL_SD_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000d34:	f000 f966 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	24001358 	.word	0x24001358
 8000d40:	52007000 	.word	0x52007000

08000d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <MX_USART3_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d8e:	f008 ffcd 	bl	8009d2c <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f934 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000da0:	f009 ff67 	bl	800ac72 <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f92b 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000db2:	f009 ff9c 	bl	800acee <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f922 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	; (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f009 ff1d 	bl	800ac00 <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f91a 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	240012c8 	.word	0x240012c8
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de2:	4b0d      	ldr	r3, [pc, #52]	; (8000e18 <MX_DMA_Init+0x3c>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de8:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <MX_DMA_Init+0x3c>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_DMA_Init+0x3c>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	200b      	movs	r0, #11
 8000e06:	f001 fc9a 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e0a:	200b      	movs	r0, #11
 8000e0c:	f001 fcb1 	bl	8002772 <HAL_NVIC_EnableIRQ>

}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	58024400 	.word	0x58024400

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a3d      	ldr	r2, [pc, #244]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
 8000e4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e50:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a36      	ldr	r2, [pc, #216]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b33      	ldr	r3, [pc, #204]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_GPIO_Init+0x114>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f04:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f16:	230a      	movs	r3, #10
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <MX_GPIO_Init+0x118>)
 8000f22:	f004 fa07 	bl	8005334 <HAL_GPIO_Init>

}
 8000f26:	bf00      	nop
 8000f28:	3730      	adds	r7, #48	; 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	58024400 	.word	0x58024400
 8000f34:	58020000 	.word	0x58020000

08000f38 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f4a:	f001 fc2d 	bl	80027a8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000f56:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
 8000f5a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 fc46 	bl	8002810 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f84:	2301      	movs	r3, #1
 8000f86:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f8c:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MPU_Config+0xc4>)
 8000f8e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000f90:	2307      	movs	r3, #7
 8000f92:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fc2c 	bl	8002810 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30044000;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <MPU_Config+0xc8>)
 8000fc2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000fc4:	230e      	movs	r3, #14
 8000fc6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fc12 	bl	8002810 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fec:	2004      	movs	r0, #4
 8000fee:	f001 fbf1 	bl	80027d4 <HAL_MPU_Enable>

}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	30040000 	.word	0x30040000
 8001000:	30044000 	.word	0x30044000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_MspInit+0x3c>)
 800101c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001020:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <HAL_MspInit+0x3c>)
 8001022:	f043 0302 	orr.w	r3, r3, #2
 8001026:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x3c>)
 800102c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2005      	movs	r0, #5
 800103e:	f001 fb7e 	bl	800273e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001042:	2005      	movs	r0, #5
 8001044:	f001 fb95 	bl	8002772 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	58024400 	.word	0x58024400

08001054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a3e      	ldr	r2, [pc, #248]	; (800116c <HAL_ADC_MspInit+0x118>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d175      	bne.n	8001162 <HAL_ADC_MspInit+0x10e>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001076:	4b3e      	ldr	r3, [pc, #248]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 8001078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107c:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001082:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 8001088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001094:	4b36      	ldr	r3, [pc, #216]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 8001096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109a:	4a35      	ldr	r2, [pc, #212]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 800109c:	f043 0320 	orr.w	r3, r3, #32
 80010a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a4:	4b32      	ldr	r3, [pc, #200]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b8:	4a2d      	ldr	r2, [pc, #180]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_ADC_MspInit+0x11c>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> ADC3_INP3
    PF9     ------> ADC3_INP2
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80010d0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <HAL_ADC_MspInit+0x120>)
 80010e6:	f004 f925 	bl	8005334 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80010ea:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80010ee:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80010f2:	f000 fafb 	bl	80016ec <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80010f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80010fa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80010fe:	f000 faf5 	bl	80016ec <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA1_Stream0;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_ADC_MspInit+0x128>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800110a:	2273      	movs	r2, #115	; 0x73
 800110c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800111c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001120:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001124:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001128:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800112a:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800112c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001130:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001134:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001138:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001146:	480c      	ldr	r0, [pc, #48]	; (8001178 <HAL_ADC_MspInit+0x124>)
 8001148:	f001 fbba 	bl	80028c0 <HAL_DMA_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001152:	f7ff ff57 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800115a:	64da      	str	r2, [r3, #76]	; 0x4c
 800115c:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_ADC_MspInit+0x124>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	58026000 	.word	0x58026000
 8001170:	58024400 	.word	0x58024400
 8001174:	58021400 	.word	0x58021400
 8001178:	240013d8 	.word	0x240013d8
 800117c:	40020010 	.word	0x40020010

08001180 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_SD_MspInit+0xd8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d155      	bne.n	800124e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011a8:	4a2c      	ldr	r2, [pc, #176]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011b2:	4b2a      	ldr	r3, [pc, #168]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_SD_MspInit+0xdc>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001200:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800120e:	230c      	movs	r3, #12
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <HAL_SD_MspInit+0xe0>)
 800121a:	f004 f88b 	bl	8005334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800121e:	2304      	movs	r3, #4
 8001220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800122e:	230c      	movs	r3, #12
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_SD_MspInit+0xe4>)
 800123a:	f004 f87b 	bl	8005334 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2031      	movs	r0, #49	; 0x31
 8001244:	f001 fa7b 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001248:	2031      	movs	r0, #49	; 0x31
 800124a:	f001 fa92 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	52007000 	.word	0x52007000
 800125c:	58024400 	.word	0x58024400
 8001260:	58020800 	.word	0x58020800
 8001264:	58020c00 	.word	0x58020c00

08001268 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1a      	ldr	r2, [pc, #104]	; (80012f0 <HAL_UART_MspInit+0x88>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d12e      	bne.n	80012e8 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 800129c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80012a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ae:	4a11      	ldr	r2, [pc, #68]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_UART_MspInit+0x8c>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d8:	2307      	movs	r3, #7
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_UART_MspInit+0x90>)
 80012e4:	f004 f826 	bl	8005334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40004800 	.word	0x40004800
 80012f4:	58024400 	.word	0x58024400
 80012f8:	58020c00 	.word	0x58020c00

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <HardFault_Handler+0x4>

08001310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <MemManage_Handler+0x4>

08001316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <BusFault_Handler+0x4>

0800131c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <UsageFault_Handler+0x4>

08001322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001350:	f000 f96a 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}

08001358 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <DMA1_Stream0_IRQHandler+0x10>)
 800136e:	f001 fe03 	bl	8002f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	240013d8 	.word	0x240013d8

0800137c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <SDMMC1_IRQHandler+0x10>)
 8001382:	f007 fadb 	bl	800893c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	24001358 	.word	0x24001358

08001390 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001394:	4802      	ldr	r0, [pc, #8]	; (80013a0 <ETH_IRQHandler+0x10>)
 8001396:	f003 f8f9 	bl	800458c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240046a8 	.word	0x240046a8

080013a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00a      	b.n	80013cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b6:	f3af 8000 	nop.w
 80013ba:	4601      	mov	r1, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf0      	blt.n	80013b6 <_read+0x12>
	}

return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e009      	b.n	8001404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf1      	blt.n	80013f0 <_write+0x12>
	}
	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_close>:

int _close(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return -1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	605a      	str	r2, [r3, #4]
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b480      	push	{r7}
 8001482:	b087      	sub	sp, #28
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d205      	bcs.n	80014bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <_sbrk+0x6c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	24080000 	.word	0x24080000
 80014e0:	00004000 	.word	0x00004000
 80014e4:	240000a4 	.word	0x240000a4
 80014e8:	240076a8 	.word	0x240076a8
 80014ec:	240076a0 	.word	0x240076a0

080014f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001528 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014f4:	f7ff f8c4 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80014f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80014fa:	e003      	b.n	8001504 <LoopCopyDataInit>

080014fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80014fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001502:	3104      	adds	r1, #4

08001504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800150a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800150c:	d3f6      	bcc.n	80014fc <CopyDataInit>
  ldr  r2, =_sbss
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001510:	e002      	b.n	8001518 <LoopFillZerobss>

08001512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001514:	f842 3b04 	str.w	r3, [r2], #4

08001518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800151a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800151c:	d3f9      	bcc.n	8001512 <FillZerobss>
   
/* Call static constructors */
    bl __libc_init_array
 800151e:	f01b fa05 	bl	801c92c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001522:	f7ff f9df 	bl	80008e4 <main>
  bx  lr    
 8001526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 800152c:	08020eb4 	.word	0x08020eb4
  ldr  r0, =_sdata
 8001530:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001534:	24000084 	.word	0x24000084
  ldr  r2, =_sbss
 8001538:	24000088 	.word	0x24000088
  ldr  r3, = _ebss
 800153c:	240076a4 	.word	0x240076a4

08001540 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001540:	e7fe      	b.n	8001540 <ADC3_IRQHandler>
	...

08001544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154a:	2003      	movs	r0, #3
 800154c:	f001 f8ec 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001550:	f004 feee 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 8001554:	4601      	mov	r1, r0
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_Init+0x68>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_Init+0x6c>)
 8001562:	5cd3      	ldrb	r3, [r2, r3]
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	fa21 f303 	lsr.w	r3, r1, r3
 800156c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_Init+0x68>)
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	4a0e      	ldr	r2, [pc, #56]	; (80015b0 <HAL_Init+0x6c>)
 8001578:	5cd3      	ldrb	r3, [r2, r3]
 800157a:	f003 031f 	and.w	r3, r3, #31
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_Init+0x70>)
 8001586:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_Init+0x74>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158e:	2000      	movs	r0, #0
 8001590:	f000 f814 	bl	80015bc <HAL_InitTick>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e002      	b.n	80015a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159e:	f7ff fd39 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	58024400 	.word	0x58024400
 80015b0:	08020884 	.word	0x08020884
 80015b4:	24000004 	.word	0x24000004
 80015b8:	24000000 	.word	0x24000000

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_InitTick+0x60>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e021      	b.n	8001614 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_InitTick+0x64>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_InitTick+0x60>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f8d1 	bl	800278e <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f001 f89b 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x68>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2400000c 	.word	0x2400000c
 8001620:	24000000 	.word	0x24000000
 8001624:	24000008 	.word	0x24000008

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2400000c 	.word	0x2400000c
 800164c:	240024f0 	.word	0x240024f0

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	240024f0 	.word	0x240024f0

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_Delay+0x40>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	2400000c 	.word	0x2400000c

080016ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetREVID+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0c1b      	lsrs	r3, r3, #16
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	5c001000 	.word	0x5c001000

080016c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	4904      	ldr	r1, [pc, #16]	; (8001714 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	58000400 	.word	0x58000400

08001718 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	609a      	str	r2, [r3, #8]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3360      	adds	r3, #96	; 0x60
 8001792:	461a      	mov	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	430b      	orrs	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	3360      	adds	r3, #96	; 0x60
 8001802:	461a      	mov	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	431a      	orrs	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	601a      	str	r2, [r3, #0]
  }
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3330      	adds	r3, #48	; 0x30
 8001838:	461a      	mov	r2, r3
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	4413      	add	r3, r2
 8001846:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	211f      	movs	r1, #31
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0e9b      	lsrs	r3, r3, #26
 8001860:	f003 011f 	and.w	r1, r3, #31
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	431a      	orrs	r2, r3
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001880:	b480      	push	{r7}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3314      	adds	r3, #20
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	0e5b      	lsrs	r3, r3, #25
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	4413      	add	r3, r2
 800189e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	0d1b      	lsrs	r3, r3, #20
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	2107      	movs	r1, #7
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	401a      	ands	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	0d1b      	lsrs	r3, r3, #20
 80018ba:	f003 031f 	and.w	r3, r3, #31
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	431a      	orrs	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018ca:	bf00      	nop
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f003 0318 	and.w	r3, r3, #24
 80018fa:	4908      	ldr	r1, [pc, #32]	; (800191c <LL_ADC_SetChannelSingleDiff+0x44>)
 80018fc:	40d9      	lsrs	r1, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	400b      	ands	r3, r1
 8001902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001906:	431a      	orrs	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	000fffff 	.word	0x000fffff

08001920 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <LL_ADC_DisableDeepPowerDown+0x20>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6093      	str	r3, [r2, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	5fffffc0 	.word	0x5fffffc0

08001944 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001958:	d101      	bne.n	800195e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <LL_ADC_EnableInternalRegulator+0x24>)
 800197a:	4013      	ands	r3, r2
 800197c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	6fffffc0 	.word	0x6fffffc0

08001994 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019a8:	d101      	bne.n	80019ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d101      	bne.n	80019d4 <LL_ADC_IsEnabled+0x18>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <LL_ADC_IsEnabled+0x1a>
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d101      	bne.n	80019fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d101      	bne.n	8001a20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e18e      	b.n	8001d68 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff fafb 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff67 	bl	8001944 <LL_ADC_IsDeepPowerDownEnabled>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff4d 	bl	8001920 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff82 	bl	8001994 <LL_ADC_IsInternalRegulatorEnabled>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d113      	bne.n	8001abe <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff66 	bl	800196c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001aa0:	4b9a      	ldr	r3, [pc, #616]	; (8001d0c <HAL_ADC_Init+0x2dc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	4a9a      	ldr	r2, [pc, #616]	; (8001d10 <HAL_ADC_Init+0x2e0>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ab0:	e002      	b.n	8001ab8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f9      	bne.n	8001ab2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff66 	bl	8001994 <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10d      	bne.n	8001aea <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad2:	f043 0210 	orr.w	r2, r3, #16
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff77 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001af4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8129 	bne.w	8001d56 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8125 	bne.w	8001d56 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b14:	f043 0202 	orr.w	r2, r3, #2
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff4b 	bl	80019bc <LL_ADC_IsEnabled>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d136      	bne.n	8001b9a <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a78      	ldr	r2, [pc, #480]	; (8001d14 <HAL_ADC_Init+0x2e4>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_ADC_Init+0x110>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a77      	ldr	r2, [pc, #476]	; (8001d18 <HAL_ADC_Init+0x2e8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10e      	bne.n	8001b5e <HAL_ADC_Init+0x12e>
 8001b40:	4874      	ldr	r0, [pc, #464]	; (8001d14 <HAL_ADC_Init+0x2e4>)
 8001b42:	f7ff ff3b 	bl	80019bc <LL_ADC_IsEnabled>
 8001b46:	4604      	mov	r4, r0
 8001b48:	4873      	ldr	r0, [pc, #460]	; (8001d18 <HAL_ADC_Init+0x2e8>)
 8001b4a:	f7ff ff37 	bl	80019bc <LL_ADC_IsEnabled>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4323      	orrs	r3, r4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf0c      	ite	eq
 8001b56:	2301      	moveq	r3, #1
 8001b58:	2300      	movne	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e008      	b.n	8001b70 <HAL_ADC_Init+0x140>
 8001b5e:	486f      	ldr	r0, [pc, #444]	; (8001d1c <HAL_ADC_Init+0x2ec>)
 8001b60:	f7ff ff2c 	bl	80019bc <LL_ADC_IsEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a66      	ldr	r2, [pc, #408]	; (8001d14 <HAL_ADC_Init+0x2e4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d004      	beq.n	8001b88 <HAL_ADC_Init+0x158>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a65      	ldr	r2, [pc, #404]	; (8001d18 <HAL_ADC_Init+0x2e8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_ADC_Init+0x15c>
 8001b88:	4a65      	ldr	r2, [pc, #404]	; (8001d20 <HAL_ADC_Init+0x2f0>)
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_Init+0x15e>
 8001b8c:	4a65      	ldr	r2, [pc, #404]	; (8001d24 <HAL_ADC_Init+0x2f4>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7ff fdbf 	bl	8001718 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001b9a:	f7ff fd87 	bl	80016ac <HAL_GetREVID>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	f241 0303 	movw	r3, #4099	; 0x1003
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d914      	bls.n	8001bd2 <HAL_ADC_Init+0x1a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d110      	bne.n	8001bd2 <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7d5b      	ldrb	r3, [r3, #21]
 8001bb4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bc0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7f1b      	ldrb	r3, [r3, #28]
 8001bc6:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bc8:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bca:	f043 030c 	orr.w	r3, r3, #12
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	e00d      	b.n	8001bee <HAL_ADC_Init+0x1be>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	7d5b      	ldrb	r3, [r3, #21]
 8001bd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bdc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001be2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7f1b      	ldrb	r3, [r3, #28]
 8001be8:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	045b      	lsls	r3, r3, #17
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d009      	beq.n	8001c20 <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	4b40      	ldr	r3, [pc, #256]	; (8001d28 <HAL_ADC_Init+0x2f8>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6812      	ldr	r2, [r2, #0]
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	430b      	orrs	r3, r1
 8001c32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fed2 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001c3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fedf 	bl	8001a08 <LL_ADC_INJ_IsConversionOngoing>
 8001c4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d14a      	bne.n	8001ce8 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d147      	bne.n	8001ce8 <HAL_ADC_Init+0x2b8>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7d1b      	ldrb	r3, [r3, #20]
 8001c5c:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_ADC_Init+0x2fc>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	69b9      	ldr	r1, [r7, #24]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d11b      	bne.n	8001cbc <HAL_ADC_Init+0x28c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_ADC_Init+0x300>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0411      	lsls	r1, r2, #16
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cac:	430a      	orrs	r2, r1
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0201 	orr.w	r2, r2, #1
 8001cb8:	611a      	str	r2, [r3, #16]
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fb58 	bl	8002398 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d121      	bne.n	8001d34 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f023 010f 	bic.w	r1, r3, #15
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	1e5a      	subs	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
 8001d08:	e01c      	b.n	8001d44 <HAL_ADC_Init+0x314>
 8001d0a:	bf00      	nop
 8001d0c:	24000000 	.word	0x24000000
 8001d10:	053e2d63 	.word	0x053e2d63
 8001d14:	40022000 	.word	0x40022000
 8001d18:	40022100 	.word	0x40022100
 8001d1c:	58026000 	.word	0x58026000
 8001d20:	40022300 	.word	0x40022300
 8001d24:	58026300 	.word	0x58026300
 8001d28:	fff0c003 	.word	0xfff0c003
 8001d2c:	ffffbffc 	.word	0xffffbffc
 8001d30:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 020f 	bic.w	r2, r2, #15
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f023 0303 	bic.w	r3, r3, #3
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54
 8001d54:	e007      	b.n	8001d66 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	f043 0210 	orr.w	r2, r3, #16
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3724      	adds	r7, #36	; 0x24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd90      	pop	{r4, r7, pc}

08001d70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b099      	sub	sp, #100	; 0x64
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a99      	ldr	r2, [pc, #612]	; (8001ff0 <HAL_ADC_ConfigChannel+0x280>)
 8001d8a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x2a>
 8001d96:	2302      	movs	r3, #2
 8001d98:	e2e6      	b.n	8002368 <HAL_ADC_ConfigChannel+0x5f8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fe1b 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 82cb 	bne.w	800234a <HAL_ADC_ConfigChannel+0x5da>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d108      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x62>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	2201      	movs	r2, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	e00f      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x82>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	fab3 f383 	clz	r3, r3
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	2201      	movs	r2, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6812      	ldr	r2, [r2, #0]
 8001df6:	69d1      	ldr	r1, [r2, #28]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	430b      	orrs	r3, r1
 8001dfe:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6859      	ldr	r1, [r3, #4]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	f7ff fd0b 	bl	8001828 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fde3 	bl	80019e2 <LL_ADC_REG_IsConversionOngoing>
 8001e1c:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fdf0 	bl	8001a08 <LL_ADC_INJ_IsConversionOngoing>
 8001e28:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 80b3 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f040 80af 	bne.w	8001f98 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6819      	ldr	r1, [r3, #0]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	461a      	mov	r2, r3
 8001e48:	f7ff fd1a 	bl	8001880 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e4c:	4b69      	ldr	r3, [pc, #420]	; (8001ff4 <HAL_ADC_ConfigChannel+0x284>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e58:	d10b      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x102>
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	e01d      	b.n	8001eae <HAL_ADC_ConfigChannel+0x13e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x128>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	e00a      	b.n	8001eae <HAL_ADC_ConfigChannel+0x13e>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	653b      	str	r3, [r7, #80]	; 0x50
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	2b04      	cmp	r3, #4
 8001eb6:	d027      	beq.n	8001f08 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6919      	ldr	r1, [r3, #16]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec6:	f7ff fc5b 	bl	8001780 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6919      	ldr	r1, [r3, #16]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7e5b      	ldrb	r3, [r3, #25]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d102      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x170>
 8001eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ede:	e000      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x172>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f7ff fc85 	bl	80017f2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6919      	ldr	r1, [r3, #16]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d102      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x18e>
 8001ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x190>
 8001efe:	2300      	movs	r3, #0
 8001f00:	461a      	mov	r2, r3
 8001f02:	f7ff fc5d 	bl	80017c0 <LL_ADC_SetDataRightShift>
 8001f06:	e047      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x228>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	069b      	lsls	r3, r3, #26
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f2a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	069b      	lsls	r3, r3, #26
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f4e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d107      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f72:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	069b      	lsls	r3, r3, #26
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d107      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f96:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fd0d 	bl	80019bc <LL_ADC_IsEnabled>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 81d9 	bne.w	800235c <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7ff fc8e 	bl	80018d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <HAL_ADC_ConfigChannel+0x280>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	f040 8101 	bne.w	80021ca <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10f      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x288>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	0e9b      	lsrs	r3, r3, #26
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	bf94      	ite	ls
 8001fe8:	2301      	movls	r3, #1
 8001fea:	2300      	movhi	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e016      	b.n	800201e <HAL_ADC_ConfigChannel+0x2ae>
 8001ff0:	47ff0000 	.word	0x47ff0000
 8001ff4:	5c001000 	.word	0x5c001000
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002008:	fab3 f383 	clz	r3, r3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	2b09      	cmp	r3, #9
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800201e:	2b00      	cmp	r3, #0
 8002020:	d064      	beq.n	80020ec <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_ADC_ConfigChannel+0x2ce>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	3301      	adds	r3, #1
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800203c:	e00e      	b.n	800205c <HAL_ADC_ConfigChannel+0x2ec>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	fab3 f383 	clz	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	3301      	adds	r3, #1
 8002056:	069b      	lsls	r3, r3, #26
 8002058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <HAL_ADC_ConfigChannel+0x30c>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	3301      	adds	r3, #1
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	e010      	b.n	800209e <HAL_ADC_ConfigChannel+0x32e>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800208a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	ea42 0103 	orr.w	r1, r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x354>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	051b      	lsls	r3, r3, #20
 80020c2:	e011      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x378>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	3301      	adds	r3, #1
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4613      	mov	r3, r2
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e8:	430b      	orrs	r3, r1
 80020ea:	e069      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x398>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	069b      	lsls	r3, r3, #26
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002106:	e00e      	b.n	8002126 <HAL_ADC_ConfigChannel+0x3b6>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	61fb      	str	r3, [r7, #28]
  return result;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	3301      	adds	r3, #1
 8002120:	069b      	lsls	r3, r3, #26
 8002122:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x3d6>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	3301      	adds	r3, #1
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	2101      	movs	r1, #1
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	e010      	b.n	8002168 <HAL_ADC_ConfigChannel+0x3f8>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	617b      	str	r3, [r7, #20]
  return result;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	ea42 0103 	orr.w	r1, r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10d      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x424>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	3b1e      	subs	r3, #30
 800218c:	051b      	lsls	r3, r3, #20
 800218e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002192:	e014      	b.n	80021be <HAL_ADC_ConfigChannel+0x44e>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	60fb      	str	r3, [r7, #12]
  return result;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	3b1e      	subs	r3, #30
 80021b8:	051b      	lsls	r3, r3, #20
 80021ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021be:	430b      	orrs	r3, r1
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	6892      	ldr	r2, [r2, #8]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f7ff fb5b 	bl	8001880 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f280 80c4 	bge.w	800235c <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a65      	ldr	r2, [pc, #404]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x478>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a64      	ldr	r2, [pc, #400]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x47c>
 80021e8:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_ADC_ConfigChannel+0x608>)
 80021ea:	e000      	b.n	80021ee <HAL_ADC_ConfigChannel+0x47e>
 80021ec:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_ADC_ConfigChannel+0x60c>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fab8 	bl	8001764 <LL_ADC_GetCommonPathInternalCh>
 80021f4:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5d      	ldr	r2, [pc, #372]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d004      	beq.n	800220a <HAL_ADC_ConfigChannel+0x49a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a5b      	ldr	r2, [pc, #364]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10e      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x4b8>
 800220a:	4859      	ldr	r0, [pc, #356]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 800220c:	f7ff fbd6 	bl	80019bc <LL_ADC_IsEnabled>
 8002210:	4604      	mov	r4, r0
 8002212:	4858      	ldr	r0, [pc, #352]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 8002214:	f7ff fbd2 	bl	80019bc <LL_ADC_IsEnabled>
 8002218:	4603      	mov	r3, r0
 800221a:	4323      	orrs	r3, r4
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	e008      	b.n	800223a <HAL_ADC_ConfigChannel+0x4ca>
 8002228:	4855      	ldr	r0, [pc, #340]	; (8002380 <HAL_ADC_ConfigChannel+0x610>)
 800222a:	f7ff fbc7 	bl	80019bc <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d07b      	beq.n	8002336 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a50      	ldr	r2, [pc, #320]	; (8002384 <HAL_ADC_ConfigChannel+0x614>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d12e      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x536>
 8002248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800224a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d129      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4a      	ldr	r2, [pc, #296]	; (8002380 <HAL_ADC_ConfigChannel+0x610>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d17f      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a43      	ldr	r2, [pc, #268]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d004      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x500>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a42      	ldr	r2, [pc, #264]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d101      	bne.n	8002274 <HAL_ADC_ConfigChannel+0x504>
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <HAL_ADC_ConfigChannel+0x608>)
 8002272:	e000      	b.n	8002276 <HAL_ADC_ConfigChannel+0x506>
 8002274:	4a41      	ldr	r2, [pc, #260]	; (800237c <HAL_ADC_ConfigChannel+0x60c>)
 8002276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002278:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7ff fa5d 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002284:	4b40      	ldr	r3, [pc, #256]	; (8002388 <HAL_ADC_ConfigChannel+0x618>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_ADC_ConfigChannel+0x61c>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002296:	e002      	b.n	800229e <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	3b01      	subs	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f9      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022a4:	e05a      	b.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a39      	ldr	r2, [pc, #228]	; (8002390 <HAL_ADC_ConfigChannel+0x620>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d11e      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x57e>
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d119      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_ADC_ConfigChannel+0x610>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d14b      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d004      	beq.n	80022d8 <HAL_ADC_ConfigChannel+0x568>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a28      	ldr	r2, [pc, #160]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_ADC_ConfigChannel+0x56c>
 80022d8:	4a27      	ldr	r2, [pc, #156]	; (8002378 <HAL_ADC_ConfigChannel+0x608>)
 80022da:	e000      	b.n	80022de <HAL_ADC_ConfigChannel+0x56e>
 80022dc:	4a27      	ldr	r2, [pc, #156]	; (800237c <HAL_ADC_ConfigChannel+0x60c>)
 80022de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	f7ff fa29 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022ec:	e036      	b.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_ADC_ConfigChannel+0x624>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d131      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
 80022f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d12c      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_ADC_ConfigChannel+0x610>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d127      	bne.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a17      	ldr	r2, [pc, #92]	; (8002370 <HAL_ADC_ConfigChannel+0x600>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d004      	beq.n	8002320 <HAL_ADC_ConfigChannel+0x5b0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_ADC_ConfigChannel+0x604>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x5b4>
 8002320:	4a15      	ldr	r2, [pc, #84]	; (8002378 <HAL_ADC_ConfigChannel+0x608>)
 8002322:	e000      	b.n	8002326 <HAL_ADC_ConfigChannel+0x5b6>
 8002324:	4a15      	ldr	r2, [pc, #84]	; (800237c <HAL_ADC_ConfigChannel+0x60c>)
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232c:	4619      	mov	r1, r3
 800232e:	4610      	mov	r0, r2
 8002330:	f7ff fa05 	bl	800173e <LL_ADC_SetCommonPathInternalCh>
 8002334:	e012      	b.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f043 0220 	orr.w	r2, r3, #32
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002348:	e008      	b.n	800235c <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f043 0220 	orr.w	r2, r3, #32
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8002368:	4618      	mov	r0, r3
 800236a:	3764      	adds	r7, #100	; 0x64
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}
 8002370:	40022000 	.word	0x40022000
 8002374:	40022100 	.word	0x40022100
 8002378:	40022300 	.word	0x40022300
 800237c:	58026300 	.word	0x58026300
 8002380:	58026000 	.word	0x58026000
 8002384:	cb840000 	.word	0xcb840000
 8002388:	24000000 	.word	0x24000000
 800238c:	053e2d63 	.word	0x053e2d63
 8002390:	c7520000 	.word	0xc7520000
 8002394:	cfb80000 	.word	0xcfb80000

08002398 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a70      	ldr	r2, [pc, #448]	; (8002568 <ADC_ConfigureBoostMode+0x1d0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <ADC_ConfigureBoostMode+0x1c>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6f      	ldr	r2, [pc, #444]	; (800256c <ADC_ConfigureBoostMode+0x1d4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d109      	bne.n	80023c8 <ADC_ConfigureBoostMode+0x30>
 80023b4:	4b6e      	ldr	r3, [pc, #440]	; (8002570 <ADC_ConfigureBoostMode+0x1d8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	e008      	b.n	80023da <ADC_ConfigureBoostMode+0x42>
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <ADC_ConfigureBoostMode+0x1dc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf14      	ite	ne
 80023d4:	2301      	movne	r3, #1
 80023d6:	2300      	moveq	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d01a      	beq.n	8002414 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80023de:	f004 f919 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 80023e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023ec:	d006      	beq.n	80023fc <ADC_ConfigureBoostMode+0x64>
 80023ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80023f2:	d00b      	beq.n	800240c <ADC_ConfigureBoostMode+0x74>
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d000      	beq.n	80023fc <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 80023fa:	e05d      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	60fb      	str	r3, [r7, #12]
        break;
 800240a:	e055      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	60fb      	str	r3, [r7, #12]
        break;
 8002412:	e051      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002414:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002418:	f005 f846 	bl	80074a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800241c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002426:	d02a      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
 8002428:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800242c:	d813      	bhi.n	8002456 <ADC_ConfigureBoostMode+0xbe>
 800242e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002432:	d024      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
 8002434:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002438:	d806      	bhi.n	8002448 <ADC_ConfigureBoostMode+0xb0>
 800243a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800243e:	d01e      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
 8002440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002444:	d01b      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 8002446:	e037      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800244c:	d017      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
 800244e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002452:	d014      	beq.n	800247e <ADC_ConfigureBoostMode+0xe6>
        break;
 8002454:	e030      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002456:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800245a:	d021      	beq.n	80024a0 <ADC_ConfigureBoostMode+0x108>
 800245c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002460:	d806      	bhi.n	8002470 <ADC_ConfigureBoostMode+0xd8>
 8002462:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002466:	d013      	beq.n	8002490 <ADC_ConfigureBoostMode+0xf8>
 8002468:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800246c:	d014      	beq.n	8002498 <ADC_ConfigureBoostMode+0x100>
        break;
 800246e:	e023      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
    switch (hadc->Init.ClockPrescaler)
 8002470:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002474:	d018      	beq.n	80024a8 <ADC_ConfigureBoostMode+0x110>
 8002476:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800247a:	d019      	beq.n	80024b0 <ADC_ConfigureBoostMode+0x118>
        break;
 800247c:	e01c      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	0c9b      	lsrs	r3, r3, #18
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	60fb      	str	r3, [r7, #12]
        break;
 800248e:	e013      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	60fb      	str	r3, [r7, #12]
        break;
 8002496:	e00f      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	60fb      	str	r3, [r7, #12]
        break;
 800249e:	e00b      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	60fb      	str	r3, [r7, #12]
        break;
 80024a6:	e007      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	09db      	lsrs	r3, r3, #7
 80024ac:	60fb      	str	r3, [r7, #12]
        break;
 80024ae:	e003      	b.n	80024b8 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	60fb      	str	r3, [r7, #12]
        break;
 80024b6:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80024b8:	f7ff f8f8 	bl	80016ac <HAL_GetREVID>
 80024bc:	4602      	mov	r2, r0
 80024be:	f241 0303 	movw	r3, #4099	; 0x1003
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d815      	bhi.n	80024f2 <ADC_ConfigureBoostMode+0x15a>
  {
    if (freq > 20000000UL)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4a2b      	ldr	r2, [pc, #172]	; (8002578 <ADC_ConfigureBoostMode+0x1e0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d908      	bls.n	80024e0 <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024dc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80024de:	e03e      	b.n	800255e <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ee:	609a      	str	r2, [r3, #8]
}
 80024f0:	e035      	b.n	800255e <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a20      	ldr	r2, [pc, #128]	; (800257c <ADC_ConfigureBoostMode+0x1e4>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d808      	bhi.n	8002512 <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800250e:	609a      	str	r2, [r3, #8]
}
 8002510:	e025      	b.n	800255e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 12500000UL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <ADC_ConfigureBoostMode+0x1e8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d80a      	bhi.n	8002530 <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800252c:	609a      	str	r2, [r3, #8]
}
 800252e:	e016      	b.n	800255e <ADC_ConfigureBoostMode+0x1c6>
    else if (freq <= 25000000UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a14      	ldr	r2, [pc, #80]	; (8002584 <ADC_ConfigureBoostMode+0x1ec>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d80a      	bhi.n	800254e <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254a:	609a      	str	r2, [r3, #8]
}
 800254c:	e007      	b.n	800255e <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40022000 	.word	0x40022000
 800256c:	40022100 	.word	0x40022100
 8002570:	40022300 	.word	0x40022300
 8002574:	58026300 	.word	0x58026300
 8002578:	01312d00 	.word	0x01312d00
 800257c:	005f5e10 	.word	0x005f5e10
 8002580:	00bebc20 	.word	0x00bebc20
 8002584:	017d7840 	.word	0x017d7840

08002588 <__NVIC_SetPriorityGrouping>:
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <__NVIC_SetPriorityGrouping+0x40>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025a4:	4013      	ands	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <__NVIC_SetPriorityGrouping+0x40>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00
 80025cc:	05fa0000 	.word	0x05fa0000

080025d0 <__NVIC_GetPriorityGrouping>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <__NVIC_GetPriorityGrouping+0x18>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	f003 0307 	and.w	r3, r3, #7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_EnableIRQ>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	db0b      	blt.n	8002616 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	f003 021f 	and.w	r2, r3, #31
 8002604:	4907      	ldr	r1, [pc, #28]	; (8002624 <__NVIC_EnableIRQ+0x38>)
 8002606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	2001      	movs	r0, #1
 800260e:	fa00 f202 	lsl.w	r2, r0, r2
 8002612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	e000e100 	.word	0xe000e100

08002628 <__NVIC_SetPriority>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff29 	bl	8002588 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff40 	bl	80025d0 <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff90 	bl	800267c <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5f 	bl	8002628 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff33 	bl	80025ec <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa4 	bl	80026e4 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80027ac:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80027b0:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_MPU_Disable+0x24>)
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	4a05      	ldr	r2, [pc, #20]	; (80027cc <HAL_MPU_Disable+0x24>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_MPU_Disable+0x28>)
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	e000ed90 	.word	0xe000ed90

080027d4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80027dc:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <HAL_MPU_Enable+0x34>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <HAL_MPU_Enable+0x38>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	4a08      	ldr	r2, [pc, #32]	; (800280c <HAL_MPU_Enable+0x38>)
 80027ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80027f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027f6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000ed90 	.word	0xe000ed90
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	785a      	ldrb	r2, [r3, #1]
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_MPU_ConfigRegion+0x84>)
 800281e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d029      	beq.n	800287c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_MPU_ConfigRegion+0x84>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7b1b      	ldrb	r3, [r3, #12]
 8002834:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	7adb      	ldrb	r3, [r3, #11]
 800283a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800283c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7a9b      	ldrb	r3, [r3, #10]
 8002842:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002844:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800284c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7b9b      	ldrb	r3, [r3, #14]
 8002852:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002854:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7bdb      	ldrb	r3, [r3, #15]
 800285a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800285c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	7a5b      	ldrb	r3, [r3, #9]
 8002862:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002864:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	7a1b      	ldrb	r3, [r3, #8]
 800286a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800286c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	7812      	ldrb	r2, [r2, #0]
 8002872:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002874:	4a07      	ldr	r2, [pc, #28]	; (8002894 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002876:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002878:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800287a:	e005      	b.n	8002888 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_MPU_ConfigRegion+0x84>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <HAL_MPU_ConfigRegion+0x84>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed90 	.word	0xe000ed90

08002898 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_GetCurrentCPUID+0x24>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	2b07      	cmp	r3, #7
 80028a8:	d101      	bne.n	80028ae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e000      	b.n	80028b0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80028ae:	2301      	movs	r3, #1
  }
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028c8:	f7fe fec2 	bl	8001650 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e316      	b.n	8002f06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a66      	ldr	r2, [pc, #408]	; (8002a78 <HAL_DMA_Init+0x1b8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d04a      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a65      	ldr	r2, [pc, #404]	; (8002a7c <HAL_DMA_Init+0x1bc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d045      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <HAL_DMA_Init+0x1c0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d040      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a62      	ldr	r2, [pc, #392]	; (8002a84 <HAL_DMA_Init+0x1c4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d03b      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a60      	ldr	r2, [pc, #384]	; (8002a88 <HAL_DMA_Init+0x1c8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d036      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5f      	ldr	r2, [pc, #380]	; (8002a8c <HAL_DMA_Init+0x1cc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d031      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a5d      	ldr	r2, [pc, #372]	; (8002a90 <HAL_DMA_Init+0x1d0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d02c      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5c      	ldr	r2, [pc, #368]	; (8002a94 <HAL_DMA_Init+0x1d4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d027      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5a      	ldr	r2, [pc, #360]	; (8002a98 <HAL_DMA_Init+0x1d8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d022      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a59      	ldr	r2, [pc, #356]	; (8002a9c <HAL_DMA_Init+0x1dc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d01d      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a57      	ldr	r2, [pc, #348]	; (8002aa0 <HAL_DMA_Init+0x1e0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d018      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a56      	ldr	r2, [pc, #344]	; (8002aa4 <HAL_DMA_Init+0x1e4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d013      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a54      	ldr	r2, [pc, #336]	; (8002aa8 <HAL_DMA_Init+0x1e8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00e      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a53      	ldr	r2, [pc, #332]	; (8002aac <HAL_DMA_Init+0x1ec>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d009      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a51      	ldr	r2, [pc, #324]	; (8002ab0 <HAL_DMA_Init+0x1f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d004      	beq.n	8002978 <HAL_DMA_Init+0xb8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a50      	ldr	r2, [pc, #320]	; (8002ab4 <HAL_DMA_Init+0x1f4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d101      	bne.n	800297c <HAL_DMA_Init+0xbc>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <HAL_DMA_Init+0xbe>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 813b 	beq.w	8002bfa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a37      	ldr	r2, [pc, #220]	; (8002a78 <HAL_DMA_Init+0x1b8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d04a      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a36      	ldr	r2, [pc, #216]	; (8002a7c <HAL_DMA_Init+0x1bc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d045      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_DMA_Init+0x1c0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d040      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <HAL_DMA_Init+0x1c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d03b      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <HAL_DMA_Init+0x1c8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d036      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_DMA_Init+0x1cc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d031      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2e      	ldr	r2, [pc, #184]	; (8002a90 <HAL_DMA_Init+0x1d0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02c      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2d      	ldr	r2, [pc, #180]	; (8002a94 <HAL_DMA_Init+0x1d4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d027      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_DMA_Init+0x1d8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d022      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	; (8002a9c <HAL_DMA_Init+0x1dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d01d      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_DMA_Init+0x1e0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d018      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_DMA_Init+0x1e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <HAL_DMA_Init+0x1e8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_DMA_Init+0x1ec>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_DMA_Init+0x1f0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_DMA_Init+0x174>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <HAL_DMA_Init+0x1f4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <HAL_DMA_Init+0x186>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e007      	b.n	8002a56 <HAL_DMA_Init+0x196>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0201 	bic.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a56:	e02f      	b.n	8002ab8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a58:	f7fe fdfa 	bl	8001650 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d928      	bls.n	8002ab8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2203      	movs	r2, #3
 8002a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e246      	b.n	8002f06 <HAL_DMA_Init+0x646>
 8002a78:	40020010 	.word	0x40020010
 8002a7c:	40020028 	.word	0x40020028
 8002a80:	40020040 	.word	0x40020040
 8002a84:	40020058 	.word	0x40020058
 8002a88:	40020070 	.word	0x40020070
 8002a8c:	40020088 	.word	0x40020088
 8002a90:	400200a0 	.word	0x400200a0
 8002a94:	400200b8 	.word	0x400200b8
 8002a98:	40020410 	.word	0x40020410
 8002a9c:	40020428 	.word	0x40020428
 8002aa0:	40020440 	.word	0x40020440
 8002aa4:	40020458 	.word	0x40020458
 8002aa8:	40020470 	.word	0x40020470
 8002aac:	40020488 	.word	0x40020488
 8002ab0:	400204a0 	.word	0x400204a0
 8002ab4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1c8      	bne.n	8002a58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4b83      	ldr	r3, [pc, #524]	; (8002ce0 <HAL_DMA_Init+0x420>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ade:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002af6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d107      	bne.n	8002b1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	4313      	orrs	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b1c:	4b71      	ldr	r3, [pc, #452]	; (8002ce4 <HAL_DMA_Init+0x424>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b71      	ldr	r3, [pc, #452]	; (8002ce8 <HAL_DMA_Init+0x428>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b28:	d328      	bcc.n	8002b7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b28      	cmp	r3, #40	; 0x28
 8002b30:	d903      	bls.n	8002b3a <HAL_DMA_Init+0x27a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b2e      	cmp	r3, #46	; 0x2e
 8002b38:	d917      	bls.n	8002b6a <HAL_DMA_Init+0x2aa>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b3e      	cmp	r3, #62	; 0x3e
 8002b40:	d903      	bls.n	8002b4a <HAL_DMA_Init+0x28a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2b42      	cmp	r3, #66	; 0x42
 8002b48:	d90f      	bls.n	8002b6a <HAL_DMA_Init+0x2aa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b46      	cmp	r3, #70	; 0x46
 8002b50:	d903      	bls.n	8002b5a <HAL_DMA_Init+0x29a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b48      	cmp	r3, #72	; 0x48
 8002b58:	d907      	bls.n	8002b6a <HAL_DMA_Init+0x2aa>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b4e      	cmp	r3, #78	; 0x4e
 8002b60:	d905      	bls.n	8002b6e <HAL_DMA_Init+0x2ae>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b52      	cmp	r3, #82	; 0x52
 8002b68:	d801      	bhi.n	8002b6e <HAL_DMA_Init+0x2ae>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_DMA_Init+0x2b0>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0307 	bic.w	r3, r3, #7
 8002b92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d117      	bne.n	8002bd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00e      	beq.n	8002bd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f001 f9b9 	bl	8003f30 <DMA_CheckFifoParam>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2240      	movs	r2, #64	; 0x40
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e197      	b.n	8002f06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f001 f8f4 	bl	8003dcc <DMA_CalcBaseAndBitshift>
 8002be4:	4603      	mov	r3, r0
 8002be6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	223f      	movs	r2, #63	; 0x3f
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	e0cd      	b.n	8002d96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a3b      	ldr	r2, [pc, #236]	; (8002cec <HAL_DMA_Init+0x42c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a39      	ldr	r2, [pc, #228]	; (8002cf0 <HAL_DMA_Init+0x430>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a38      	ldr	r2, [pc, #224]	; (8002cf4 <HAL_DMA_Init+0x434>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a36      	ldr	r2, [pc, #216]	; (8002cf8 <HAL_DMA_Init+0x438>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_DMA_Init+0x43c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <HAL_DMA_Init+0x440>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <HAL_DMA_Init+0x444>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_Init+0x38a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <HAL_DMA_Init+0x448>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Init+0x38e>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_DMA_Init+0x390>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 8097 	beq.w	8002d84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a24      	ldr	r2, [pc, #144]	; (8002cec <HAL_DMA_Init+0x42c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d021      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <HAL_DMA_Init+0x430>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d01c      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a21      	ldr	r2, [pc, #132]	; (8002cf4 <HAL_DMA_Init+0x434>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d017      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <HAL_DMA_Init+0x438>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d012      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_DMA_Init+0x43c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d00d      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_DMA_Init+0x440>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d008      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1b      	ldr	r2, [pc, #108]	; (8002d04 <HAL_DMA_Init+0x444>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_Init+0x3e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_DMA_Init+0x448>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_DMA_Init+0x44c>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	2b40      	cmp	r3, #64	; 0x40
 8002ccc:	d020      	beq.n	8002d10 <HAL_DMA_Init+0x450>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d102      	bne.n	8002cdc <HAL_DMA_Init+0x41c>
 8002cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cda:	e01a      	b.n	8002d12 <HAL_DMA_Init+0x452>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e018      	b.n	8002d12 <HAL_DMA_Init+0x452>
 8002ce0:	fe10803f 	.word	0xfe10803f
 8002ce4:	5c001000 	.word	0x5c001000
 8002ce8:	ffff0000 	.word	0xffff0000
 8002cec:	58025408 	.word	0x58025408
 8002cf0:	5802541c 	.word	0x5802541c
 8002cf4:	58025430 	.word	0x58025430
 8002cf8:	58025444 	.word	0x58025444
 8002cfc:	58025458 	.word	0x58025458
 8002d00:	5802546c 	.word	0x5802546c
 8002d04:	58025480 	.word	0x58025480
 8002d08:	58025494 	.word	0x58025494
 8002d0c:	fffe000f 	.word	0xfffe000f
 8002d10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b6e      	ldr	r3, [pc, #440]	; (8002f10 <HAL_DMA_Init+0x650>)
 8002d58:	4413      	add	r3, r2
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	; (8002f14 <HAL_DMA_Init+0x654>)
 8002d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	009a      	lsls	r2, r3, #2
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f001 f82f 	bl	8003dcc <DMA_CalcBaseAndBitshift>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	f003 031f 	and.w	r3, r3, #31
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	e008      	b.n	8002d96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2240      	movs	r2, #64	; 0x40
 8002d88:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0b7      	b.n	8002f06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a5f      	ldr	r2, [pc, #380]	; (8002f18 <HAL_DMA_Init+0x658>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d072      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5d      	ldr	r2, [pc, #372]	; (8002f1c <HAL_DMA_Init+0x65c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d06d      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a5c      	ldr	r2, [pc, #368]	; (8002f20 <HAL_DMA_Init+0x660>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d068      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5a      	ldr	r2, [pc, #360]	; (8002f24 <HAL_DMA_Init+0x664>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d063      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a59      	ldr	r2, [pc, #356]	; (8002f28 <HAL_DMA_Init+0x668>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d05e      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a57      	ldr	r2, [pc, #348]	; (8002f2c <HAL_DMA_Init+0x66c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d059      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a56      	ldr	r2, [pc, #344]	; (8002f30 <HAL_DMA_Init+0x670>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d054      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_DMA_Init+0x674>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d04f      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a53      	ldr	r2, [pc, #332]	; (8002f38 <HAL_DMA_Init+0x678>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d04a      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <HAL_DMA_Init+0x67c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d045      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_DMA_Init+0x680>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a4e      	ldr	r2, [pc, #312]	; (8002f44 <HAL_DMA_Init+0x684>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d03b      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a4d      	ldr	r2, [pc, #308]	; (8002f48 <HAL_DMA_Init+0x688>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d036      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_DMA_Init+0x68c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d031      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a4a      	ldr	r2, [pc, #296]	; (8002f50 <HAL_DMA_Init+0x690>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d02c      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a48      	ldr	r2, [pc, #288]	; (8002f54 <HAL_DMA_Init+0x694>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d027      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a47      	ldr	r2, [pc, #284]	; (8002f58 <HAL_DMA_Init+0x698>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a45      	ldr	r2, [pc, #276]	; (8002f5c <HAL_DMA_Init+0x69c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a44      	ldr	r2, [pc, #272]	; (8002f60 <HAL_DMA_Init+0x6a0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d018      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a42      	ldr	r2, [pc, #264]	; (8002f64 <HAL_DMA_Init+0x6a4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a41      	ldr	r2, [pc, #260]	; (8002f68 <HAL_DMA_Init+0x6a8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00e      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a3f      	ldr	r2, [pc, #252]	; (8002f6c <HAL_DMA_Init+0x6ac>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d009      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a3e      	ldr	r2, [pc, #248]	; (8002f70 <HAL_DMA_Init+0x6b0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d004      	beq.n	8002e86 <HAL_DMA_Init+0x5c6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3c      	ldr	r2, [pc, #240]	; (8002f74 <HAL_DMA_Init+0x6b4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Init+0x5ca>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_Init+0x5cc>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d032      	beq.n	8002ef6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f001 f8c9 	bl	8004028 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d102      	bne.n	8002ea4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002eb8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d010      	beq.n	8002ee4 <HAL_DMA_Init+0x624>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d80c      	bhi.n	8002ee4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f001 f946 	bl	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	e008      	b.n	8002ef6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	a7fdabf8 	.word	0xa7fdabf8
 8002f14:	cccccccd 	.word	0xcccccccd
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
 8002f58:	58025408 	.word	0x58025408
 8002f5c:	5802541c 	.word	0x5802541c
 8002f60:	58025430 	.word	0x58025430
 8002f64:	58025444 	.word	0x58025444
 8002f68:	58025458 	.word	0x58025458
 8002f6c:	5802546c 	.word	0x5802546c
 8002f70:	58025480 	.word	0x58025480
 8002f74:	58025494 	.word	0x58025494

08002f78 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f84:	4b67      	ldr	r3, [pc, #412]	; (8003124 <HAL_DMA_IRQHandler+0x1ac>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a67      	ldr	r2, [pc, #412]	; (8003128 <HAL_DMA_IRQHandler+0x1b0>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	0a9b      	lsrs	r3, r3, #10
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a5f      	ldr	r2, [pc, #380]	; (800312c <HAL_DMA_IRQHandler+0x1b4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a5d      	ldr	r2, [pc, #372]	; (8003130 <HAL_DMA_IRQHandler+0x1b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a5c      	ldr	r2, [pc, #368]	; (8003134 <HAL_DMA_IRQHandler+0x1bc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a5a      	ldr	r2, [pc, #360]	; (8003138 <HAL_DMA_IRQHandler+0x1c0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a59      	ldr	r2, [pc, #356]	; (800313c <HAL_DMA_IRQHandler+0x1c4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a57      	ldr	r2, [pc, #348]	; (8003140 <HAL_DMA_IRQHandler+0x1c8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_DMA_IRQHandler+0x1cc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a54      	ldr	r2, [pc, #336]	; (8003148 <HAL_DMA_IRQHandler+0x1d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a53      	ldr	r2, [pc, #332]	; (800314c <HAL_DMA_IRQHandler+0x1d4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a51      	ldr	r2, [pc, #324]	; (8003150 <HAL_DMA_IRQHandler+0x1d8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a50      	ldr	r2, [pc, #320]	; (8003154 <HAL_DMA_IRQHandler+0x1dc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <HAL_DMA_IRQHandler+0x1e0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a4d      	ldr	r2, [pc, #308]	; (800315c <HAL_DMA_IRQHandler+0x1e4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a4b      	ldr	r2, [pc, #300]	; (8003160 <HAL_DMA_IRQHandler+0x1e8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_DMA_IRQHandler+0x1ec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_IRQHandler+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a48      	ldr	r2, [pc, #288]	; (8003168 <HAL_DMA_IRQHandler+0x1f0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d101      	bne.n	800304e <HAL_DMA_IRQHandler+0xd6>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <HAL_DMA_IRQHandler+0xd8>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 842b 	beq.w	80038ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305a:	f003 031f 	and.w	r3, r3, #31
 800305e:	2208      	movs	r2, #8
 8003060:	409a      	lsls	r2, r3
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a2 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a2e      	ldr	r2, [pc, #184]	; (800312c <HAL_DMA_IRQHandler+0x1b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d04a      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a2d      	ldr	r2, [pc, #180]	; (8003130 <HAL_DMA_IRQHandler+0x1b8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d045      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_DMA_IRQHandler+0x1bc>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d040      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <HAL_DMA_IRQHandler+0x1c0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d03b      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_DMA_IRQHandler+0x1c4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d036      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a27      	ldr	r2, [pc, #156]	; (8003140 <HAL_DMA_IRQHandler+0x1c8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d031      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a25      	ldr	r2, [pc, #148]	; (8003144 <HAL_DMA_IRQHandler+0x1cc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d02c      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_DMA_IRQHandler+0x1d0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d027      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_DMA_IRQHandler+0x1d4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d022      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_DMA_IRQHandler+0x1d8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d01d      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_DMA_IRQHandler+0x1dc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d018      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_DMA_IRQHandler+0x1e0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_DMA_IRQHandler+0x1e4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d00e      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_DMA_IRQHandler+0x1e8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d009      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a19      	ldr	r2, [pc, #100]	; (8003164 <HAL_DMA_IRQHandler+0x1ec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d004      	beq.n	800310c <HAL_DMA_IRQHandler+0x194>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_DMA_IRQHandler+0x1f0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d12f      	bne.n	800316c <HAL_DMA_IRQHandler+0x1f4>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e02e      	b.n	8003180 <HAL_DMA_IRQHandler+0x208>
 8003122:	bf00      	nop
 8003124:	24000000 	.word	0x24000000
 8003128:	1b4e81b5 	.word	0x1b4e81b5
 800312c:	40020010 	.word	0x40020010
 8003130:	40020028 	.word	0x40020028
 8003134:	40020040 	.word	0x40020040
 8003138:	40020058 	.word	0x40020058
 800313c:	40020070 	.word	0x40020070
 8003140:	40020088 	.word	0x40020088
 8003144:	400200a0 	.word	0x400200a0
 8003148:	400200b8 	.word	0x400200b8
 800314c:	40020410 	.word	0x40020410
 8003150:	40020428 	.word	0x40020428
 8003154:	40020440 	.word	0x40020440
 8003158:	40020458 	.word	0x40020458
 800315c:	40020470 	.word	0x40020470
 8003160:	40020488 	.word	0x40020488
 8003164:	400204a0 	.word	0x400204a0
 8003168:	400204b8 	.word	0x400204b8
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf14      	ite	ne
 800317a:	2301      	movne	r3, #1
 800317c:	2300      	moveq	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0204 	bic.w	r2, r2, #4
 8003192:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2208      	movs	r2, #8
 800319e:	409a      	lsls	r2, r3
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d06e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a69      	ldr	r2, [pc, #420]	; (8003370 <HAL_DMA_IRQHandler+0x3f8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d04a      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a67      	ldr	r2, [pc, #412]	; (8003374 <HAL_DMA_IRQHandler+0x3fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d045      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a66      	ldr	r2, [pc, #408]	; (8003378 <HAL_DMA_IRQHandler+0x400>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d040      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a64      	ldr	r2, [pc, #400]	; (800337c <HAL_DMA_IRQHandler+0x404>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d03b      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a63      	ldr	r2, [pc, #396]	; (8003380 <HAL_DMA_IRQHandler+0x408>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d036      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a61      	ldr	r2, [pc, #388]	; (8003384 <HAL_DMA_IRQHandler+0x40c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d031      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a60      	ldr	r2, [pc, #384]	; (8003388 <HAL_DMA_IRQHandler+0x410>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d02c      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a5e      	ldr	r2, [pc, #376]	; (800338c <HAL_DMA_IRQHandler+0x414>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d027      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a5d      	ldr	r2, [pc, #372]	; (8003390 <HAL_DMA_IRQHandler+0x418>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d022      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_DMA_IRQHandler+0x41c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01d      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a5a      	ldr	r2, [pc, #360]	; (8003398 <HAL_DMA_IRQHandler+0x420>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_DMA_IRQHandler+0x424>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d013      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a57      	ldr	r2, [pc, #348]	; (80033a0 <HAL_DMA_IRQHandler+0x428>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d00e      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a55      	ldr	r2, [pc, #340]	; (80033a4 <HAL_DMA_IRQHandler+0x42c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d009      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a54      	ldr	r2, [pc, #336]	; (80033a8 <HAL_DMA_IRQHandler+0x430>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_DMA_IRQHandler+0x2ee>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a52      	ldr	r2, [pc, #328]	; (80033ac <HAL_DMA_IRQHandler+0x434>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10a      	bne.n	800327c <HAL_DMA_IRQHandler+0x304>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003270:	2b00      	cmp	r3, #0
 8003272:	bf14      	ite	ne
 8003274:	2301      	movne	r3, #1
 8003276:	2300      	moveq	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e003      	b.n	8003284 <HAL_DMA_IRQHandler+0x30c>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2201      	movs	r2, #1
 8003292:	409a      	lsls	r2, r3
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329c:	f043 0202 	orr.w	r2, r3, #2
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2204      	movs	r2, #4
 80032ae:	409a      	lsls	r2, r3
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 808f 	beq.w	80033d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2c      	ldr	r2, [pc, #176]	; (8003370 <HAL_DMA_IRQHandler+0x3f8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2a      	ldr	r2, [pc, #168]	; (8003374 <HAL_DMA_IRQHandler+0x3fc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a29      	ldr	r2, [pc, #164]	; (8003378 <HAL_DMA_IRQHandler+0x400>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMA_IRQHandler+0x404>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a26      	ldr	r2, [pc, #152]	; (8003380 <HAL_DMA_IRQHandler+0x408>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <HAL_DMA_IRQHandler+0x40c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a23      	ldr	r2, [pc, #140]	; (8003388 <HAL_DMA_IRQHandler+0x410>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a21      	ldr	r2, [pc, #132]	; (800338c <HAL_DMA_IRQHandler+0x414>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_DMA_IRQHandler+0x418>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <HAL_DMA_IRQHandler+0x41c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1d      	ldr	r2, [pc, #116]	; (8003398 <HAL_DMA_IRQHandler+0x420>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <HAL_DMA_IRQHandler+0x424>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	; (80033a0 <HAL_DMA_IRQHandler+0x428>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <HAL_DMA_IRQHandler+0x42c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a17      	ldr	r2, [pc, #92]	; (80033a8 <HAL_DMA_IRQHandler+0x430>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_IRQHandler+0x3e2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a15      	ldr	r2, [pc, #84]	; (80033ac <HAL_DMA_IRQHandler+0x434>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12a      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x438>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e023      	b.n	80033b8 <HAL_DMA_IRQHandler+0x440>
 8003370:	40020010 	.word	0x40020010
 8003374:	40020028 	.word	0x40020028
 8003378:	40020040 	.word	0x40020040
 800337c:	40020058 	.word	0x40020058
 8003380:	40020070 	.word	0x40020070
 8003384:	40020088 	.word	0x40020088
 8003388:	400200a0 	.word	0x400200a0
 800338c:	400200b8 	.word	0x400200b8
 8003390:	40020410 	.word	0x40020410
 8003394:	40020428 	.word	0x40020428
 8003398:	40020440 	.word	0x40020440
 800339c:	40020458 	.word	0x40020458
 80033a0:	40020470 	.word	0x40020470
 80033a4:	40020488 	.word	0x40020488
 80033a8:	400204a0 	.word	0x400204a0
 80033ac:	400204b8 	.word	0x400204b8
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2210      	movs	r2, #16
 80033e2:	409a      	lsls	r2, r3
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a6 	beq.w	800353a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a85      	ldr	r2, [pc, #532]	; (8003608 <HAL_DMA_IRQHandler+0x690>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d04a      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a83      	ldr	r2, [pc, #524]	; (800360c <HAL_DMA_IRQHandler+0x694>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d045      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a82      	ldr	r2, [pc, #520]	; (8003610 <HAL_DMA_IRQHandler+0x698>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d040      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a80      	ldr	r2, [pc, #512]	; (8003614 <HAL_DMA_IRQHandler+0x69c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d03b      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7f      	ldr	r2, [pc, #508]	; (8003618 <HAL_DMA_IRQHandler+0x6a0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d036      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7d      	ldr	r2, [pc, #500]	; (800361c <HAL_DMA_IRQHandler+0x6a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d031      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a7c      	ldr	r2, [pc, #496]	; (8003620 <HAL_DMA_IRQHandler+0x6a8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d02c      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_DMA_IRQHandler+0x6ac>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d027      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a79      	ldr	r2, [pc, #484]	; (8003628 <HAL_DMA_IRQHandler+0x6b0>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d022      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a77      	ldr	r2, [pc, #476]	; (800362c <HAL_DMA_IRQHandler+0x6b4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d01d      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a76      	ldr	r2, [pc, #472]	; (8003630 <HAL_DMA_IRQHandler+0x6b8>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d018      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a74      	ldr	r2, [pc, #464]	; (8003634 <HAL_DMA_IRQHandler+0x6bc>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a73      	ldr	r2, [pc, #460]	; (8003638 <HAL_DMA_IRQHandler+0x6c0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00e      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a71      	ldr	r2, [pc, #452]	; (800363c <HAL_DMA_IRQHandler+0x6c4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a70      	ldr	r2, [pc, #448]	; (8003640 <HAL_DMA_IRQHandler+0x6c8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d004      	beq.n	800348e <HAL_DMA_IRQHandler+0x516>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a6e      	ldr	r2, [pc, #440]	; (8003644 <HAL_DMA_IRQHandler+0x6cc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d10a      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x52c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0308 	and.w	r3, r3, #8
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e009      	b.n	80034b8 <HAL_DMA_IRQHandler+0x540>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d03e      	beq.n	800353a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2210      	movs	r2, #16
 80034c6:	409a      	lsls	r2, r3
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d018      	beq.n	800350c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d024      	beq.n	800353a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	4798      	blx	r3
 80034f8:	e01f      	b.n	800353a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d01b      	beq.n	800353a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	4798      	blx	r3
 800350a:	e016      	b.n	800353a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	2b00      	cmp	r3, #0
 8003518:	d107      	bne.n	800352a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0208 	bic.w	r2, r2, #8
 8003528:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	2220      	movs	r2, #32
 8003544:	409a      	lsls	r2, r3
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8110 	beq.w	8003770 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <HAL_DMA_IRQHandler+0x690>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d04a      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a2b      	ldr	r2, [pc, #172]	; (800360c <HAL_DMA_IRQHandler+0x694>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d045      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a29      	ldr	r2, [pc, #164]	; (8003610 <HAL_DMA_IRQHandler+0x698>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d040      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_DMA_IRQHandler+0x69c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d03b      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_DMA_IRQHandler+0x6a0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d036      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a25      	ldr	r2, [pc, #148]	; (800361c <HAL_DMA_IRQHandler+0x6a4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d031      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a23      	ldr	r2, [pc, #140]	; (8003620 <HAL_DMA_IRQHandler+0x6a8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d02c      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a22      	ldr	r2, [pc, #136]	; (8003624 <HAL_DMA_IRQHandler+0x6ac>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d027      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a20      	ldr	r2, [pc, #128]	; (8003628 <HAL_DMA_IRQHandler+0x6b0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d022      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1f      	ldr	r2, [pc, #124]	; (800362c <HAL_DMA_IRQHandler+0x6b4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01d      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <HAL_DMA_IRQHandler+0x6b8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d018      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	; (8003634 <HAL_DMA_IRQHandler+0x6bc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d013      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <HAL_DMA_IRQHandler+0x6c0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_DMA_IRQHandler+0x6c4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_DMA_IRQHandler+0x6c8>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_DMA_IRQHandler+0x678>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <HAL_DMA_IRQHandler+0x6cc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d12b      	bne.n	8003648 <HAL_DMA_IRQHandler+0x6d0>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0310 	and.w	r3, r3, #16
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bf14      	ite	ne
 80035fe:	2301      	movne	r3, #1
 8003600:	2300      	moveq	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e02a      	b.n	800365c <HAL_DMA_IRQHandler+0x6e4>
 8003606:	bf00      	nop
 8003608:	40020010 	.word	0x40020010
 800360c:	40020028 	.word	0x40020028
 8003610:	40020040 	.word	0x40020040
 8003614:	40020058 	.word	0x40020058
 8003618:	40020070 	.word	0x40020070
 800361c:	40020088 	.word	0x40020088
 8003620:	400200a0 	.word	0x400200a0
 8003624:	400200b8 	.word	0x400200b8
 8003628:	40020410 	.word	0x40020410
 800362c:	40020428 	.word	0x40020428
 8003630:	40020440 	.word	0x40020440
 8003634:	40020458 	.word	0x40020458
 8003638:	40020470 	.word	0x40020470
 800363c:	40020488 	.word	0x40020488
 8003640:	400204a0 	.word	0x400204a0
 8003644:	400204b8 	.word	0x400204b8
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 8087 	beq.w	8003770 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2220      	movs	r2, #32
 800366c:	409a      	lsls	r2, r3
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b04      	cmp	r3, #4
 800367c:	d139      	bne.n	80036f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0216 	bic.w	r2, r2, #22
 800368c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695a      	ldr	r2, [r3, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800369c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <HAL_DMA_IRQHandler+0x736>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d007      	beq.n	80036be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0208 	bic.w	r2, r2, #8
 80036bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	223f      	movs	r2, #63	; 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 834a 	beq.w	8003d7c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	4798      	blx	r3
          }
          return;
 80036f0:	e344      	b.n	8003d7c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	2b00      	cmp	r3, #0
 8003714:	d02c      	beq.n	8003770 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
 800371e:	e027      	b.n	8003770 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d023      	beq.n	8003770 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
 8003730:	e01e      	b.n	8003770 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10f      	bne.n	8003760 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0210 	bic.w	r2, r2, #16
 800374e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8306 	beq.w	8003d86 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 8088 	beq.w	8003898 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2204      	movs	r2, #4
 800378c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <HAL_DMA_IRQHandler+0xa08>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d04a      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a79      	ldr	r2, [pc, #484]	; (8003984 <HAL_DMA_IRQHandler+0xa0c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d045      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a77      	ldr	r2, [pc, #476]	; (8003988 <HAL_DMA_IRQHandler+0xa10>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d040      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a76      	ldr	r2, [pc, #472]	; (800398c <HAL_DMA_IRQHandler+0xa14>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d03b      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a74      	ldr	r2, [pc, #464]	; (8003990 <HAL_DMA_IRQHandler+0xa18>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d036      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a73      	ldr	r2, [pc, #460]	; (8003994 <HAL_DMA_IRQHandler+0xa1c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d031      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a71      	ldr	r2, [pc, #452]	; (8003998 <HAL_DMA_IRQHandler+0xa20>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d02c      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a70      	ldr	r2, [pc, #448]	; (800399c <HAL_DMA_IRQHandler+0xa24>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d027      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a6e      	ldr	r2, [pc, #440]	; (80039a0 <HAL_DMA_IRQHandler+0xa28>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d022      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a6d      	ldr	r2, [pc, #436]	; (80039a4 <HAL_DMA_IRQHandler+0xa2c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d01d      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a6b      	ldr	r2, [pc, #428]	; (80039a8 <HAL_DMA_IRQHandler+0xa30>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d018      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_DMA_IRQHandler+0xa34>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a68      	ldr	r2, [pc, #416]	; (80039b0 <HAL_DMA_IRQHandler+0xa38>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d00e      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a67      	ldr	r2, [pc, #412]	; (80039b4 <HAL_DMA_IRQHandler+0xa3c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d009      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a65      	ldr	r2, [pc, #404]	; (80039b8 <HAL_DMA_IRQHandler+0xa40>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d004      	beq.n	8003830 <HAL_DMA_IRQHandler+0x8b8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a64      	ldr	r2, [pc, #400]	; (80039bc <HAL_DMA_IRQHandler+0xa44>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d108      	bne.n	8003842 <HAL_DMA_IRQHandler+0x8ca>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	e007      	b.n	8003852 <HAL_DMA_IRQHandler+0x8da>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	3301      	adds	r3, #1
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	429a      	cmp	r2, r3
 800385c:	d307      	bcc.n	800386e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1f2      	bne.n	8003852 <HAL_DMA_IRQHandler+0x8da>
 800386c:	e000      	b.n	8003870 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800386e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2203      	movs	r2, #3
 800388a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800388e:	e003      	b.n	8003898 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8272 	beq.w	8003d86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
 80038aa:	e26c      	b.n	8003d86 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a43      	ldr	r2, [pc, #268]	; (80039c0 <HAL_DMA_IRQHandler+0xa48>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a42      	ldr	r2, [pc, #264]	; (80039c4 <HAL_DMA_IRQHandler+0xa4c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01d      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a40      	ldr	r2, [pc, #256]	; (80039c8 <HAL_DMA_IRQHandler+0xa50>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <HAL_DMA_IRQHandler+0xa54>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a3d      	ldr	r2, [pc, #244]	; (80039d0 <HAL_DMA_IRQHandler+0xa58>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a3c      	ldr	r2, [pc, #240]	; (80039d4 <HAL_DMA_IRQHandler+0xa5c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <HAL_DMA_IRQHandler+0xa60>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_IRQHandler+0x984>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a39      	ldr	r2, [pc, #228]	; (80039dc <HAL_DMA_IRQHandler+0xa64>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <HAL_DMA_IRQHandler+0x988>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x98a>
 8003900:	2300      	movs	r3, #0
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 823f 	beq.w	8003d86 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	f003 031f 	and.w	r3, r3, #31
 8003918:	2204      	movs	r2, #4
 800391a:	409a      	lsls	r2, r3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80cd 	beq.w	8003ac0 <HAL_DMA_IRQHandler+0xb48>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80c7 	beq.w	8003ac0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2204      	movs	r2, #4
 800393c:	409a      	lsls	r2, r3
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d049      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8210 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003968:	e20a      	b.n	8003d80 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 8206 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800397c:	e200      	b.n	8003d80 <HAL_DMA_IRQHandler+0xe08>
 800397e:	bf00      	nop
 8003980:	40020010 	.word	0x40020010
 8003984:	40020028 	.word	0x40020028
 8003988:	40020040 	.word	0x40020040
 800398c:	40020058 	.word	0x40020058
 8003990:	40020070 	.word	0x40020070
 8003994:	40020088 	.word	0x40020088
 8003998:	400200a0 	.word	0x400200a0
 800399c:	400200b8 	.word	0x400200b8
 80039a0:	40020410 	.word	0x40020410
 80039a4:	40020428 	.word	0x40020428
 80039a8:	40020440 	.word	0x40020440
 80039ac:	40020458 	.word	0x40020458
 80039b0:	40020470 	.word	0x40020470
 80039b4:	40020488 	.word	0x40020488
 80039b8:	400204a0 	.word	0x400204a0
 80039bc:	400204b8 	.word	0x400204b8
 80039c0:	58025408 	.word	0x58025408
 80039c4:	5802541c 	.word	0x5802541c
 80039c8:	58025430 	.word	0x58025430
 80039cc:	58025444 	.word	0x58025444
 80039d0:	58025458 	.word	0x58025458
 80039d4:	5802546c 	.word	0x5802546c
 80039d8:	58025480 	.word	0x58025480
 80039dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d160      	bne.n	8003aac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a8c      	ldr	r2, [pc, #560]	; (8003c20 <HAL_DMA_IRQHandler+0xca8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d04a      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a8a      	ldr	r2, [pc, #552]	; (8003c24 <HAL_DMA_IRQHandler+0xcac>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d045      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a89      	ldr	r2, [pc, #548]	; (8003c28 <HAL_DMA_IRQHandler+0xcb0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d040      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a87      	ldr	r2, [pc, #540]	; (8003c2c <HAL_DMA_IRQHandler+0xcb4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d03b      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a86      	ldr	r2, [pc, #536]	; (8003c30 <HAL_DMA_IRQHandler+0xcb8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d036      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a84      	ldr	r2, [pc, #528]	; (8003c34 <HAL_DMA_IRQHandler+0xcbc>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d031      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_DMA_IRQHandler+0xcc0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d02c      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a81      	ldr	r2, [pc, #516]	; (8003c3c <HAL_DMA_IRQHandler+0xcc4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d027      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a80      	ldr	r2, [pc, #512]	; (8003c40 <HAL_DMA_IRQHandler+0xcc8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d022      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a7e      	ldr	r2, [pc, #504]	; (8003c44 <HAL_DMA_IRQHandler+0xccc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d01d      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a7d      	ldr	r2, [pc, #500]	; (8003c48 <HAL_DMA_IRQHandler+0xcd0>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a7b      	ldr	r2, [pc, #492]	; (8003c4c <HAL_DMA_IRQHandler+0xcd4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7a      	ldr	r2, [pc, #488]	; (8003c50 <HAL_DMA_IRQHandler+0xcd8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a78      	ldr	r2, [pc, #480]	; (8003c54 <HAL_DMA_IRQHandler+0xcdc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a77      	ldr	r2, [pc, #476]	; (8003c58 <HAL_DMA_IRQHandler+0xce0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_DMA_IRQHandler+0xb12>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a75      	ldr	r2, [pc, #468]	; (8003c5c <HAL_DMA_IRQHandler+0xce4>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d108      	bne.n	8003a9c <HAL_DMA_IRQHandler+0xb24>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0208 	bic.w	r2, r2, #8
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	e007      	b.n	8003aac <HAL_DMA_IRQHandler+0xb34>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8165 	beq.w	8003d80 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003abe:	e15f      	b.n	8003d80 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f003 031f 	and.w	r3, r3, #31
 8003ac8:	2202      	movs	r2, #2
 8003aca:	409a      	lsls	r2, r3
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80c5 	beq.w	8003c60 <HAL_DMA_IRQHandler+0xce8>
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80bf 	beq.w	8003c60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	2202      	movs	r2, #2
 8003aec:	409a      	lsls	r2, r3
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 813a 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b18:	e134      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8130 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b2c:	e12a      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d168      	bne.n	8003c0a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a38      	ldr	r2, [pc, #224]	; (8003c20 <HAL_DMA_IRQHandler+0xca8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d04a      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a37      	ldr	r2, [pc, #220]	; (8003c24 <HAL_DMA_IRQHandler+0xcac>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d045      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a35      	ldr	r2, [pc, #212]	; (8003c28 <HAL_DMA_IRQHandler+0xcb0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d040      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a34      	ldr	r2, [pc, #208]	; (8003c2c <HAL_DMA_IRQHandler+0xcb4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d03b      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a32      	ldr	r2, [pc, #200]	; (8003c30 <HAL_DMA_IRQHandler+0xcb8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d036      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a31      	ldr	r2, [pc, #196]	; (8003c34 <HAL_DMA_IRQHandler+0xcbc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d031      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a2f      	ldr	r2, [pc, #188]	; (8003c38 <HAL_DMA_IRQHandler+0xcc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d02c      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2e      	ldr	r2, [pc, #184]	; (8003c3c <HAL_DMA_IRQHandler+0xcc4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d027      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <HAL_DMA_IRQHandler+0xcc8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d022      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <HAL_DMA_IRQHandler+0xccc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d01d      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a29      	ldr	r2, [pc, #164]	; (8003c48 <HAL_DMA_IRQHandler+0xcd0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d018      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a28      	ldr	r2, [pc, #160]	; (8003c4c <HAL_DMA_IRQHandler+0xcd4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a26      	ldr	r2, [pc, #152]	; (8003c50 <HAL_DMA_IRQHandler+0xcd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d00e      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a25      	ldr	r2, [pc, #148]	; (8003c54 <HAL_DMA_IRQHandler+0xcdc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d009      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_DMA_IRQHandler+0xce0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d004      	beq.n	8003bd8 <HAL_DMA_IRQHandler+0xc60>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <HAL_DMA_IRQHandler+0xce4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d108      	bne.n	8003bea <HAL_DMA_IRQHandler+0xc72>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0214 	bic.w	r2, r2, #20
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	e007      	b.n	8003bfa <HAL_DMA_IRQHandler+0xc82>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 020a 	bic.w	r2, r2, #10
 8003bf8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80b8 	beq.w	8003d84 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c1c:	e0b2      	b.n	8003d84 <HAL_DMA_IRQHandler+0xe0c>
 8003c1e:	bf00      	nop
 8003c20:	40020010 	.word	0x40020010
 8003c24:	40020028 	.word	0x40020028
 8003c28:	40020040 	.word	0x40020040
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	40020070 	.word	0x40020070
 8003c34:	40020088 	.word	0x40020088
 8003c38:	400200a0 	.word	0x400200a0
 8003c3c:	400200b8 	.word	0x400200b8
 8003c40:	40020410 	.word	0x40020410
 8003c44:	40020428 	.word	0x40020428
 8003c48:	40020440 	.word	0x40020440
 8003c4c:	40020458 	.word	0x40020458
 8003c50:	40020470 	.word	0x40020470
 8003c54:	40020488 	.word	0x40020488
 8003c58:	400204a0 	.word	0x400204a0
 8003c5c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2208      	movs	r2, #8
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 8088 	beq.w	8003d86 <HAL_DMA_IRQHandler+0xe0e>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8082 	beq.w	8003d86 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <HAL_DMA_IRQHandler+0xe14>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d04a      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3f      	ldr	r2, [pc, #252]	; (8003d90 <HAL_DMA_IRQHandler+0xe18>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d045      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a3e      	ldr	r2, [pc, #248]	; (8003d94 <HAL_DMA_IRQHandler+0xe1c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d040      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a3c      	ldr	r2, [pc, #240]	; (8003d98 <HAL_DMA_IRQHandler+0xe20>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d03b      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a3b      	ldr	r2, [pc, #236]	; (8003d9c <HAL_DMA_IRQHandler+0xe24>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d036      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a39      	ldr	r2, [pc, #228]	; (8003da0 <HAL_DMA_IRQHandler+0xe28>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d031      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a38      	ldr	r2, [pc, #224]	; (8003da4 <HAL_DMA_IRQHandler+0xe2c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d02c      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a36      	ldr	r2, [pc, #216]	; (8003da8 <HAL_DMA_IRQHandler+0xe30>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d027      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a35      	ldr	r2, [pc, #212]	; (8003dac <HAL_DMA_IRQHandler+0xe34>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d022      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a33      	ldr	r2, [pc, #204]	; (8003db0 <HAL_DMA_IRQHandler+0xe38>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a32      	ldr	r2, [pc, #200]	; (8003db4 <HAL_DMA_IRQHandler+0xe3c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d018      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a30      	ldr	r2, [pc, #192]	; (8003db8 <HAL_DMA_IRQHandler+0xe40>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a2f      	ldr	r2, [pc, #188]	; (8003dbc <HAL_DMA_IRQHandler+0xe44>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a2d      	ldr	r2, [pc, #180]	; (8003dc0 <HAL_DMA_IRQHandler+0xe48>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a2c      	ldr	r2, [pc, #176]	; (8003dc4 <HAL_DMA_IRQHandler+0xe4c>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xdaa>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <HAL_DMA_IRQHandler+0xe50>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d108      	bne.n	8003d34 <HAL_DMA_IRQHandler+0xdbc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 021c 	bic.w	r2, r2, #28
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e007      	b.n	8003d44 <HAL_DMA_IRQHandler+0xdcc>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 020e 	bic.w	r2, r2, #14
 8003d42:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	4798      	blx	r3
 8003d7a:	e004      	b.n	8003d86 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d84:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d86:	3728      	adds	r7, #40	; 0x28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40020010 	.word	0x40020010
 8003d90:	40020028 	.word	0x40020028
 8003d94:	40020040 	.word	0x40020040
 8003d98:	40020058 	.word	0x40020058
 8003d9c:	40020070 	.word	0x40020070
 8003da0:	40020088 	.word	0x40020088
 8003da4:	400200a0 	.word	0x400200a0
 8003da8:	400200b8 	.word	0x400200b8
 8003dac:	40020410 	.word	0x40020410
 8003db0:	40020428 	.word	0x40020428
 8003db4:	40020440 	.word	0x40020440
 8003db8:	40020458 	.word	0x40020458
 8003dbc:	40020470 	.word	0x40020470
 8003dc0:	40020488 	.word	0x40020488
 8003dc4:	400204a0 	.word	0x400204a0
 8003dc8:	400204b8 	.word	0x400204b8

08003dcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a42      	ldr	r2, [pc, #264]	; (8003ee4 <DMA_CalcBaseAndBitshift+0x118>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d04a      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a41      	ldr	r2, [pc, #260]	; (8003ee8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d045      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a3f      	ldr	r2, [pc, #252]	; (8003eec <DMA_CalcBaseAndBitshift+0x120>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d040      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a3e      	ldr	r2, [pc, #248]	; (8003ef0 <DMA_CalcBaseAndBitshift+0x124>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d03b      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <DMA_CalcBaseAndBitshift+0x128>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d036      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d031      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a39      	ldr	r2, [pc, #228]	; (8003efc <DMA_CalcBaseAndBitshift+0x130>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d02c      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a38      	ldr	r2, [pc, #224]	; (8003f00 <DMA_CalcBaseAndBitshift+0x134>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d027      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a36      	ldr	r2, [pc, #216]	; (8003f04 <DMA_CalcBaseAndBitshift+0x138>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d022      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a35      	ldr	r2, [pc, #212]	; (8003f08 <DMA_CalcBaseAndBitshift+0x13c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d01d      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a33      	ldr	r2, [pc, #204]	; (8003f0c <DMA_CalcBaseAndBitshift+0x140>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d018      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <DMA_CalcBaseAndBitshift+0x144>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d013      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <DMA_CalcBaseAndBitshift+0x148>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00e      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a2f      	ldr	r2, [pc, #188]	; (8003f18 <DMA_CalcBaseAndBitshift+0x14c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <DMA_CalcBaseAndBitshift+0x150>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d004      	beq.n	8003e74 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <DMA_CalcBaseAndBitshift+0x154>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d101      	bne.n	8003e78 <DMA_CalcBaseAndBitshift+0xac>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <DMA_CalcBaseAndBitshift+0xae>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d024      	beq.n	8003ec8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3b10      	subs	r3, #16
 8003e86:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <DMA_CalcBaseAndBitshift+0x158>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <DMA_CalcBaseAndBitshift+0x15c>)
 8003e98:	5cd3      	ldrb	r3, [r2, r3]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d908      	bls.n	8003eb8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <DMA_CalcBaseAndBitshift+0x160>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	1d1a      	adds	r2, r3, #4
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb6:	e00d      	b.n	8003ed4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <DMA_CalcBaseAndBitshift+0x160>)
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec6:	e005      	b.n	8003ed4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40020010 	.word	0x40020010
 8003ee8:	40020028 	.word	0x40020028
 8003eec:	40020040 	.word	0x40020040
 8003ef0:	40020058 	.word	0x40020058
 8003ef4:	40020070 	.word	0x40020070
 8003ef8:	40020088 	.word	0x40020088
 8003efc:	400200a0 	.word	0x400200a0
 8003f00:	400200b8 	.word	0x400200b8
 8003f04:	40020410 	.word	0x40020410
 8003f08:	40020428 	.word	0x40020428
 8003f0c:	40020440 	.word	0x40020440
 8003f10:	40020458 	.word	0x40020458
 8003f14:	40020470 	.word	0x40020470
 8003f18:	40020488 	.word	0x40020488
 8003f1c:	400204a0 	.word	0x400204a0
 8003f20:	400204b8 	.word	0x400204b8
 8003f24:	aaaaaaab 	.word	0xaaaaaaab
 8003f28:	08020894 	.word	0x08020894
 8003f2c:	fffffc00 	.word	0xfffffc00

08003f30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d120      	bne.n	8003f86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d858      	bhi.n	8003ffe <DMA_CheckFifoParam+0xce>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <DMA_CheckFifoParam+0x24>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f65 	.word	0x08003f65
 8003f58:	08003f77 	.word	0x08003f77
 8003f5c:	08003f65 	.word	0x08003f65
 8003f60:	08003fff 	.word	0x08003fff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d048      	beq.n	8004002 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f74:	e045      	b.n	8004002 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f7e:	d142      	bne.n	8004006 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f84:	e03f      	b.n	8004006 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8e:	d123      	bne.n	8003fd8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d838      	bhi.n	800400a <DMA_CheckFifoParam+0xda>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <DMA_CheckFifoParam+0x70>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fb1 	.word	0x08003fb1
 8003fa4:	08003fb7 	.word	0x08003fb7
 8003fa8:	08003fb1 	.word	0x08003fb1
 8003fac:	08003fc9 	.word	0x08003fc9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8003fb4:	e030      	b.n	8004018 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d025      	beq.n	800400e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fc6:	e022      	b.n	800400e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd0:	d11f      	bne.n	8004012 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003fd6:	e01c      	b.n	8004012 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d902      	bls.n	8003fe6 <DMA_CheckFifoParam+0xb6>
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d003      	beq.n	8003fec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003fe4:	e018      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8003fea:	e015      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00e      	beq.n	8004016 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8003ffc:	e00b      	b.n	8004016 <DMA_CheckFifoParam+0xe6>
        break;
 8003ffe:	bf00      	nop
 8004000:	e00a      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        break;
 8004002:	bf00      	nop
 8004004:	e008      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        break;
 8004006:	bf00      	nop
 8004008:	e006      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        break;
 800400a:	bf00      	nop
 800400c:	e004      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
        break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <DMA_CheckFifoParam+0xe8>
    break;
 8004016:	bf00      	nop
    }
  }

  return status;
 8004018:	7bfb      	ldrb	r3, [r7, #15]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop

08004028 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d022      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a36      	ldr	r2, [pc, #216]	; (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d01d      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a35      	ldr	r2, [pc, #212]	; (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d018      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a33      	ldr	r2, [pc, #204]	; (8004128 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a32      	ldr	r2, [pc, #200]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00e      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d009      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d004      	beq.n	8004086 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d101      	bne.n	800408a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800408a:	2300      	movs	r3, #0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01a      	beq.n	80040c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	3b08      	subs	r3, #8
 8004098:	4a28      	ldr	r2, [pc, #160]	; (800413c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80040b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 031f 	and.w	r3, r3, #31
 80040bc:	2201      	movs	r2, #1
 80040be:	409a      	lsls	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80040c4:	e024      	b.n	8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	3b10      	subs	r3, #16
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80040d0:	fba2 2303 	umull	r2, r3, r2, r3
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4a1c      	ldr	r2, [pc, #112]	; (800414c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d806      	bhi.n	80040ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d902      	bls.n	80040ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	3308      	adds	r3, #8
 80040ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4b18      	ldr	r3, [pc, #96]	; (8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	461a      	mov	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a16      	ldr	r2, [pc, #88]	; (8004158 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004100:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	2201      	movs	r2, #1
 800410a:	409a      	lsls	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	58025408 	.word	0x58025408
 8004120:	5802541c 	.word	0x5802541c
 8004124:	58025430 	.word	0x58025430
 8004128:	58025444 	.word	0x58025444
 800412c:	58025458 	.word	0x58025458
 8004130:	5802546c 	.word	0x5802546c
 8004134:	58025480 	.word	0x58025480
 8004138:	58025494 	.word	0x58025494
 800413c:	cccccccd 	.word	0xcccccccd
 8004140:	16009600 	.word	0x16009600
 8004144:	58025880 	.word	0x58025880
 8004148:	aaaaaaab 	.word	0xaaaaaaab
 800414c:	400204b8 	.word	0x400204b8
 8004150:	4002040f 	.word	0x4002040f
 8004154:	10008200 	.word	0x10008200
 8004158:	40020880 	.word	0x40020880

0800415c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	b2db      	uxtb	r3, r3
 800416a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d04a      	beq.n	8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d847      	bhi.n	8004208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a25      	ldr	r2, [pc, #148]	; (8004214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d022      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a24      	ldr	r2, [pc, #144]	; (8004218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d01d      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d018      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a21      	ldr	r2, [pc, #132]	; (8004220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d013      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1f      	ldr	r2, [pc, #124]	; (8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d00e      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d009      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1c      	ldr	r2, [pc, #112]	; (800422c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d004      	beq.n	80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d101      	bne.n	80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80041cc:	2300      	movs	r3, #0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4b17      	ldr	r3, [pc, #92]	; (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a15      	ldr	r2, [pc, #84]	; (8004238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80041e4:	671a      	str	r2, [r3, #112]	; 0x70
 80041e6:	e009      	b.n	80041fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80041ec:	4413      	add	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	461a      	mov	r2, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a11      	ldr	r2, [pc, #68]	; (8004240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80041fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	3b01      	subs	r3, #1
 8004200:	2201      	movs	r2, #1
 8004202:	409a      	lsls	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	58025408 	.word	0x58025408
 8004218:	5802541c 	.word	0x5802541c
 800421c:	58025430 	.word	0x58025430
 8004220:	58025444 	.word	0x58025444
 8004224:	58025458 	.word	0x58025458
 8004228:	5802546c 	.word	0x5802546c
 800422c:	58025480 	.word	0x58025480
 8004230:	58025494 	.word	0x58025494
 8004234:	1600963f 	.word	0x1600963f
 8004238:	58025940 	.word	0x58025940
 800423c:	1000823f 	.word	0x1000823f
 8004240:	40020940 	.word	0x40020940

08004244 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e0c6      	b.n	80043e4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f007 fece 	bl	800c000 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2223      	movs	r2, #35	; 0x23
 8004268:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426a:	4b60      	ldr	r3, [pc, #384]	; (80043ec <HAL_ETH_Init+0x1a8>)
 800426c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004270:	4a5e      	ldr	r2, [pc, #376]	; (80043ec <HAL_ETH_Init+0x1a8>)
 8004272:	f043 0302 	orr.w	r3, r3, #2
 8004276:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800427a:	4b5c      	ldr	r3, [pc, #368]	; (80043ec <HAL_ETH_Init+0x1a8>)
 800427c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004280:	f003 0302 	and.w	r3, r3, #2
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7a1b      	ldrb	r3, [r3, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004290:	2000      	movs	r0, #0
 8004292:	f7fd fa17 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
 8004296:	e003      	b.n	80042a0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004298:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800429c:	f7fd fa12 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042b8:	f7fd f9ca 	bl	8001650 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80042be:	e00f      	b.n	80042e0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80042c0:	f7fd f9c6 	bl	8001650 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042ce:	d907      	bls.n	80042e0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2204      	movs	r2, #4
 80042d4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	22e0      	movs	r2, #224	; 0xe0
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e081      	b.n	80043e4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1e6      	bne.n	80042c0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fcce 	bl	8004c94 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80042f8:	f002 f98c 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <HAL_ETH_Init+0x1ac>)
 8004300:	fba3 2302 	umull	r2, r3, r3, r2
 8004304:	0c9a      	lsrs	r2, r3, #18
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3a01      	subs	r2, #1
 800430c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fc21 	bl	8004b58 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800432c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004330:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d007      	beq.n	800434e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	22e0      	movs	r2, #224	; 0xe0
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e04a      	b.n	80043e4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f241 1308 	movw	r3, #4360	; 0x1108
 8004356:	4413      	add	r3, r2
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <HAL_ETH_Init+0x1b0>)
 800435c:	4013      	ands	r3, r2
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6952      	ldr	r2, [r2, #20]
 8004362:	0052      	lsls	r2, r2, #1
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	6809      	ldr	r1, [r1, #0]
 8004368:	431a      	orrs	r2, r3
 800436a:	f241 1308 	movw	r3, #4360	; 0x1108
 800436e:	440b      	add	r3, r1
 8004370:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fce6 	bl	8004d44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fd2a 	bl	8004dd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	3305      	adds	r3, #5
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	021a      	lsls	r2, r3, #8
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	3304      	adds	r3, #4
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	3303      	adds	r3, #3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	061a      	lsls	r2, r3, #24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	3302      	adds	r3, #2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	041b      	lsls	r3, r3, #16
 80043b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	3301      	adds	r3, #1
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80043ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80043cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2210      	movs	r2, #16
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2210      	movs	r2, #16
 80043e0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	58024400 	.word	0x58024400
 80043f0:	431bde83 	.word	0x431bde83
 80043f4:	ffff8001 	.word	0xffff8001

080043f8 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	330a      	adds	r3, #10
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_ETH_DescAssignMemory+0x28>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d904      	bls.n	800442a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2201      	movs	r2, #1
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e021      	b.n	800446e <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00b      	beq.n	8004460 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800447a:	b580      	push	{r7, lr}
 800447c:	b086      	sub	sp, #24
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d107      	bne.n	800449c <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f043 0201 	orr.w	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e073      	b.n	8004584 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	2b10      	cmp	r3, #16
 80044a2:	d16e      	bne.n	8004582 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80044a4:	2200      	movs	r2, #0
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fcef 	bl	8004e8c <ETH_Prepare_Tx_Descriptors>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d007      	beq.n	80044c4 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f043 0202 	orr.w	r2, r3, #2
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e05f      	b.n	8004584 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3206      	adds	r2, #6
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d904      	bls.n	80044ee <HAL_ETH_Transmit+0x74>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	1f1a      	subs	r2, r3, #4
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	3106      	adds	r1, #6
 80044fa:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80044fe:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004502:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8004504:	f7fd f8a4 	bl	8001650 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800450a:	e034      	b.n	8004576 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d011      	beq.n	8004542 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	f043 0208 	orr.w	r2, r3, #8
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	22e0      	movs	r2, #224	; 0xe0
 800453c:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e020      	b.n	8004584 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d015      	beq.n	8004576 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 800454a:	f7fd f881 	bl	8001650 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <HAL_ETH_Transmit+0xe6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	22e0      	movs	r2, #224	; 0xe0
 8004570:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e006      	b.n	8004584 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	dbc6      	blt.n	800450c <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e000      	b.n	8004584 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
  }
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d113      	bne.n	80045ce <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	f241 1334 	movw	r3, #4404	; 0x1134
 80045ae:	4413      	add	r3, r2
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d109      	bne.n	80045ce <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f8ee 	bl	800479c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045c8:	f248 0240 	movw	r2, #32832	; 0x8040
 80045cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d113      	bne.n	8004608 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f241 1334 	movw	r3, #4404	; 0x1134
 80045e8:	4413      	add	r3, r2
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d109      	bne.n	8004608 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8c7 	bl	8004788 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004602:	f248 0201 	movw	r2, #32769	; 0x8001
 8004606:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800461a:	d149      	bne.n	80046b0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	f241 1334 	movw	r3, #4404	; 0x1134
 8004624:	4413      	add	r3, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004630:	d13e      	bne.n	80046b0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004636:	f043 0208 	orr.w	r2, r3, #8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004650:	d11b      	bne.n	800468a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	f241 1302 	movw	r3, #4354	; 0x1102
 8004660:	4013      	ands	r3, r2
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	f241 1334 	movw	r3, #4404	; 0x1134
 800466e:	4413      	add	r3, r2
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800467a:	f241 1334 	movw	r3, #4404	; 0x1134
 800467e:	440b      	add	r3, r1
 8004680:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	22e0      	movs	r2, #224	; 0xe0
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
 8004688:	e00f      	b.n	80046aa <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80046a4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 80046a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f880 	bl	80047b0 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046b8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80046bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80046c0:	d10e      	bne.n	80046e0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	22e0      	movs	r2, #224	; 0xe0
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f875 	bl	80047c4 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b10      	cmp	r3, #16
 80046ee:	d10d      	bne.n	800470c <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80046f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f869 	bl	80047d8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b20      	cmp	r3, #32
 800471a:	d10d      	bne.n	8004738 <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004724:	f003 020f 	and.w	r2, r3, #15
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f85d 	bl	80047ec <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	66da      	str	r2, [r3, #108]	; 0x6c
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004738:	f7fe f8ae 	bl	8002898 <HAL_GetCurrentCPUID>
 800473c:	4603      	mov	r3, r0
 800473e:	2b03      	cmp	r3, #3
 8004740:	d10d      	bne.n	800475e <HAL_ETH_IRQHandler+0x1d2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_ETH_IRQHandler+0x1f4>)
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d014      	beq.n	8004778 <HAL_ETH_IRQHandler+0x1ec>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800474e:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_ETH_IRQHandler+0x1f4>)
 8004750:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004754:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f852 	bl	8004800 <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 800475c:	e00c      	b.n	8004778 <HAL_ETH_IRQHandler+0x1ec>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <HAL_ETH_IRQHandler+0x1f8>)
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d006      	beq.n	8004778 <HAL_ETH_IRQHandler+0x1ec>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800476a:	4b06      	ldr	r3, [pc, #24]	; (8004784 <HAL_ETH_IRQHandler+0x1f8>)
 800476c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f844 	bl	8004800 <HAL_ETH_WakeUpCallback>
}
 8004778:	bf00      	nop
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58000080 	.word	0x58000080
 8004784:	580000c0 	.word	0x580000c0

08004788 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004826:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	791b      	ldrb	r3, [r3, #4]
 800482c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800482e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	7b1b      	ldrb	r3, [r3, #12]
 8004834:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004836:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	7b5b      	ldrb	r3, [r3, #13]
 800483c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800483e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	7b9b      	ldrb	r3, [r3, #14]
 8004844:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004846:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	7bdb      	ldrb	r3, [r3, #15]
 800484c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800484e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	7c12      	ldrb	r2, [r2, #16]
 8004854:	2a00      	cmp	r2, #0
 8004856:	d102      	bne.n	800485e <ETH_SetMACConfig+0x4a>
 8004858:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800485c:	e000      	b.n	8004860 <ETH_SetMACConfig+0x4c>
 800485e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004860:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	7c52      	ldrb	r2, [r2, #17]
 8004866:	2a00      	cmp	r2, #0
 8004868:	d102      	bne.n	8004870 <ETH_SetMACConfig+0x5c>
 800486a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800486e:	e000      	b.n	8004872 <ETH_SetMACConfig+0x5e>
 8004870:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004872:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	7c9b      	ldrb	r3, [r3, #18]
 8004878:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800487a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004880:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004886:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	7f1b      	ldrb	r3, [r3, #28]
 800488c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800488e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	7f5b      	ldrb	r3, [r3, #29]
 8004894:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004896:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	7f92      	ldrb	r2, [r2, #30]
 800489c:	2a00      	cmp	r2, #0
 800489e:	d102      	bne.n	80048a6 <ETH_SetMACConfig+0x92>
 80048a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a4:	e000      	b.n	80048a8 <ETH_SetMACConfig+0x94>
 80048a6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80048a8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	7fdb      	ldrb	r3, [r3, #31]
 80048ae:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80048b0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048b8:	2a00      	cmp	r2, #0
 80048ba:	d102      	bne.n	80048c2 <ETH_SetMACConfig+0xae>
 80048bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c0:	e000      	b.n	80048c4 <ETH_SetMACConfig+0xb0>
 80048c2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80048c4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80048ca:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80048d4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80048da:	4313      	orrs	r3, r2
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b56      	ldr	r3, [pc, #344]	; (8004a40 <ETH_SetMACConfig+0x22c>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	430b      	orrs	r3, r1
 80048f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004900:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004908:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800490a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004912:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004914:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800491c:	2a00      	cmp	r2, #0
 800491e:	d102      	bne.n	8004926 <ETH_SetMACConfig+0x112>
 8004920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004924:	e000      	b.n	8004928 <ETH_SetMACConfig+0x114>
 8004926:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004928:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	4b42      	ldr	r3, [pc, #264]	; (8004a44 <ETH_SetMACConfig+0x230>)
 800493a:	4013      	ands	r3, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	430b      	orrs	r3, r1
 8004944:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800494c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	4b3a      	ldr	r3, [pc, #232]	; (8004a48 <ETH_SetMACConfig+0x234>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	430b      	orrs	r3, r1
 8004968:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004970:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004976:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800497e:	2a00      	cmp	r2, #0
 8004980:	d101      	bne.n	8004986 <ETH_SetMACConfig+0x172>
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	e000      	b.n	8004988 <ETH_SetMACConfig+0x174>
 8004986:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004988:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800499a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	68f9      	ldr	r1, [r7, #12]
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80049b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80049b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c6:	f023 0103 	bic.w	r1, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80049de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80049fa:	2a00      	cmp	r2, #0
 80049fc:	d101      	bne.n	8004a02 <ETH_SetMACConfig+0x1ee>
 80049fe:	2240      	movs	r2, #64	; 0x40
 8004a00:	e000      	b.n	8004a04 <ETH_SetMACConfig+0x1f0>
 8004a02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004a04:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a0e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004a16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004a24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	00048083 	.word	0x00048083
 8004a44:	c0f88000 	.word	0xc0f88000
 8004a48:	fffffef0 	.word	0xfffffef0

08004a4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <ETH_SetDMAConfig+0xf8>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	6809      	ldr	r1, [r1, #0]
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004a72:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a7e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	7b1b      	ldrb	r3, [r3, #12]
 8004a84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004a92:	4413      	add	r3, r2
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <ETH_SetDMAConfig+0xfc>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	f241 0304 	movw	r3, #4100	; 0x1004
 8004aa6:	440b      	add	r3, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	7b5b      	ldrb	r3, [r3, #13]
 8004aae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <ETH_SetDMAConfig+0x100>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6811      	ldr	r1, [r2, #0]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	431a      	orrs	r2, r3
 8004ace:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004ad2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7d1b      	ldrb	r3, [r3, #20]
 8004adc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ade:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	7f5b      	ldrb	r3, [r3, #29]
 8004ae4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f241 1304 	movw	r3, #4356	; 0x1104
 8004af2:	4413      	add	r3, r2
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <ETH_SetDMAConfig+0x104>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6811      	ldr	r1, [r2, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	431a      	orrs	r2, r3
 8004b02:	f241 1304 	movw	r3, #4356	; 0x1104
 8004b06:	440b      	add	r3, r1
 8004b08:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	7f1b      	ldrb	r3, [r3, #28]
 8004b0e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b20:	4413      	add	r3, r2
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <ETH_SetDMAConfig+0x108>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6811      	ldr	r1, [r2, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	431a      	orrs	r2, r3
 8004b30:	f241 1308 	movw	r3, #4360	; 0x1108
 8004b34:	440b      	add	r3, r1
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	ffff87fd 	.word	0xffff87fd
 8004b48:	ffff2ffe 	.word	0xffff2ffe
 8004b4c:	fffec000 	.word	0xfffec000
 8004b50:	ffc0efef 	.word	0xffc0efef
 8004b54:	7fc0ffff 	.word	0x7fc0ffff

08004b58 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b0a4      	sub	sp, #144	; 0x90
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b66:	2300      	movs	r3, #0
 8004b68:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b70:	2300      	movs	r3, #0
 8004b72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b98:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004bb0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004bb4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004c02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004c32:	2300      	movs	r3, #0
 8004c34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fde6 	bl	8004814 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004c78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fee1 	bl	8004a4c <ETH_SetDMAConfig>
}
 8004c8a:	bf00      	nop
 8004c8c:	3790      	adds	r7, #144	; 0x90
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004cae:	f001 fcb1 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 8004cb2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	; (8004d30 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d908      	bls.n	8004cce <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4a1d      	ldr	r2, [pc, #116]	; (8004d34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d804      	bhi.n	8004cce <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e027      	b.n	8004d1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d908      	bls.n	8004ce8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d804      	bhi.n	8004ce8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	e01a      	b.n	8004d1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d903      	bls.n	8004cf8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4a12      	ldr	r2, [pc, #72]	; (8004d3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d911      	bls.n	8004d1c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d908      	bls.n	8004d12 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d804      	bhi.n	8004d12 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e005      	b.n	8004d1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e000      	b.n	8004d1e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004d1c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d28:	bf00      	nop
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	01312cff 	.word	0x01312cff
 8004d34:	02160ebf 	.word	0x02160ebf
 8004d38:	039386ff 	.word	0x039386ff
 8004d3c:	05f5e0ff 	.word	0x05f5e0ff
 8004d40:	08f0d17f 	.word	0x08f0d17f

08004d44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e01d      	b.n	8004d8e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68d9      	ldr	r1, [r3, #12]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d7c:	68b9      	ldr	r1, [r7, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	3206      	adds	r2, #6
 8004d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d9de      	bls.n	8004d52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f241 132c 	movw	r3, #4396	; 0x112c
 8004da2:	4413      	add	r3, r2
 8004da4:	2203      	movs	r2, #3
 8004da6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68d9      	ldr	r1, [r3, #12]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	f241 1314 	movw	r3, #4372	; 0x1114
 8004db4:	4413      	add	r3, r2
 8004db6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e024      	b.n	8004e2a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6919      	ldr	r1, [r3, #16]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2200      	movs	r2, #0
 8004e02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2200      	movs	r2, #0
 8004e08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	330a      	adds	r3, #10
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d9d7      	bls.n	8004de0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	f241 1330 	movw	r3, #4400	; 0x1130
 8004e56:	4413      	add	r3, r2
 8004e58:	2203      	movs	r2, #3
 8004e5a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6919      	ldr	r1, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	f241 131c 	movw	r3, #4380	; 0x111c
 8004e68:	4413      	add	r3, r2
 8004e6a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	f241 1328 	movw	r3, #4392	; 0x1128
 8004e7c:	4413      	add	r3, r2
 8004e7e:	6019      	str	r1, [r3, #0]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b08d      	sub	sp, #52	; 0x34
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3318      	adds	r3, #24
 8004e9c:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004eca:	d101      	bne.n	8004ed0 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e223      	b.n	8005318 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d044      	beq.n	8004f66 <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	68da      	ldr	r2, [r3, #12]
 8004ee0:	4b72      	ldr	r3, [pc, #456]	; (80050ac <ETH_Prepare_Tx_Descriptors+0x220>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d027      	beq.n	8004f66 <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	041b      	lsls	r3, r3, #16
 8004f22:	431a      	orrs	r2, r3
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	431a      	orrs	r2, r3
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004f54:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004f64:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00e      	beq.n	8004f90 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	4b4e      	ldr	r3, [pc, #312]	; (80050b0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	6992      	ldr	r2, [r2, #24]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <ETH_Prepare_Tx_Descriptors+0x11c>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d030      	beq.n	800500a <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d902      	bls.n	8004fd2 <ETH_Prepare_Tx_Descriptors+0x146>
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	3b04      	subs	r3, #4
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fda:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	3301      	adds	r3, #1
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fee:	d10c      	bne.n	800500a <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005006:	2302      	movs	r3, #2
 8005008:	e186      	b.n	8005318 <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800500a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500c:	3301      	adds	r3, #1
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <ETH_Prepare_Tx_Descriptors+0x224>)
 8005020:	4013      	ands	r3, r2
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	6852      	ldr	r2, [r2, #4]
 8005026:	431a      	orrs	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d012      	beq.n	800505a <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <ETH_Prepare_Tx_Descriptors+0x228>)
 800504a:	4013      	ands	r3, r2
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	6852      	ldr	r2, [r2, #4]
 8005050:	0412      	lsls	r2, r2, #16
 8005052:	431a      	orrs	r2, r3
 8005054:	6a3b      	ldr	r3, [r7, #32]
 8005056:	609a      	str	r2, [r3, #8]
 8005058:	e008      	b.n	800506c <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	2200      	movs	r2, #0
 800505e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <ETH_Prepare_Tx_Descriptors+0x228>)
 8005066:	4013      	ands	r3, r2
 8005068:	6a3a      	ldr	r2, [r7, #32]
 800506a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d021      	beq.n	80050bc <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	04db      	lsls	r3, r3, #19
 8005086:	431a      	orrs	r2, r3
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <ETH_Prepare_Tx_Descriptors+0x22c>)
 8005092:	4013      	ands	r3, r2
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	69d2      	ldr	r2, [r2, #28]
 8005098:	431a      	orrs	r2, r3
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	60da      	str	r2, [r3, #12]
 80050aa:	e02e      	b.n	800510a <ETH_Prepare_Tx_Descriptors+0x27e>
 80050ac:	ffff0000 	.word	0xffff0000
 80050b0:	ffffc000 	.word	0xffffc000
 80050b4:	c000ffff 	.word	0xc000ffff
 80050b8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	4b98      	ldr	r3, [pc, #608]	; (8005324 <ETH_Prepare_Tx_Descriptors+0x498>)
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	6852      	ldr	r2, [r2, #4]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d008      	beq.n	80050ec <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	431a      	orrs	r2, r3
 8005106:	6a3b      	ldr	r3, [r7, #32]
 8005108:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d008      	beq.n	8005128 <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	431a      	orrs	r2, r3
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80c0 	beq.w	80052da <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	431a      	orrs	r2, r3
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800516c:	e0b5      	b.n	80052da <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	3301      	adds	r3, #1
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2b03      	cmp	r3, #3
 8005184:	d902      	bls.n	800518c <ETH_Prepare_Tx_Descriptors+0x300>
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	3b04      	subs	r3, #4
 800518a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ae:	d126      	bne.n	80051fe <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051bc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80051be:	2300      	movs	r3, #0
 80051c0:	627b      	str	r3, [r7, #36]	; 0x24
 80051c2:	e016      	b.n	80051f2 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80051d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d2:	3301      	adds	r3, #1
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	2b03      	cmp	r3, #3
 80051da:	d902      	bls.n	80051e2 <ETH_Prepare_Tx_Descriptors+0x356>
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	3b04      	subs	r3, #4
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ea:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	3301      	adds	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d3e4      	bcc.n	80051c4 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 80051fa:	2302      	movs	r3, #2
 80051fc:	e08c      	b.n	8005318 <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	3301      	adds	r3, #1
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	461a      	mov	r2, r3
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800521a:	4013      	ands	r3, r2
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d012      	beq.n	8005254 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	689a      	ldr	r2, [r3, #8]
 8005242:	4b3a      	ldr	r3, [pc, #232]	; (800532c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005244:	4013      	ands	r3, r2
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	6852      	ldr	r2, [r2, #4]
 800524a:	0412      	lsls	r2, r2, #16
 800524c:	431a      	orrs	r2, r3
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	e008      	b.n	8005266 <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	2200      	movs	r2, #0
 8005258:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	4b33      	ldr	r3, [pc, #204]	; (800532c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005260:	4013      	ands	r3, r2
 8005262:	6a3a      	ldr	r2, [r7, #32]
 8005264:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005278:	4013      	ands	r3, r2
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	69d2      	ldr	r2, [r2, #28]
 800527e:	431a      	orrs	r2, r3
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	60da      	str	r2, [r3, #12]
 8005290:	e017      	b.n	80052c2 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	4b23      	ldr	r3, [pc, #140]	; (8005324 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005298:	4013      	ands	r3, r2
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	431a      	orrs	r2, r3
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f47f af45 	bne.w	800516e <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d006      	beq.n	80052f8 <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	e005      	b.n	8005304 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005314:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3734      	adds	r7, #52	; 0x34
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	ffff8000 	.word	0xffff8000
 8005328:	ffffc000 	.word	0xffffc000
 800532c:	c000ffff 	.word	0xc000ffff
 8005330:	fffc0000 	.word	0xfffc0000

08005334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005334:	b480      	push	{r7}
 8005336:	b089      	sub	sp, #36	; 0x24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800533e:	2300      	movs	r3, #0
 8005340:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005342:	4b89      	ldr	r3, [pc, #548]	; (8005568 <HAL_GPIO_Init+0x234>)
 8005344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005346:	e194      	b.n	8005672 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	2101      	movs	r1, #1
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	4013      	ands	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 8186 	beq.w	800566c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d00b      	beq.n	8005380 <HAL_GPIO_Init+0x4c>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b02      	cmp	r3, #2
 800536e:	d007      	beq.n	8005380 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005374:	2b11      	cmp	r3, #17
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b12      	cmp	r3, #18
 800537e:	d130      	bne.n	80053e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	2203      	movs	r2, #3
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	fa02 f303 	lsl.w	r3, r2, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053b6:	2201      	movs	r2, #1
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	43db      	mvns	r3, r3
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	4013      	ands	r3, r2
 80053c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	091b      	lsrs	r3, r3, #4
 80053cc:	f003 0201 	and.w	r2, r3, #1
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4313      	orrs	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2203      	movs	r2, #3
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d003      	beq.n	8005422 <HAL_GPIO_Init+0xee>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b12      	cmp	r3, #18
 8005420:	d123      	bne.n	800546a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	08da      	lsrs	r2, r3, #3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3208      	adds	r2, #8
 800542a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	220f      	movs	r2, #15
 800543a:	fa02 f303 	lsl.w	r3, r2, r3
 800543e:	43db      	mvns	r3, r3
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	4013      	ands	r3, r2
 8005444:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	fa02 f303 	lsl.w	r3, r2, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4313      	orrs	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	08da      	lsrs	r2, r3, #3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	3208      	adds	r2, #8
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	2203      	movs	r2, #3
 8005476:	fa02 f303 	lsl.w	r3, r2, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0203 	and.w	r2, r3, #3
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4313      	orrs	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80e0 	beq.w	800566c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ac:	4b2f      	ldr	r3, [pc, #188]	; (800556c <HAL_GPIO_Init+0x238>)
 80054ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054b2:	4a2e      	ldr	r2, [pc, #184]	; (800556c <HAL_GPIO_Init+0x238>)
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_GPIO_Init+0x238>)
 80054be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ca:	4a29      	ldr	r2, [pc, #164]	; (8005570 <HAL_GPIO_Init+0x23c>)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	089b      	lsrs	r3, r3, #2
 80054d0:	3302      	adds	r3, #2
 80054d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	220f      	movs	r2, #15
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a20      	ldr	r2, [pc, #128]	; (8005574 <HAL_GPIO_Init+0x240>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d052      	beq.n	800559c <HAL_GPIO_Init+0x268>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a1f      	ldr	r2, [pc, #124]	; (8005578 <HAL_GPIO_Init+0x244>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_GPIO_Init+0x22e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a1e      	ldr	r2, [pc, #120]	; (800557c <HAL_GPIO_Init+0x248>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02b      	beq.n	800555e <HAL_GPIO_Init+0x22a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_GPIO_Init+0x24c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d025      	beq.n	800555a <HAL_GPIO_Init+0x226>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a1c      	ldr	r2, [pc, #112]	; (8005584 <HAL_GPIO_Init+0x250>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01f      	beq.n	8005556 <HAL_GPIO_Init+0x222>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_GPIO_Init+0x254>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d019      	beq.n	8005552 <HAL_GPIO_Init+0x21e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <HAL_GPIO_Init+0x258>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d013      	beq.n	800554e <HAL_GPIO_Init+0x21a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a19      	ldr	r2, [pc, #100]	; (8005590 <HAL_GPIO_Init+0x25c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00d      	beq.n	800554a <HAL_GPIO_Init+0x216>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a18      	ldr	r2, [pc, #96]	; (8005594 <HAL_GPIO_Init+0x260>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <HAL_GPIO_Init+0x212>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a17      	ldr	r2, [pc, #92]	; (8005598 <HAL_GPIO_Init+0x264>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d101      	bne.n	8005542 <HAL_GPIO_Init+0x20e>
 800553e:	2309      	movs	r3, #9
 8005540:	e02d      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005542:	230a      	movs	r3, #10
 8005544:	e02b      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005546:	2308      	movs	r3, #8
 8005548:	e029      	b.n	800559e <HAL_GPIO_Init+0x26a>
 800554a:	2307      	movs	r3, #7
 800554c:	e027      	b.n	800559e <HAL_GPIO_Init+0x26a>
 800554e:	2306      	movs	r3, #6
 8005550:	e025      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005552:	2305      	movs	r3, #5
 8005554:	e023      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005556:	2304      	movs	r3, #4
 8005558:	e021      	b.n	800559e <HAL_GPIO_Init+0x26a>
 800555a:	2303      	movs	r3, #3
 800555c:	e01f      	b.n	800559e <HAL_GPIO_Init+0x26a>
 800555e:	2302      	movs	r3, #2
 8005560:	e01d      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005562:	2301      	movs	r3, #1
 8005564:	e01b      	b.n	800559e <HAL_GPIO_Init+0x26a>
 8005566:	bf00      	nop
 8005568:	58000080 	.word	0x58000080
 800556c:	58024400 	.word	0x58024400
 8005570:	58000400 	.word	0x58000400
 8005574:	58020000 	.word	0x58020000
 8005578:	58020400 	.word	0x58020400
 800557c:	58020800 	.word	0x58020800
 8005580:	58020c00 	.word	0x58020c00
 8005584:	58021000 	.word	0x58021000
 8005588:	58021400 	.word	0x58021400
 800558c:	58021800 	.word	0x58021800
 8005590:	58021c00 	.word	0x58021c00
 8005594:	58022000 	.word	0x58022000
 8005598:	58022400 	.word	0x58022400
 800559c:	2300      	movs	r3, #0
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	f002 0203 	and.w	r2, r2, #3
 80055a4:	0092      	lsls	r2, r2, #2
 80055a6:	4093      	lsls	r3, r2
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055ae:	4938      	ldr	r1, [pc, #224]	; (8005690 <HAL_GPIO_Init+0x35c>)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	089b      	lsrs	r3, r3, #2
 80055b4:	3302      	adds	r3, #2
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	43db      	mvns	r3, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	43db      	mvns	r3, r3
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	4013      	ands	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	43db      	mvns	r3, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4013      	ands	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d003      	beq.n	8005664 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	3301      	adds	r3, #1
 8005670:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	f47f ae63 	bne.w	8005348 <HAL_GPIO_Init+0x14>
  }
}
 8005682:	bf00      	nop
 8005684:	3724      	adds	r7, #36	; 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	58000400 	.word	0x58000400

08005694 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800569c:	4a08      	ldr	r2, [pc, #32]	; (80056c0 <HAL_HSEM_FastTake+0x2c>)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3320      	adds	r3, #32
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	4a07      	ldr	r2, [pc, #28]	; (80056c4 <HAL_HSEM_FastTake+0x30>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	58026400 	.word	0x58026400
 80056c4:	80000300 	.word	0x80000300

080056c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80056d2:	4906      	ldr	r1, [pc, #24]	; (80056ec <HAL_HSEM_Release+0x24>)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	58026400 	.word	0x58026400

080056f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80056f8:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	2b06      	cmp	r3, #6
 8005702:	d00a      	beq.n	800571a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005704:	4b26      	ldr	r3, [pc, #152]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d001      	beq.n	8005716 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e040      	b.n	8005798 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	e03e      	b.n	8005798 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800571a:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005722:	491f      	ldr	r1, [pc, #124]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4313      	orrs	r3, r2
 8005728:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800572a:	f7fb ff91 	bl	8001650 <HAL_GetTick>
 800572e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005730:	e009      	b.n	8005746 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005732:	f7fb ff8d 	bl	8001650 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005740:	d901      	bls.n	8005746 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e028      	b.n	8005798 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005746:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800574e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005752:	d1ee      	bne.n	8005732 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b1e      	cmp	r3, #30
 8005758:	d008      	beq.n	800576c <HAL_PWREx_ConfigSupply+0x7c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b2e      	cmp	r3, #46	; 0x2e
 800575e:	d005      	beq.n	800576c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b1d      	cmp	r3, #29
 8005764:	d002      	beq.n	800576c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b2d      	cmp	r3, #45	; 0x2d
 800576a:	d114      	bne.n	8005796 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800576c:	f7fb ff70 	bl	8001650 <HAL_GetTick>
 8005770:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005772:	e009      	b.n	8005788 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005774:	f7fb ff6c 	bl	8001650 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005782:	d901      	bls.n	8005788 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e007      	b.n	8005798 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005788:	4b05      	ldr	r3, [pc, #20]	; (80057a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005794:	d1ee      	bne.n	8005774 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	58024800 	.word	0x58024800

080057a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	; 0x30
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e3ff      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 8087 	beq.w	80058d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c4:	4b99      	ldr	r3, [pc, #612]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057ce:	4b97      	ldr	r3, [pc, #604]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80057d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d007      	beq.n	80057ea <HAL_RCC_OscConfig+0x46>
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b18      	cmp	r3, #24
 80057de:	d110      	bne.n	8005802 <HAL_RCC_OscConfig+0x5e>
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d10b      	bne.n	8005802 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ea:	4b90      	ldr	r3, [pc, #576]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d06c      	beq.n	80058d0 <HAL_RCC_OscConfig+0x12c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d168      	bne.n	80058d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e3d9      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580a:	d106      	bne.n	800581a <HAL_RCC_OscConfig+0x76>
 800580c:	4b87      	ldr	r3, [pc, #540]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a86      	ldr	r2, [pc, #536]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e02e      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10c      	bne.n	800583c <HAL_RCC_OscConfig+0x98>
 8005822:	4b82      	ldr	r3, [pc, #520]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a81      	ldr	r2, [pc, #516]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7e      	ldr	r2, [pc, #504]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	e01d      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005844:	d10c      	bne.n	8005860 <HAL_RCC_OscConfig+0xbc>
 8005846:	4b79      	ldr	r3, [pc, #484]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a78      	ldr	r2, [pc, #480]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800584c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4b76      	ldr	r3, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a75      	ldr	r2, [pc, #468]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	e00b      	b.n	8005878 <HAL_RCC_OscConfig+0xd4>
 8005860:	4b72      	ldr	r3, [pc, #456]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a71      	ldr	r2, [pc, #452]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586a:	6013      	str	r3, [r2, #0]
 800586c:	4b6f      	ldr	r3, [pc, #444]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6e      	ldr	r2, [pc, #440]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d013      	beq.n	80058a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005880:	f7fb fee6 	bl	8001650 <HAL_GetTick>
 8005884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005888:	f7fb fee2 	bl	8001650 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	; 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e38d      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800589a:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f0      	beq.n	8005888 <HAL_RCC_OscConfig+0xe4>
 80058a6:	e014      	b.n	80058d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a8:	f7fb fed2 	bl	8001650 <HAL_GetTick>
 80058ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058ae:	e008      	b.n	80058c2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058b0:	f7fb fece 	bl	8001650 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	; 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e379      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80058c2:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1f0      	bne.n	80058b0 <HAL_RCC_OscConfig+0x10c>
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80ae 	beq.w	8005a3c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058e0:	4b52      	ldr	r3, [pc, #328]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058ea:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_RCC_OscConfig+0x162>
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	2b18      	cmp	r3, #24
 80058fa:	d13a      	bne.n	8005972 <HAL_RCC_OscConfig+0x1ce>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d135      	bne.n	8005972 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005906:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_RCC_OscConfig+0x17a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e34b      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	f7fb fec5 	bl	80016ac <HAL_GetREVID>
 8005922:	4602      	mov	r2, r0
 8005924:	f241 0303 	movw	r3, #4099	; 0x1003
 8005928:	429a      	cmp	r2, r3
 800592a:	d817      	bhi.n	800595c <HAL_RCC_OscConfig+0x1b8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b40      	cmp	r3, #64	; 0x40
 8005932:	d108      	bne.n	8005946 <HAL_RCC_OscConfig+0x1a2>
 8005934:	4b3d      	ldr	r3, [pc, #244]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800593c:	4a3b      	ldr	r2, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800593e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005942:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005944:	e07a      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	031b      	lsls	r3, r3, #12
 8005954:	4935      	ldr	r1, [pc, #212]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800595a:	e06f      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595c:	4b33      	ldr	r3, [pc, #204]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	4930      	ldr	r1, [pc, #192]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005970:	e064      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d045      	beq.n	8005a06 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800597a:	4b2c      	ldr	r3, [pc, #176]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 0219 	bic.w	r2, r3, #25
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	4929      	ldr	r1, [pc, #164]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fb fe60 	bl	8001650 <HAL_GetTick>
 8005990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005994:	f7fb fe5c 	bl	8001650 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e307      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b2:	f7fb fe7b 	bl	80016ac <HAL_GetREVID>
 80059b6:	4602      	mov	r2, r0
 80059b8:	f241 0303 	movw	r3, #4099	; 0x1003
 80059bc:	429a      	cmp	r2, r3
 80059be:	d817      	bhi.n	80059f0 <HAL_RCC_OscConfig+0x24c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d108      	bne.n	80059da <HAL_RCC_OscConfig+0x236>
 80059c8:	4b18      	ldr	r3, [pc, #96]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059d0:	4a16      	ldr	r2, [pc, #88]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d6:	6053      	str	r3, [r2, #4]
 80059d8:	e030      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
 80059da:	4b14      	ldr	r3, [pc, #80]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	031b      	lsls	r3, r3, #12
 80059e8:	4910      	ldr	r1, [pc, #64]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	604b      	str	r3, [r1, #4]
 80059ee:	e025      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
 80059f0:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	061b      	lsls	r3, r3, #24
 80059fe:	490b      	ldr	r1, [pc, #44]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	e01a      	b.n	8005a3c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a08      	ldr	r2, [pc, #32]	; (8005a2c <HAL_RCC_OscConfig+0x288>)
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fb fe1d 	bl	8001650 <HAL_GetTick>
 8005a16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a1a:	f7fb fe19 	bl	8001650 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d903      	bls.n	8005a30 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e2c4      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
 8005a2c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a30:	4ba4      	ldr	r3, [pc, #656]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ee      	bne.n	8005a1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80a9 	beq.w	8005b9c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a4a:	4b9e      	ldr	r3, [pc, #632]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a54:	4b9b      	ldr	r3, [pc, #620]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d007      	beq.n	8005a70 <HAL_RCC_OscConfig+0x2cc>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	2b18      	cmp	r3, #24
 8005a64:	d13a      	bne.n	8005adc <HAL_RCC_OscConfig+0x338>
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 0303 	and.w	r3, r3, #3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d135      	bne.n	8005adc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a70:	4b94      	ldr	r3, [pc, #592]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_OscConfig+0x2e4>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2b80      	cmp	r3, #128	; 0x80
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e296      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a88:	f7fb fe10 	bl	80016ac <HAL_GetREVID>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d817      	bhi.n	8005ac6 <HAL_RCC_OscConfig+0x322>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	2b20      	cmp	r3, #32
 8005a9c:	d108      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x30c>
 8005a9e:	4b89      	ldr	r3, [pc, #548]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005aa6:	4a87      	ldr	r2, [pc, #540]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005aa8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aae:	e075      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ab0:	4b84      	ldr	r3, [pc, #528]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	069b      	lsls	r3, r3, #26
 8005abe:	4981      	ldr	r1, [pc, #516]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ac4:	e06a      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ac6:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	497b      	ldr	r1, [pc, #492]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ada:	e05f      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d042      	beq.n	8005b6a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ae4:	4b77      	ldr	r3, [pc, #476]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a76      	ldr	r2, [pc, #472]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fb fdae 	bl	8001650 <HAL_GetTick>
 8005af4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005af8:	f7fb fdaa 	bl	8001650 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e255      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b0a:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005b16:	f7fb fdc9 	bl	80016ac <HAL_GetREVID>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d817      	bhi.n	8005b54 <HAL_RCC_OscConfig+0x3b0>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	d108      	bne.n	8005b3e <HAL_RCC_OscConfig+0x39a>
 8005b2c:	4b65      	ldr	r3, [pc, #404]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b34:	4a63      	ldr	r2, [pc, #396]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b3a:	6053      	str	r3, [r2, #4]
 8005b3c:	e02e      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
 8005b3e:	4b61      	ldr	r3, [pc, #388]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	069b      	lsls	r3, r3, #26
 8005b4c:	495d      	ldr	r1, [pc, #372]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	604b      	str	r3, [r1, #4]
 8005b52:	e023      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
 8005b54:	4b5b      	ldr	r3, [pc, #364]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	061b      	lsls	r3, r3, #24
 8005b62:	4958      	ldr	r1, [pc, #352]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	60cb      	str	r3, [r1, #12]
 8005b68:	e018      	b.n	8005b9c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a55      	ldr	r2, [pc, #340]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b76:	f7fb fd6b 	bl	8001650 <HAL_GetTick>
 8005b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b7e:	f7fb fd67 	bl	8001650 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e212      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b90:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d036      	beq.n	8005c16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d019      	beq.n	8005be4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb0:	4b44      	ldr	r3, [pc, #272]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	4a43      	ldr	r2, [pc, #268]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005bb6:	f043 0301 	orr.w	r3, r3, #1
 8005bba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fb fd48 	bl	8001650 <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc4:	f7fb fd44 	bl	8001650 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e1ef      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bd6:	4b3b      	ldr	r3, [pc, #236]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x420>
 8005be2:	e018      	b.n	8005c16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be4:	4b37      	ldr	r3, [pc, #220]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	4a36      	ldr	r2, [pc, #216]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005bea:	f023 0301 	bic.w	r3, r3, #1
 8005bee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf0:	f7fb fd2e 	bl	8001650 <HAL_GetTick>
 8005bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf8:	f7fb fd2a 	bl	8001650 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e1d5      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d036      	beq.n	8005c90 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d019      	beq.n	8005c5e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c2a:	4b26      	ldr	r3, [pc, #152]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a25      	ldr	r2, [pc, #148]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c36:	f7fb fd0b 	bl	8001650 <HAL_GetTick>
 8005c3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c3e:	f7fb fd07 	bl	8001650 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e1b2      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c50:	4b1c      	ldr	r3, [pc, #112]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0f0      	beq.n	8005c3e <HAL_RCC_OscConfig+0x49a>
 8005c5c:	e018      	b.n	8005c90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a18      	ldr	r2, [pc, #96]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c6a:	f7fb fcf1 	bl	8001650 <HAL_GetTick>
 8005c6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c70:	e008      	b.n	8005c84 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c72:	f7fb fced 	bl	8001650 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e198      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c84:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <HAL_RCC_OscConfig+0x520>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f0      	bne.n	8005c72 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8085 	beq.w	8005da8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_RCC_OscConfig+0x524>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <HAL_RCC_OscConfig+0x524>)
 8005ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005caa:	f7fb fcd1 	bl	8001650 <HAL_GetTick>
 8005cae:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005cb0:	e00c      	b.n	8005ccc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005cb2:	f7fb fccd 	bl	8001650 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b64      	cmp	r3, #100	; 0x64
 8005cbe:	d905      	bls.n	8005ccc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e178      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ccc:	4b96      	ldr	r3, [pc, #600]	; (8005f28 <HAL_RCC_OscConfig+0x784>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ec      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d106      	bne.n	8005cee <HAL_RCC_OscConfig+0x54a>
 8005ce0:	4b92      	ldr	r3, [pc, #584]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a91      	ldr	r2, [pc, #580]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	e02d      	b.n	8005d4a <HAL_RCC_OscConfig+0x5a6>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x56c>
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a8c      	ldr	r2, [pc, #560]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005cfc:	f023 0301 	bic.w	r3, r3, #1
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
 8005d02:	4b8a      	ldr	r3, [pc, #552]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a89      	ldr	r2, [pc, #548]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d08:	f023 0304 	bic.w	r3, r3, #4
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0e:	e01c      	b.n	8005d4a <HAL_RCC_OscConfig+0x5a6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b05      	cmp	r3, #5
 8005d16:	d10c      	bne.n	8005d32 <HAL_RCC_OscConfig+0x58e>
 8005d18:	4b84      	ldr	r3, [pc, #528]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1c:	4a83      	ldr	r2, [pc, #524]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	6713      	str	r3, [r2, #112]	; 0x70
 8005d24:	4b81      	ldr	r3, [pc, #516]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a80      	ldr	r2, [pc, #512]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d2a:	f043 0301 	orr.w	r3, r3, #1
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	e00b      	b.n	8005d4a <HAL_RCC_OscConfig+0x5a6>
 8005d32:	4b7e      	ldr	r3, [pc, #504]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	4a7d      	ldr	r2, [pc, #500]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3e:	4b7b      	ldr	r3, [pc, #492]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a7a      	ldr	r2, [pc, #488]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d44:	f023 0304 	bic.w	r3, r3, #4
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d015      	beq.n	8005d7e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d52:	f7fb fc7d 	bl	8001650 <HAL_GetTick>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d58:	e00a      	b.n	8005d70 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d5a:	f7fb fc79 	bl	8001650 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e122      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d70:	4b6e      	ldr	r3, [pc, #440]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	f003 0302 	and.w	r3, r3, #2
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0ee      	beq.n	8005d5a <HAL_RCC_OscConfig+0x5b6>
 8005d7c:	e014      	b.n	8005da8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7e:	f7fb fc67 	bl	8001650 <HAL_GetTick>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d84:	e00a      	b.n	8005d9c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d86:	f7fb fc63 	bl	8001650 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d901      	bls.n	8005d9c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e10c      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d9c:	4b63      	ldr	r3, [pc, #396]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ee      	bne.n	8005d86 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8101 	beq.w	8005fb4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005db2:	4b5e      	ldr	r3, [pc, #376]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dba:	2b18      	cmp	r3, #24
 8005dbc:	f000 80bc 	beq.w	8005f38 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f040 8095 	bne.w	8005ef4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dca:	4b58      	ldr	r3, [pc, #352]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a57      	ldr	r2, [pc, #348]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd6:	f7fb fc3b 	bl	8001650 <HAL_GetTick>
 8005dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dde:	f7fb fc37 	bl	8001650 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e0e2      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df0:	4b4e      	ldr	r3, [pc, #312]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f0      	bne.n	8005dde <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dfc:	4b4b      	ldr	r3, [pc, #300]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e00:	4b4b      	ldr	r3, [pc, #300]	; (8005f30 <HAL_RCC_OscConfig+0x78c>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e0c:	0112      	lsls	r2, r2, #4
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	4946      	ldr	r1, [pc, #280]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	628b      	str	r3, [r1, #40]	; 0x28
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	3b01      	subs	r3, #1
 8005e26:	025b      	lsls	r3, r3, #9
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	3b01      	subs	r3, #1
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e46:	4939      	ldr	r1, [pc, #228]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e4c:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e58:	4b34      	ldr	r3, [pc, #208]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e5c:	4b35      	ldr	r3, [pc, #212]	; (8005f34 <HAL_RCC_OscConfig+0x790>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e64:	00d2      	lsls	r2, r2, #3
 8005e66:	4931      	ldr	r1, [pc, #196]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e6c:	4b2f      	ldr	r3, [pc, #188]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	f023 020c 	bic.w	r2, r3, #12
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	492c      	ldr	r1, [pc, #176]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e7e:	4b2b      	ldr	r3, [pc, #172]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	f023 0202 	bic.w	r2, r3, #2
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	4928      	ldr	r1, [pc, #160]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e90:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e9c:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	4a1c      	ldr	r2, [pc, #112]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005eba:	f043 0301 	orr.w	r3, r3, #1
 8005ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec0:	4b1a      	ldr	r3, [pc, #104]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a19      	ldr	r2, [pc, #100]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fb fbc0 	bl	8001650 <HAL_GetTick>
 8005ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed4:	f7fb fbbc 	bl	8001650 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e067      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f0      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x730>
 8005ef2:	e05f      	b.n	8005fb4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ef4:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fb fba6 	bl	8001650 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f08:	f7fb fba2 	bl	8001650 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e04d      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f1a:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <HAL_RCC_OscConfig+0x788>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x764>
 8005f26:	e045      	b.n	8005fb4 <HAL_RCC_OscConfig+0x810>
 8005f28:	58024800 	.word	0x58024800
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	fffffc0c 	.word	0xfffffc0c
 8005f34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f38:	4b21      	ldr	r3, [pc, #132]	; (8005fc0 <HAL_RCC_OscConfig+0x81c>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f3e:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <HAL_RCC_OscConfig+0x81c>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d031      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d12a      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d122      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d11a      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	0a5b      	lsrs	r3, r3, #9
 8005f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f86:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d111      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d108      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	0e1b      	lsrs	r3, r3, #24
 8005fa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3730      	adds	r7, #48	; 0x30
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	58024400 	.word	0x58024400

08005fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e19c      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd8:	4b8a      	ldr	r3, [pc, #552]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d910      	bls.n	8006008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe6:	4b87      	ldr	r3, [pc, #540]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 020f 	bic.w	r2, r3, #15
 8005fee:	4985      	ldr	r1, [pc, #532]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff6:	4b83      	ldr	r3, [pc, #524]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	d001      	beq.n	8006008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e184      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d010      	beq.n	8006036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691a      	ldr	r2, [r3, #16]
 8006018:	4b7b      	ldr	r3, [pc, #492]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006020:	429a      	cmp	r2, r3
 8006022:	d908      	bls.n	8006036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006024:	4b78      	ldr	r3, [pc, #480]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	4975      	ldr	r1, [pc, #468]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006032:	4313      	orrs	r3, r2
 8006034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d010      	beq.n	8006064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695a      	ldr	r2, [r3, #20]
 8006046:	4b70      	ldr	r3, [pc, #448]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800604e:	429a      	cmp	r2, r3
 8006050:	d908      	bls.n	8006064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006052:	4b6d      	ldr	r3, [pc, #436]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006054:	69db      	ldr	r3, [r3, #28]
 8006056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	496a      	ldr	r1, [pc, #424]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006060:	4313      	orrs	r3, r2
 8006062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b00      	cmp	r3, #0
 800606e:	d010      	beq.n	8006092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	4b64      	ldr	r3, [pc, #400]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800607c:	429a      	cmp	r2, r3
 800607e:	d908      	bls.n	8006092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006080:	4b61      	ldr	r3, [pc, #388]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	495e      	ldr	r1, [pc, #376]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 800608e:	4313      	orrs	r3, r2
 8006090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	4b59      	ldr	r3, [pc, #356]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d908      	bls.n	80060c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80060ae:	4b56      	ldr	r3, [pc, #344]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4953      	ldr	r1, [pc, #332]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d010      	beq.n	80060ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	4b4d      	ldr	r3, [pc, #308]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	429a      	cmp	r2, r3
 80060da:	d908      	bls.n	80060ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060dc:	4b4a      	ldr	r3, [pc, #296]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f023 020f 	bic.w	r2, r3, #15
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4947      	ldr	r1, [pc, #284]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d055      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060fa:	4b43      	ldr	r3, [pc, #268]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	4940      	ldr	r1, [pc, #256]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006108:	4313      	orrs	r3, r2
 800610a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d107      	bne.n	8006124 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d121      	bne.n	8006164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0f6      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d107      	bne.n	800613c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800612c:	4b36      	ldr	r3, [pc, #216]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d115      	bne.n	8006164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0ea      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d107      	bne.n	8006154 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006144:	4b30      	ldr	r3, [pc, #192]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e0de      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006154:	4b2c      	ldr	r3, [pc, #176]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0d6      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006164:	4b28      	ldr	r3, [pc, #160]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	f023 0207 	bic.w	r2, r3, #7
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4925      	ldr	r1, [pc, #148]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006172:	4313      	orrs	r3, r2
 8006174:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006176:	f7fb fa6b 	bl	8001650 <HAL_GetTick>
 800617a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800617c:	e00a      	b.n	8006194 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800617e:	f7fb fa67 	bl	8001650 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	f241 3288 	movw	r2, #5000	; 0x1388
 800618c:	4293      	cmp	r3, r2
 800618e:	d901      	bls.n	8006194 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e0be      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006194:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d1eb      	bne.n	800617e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d010      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	429a      	cmp	r2, r3
 80061c0:	d208      	bcs.n	80061d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061c2:	4b11      	ldr	r3, [pc, #68]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f023 020f 	bic.w	r2, r3, #15
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	490e      	ldr	r1, [pc, #56]	; (8006208 <HAL_RCC_ClockConfig+0x244>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d214      	bcs.n	800620c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e2:	4b08      	ldr	r3, [pc, #32]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f023 020f 	bic.w	r2, r3, #15
 80061ea:	4906      	ldr	r1, [pc, #24]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b04      	ldr	r3, [pc, #16]	; (8006204 <HAL_RCC_ClockConfig+0x240>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d005      	beq.n	800620c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e086      	b.n	8006312 <HAL_RCC_ClockConfig+0x34e>
 8006204:	52002000 	.word	0x52002000
 8006208:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d010      	beq.n	800623a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	4b3f      	ldr	r3, [pc, #252]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006224:	429a      	cmp	r2, r3
 8006226:	d208      	bcs.n	800623a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006228:	4b3c      	ldr	r3, [pc, #240]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	4939      	ldr	r1, [pc, #228]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 8006236:	4313      	orrs	r3, r2
 8006238:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0308 	and.w	r3, r3, #8
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	4b34      	ldr	r3, [pc, #208]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006252:	429a      	cmp	r2, r3
 8006254:	d208      	bcs.n	8006268 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006256:	4b31      	ldr	r3, [pc, #196]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	492e      	ldr	r1, [pc, #184]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 8006264:	4313      	orrs	r3, r2
 8006266:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699a      	ldr	r2, [r3, #24]
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006280:	429a      	cmp	r2, r3
 8006282:	d208      	bcs.n	8006296 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006284:	4b25      	ldr	r3, [pc, #148]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	4922      	ldr	r1, [pc, #136]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 8006292:	4313      	orrs	r3, r2
 8006294:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	4b1d      	ldr	r3, [pc, #116]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d208      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062b2:	4b1a      	ldr	r3, [pc, #104]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4917      	ldr	r1, [pc, #92]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062c4:	f000 f834 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 80062c8:	4601      	mov	r1, r0
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	4a12      	ldr	r2, [pc, #72]	; (8006320 <HAL_RCC_ClockConfig+0x35c>)
 80062d6:	5cd3      	ldrb	r3, [r2, r3]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	fa21 f303 	lsr.w	r3, r1, r3
 80062e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062e2:	4b0e      	ldr	r3, [pc, #56]	; (800631c <HAL_RCC_ClockConfig+0x358>)
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <HAL_RCC_ClockConfig+0x35c>)
 80062ec:	5cd3      	ldrb	r3, [r2, r3]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	fa22 f303 	lsr.w	r3, r2, r3
 80062f8:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <HAL_RCC_ClockConfig+0x360>)
 80062fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062fc:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <HAL_RCC_ClockConfig+0x364>)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <HAL_RCC_ClockConfig+0x368>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7fb f958 	bl	80015bc <HAL_InitTick>
 800630c:	4603      	mov	r3, r0
 800630e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006310:	7bfb      	ldrb	r3, [r7, #15]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	58024400 	.word	0x58024400
 8006320:	08020884 	.word	0x08020884
 8006324:	24000004 	.word	0x24000004
 8006328:	24000000 	.word	0x24000000
 800632c:	24000008 	.word	0x24000008

08006330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006330:	b480      	push	{r7}
 8006332:	b089      	sub	sp, #36	; 0x24
 8006334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006336:	4baf      	ldr	r3, [pc, #700]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800633e:	2b18      	cmp	r3, #24
 8006340:	f200 814e 	bhi.w	80065e0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	080063b1 	.word	0x080063b1
 8006350:	080065e1 	.word	0x080065e1
 8006354:	080065e1 	.word	0x080065e1
 8006358:	080065e1 	.word	0x080065e1
 800635c:	080065e1 	.word	0x080065e1
 8006360:	080065e1 	.word	0x080065e1
 8006364:	080065e1 	.word	0x080065e1
 8006368:	080065e1 	.word	0x080065e1
 800636c:	080063d7 	.word	0x080063d7
 8006370:	080065e1 	.word	0x080065e1
 8006374:	080065e1 	.word	0x080065e1
 8006378:	080065e1 	.word	0x080065e1
 800637c:	080065e1 	.word	0x080065e1
 8006380:	080065e1 	.word	0x080065e1
 8006384:	080065e1 	.word	0x080065e1
 8006388:	080065e1 	.word	0x080065e1
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080065e1 	.word	0x080065e1
 8006394:	080065e1 	.word	0x080065e1
 8006398:	080065e1 	.word	0x080065e1
 800639c:	080065e1 	.word	0x080065e1
 80063a0:	080065e1 	.word	0x080065e1
 80063a4:	080065e1 	.word	0x080065e1
 80063a8:	080065e1 	.word	0x080065e1
 80063ac:	080063e3 	.word	0x080063e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b0:	4b90      	ldr	r3, [pc, #576]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0320 	and.w	r3, r3, #32
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063bc:	4b8d      	ldr	r3, [pc, #564]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	08db      	lsrs	r3, r3, #3
 80063c2:	f003 0303 	and.w	r3, r3, #3
 80063c6:	4a8c      	ldr	r2, [pc, #560]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
 80063cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063ce:	e10a      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063d0:	4b89      	ldr	r3, [pc, #548]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80063d2:	61bb      	str	r3, [r7, #24]
    break;
 80063d4:	e107      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063d6:	4b89      	ldr	r3, [pc, #548]	; (80065fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80063d8:	61bb      	str	r3, [r7, #24]
    break;
 80063da:	e104      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063dc:	4b88      	ldr	r3, [pc, #544]	; (8006600 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80063de:	61bb      	str	r3, [r7, #24]
    break;
 80063e0:	e101      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063e2:	4b84      	ldr	r3, [pc, #528]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063ec:	4b81      	ldr	r3, [pc, #516]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006402:	4b7c      	ldr	r3, [pc, #496]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	08db      	lsrs	r3, r3, #3
 8006408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	fb02 f303 	mul.w	r3, r2, r3
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800641a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80da 	beq.w	80065da <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d05a      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800642c:	2b01      	cmp	r3, #1
 800642e:	d302      	bcc.n	8006436 <HAL_RCC_GetSysClockFreq+0x106>
 8006430:	2b02      	cmp	r3, #2
 8006432:	d078      	beq.n	8006526 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006434:	e099      	b.n	800656a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006436:	4b6f      	ldr	r3, [pc, #444]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0320 	and.w	r3, r3, #32
 800643e:	2b00      	cmp	r3, #0
 8006440:	d02d      	beq.n	800649e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006442:	4b6c      	ldr	r3, [pc, #432]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	08db      	lsrs	r3, r3, #3
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	4a6a      	ldr	r2, [pc, #424]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800644e:	fa22 f303 	lsr.w	r3, r2, r3
 8006452:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	ee07 3a90 	vmov	s15, r3
 8006464:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006468:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646c:	4b61      	ldr	r3, [pc, #388]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800646e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006480:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006498:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800649c:	e087      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006608 <HAL_RCC_GetSysClockFreq+0x2d8>
 80064ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b0:	4b50      	ldr	r3, [pc, #320]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006604 <HAL_RCC_GetSysClockFreq+0x2d4>
 80064c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064e0:	e065      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	ee07 3a90 	vmov	s15, r3
 80064e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ec:	eddf 6a47 	vldr	s13, [pc, #284]	; 800660c <HAL_RCC_GetSysClockFreq+0x2dc>
 80064f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f4:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80064f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fc:	ee07 3a90 	vmov	s15, r3
 8006500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006504:	ed97 6a02 	vldr	s12, [r7, #8]
 8006508:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006604 <HAL_RCC_GetSysClockFreq+0x2d4>
 800650c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006520:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006524:	e043      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006530:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006610 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006538:	4b2e      	ldr	r3, [pc, #184]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800653a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006540:	ee07 3a90 	vmov	s15, r3
 8006544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006548:	ed97 6a02 	vldr	s12, [r7, #8]
 800654c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006564:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006568:	e021      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006574:	eddf 6a25 	vldr	s13, [pc, #148]	; 800660c <HAL_RCC_GetSysClockFreq+0x2dc>
 8006578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657c:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	ee07 3a90 	vmov	s15, r3
 8006588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006590:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006604 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ac:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80065ae:	4b11      	ldr	r3, [pc, #68]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80065b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b2:	0a5b      	lsrs	r3, r3, #9
 80065b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b8:	3301      	adds	r3, #1
 80065ba:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d2:	ee17 3a90 	vmov	r3, s15
 80065d6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065d8:	e005      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61bb      	str	r3, [r7, #24]
    break;
 80065de:	e002      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80065e2:	61bb      	str	r3, [r7, #24]
    break;
 80065e4:	bf00      	nop
  }

  return sysclockfreq;
 80065e6:	69bb      	ldr	r3, [r7, #24]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3724      	adds	r7, #36	; 0x24
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr
 80065f4:	58024400 	.word	0x58024400
 80065f8:	03d09000 	.word	0x03d09000
 80065fc:	003d0900 	.word	0x003d0900
 8006600:	017d7840 	.word	0x017d7840
 8006604:	46000000 	.word	0x46000000
 8006608:	4c742400 	.word	0x4c742400
 800660c:	4a742400 	.word	0x4a742400
 8006610:	4bbebc20 	.word	0x4bbebc20

08006614 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800661a:	f7ff fe89 	bl	8006330 <HAL_RCC_GetSysClockFreq>
 800661e:	4601      	mov	r1, r0
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_RCC_GetHCLKFreq+0x50>)
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	0a1b      	lsrs	r3, r3, #8
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	4a0f      	ldr	r2, [pc, #60]	; (8006668 <HAL_RCC_GetHCLKFreq+0x54>)
 800662c:	5cd3      	ldrb	r3, [r2, r3]
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	fa21 f303 	lsr.w	r3, r1, r3
 8006636:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <HAL_RCC_GetHCLKFreq+0x50>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <HAL_RCC_GetHCLKFreq+0x54>)
 8006642:	5cd3      	ldrb	r3, [r2, r3]
 8006644:	f003 031f 	and.w	r3, r3, #31
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	fa22 f303 	lsr.w	r3, r2, r3
 800664e:	4a07      	ldr	r2, [pc, #28]	; (800666c <HAL_RCC_GetHCLKFreq+0x58>)
 8006650:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006652:	4a07      	ldr	r2, [pc, #28]	; (8006670 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <HAL_RCC_GetHCLKFreq+0x58>)
 800665a:	681b      	ldr	r3, [r3, #0]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	58024400 	.word	0x58024400
 8006668:	08020884 	.word	0x08020884
 800666c:	24000004 	.word	0x24000004
 8006670:	24000000 	.word	0x24000000

08006674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006678:	f7ff ffcc 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 800667c:	4601      	mov	r1, r0
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	091b      	lsrs	r3, r3, #4
 8006684:	f003 0307 	and.w	r3, r3, #7
 8006688:	4a04      	ldr	r2, [pc, #16]	; (800669c <HAL_RCC_GetPCLK1Freq+0x28>)
 800668a:	5cd3      	ldrb	r3, [r2, r3]
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006694:	4618      	mov	r0, r3
 8006696:	bd80      	pop	{r7, pc}
 8006698:	58024400 	.word	0x58024400
 800669c:	08020884 	.word	0x08020884

080066a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80066a4:	f7ff ffb6 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 80066a8:	4601      	mov	r1, r0
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	0a1b      	lsrs	r3, r3, #8
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	4a04      	ldr	r2, [pc, #16]	; (80066c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066b6:	5cd3      	ldrb	r3, [r2, r3]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	58024400 	.word	0x58024400
 80066c8:	08020884 	.word	0x08020884

080066cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066d8:	2300      	movs	r3, #0
 80066da:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d03d      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f0:	d013      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80066f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f6:	d802      	bhi.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x32>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x40>
 80066fc:	e01f      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x72>
 80066fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006702:	d013      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006704:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006708:	d01c      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800670a:	e018      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800670c:	4baf      	ldr	r3, [pc, #700]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	4aae      	ldr	r2, [pc, #696]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006716:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006718:	e015      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3304      	adds	r3, #4
 800671e:	2102      	movs	r1, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f001 fd33 	bl	800818c <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800672a:	e00c      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3324      	adds	r3, #36	; 0x24
 8006730:	2102      	movs	r1, #2
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fddc 	bl	80082f0 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800673c:	e003      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	75fb      	strb	r3, [r7, #23]
      break;
 8006742:	e000      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006744:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d109      	bne.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800674c:	4b9f      	ldr	r3, [pc, #636]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800674e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006758:	499c      	ldr	r1, [pc, #624]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800675a:	4313      	orrs	r3, r2
 800675c:	650b      	str	r3, [r1, #80]	; 0x50
 800675e:	e001      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676c:	2b00      	cmp	r3, #0
 800676e:	d03d      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006774:	2b04      	cmp	r3, #4
 8006776:	d826      	bhi.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	08006795 	.word	0x08006795
 8006784:	080067a3 	.word	0x080067a3
 8006788:	080067b5 	.word	0x080067b5
 800678c:	080067cd 	.word	0x080067cd
 8006790:	080067cd 	.word	0x080067cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006794:	4b8d      	ldr	r3, [pc, #564]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006798:	4a8c      	ldr	r2, [pc, #560]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800679a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067a0:	e015      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	3304      	adds	r3, #4
 80067a6:	2100      	movs	r1, #0
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fcef 	bl	800818c <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b2:	e00c      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3324      	adds	r3, #36	; 0x24
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 fd98 	bl	80082f0 <RCCEx_PLL3_Config>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	75fb      	strb	r3, [r7, #23]
      break;
 80067ca:	e000      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80067cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067ce:	7dfb      	ldrb	r3, [r7, #23]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067d4:	4b7d      	ldr	r3, [pc, #500]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067d8:	f023 0207 	bic.w	r2, r3, #7
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e0:	497a      	ldr	r1, [pc, #488]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	650b      	str	r3, [r1, #80]	; 0x50
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d03e      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	d01c      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006800:	2b80      	cmp	r3, #128	; 0x80
 8006802:	d804      	bhi.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	d00d      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800680c:	e01e      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800680e:	2bc0      	cmp	r3, #192	; 0xc0
 8006810:	d01f      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006816:	d01e      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006818:	e018      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681a:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800681c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681e:	4a6b      	ldr	r2, [pc, #428]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006824:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006826:	e017      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3304      	adds	r3, #4
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f001 fcac 	bl	800818c <RCCEx_PLL2_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006838:	e00e      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	3324      	adds	r3, #36	; 0x24
 800683e:	2100      	movs	r1, #0
 8006840:	4618      	mov	r0, r3
 8006842:	f001 fd55 	bl	80082f0 <RCCEx_PLL3_Config>
 8006846:	4603      	mov	r3, r0
 8006848:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800684a:	e005      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	75fb      	strb	r3, [r7, #23]
      break;
 8006850:	e002      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006852:	bf00      	nop
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800685e:	4b5b      	ldr	r3, [pc, #364]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686a:	4958      	ldr	r1, [pc, #352]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800686c:	4313      	orrs	r3, r2
 800686e:	650b      	str	r3, [r1, #80]	; 0x50
 8006870:	e001      	b.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687e:	2b00      	cmp	r3, #0
 8006880:	d044      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688c:	d01f      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x202>
 800688e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006892:	d805      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006898:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800689c:	d00e      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800689e:	e01f      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80068a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80068a4:	d01f      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80068a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068aa:	d01e      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80068ac:	e018      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068ae:	4b47      	ldr	r3, [pc, #284]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	4a46      	ldr	r2, [pc, #280]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068ba:	e017      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3304      	adds	r3, #4
 80068c0:	2100      	movs	r1, #0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 fc62 	bl	800818c <RCCEx_PLL2_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068cc:	e00e      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3324      	adds	r3, #36	; 0x24
 80068d2:	2100      	movs	r1, #0
 80068d4:	4618      	mov	r0, r3
 80068d6:	f001 fd0b 	bl	80082f0 <RCCEx_PLL3_Config>
 80068da:	4603      	mov	r3, r0
 80068dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068de:	e005      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	75fb      	strb	r3, [r7, #23]
      break;
 80068e4:	e002      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80068e6:	bf00      	nop
 80068e8:	e000      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80068ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068f2:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80068f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006900:	4932      	ldr	r1, [pc, #200]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006902:	4313      	orrs	r3, r2
 8006904:	658b      	str	r3, [r1, #88]	; 0x58
 8006906:	e001      	b.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006914:	2b00      	cmp	r3, #0
 8006916:	d044      	beq.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800691e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006922:	d01f      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006928:	d805      	bhi.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800692e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006932:	d00e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006934:	e01f      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800693a:	d01f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800693c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006940:	d01e      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006942:	e018      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b21      	ldr	r3, [pc, #132]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a20      	ldr	r2, [pc, #128]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006950:	e017      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2100      	movs	r1, #0
 8006958:	4618      	mov	r0, r3
 800695a:	f001 fc17 	bl	800818c <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006962:	e00e      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3324      	adds	r3, #36	; 0x24
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fcc0 	bl	80082f0 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006974:	e005      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	75fb      	strb	r3, [r7, #23]
      break;
 800697a:	e002      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006980:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800698a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800698c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006996:	490d      	ldr	r1, [pc, #52]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006998:	4313      	orrs	r3, r2
 800699a:	658b      	str	r3, [r1, #88]	; 0x58
 800699c:	e001      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699e:	7dfb      	ldrb	r3, [r7, #23]
 80069a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d035      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d00c      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d802      	bhi.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d01b      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80069be:	e017      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d00c      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x312>
 80069c4:	2b30      	cmp	r3, #48	; 0x30
 80069c6:	d018      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80069c8:	e012      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80069ca:	bf00      	nop
 80069cc:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069d0:	4baf      	ldr	r3, [pc, #700]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d4:	4aae      	ldr	r2, [pc, #696]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80069d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069dc:	e00e      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	3304      	adds	r3, #4
 80069e2:	2102      	movs	r1, #2
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 fbd1 	bl	800818c <RCCEx_PLL2_Config>
 80069ea:	4603      	mov	r3, r0
 80069ec:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069ee:	e005      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
      break;
 80069f4:	e002      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80069fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a02:	4ba3      	ldr	r3, [pc, #652]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	49a0      	ldr	r1, [pc, #640]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a14:	e001      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d042      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2e:	d01f      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a34:	d805      	bhi.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a3e:	d00e      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006a40:	e01f      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8006a42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a46:	d01f      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a4c:	d01e      	beq.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006a4e:	e018      	b.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4b8f      	ldr	r3, [pc, #572]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	4a8e      	ldr	r2, [pc, #568]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a5c:	e017      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2100      	movs	r1, #0
 8006a64:	4618      	mov	r0, r3
 8006a66:	f001 fb91 	bl	800818c <RCCEx_PLL2_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a6e:	e00e      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3324      	adds	r3, #36	; 0x24
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f001 fc3a 	bl	80082f0 <RCCEx_PLL3_Config>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a80:	e005      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	75fb      	strb	r3, [r7, #23]
      break;
 8006a86:	e002      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a88:	bf00      	nop
 8006a8a:	e000      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a94:	4b7e      	ldr	r3, [pc, #504]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa0:	497b      	ldr	r1, [pc, #492]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	650b      	str	r3, [r1, #80]	; 0x50
 8006aa6:	e001      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d042      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac0:	d01b      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006ac2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ac6:	d805      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d022      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006ad2:	e01b      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006ad4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ad8:	d01d      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ade:	d01c      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006ae0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ae4:	d01b      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006ae6:	e011      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	2101      	movs	r1, #1
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fb4c 	bl	800818c <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006af8:	e012      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3324      	adds	r3, #36	; 0x24
 8006afe:	2101      	movs	r1, #1
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fbf5 	bl	80082f0 <RCCEx_PLL3_Config>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b0a:	e009      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b12:	bf00      	nop
 8006b14:	e004      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b26:	4b5a      	ldr	r3, [pc, #360]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	4957      	ldr	r1, [pc, #348]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	650b      	str	r3, [r1, #80]	; 0x50
 8006b38:	e001      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d044      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b54:	d01b      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5a:	d805      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d022      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b64:	d00a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8006b66:	e01b      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d01d      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b72:	d01c      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8006b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b78:	d01b      	beq.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006b7a:	e011      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	2101      	movs	r1, #1
 8006b82:	4618      	mov	r0, r3
 8006b84:	f001 fb02 	bl	800818c <RCCEx_PLL2_Config>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b8c:	e012      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3324      	adds	r3, #36	; 0x24
 8006b92:	2101      	movs	r1, #1
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fbab 	bl	80082f0 <RCCEx_PLL3_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006b9e:	e009      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ba4:	e006      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006bb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bba:	4b35      	ldr	r3, [pc, #212]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bc8:	4931      	ldr	r1, [pc, #196]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	658b      	str	r3, [r1, #88]	; 0x58
 8006bce:	e001      	b.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bd0:	7dfb      	ldrb	r3, [r7, #23]
 8006bd2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02d      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006be8:	d005      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bee:	d009      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d013      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006bf4:	e00f      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf6:	4b26      	ldr	r3, [pc, #152]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfa:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c02:	e00c      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3304      	adds	r3, #4
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fabe 	bl	800818c <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c14:	e003      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75fb      	strb	r3, [r7, #23]
      break;
 8006c1a:	e000      	b.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d109      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c24:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c30:	4917      	ldr	r1, [pc, #92]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	650b      	str	r3, [r1, #80]	; 0x50
 8006c36:	e001      	b.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d035      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d81b      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006c50:	a201      	add	r2, pc, #4	; (adr r2, 8006c58 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8006c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c56:	bf00      	nop
 8006c58:	08006c95 	.word	0x08006c95
 8006c5c:	08006c69 	.word	0x08006c69
 8006c60:	08006c77 	.word	0x08006c77
 8006c64:	08006c95 	.word	0x08006c95
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c68:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4a08      	ldr	r2, [pc, #32]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c74:	e00f      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 fa85 	bl	800818c <RCCEx_PLL2_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c86:	e006      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c8c:	e003      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006c8e:	bf00      	nop
 8006c90:	58024400 	.word	0x58024400
      break;
 8006c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c9c:	4bba      	ldr	r3, [pc, #744]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ca0:	f023 0203 	bic.w	r2, r3, #3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	49b7      	ldr	r1, [pc, #732]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cae:	e001      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb0:	7dfb      	ldrb	r3, [r7, #23]
 8006cb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8086 	beq.w	8006dce <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cc2:	4bb2      	ldr	r3, [pc, #712]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4ab1      	ldr	r2, [pc, #708]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cce:	f7fa fcbf 	bl	8001650 <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd4:	e009      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cd6:	f7fa fcbb 	bl	8001650 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b64      	cmp	r3, #100	; 0x64
 8006ce2:	d902      	bls.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	75fb      	strb	r3, [r7, #23]
        break;
 8006ce8:	e005      	b.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cea:	4ba8      	ldr	r3, [pc, #672]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0ef      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d166      	bne.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cfc:	4ba2      	ldr	r3, [pc, #648]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d06:	4053      	eors	r3, r2
 8006d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d013      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d10:	4b9d      	ldr	r3, [pc, #628]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d18:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d1a:	4b9b      	ldr	r3, [pc, #620]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4a9a      	ldr	r2, [pc, #616]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d24:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d26:	4b98      	ldr	r3, [pc, #608]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a97      	ldr	r2, [pc, #604]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d30:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d32:	4a95      	ldr	r2, [pc, #596]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d42:	d115      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fa fc84 	bl	8001650 <HAL_GetTick>
 8006d48:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d4a:	e00b      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fa fc80 	bl	8001650 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d902      	bls.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	75fb      	strb	r3, [r7, #23]
            break;
 8006d62:	e005      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d64:	4b88      	ldr	r3, [pc, #544]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ed      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d126      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d84:	d10d      	bne.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8006d86:	4b80      	ldr	r3, [pc, #512]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d94:	0919      	lsrs	r1, r3, #4
 8006d96:	4b7e      	ldr	r3, [pc, #504]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006d98:	400b      	ands	r3, r1
 8006d9a:	497b      	ldr	r1, [pc, #492]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	610b      	str	r3, [r1, #16]
 8006da0:	e005      	b.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006da2:	4b79      	ldr	r3, [pc, #484]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	4a78      	ldr	r2, [pc, #480]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006da8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dac:	6113      	str	r3, [r2, #16]
 8006dae:	4b76      	ldr	r3, [pc, #472]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006db0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dbc:	4972      	ldr	r1, [pc, #456]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	670b      	str	r3, [r1, #112]	; 0x70
 8006dc2:	e004      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	75bb      	strb	r3, [r7, #22]
 8006dc8:	e001      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dca:	7dfb      	ldrb	r3, [r7, #23]
 8006dcc:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d07d      	beq.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dde:	2b28      	cmp	r3, #40	; 0x28
 8006de0:	d866      	bhi.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006de2:	a201      	add	r2, pc, #4	; (adr r2, 8006de8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006eb7 	.word	0x08006eb7
 8006dec:	08006eb1 	.word	0x08006eb1
 8006df0:	08006eb1 	.word	0x08006eb1
 8006df4:	08006eb1 	.word	0x08006eb1
 8006df8:	08006eb1 	.word	0x08006eb1
 8006dfc:	08006eb1 	.word	0x08006eb1
 8006e00:	08006eb1 	.word	0x08006eb1
 8006e04:	08006eb1 	.word	0x08006eb1
 8006e08:	08006e8d 	.word	0x08006e8d
 8006e0c:	08006eb1 	.word	0x08006eb1
 8006e10:	08006eb1 	.word	0x08006eb1
 8006e14:	08006eb1 	.word	0x08006eb1
 8006e18:	08006eb1 	.word	0x08006eb1
 8006e1c:	08006eb1 	.word	0x08006eb1
 8006e20:	08006eb1 	.word	0x08006eb1
 8006e24:	08006eb1 	.word	0x08006eb1
 8006e28:	08006e9f 	.word	0x08006e9f
 8006e2c:	08006eb1 	.word	0x08006eb1
 8006e30:	08006eb1 	.word	0x08006eb1
 8006e34:	08006eb1 	.word	0x08006eb1
 8006e38:	08006eb1 	.word	0x08006eb1
 8006e3c:	08006eb1 	.word	0x08006eb1
 8006e40:	08006eb1 	.word	0x08006eb1
 8006e44:	08006eb1 	.word	0x08006eb1
 8006e48:	08006eb7 	.word	0x08006eb7
 8006e4c:	08006eb1 	.word	0x08006eb1
 8006e50:	08006eb1 	.word	0x08006eb1
 8006e54:	08006eb1 	.word	0x08006eb1
 8006e58:	08006eb1 	.word	0x08006eb1
 8006e5c:	08006eb1 	.word	0x08006eb1
 8006e60:	08006eb1 	.word	0x08006eb1
 8006e64:	08006eb1 	.word	0x08006eb1
 8006e68:	08006eb7 	.word	0x08006eb7
 8006e6c:	08006eb1 	.word	0x08006eb1
 8006e70:	08006eb1 	.word	0x08006eb1
 8006e74:	08006eb1 	.word	0x08006eb1
 8006e78:	08006eb1 	.word	0x08006eb1
 8006e7c:	08006eb1 	.word	0x08006eb1
 8006e80:	08006eb1 	.word	0x08006eb1
 8006e84:	08006eb1 	.word	0x08006eb1
 8006e88:	08006eb7 	.word	0x08006eb7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3304      	adds	r3, #4
 8006e90:	2101      	movs	r1, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f97a 	bl	800818c <RCCEx_PLL2_Config>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006e9c:	e00c      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3324      	adds	r3, #36	; 0x24
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f001 fa23 	bl	80082f0 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb8:	7dfb      	ldrb	r3, [r7, #23]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d109      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ebe:	4b32      	ldr	r3, [pc, #200]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eca:	492f      	ldr	r1, [pc, #188]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	654b      	str	r3, [r1, #84]	; 0x54
 8006ed0:	e001      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	7dfb      	ldrb	r3, [r7, #23]
 8006ed4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d037      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d820      	bhi.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f33 	.word	0x08006f33
 8006ef4:	08006f09 	.word	0x08006f09
 8006ef8:	08006f1b 	.word	0x08006f1b
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f33 	.word	0x08006f33
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f001 f93c 	bl	800818c <RCCEx_PLL2_Config>
 8006f14:	4603      	mov	r3, r0
 8006f16:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f18:	e00c      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	3324      	adds	r3, #36	; 0x24
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4618      	mov	r0, r3
 8006f22:	f001 f9e5 	bl	80082f0 <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f2a:	e003      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f30:	e000      	b.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006f32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f34:	7dfb      	ldrb	r3, [r7, #23]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d109      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f3a:	4b13      	ldr	r3, [pc, #76]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	f023 0207 	bic.w	r2, r3, #7
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f46:	4910      	ldr	r1, [pc, #64]	; (8006f88 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	654b      	str	r3, [r1, #84]	; 0x54
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d040      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	2b05      	cmp	r3, #5
 8006f66:	d827      	bhi.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006f68:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006fbf 	.word	0x08006fbf
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08006fa7 	.word	0x08006fa7
 8006f7c:	08006fbf 	.word	0x08006fbf
 8006f80:	08006fbf 	.word	0x08006fbf
 8006f84:	08006fbf 	.word	0x08006fbf
 8006f88:	58024400 	.word	0x58024400
 8006f8c:	58024800 	.word	0x58024800
 8006f90:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3304      	adds	r3, #4
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f001 f8f6 	bl	800818c <RCCEx_PLL2_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fa4:	e00c      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	3324      	adds	r3, #36	; 0x24
 8006faa:	2101      	movs	r1, #1
 8006fac:	4618      	mov	r0, r3
 8006fae:	f001 f99f 	bl	80082f0 <RCCEx_PLL3_Config>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fb6:	e003      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
      break;
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fc6:	4bb2      	ldr	r3, [pc, #712]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fca:	f023 0207 	bic.w	r2, r3, #7
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd4:	49ae      	ldr	r1, [pc, #696]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	658b      	str	r3, [r1, #88]	; 0x58
 8006fda:	e001      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d044      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff6:	d01b      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffc:	d805      	bhi.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d022      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007006:	d00a      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8007008:	e01b      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800700e:	d01d      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8007010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007014:	d01c      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8007016:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800701a:	d01b      	beq.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800701c:	e011      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	3304      	adds	r3, #4
 8007022:	2100      	movs	r1, #0
 8007024:	4618      	mov	r0, r3
 8007026:	f001 f8b1 	bl	800818c <RCCEx_PLL2_Config>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800702e:	e012      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3324      	adds	r3, #36	; 0x24
 8007034:	2102      	movs	r1, #2
 8007036:	4618      	mov	r0, r3
 8007038:	f001 f95a 	bl	80082f0 <RCCEx_PLL3_Config>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007040:	e009      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	75fb      	strb	r3, [r7, #23]
      break;
 8007046:	e006      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007048:	bf00      	nop
 800704a:	e004      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800704c:	bf00      	nop
 800704e:	e002      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007050:	bf00      	nop
 8007052:	e000      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800705c:	4b8c      	ldr	r3, [pc, #560]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706a:	4989      	ldr	r1, [pc, #548]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800706c:	4313      	orrs	r3, r2
 800706e:	654b      	str	r3, [r1, #84]	; 0x54
 8007070:	e001      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	7dfb      	ldrb	r3, [r7, #23]
 8007074:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d044      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d01b      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800708e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007092:	d805      	bhi.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d022      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709c:	d00a      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800709e:	e01b      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80070a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070a4:	d01d      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80070a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070aa:	d01c      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80070ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070b0:	d01b      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80070b2:	e011      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	2100      	movs	r1, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f001 f866 	bl	800818c <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070c4:	e012      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3324      	adds	r3, #36	; 0x24
 80070ca:	2102      	movs	r1, #2
 80070cc:	4618      	mov	r0, r3
 80070ce:	f001 f90f 	bl	80082f0 <RCCEx_PLL3_Config>
 80070d2:	4603      	mov	r3, r0
 80070d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
      break;
 80070dc:	e006      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80070de:	bf00      	nop
 80070e0:	e004      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80070e2:	bf00      	nop
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80070e6:	bf00      	nop
 80070e8:	e000      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80070ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80070f2:	4b67      	ldr	r3, [pc, #412]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007100:	4963      	ldr	r1, [pc, #396]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007102:	4313      	orrs	r3, r2
 8007104:	658b      	str	r3, [r1, #88]	; 0x58
 8007106:	e001      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007114:	2b00      	cmp	r3, #0
 8007116:	d044      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800711e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007122:	d01b      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8007124:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007128:	d805      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d022      	beq.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007134:	e01b      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8007136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800713a:	d01d      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800713c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007140:	d01c      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8007142:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007146:	d01b      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8007148:	e011      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f81b 	bl	800818c <RCCEx_PLL2_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800715a:	e012      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3324      	adds	r3, #36	; 0x24
 8007160:	2102      	movs	r1, #2
 8007162:	4618      	mov	r0, r3
 8007164:	f001 f8c4 	bl	80082f0 <RCCEx_PLL3_Config>
 8007168:	4603      	mov	r3, r0
 800716a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800716c:	e009      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	75fb      	strb	r3, [r7, #23]
      break;
 8007172:	e006      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007174:	bf00      	nop
 8007176:	e004      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007178:	bf00      	nop
 800717a:	e002      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800717c:	bf00      	nop
 800717e:	e000      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007180:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007188:	4b41      	ldr	r3, [pc, #260]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800718a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007196:	493e      	ldr	r1, [pc, #248]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007198:	4313      	orrs	r3, r2
 800719a:	658b      	str	r3, [r1, #88]	; 0x58
 800719c:	e001      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01a      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	d10a      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3324      	adds	r3, #36	; 0x24
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 f895 	bl	80082f0 <RCCEx_PLL3_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80071d0:	4b2f      	ldr	r3, [pc, #188]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071de:	492c      	ldr	r1, [pc, #176]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0310 	and.w	r3, r3, #16
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d01a      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fa:	d10a      	bne.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3324      	adds	r3, #36	; 0x24
 8007200:	2102      	movs	r1, #2
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f874 	bl	80082f0 <RCCEx_PLL3_Config>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007212:	4b1f      	ldr	r3, [pc, #124]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007220:	491b      	ldr	r1, [pc, #108]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007222:	4313      	orrs	r3, r2
 8007224:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d032      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723c:	d00d      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800723e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007242:	d016      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d111      	bne.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	2100      	movs	r1, #0
 800724e:	4618      	mov	r0, r3
 8007250:	f000 ff9c 	bl	800818c <RCCEx_PLL2_Config>
 8007254:	4603      	mov	r3, r0
 8007256:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007258:	e00c      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3324      	adds	r3, #36	; 0x24
 800725e:	2102      	movs	r1, #2
 8007260:	4618      	mov	r0, r3
 8007262:	f001 f845 	bl	80082f0 <RCCEx_PLL3_Config>
 8007266:	4603      	mov	r3, r0
 8007268:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800726a:	e003      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
      break;
 8007270:	e000      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10c      	bne.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800727c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800727e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007288:	4901      	ldr	r1, [pc, #4]	; (8007290 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800728a:	4313      	orrs	r3, r2
 800728c:	658b      	str	r3, [r1, #88]	; 0x58
 800728e:	e003      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	7dfb      	ldrb	r3, [r7, #23]
 8007296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d02f      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072ae:	d00c      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80072b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072b4:	d015      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80072b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ba:	d10f      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072bc:	4b79      	ldr	r3, [pc, #484]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c0:	4a78      	ldr	r2, [pc, #480]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80072c8:	e00c      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	3324      	adds	r3, #36	; 0x24
 80072ce:	2101      	movs	r1, #1
 80072d0:	4618      	mov	r0, r3
 80072d2:	f001 f80d 	bl	80082f0 <RCCEx_PLL3_Config>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
      break;
 80072e0:	e000      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80072e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10a      	bne.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ea:	4b6e      	ldr	r3, [pc, #440]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f8:	496a      	ldr	r1, [pc, #424]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	654b      	str	r3, [r1, #84]	; 0x54
 80072fe:	e001      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007300:	7dfb      	ldrb	r3, [r7, #23]
 8007302:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d029      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731c:	d007      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800731e:	e00f      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007320:	4b60      	ldr	r3, [pc, #384]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007324:	4a5f      	ldr	r2, [pc, #380]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800732a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800732c:	e00b      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3304      	adds	r3, #4
 8007332:	2102      	movs	r1, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f000 ff29 	bl	800818c <RCCEx_PLL2_Config>
 800733a:	4603      	mov	r3, r0
 800733c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800733e:	e002      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d109      	bne.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800734c:	4b55      	ldr	r3, [pc, #340]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800734e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	4952      	ldr	r1, [pc, #328]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800735a:	4313      	orrs	r3, r2
 800735c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800735e:	e001      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
 8007362:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3324      	adds	r3, #36	; 0x24
 8007374:	2102      	movs	r1, #2
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ffba 	bl	80082f0 <RCCEx_PLL3_Config>
 800737c:	4603      	mov	r3, r0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02f      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	d00c      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073a0:	d802      	bhi.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d011      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80073a6:	e00d      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80073a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073ac:	d00f      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80073ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073b2:	d00e      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80073b4:	e006      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b6:	4b3b      	ldr	r3, [pc, #236]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a3a      	ldr	r2, [pc, #232]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80073c2:	e007      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
      break;
 80073c8:	e004      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80073d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073da:	4b32      	ldr	r3, [pc, #200]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e6:	492f      	ldr	r1, [pc, #188]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	654b      	str	r3, [r1, #84]	; 0x54
 80073ec:	e001      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d008      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007402:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800740a:	4926      	ldr	r1, [pc, #152]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800740c:	4313      	orrs	r3, r2
 800740e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800741c:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800742a:	491e      	ldr	r1, [pc, #120]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800742c:	4313      	orrs	r3, r2
 800742e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d008      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800743c:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800743e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007448:	4916      	ldr	r1, [pc, #88]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800744a:	4313      	orrs	r3, r2
 800744c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00d      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	4a11      	ldr	r2, [pc, #68]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007464:	6113      	str	r3, [r2, #16]
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007468:	691a      	ldr	r2, [r3, #16]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007470:	490c      	ldr	r1, [pc, #48]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007472:	4313      	orrs	r3, r2
 8007474:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	da08      	bge.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748a:	4906      	ldr	r1, [pc, #24]	; (80074a4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800748c:	4313      	orrs	r3, r2
 800748e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007490:	7dbb      	ldrb	r3, [r7, #22]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	e000      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
}
 800749c:	4618      	mov	r0, r3
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	58024400 	.word	0x58024400

080074a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b090      	sub	sp, #64	; 0x40
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b6:	d150      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80074b8:	4ba1      	ldr	r3, [pc, #644]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80074ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d844      	bhi.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80074c8:	a201      	add	r2, pc, #4	; (adr r2, 80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80074ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ce:	bf00      	nop
 80074d0:	080074e5 	.word	0x080074e5
 80074d4:	080074f5 	.word	0x080074f5
 80074d8:	08007505 	.word	0x08007505
 80074dc:	0800754d 	.word	0x0800754d
 80074e0:	08007515 	.word	0x08007515
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fd03 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f2:	e241      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f4:	f107 0318 	add.w	r3, r7, #24
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 fa63 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007502:	e239      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007504:	f107 030c 	add.w	r3, r7, #12
 8007508:	4618      	mov	r0, r3
 800750a:	f000 fba7 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007512:	e231      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007514:	4b8a      	ldr	r3, [pc, #552]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800751c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007520:	2b00      	cmp	r3, #0
 8007522:	d102      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007524:	4b87      	ldr	r3, [pc, #540]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007528:	e226      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007530:	d102      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007532:	4b85      	ldr	r3, [pc, #532]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007536:	e21f      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753e:	d102      	bne.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007540:	4b82      	ldr	r3, [pc, #520]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007544:	e218      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800754a:	e215      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800754c:	4b80      	ldr	r3, [pc, #512]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007550:	e212      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007556:	bf00      	nop
 8007558:	e20e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007560:	d14f      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007562:	4b77      	ldr	r3, [pc, #476]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007566:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800756a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	2b80      	cmp	r3, #128	; 0x80
 8007570:	d01c      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007572:	2b80      	cmp	r3, #128	; 0x80
 8007574:	d804      	bhi.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d008      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d00e      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800757e:	e03c      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007580:	2bc0      	cmp	r3, #192	; 0xc0
 8007582:	d037      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007588:	d018      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800758a:	e036      	b.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800758c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fcaf 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800759a:	e1ed      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800759c:	f107 0318 	add.w	r3, r7, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fa0f 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075aa:	e1e5      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ac:	f107 030c 	add.w	r3, r7, #12
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fb53 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ba:	e1dd      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075bc:	4b60      	ldr	r3, [pc, #384]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80075c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80075cc:	4b5d      	ldr	r3, [pc, #372]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80075d0:	e1d2      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075d8:	d102      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80075da:	4b5b      	ldr	r3, [pc, #364]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075de:	e1cb      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075e6:	d102      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 80075e8:	4b58      	ldr	r3, [pc, #352]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80075ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ec:	e1c4      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f2:	e1c1      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80075f4:	4b56      	ldr	r3, [pc, #344]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f8:	e1be      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fe:	bf00      	nop
 8007600:	e1ba      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007608:	d153      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800760a:	4b4d      	ldr	r3, [pc, #308]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007612:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800761a:	d01f      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800761c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007620:	d805      	bhi.n	800762e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800762a:	d00f      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800762c:	e03d      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800762e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007632:	d037      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007638:	d018      	beq.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800763a:	e036      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800763c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fc57 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800764a:	e195      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800764c:	f107 0318 	add.w	r3, r7, #24
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f9b7 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800765a:	e18d      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800765c:	f107 030c 	add.w	r3, r7, #12
 8007660:	4618      	mov	r0, r3
 8007662:	f000 fafb 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800766a:	e185      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800766e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007674:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800767c:	4b31      	ldr	r3, [pc, #196]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007680:	e17a      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007688:	d102      	bne.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800768a:	4b2f      	ldr	r3, [pc, #188]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800768c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800768e:	e173      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007696:	d102      	bne.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007698:	4b2c      	ldr	r3, [pc, #176]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800769c:	e16c      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a2:	e169      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80076a4:	4b2a      	ldr	r3, [pc, #168]	; (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80076a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076a8:	e166      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ae:	bf00      	nop
 80076b0:	e162      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076b8:	d15d      	bne.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80076ba:	4b21      	ldr	r3, [pc, #132]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076be:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80076c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ca:	d01f      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80076cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076d0:	d805      	bhi.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80076d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076da:	d00f      	beq.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80076dc:	e047      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80076de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076e2:	d041      	beq.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80076e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076e8:	d018      	beq.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80076ea:	e040      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 fbff 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076fa:	e13d      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076fc:	f107 0318 	add.w	r3, r7, #24
 8007700:	4618      	mov	r0, r3
 8007702:	f000 f95f 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800770a:	e135      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800770c:	f107 030c 	add.w	r3, r7, #12
 8007710:	4618      	mov	r0, r3
 8007712:	f000 faa3 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800771a:	e12d      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800771e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007724:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	2b00      	cmp	r3, #0
 800772a:	d102      	bne.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007730:	e122      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007738:	d10c      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800773a:	4b03      	ldr	r3, [pc, #12]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800773c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800773e:	e11b      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007740:	58024400 	.word	0x58024400
 8007744:	03d09000 	.word	0x03d09000
 8007748:	003d0900 	.word	0x003d0900
 800774c:	017d7840 	.word	0x017d7840
 8007750:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007756:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800775a:	d102      	bne.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800775c:	4b89      	ldr	r3, [pc, #548]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800775e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007760:	e10a      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007766:	e107      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007768:	4b87      	ldr	r3, [pc, #540]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800776a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800776c:	e104      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800776e:	2300      	movs	r3, #0
 8007770:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007772:	bf00      	nop
 8007774:	e100      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800777c:	d153      	bne.n	8007826 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800777e:	4b83      	ldr	r3, [pc, #524]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007782:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007786:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800778a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800778e:	d01f      	beq.n	80077d0 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007794:	d805      	bhi.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800779a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800779e:	d00f      	beq.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80077a0:	e03d      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80077a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077a6:	d037      	beq.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80077a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ac:	d018      	beq.n	80077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80077ae:	e036      	b.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 fb9d 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077be:	e0db      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077c0:	f107 0318 	add.w	r3, r7, #24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f8fd 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077ce:	e0d3      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077d0:	f107 030c 	add.w	r3, r7, #12
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fa41 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80077de:	e0cb      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80077e0:	4b6a      	ldr	r3, [pc, #424]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80077e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80077ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80077f0:	4b67      	ldr	r3, [pc, #412]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80077f4:	e0c0      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077fc:	d102      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80077fe:	4b65      	ldr	r3, [pc, #404]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007800:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007802:	e0b9      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780a:	d102      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800780c:	4b5d      	ldr	r3, [pc, #372]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007810:	e0b2      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007816:	e0af      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007818:	4b5b      	ldr	r3, [pc, #364]	; (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800781a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800781c:	e0ac      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007822:	bf00      	nop
 8007824:	e0a8      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800782c:	d13d      	bne.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800782e:	4b57      	ldr	r3, [pc, #348]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783e:	d00c      	beq.n	800785a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007844:	d011      	beq.n	800786a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8007846:	2b00      	cmp	r3, #0
 8007848:	d12b      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800784a:	f107 0318 	add.w	r3, r7, #24
 800784e:	4618      	mov	r0, r3
 8007850:	f000 f8b8 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007858:	e08e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800785a:	f107 030c 	add.w	r3, r7, #12
 800785e:	4618      	mov	r0, r3
 8007860:	f000 f9fc 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007868:	e086      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800786a:	4b48      	ldr	r3, [pc, #288]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800786c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800786e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007872:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800787c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800787e:	e07b      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007886:	d102      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007888:	4b42      	ldr	r3, [pc, #264]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800788c:	e074      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007894:	d102      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8007896:	4b3b      	ldr	r3, [pc, #236]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800789a:	e06d      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800789c:	2300      	movs	r3, #0
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a0:	e06a      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078a6:	bf00      	nop
 80078a8:	e066      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b0:	d11f      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80078b2:	4b36      	ldr	r3, [pc, #216]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ba:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80078c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c6:	d008      	beq.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80078c8:	e00f      	b.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fb10 	bl	8007ef4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d8:	e04e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 f870 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078e8:	e046      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ee:	bf00      	nop
 80078f0:	e042      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f8:	d13c      	bne.n	8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80078fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007902:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790a:	d01e      	beq.n	800794a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800790c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007910:	d805      	bhi.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800791a:	d00e      	beq.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800791c:	e026      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800791e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007922:	d01d      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007928:	d01d      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800792a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800792e:	d014      	beq.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007930:	e01c      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007932:	f000 f831 	bl	8007998 <HAL_RCCEx_GetD3PCLK1Freq>
 8007936:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007938:	e01e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800793a:	f107 0318 	add.w	r3, r7, #24
 800793e:	4618      	mov	r0, r3
 8007940:	f000 f840 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007948:	e016      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	4618      	mov	r0, r3
 8007950:	f000 f984 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007958:	e00e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800795a:	4b0d      	ldr	r3, [pc, #52]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800795c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800795e:	e00b      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007964:	e008      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8007966:	4b07      	ldr	r3, [pc, #28]	; (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800796a:	e005      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800796c:	2300      	movs	r3, #0
 800796e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007970:	bf00      	nop
 8007972:	e001      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8007974:	2300      	movs	r3, #0
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800797a:	4618      	mov	r0, r3
 800797c:	3740      	adds	r7, #64	; 0x40
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	017d7840 	.word	0x017d7840
 8007988:	00bb8000 	.word	0x00bb8000
 800798c:	58024400 	.word	0x58024400
 8007990:	03d09000 	.word	0x03d09000
 8007994:	003d0900 	.word	0x003d0900

08007998 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800799c:	f7fe fe3a 	bl	8006614 <HAL_RCC_GetHCLKFreq>
 80079a0:	4601      	mov	r1, r0
 80079a2:	4b06      	ldr	r3, [pc, #24]	; (80079bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	4a04      	ldr	r2, [pc, #16]	; (80079c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079ae:	5cd3      	ldrb	r3, [r2, r3]
 80079b0:	f003 031f 	and.w	r3, r3, #31
 80079b4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	58024400 	.word	0x58024400
 80079c0:	08020884 	.word	0x08020884

080079c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b089      	sub	sp, #36	; 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079cc:	4b9d      	ldr	r3, [pc, #628]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d0:	f003 0303 	and.w	r3, r3, #3
 80079d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80079d6:	4b9b      	ldr	r3, [pc, #620]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079da:	0b1b      	lsrs	r3, r3, #12
 80079dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80079e2:	4b98      	ldr	r3, [pc, #608]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	f003 0301 	and.w	r3, r3, #1
 80079ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80079ee:	4b95      	ldr	r3, [pc, #596]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80079f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f2:	08db      	lsrs	r3, r3, #3
 80079f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	fb02 f303 	mul.w	r3, r2, r3
 80079fe:	ee07 3a90 	vmov	s15, r3
 8007a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 810a 	beq.w	8007c26 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d05a      	beq.n	8007ace <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d302      	bcc.n	8007a22 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d078      	beq.n	8007b12 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007a20:	e099      	b.n	8007b56 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a22:	4b88      	ldr	r3, [pc, #544]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d02d      	beq.n	8007a8a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a2e:	4b85      	ldr	r3, [pc, #532]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	08db      	lsrs	r3, r3, #3
 8007a34:	f003 0303 	and.w	r3, r3, #3
 8007a38:	4a83      	ldr	r2, [pc, #524]	; (8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a3e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	ee07 3a90 	vmov	s15, r3
 8007a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	ee07 3a90 	vmov	s15, r3
 8007a50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a58:	4b7a      	ldr	r3, [pc, #488]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a60:	ee07 3a90 	vmov	s15, r3
 8007a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a88:	e087      	b.n	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a94:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c50 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007a98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9c:	4b69      	ldr	r3, [pc, #420]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa4:	ee07 3a90 	vmov	s15, r3
 8007aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aac:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007abc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007acc:	e065      	b.n	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	ee07 3a90 	vmov	s15, r3
 8007ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae0:	4b58      	ldr	r3, [pc, #352]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae8:	ee07 3a90 	vmov	s15, r3
 8007aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007af8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b10:	e043      	b.n	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b24:	4b47      	ldr	r3, [pc, #284]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b34:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b38:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b54:	e021      	b.n	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007c54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b68:	4b36      	ldr	r3, [pc, #216]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b78:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b7c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c4c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b98:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	0a5b      	lsrs	r3, r3, #9
 8007ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bc0:	ee17 2a90 	vmov	r2, s15
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007bc8:	4b1e      	ldr	r3, [pc, #120]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bcc:	0c1b      	lsrs	r3, r3, #16
 8007bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007be2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bee:	ee17 2a90 	vmov	r2, s15
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007bf6:	4b13      	ldr	r3, [pc, #76]	; (8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	0e1b      	lsrs	r3, r3, #24
 8007bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c1c:	ee17 2a90 	vmov	r2, s15
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c24:	e008      	b.n	8007c38 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	609a      	str	r2, [r3, #8]
}
 8007c38:	bf00      	nop
 8007c3a:	3724      	adds	r7, #36	; 0x24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	58024400 	.word	0x58024400
 8007c48:	03d09000 	.word	0x03d09000
 8007c4c:	46000000 	.word	0x46000000
 8007c50:	4c742400 	.word	0x4c742400
 8007c54:	4a742400 	.word	0x4a742400
 8007c58:	4bbebc20 	.word	0x4bbebc20

08007c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b089      	sub	sp, #36	; 0x24
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c64:	4b9d      	ldr	r3, [pc, #628]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007c6e:	4b9b      	ldr	r3, [pc, #620]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	0d1b      	lsrs	r3, r3, #20
 8007c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007c7a:	4b98      	ldr	r3, [pc, #608]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7e:	0a1b      	lsrs	r3, r3, #8
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007c86:	4b95      	ldr	r3, [pc, #596]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	08db      	lsrs	r3, r3, #3
 8007c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c90:	693a      	ldr	r2, [r7, #16]
 8007c92:	fb02 f303 	mul.w	r3, r2, r3
 8007c96:	ee07 3a90 	vmov	s15, r3
 8007c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 810a 	beq.w	8007ebe <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d05a      	beq.n	8007d66 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d302      	bcc.n	8007cba <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d078      	beq.n	8007daa <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007cb8:	e099      	b.n	8007dee <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cba:	4b88      	ldr	r3, [pc, #544]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d02d      	beq.n	8007d22 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cc6:	4b85      	ldr	r3, [pc, #532]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a83      	ldr	r2, [pc, #524]	; (8007ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	ee07 3a90 	vmov	s15, r3
 8007cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf0:	4b7a      	ldr	r3, [pc, #488]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf8:	ee07 3a90 	vmov	s15, r3
 8007cfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d04:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d20:	e087      	b.n	8007e32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	ee07 3a90 	vmov	s15, r3
 8007d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d2c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007d30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d34:	4b69      	ldr	r3, [pc, #420]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d44:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d48:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d64:	e065      	b.n	8007e32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d70:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007d74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d78:	4b58      	ldr	r3, [pc, #352]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d80:	ee07 3a90 	vmov	s15, r3
 8007d84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d8c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007da4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007da8:	e043      	b.n	8007e32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007db4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dbc:	4b47      	ldr	r3, [pc, #284]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dd0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007de8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dec:	e021      	b.n	8007e32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	ee07 3a90 	vmov	s15, r3
 8007df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e00:	4b36      	ldr	r3, [pc, #216]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e08:	ee07 3a90 	vmov	s15, r3
 8007e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e14:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e30:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e32:	4b2a      	ldr	r3, [pc, #168]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	0a5b      	lsrs	r3, r3, #9
 8007e38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e3c:	ee07 3a90 	vmov	s15, r3
 8007e40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e58:	ee17 2a90 	vmov	r2, s15
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e60:	4b1e      	ldr	r3, [pc, #120]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e64:	0c1b      	lsrs	r3, r3, #16
 8007e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e86:	ee17 2a90 	vmov	r2, s15
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	0e1b      	lsrs	r3, r3, #24
 8007e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e98:	ee07 3a90 	vmov	s15, r3
 8007e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007ea4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ea8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eb4:	ee17 2a90 	vmov	r2, s15
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ebc:	e008      	b.n	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	609a      	str	r2, [r3, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	3724      	adds	r7, #36	; 0x24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	03d09000 	.word	0x03d09000
 8007ee4:	46000000 	.word	0x46000000
 8007ee8:	4c742400 	.word	0x4c742400
 8007eec:	4a742400 	.word	0x4a742400
 8007ef0:	4bbebc20 	.word	0x4bbebc20

08007ef4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b089      	sub	sp, #36	; 0x24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007efc:	4b9d      	ldr	r3, [pc, #628]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007f06:	4b9b      	ldr	r3, [pc, #620]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0a:	091b      	lsrs	r3, r3, #4
 8007f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007f12:	4b98      	ldr	r3, [pc, #608]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007f1c:	4b95      	ldr	r3, [pc, #596]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f20:	08db      	lsrs	r3, r3, #3
 8007f22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
 8007f2c:	ee07 3a90 	vmov	s15, r3
 8007f30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 810a 	beq.w	8008154 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d05a      	beq.n	8007ffc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d302      	bcc.n	8007f50 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d078      	beq.n	8008040 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007f4e:	e099      	b.n	8008084 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f50:	4b88      	ldr	r3, [pc, #544]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d02d      	beq.n	8007fb8 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f5c:	4b85      	ldr	r3, [pc, #532]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	08db      	lsrs	r3, r3, #3
 8007f62:	f003 0303 	and.w	r3, r3, #3
 8007f66:	4a84      	ldr	r2, [pc, #528]	; (8008178 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
 8007f6c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	ee07 3a90 	vmov	s15, r3
 8007f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f86:	4b7b      	ldr	r3, [pc, #492]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800817c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fb6:	e087      	b.n	80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	ee07 3a90 	vmov	s15, r3
 8007fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008180 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fca:	4b6a      	ldr	r3, [pc, #424]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fd2:	ee07 3a90 	vmov	s15, r3
 8007fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800817c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ffa:	e065      	b.n	80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800800a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800800e:	4b59      	ldr	r3, [pc, #356]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008016:	ee07 3a90 	vmov	s15, r3
 800801a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800801e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800817c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800802a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800802e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800803a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800803e:	e043      	b.n	80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	ee07 3a90 	vmov	s15, r3
 8008046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800804a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008188 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800804e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008052:	4b48      	ldr	r3, [pc, #288]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805a:	ee07 3a90 	vmov	s15, r3
 800805e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008062:	ed97 6a03 	vldr	s12, [r7, #12]
 8008066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800817c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800806a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800806e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800807e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008082:	e021      	b.n	80080c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800808e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008184 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008096:	4b37      	ldr	r3, [pc, #220]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800809e:	ee07 3a90 	vmov	s15, r3
 80080a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800817c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80080ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080c6:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80080c8:	4b2a      	ldr	r3, [pc, #168]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	0a5b      	lsrs	r3, r3, #9
 80080ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080d2:	ee07 3a90 	vmov	s15, r3
 80080d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80080e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080ee:	ee17 2a90 	vmov	r2, s15
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80080f6:	4b1f      	ldr	r3, [pc, #124]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80080f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fa:	0c1b      	lsrs	r3, r3, #16
 80080fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008100:	ee07 3a90 	vmov	s15, r3
 8008104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800810c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008110:	edd7 6a07 	vldr	s13, [r7, #28]
 8008114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800811c:	ee17 2a90 	vmov	r2, s15
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8008124:	4b13      	ldr	r3, [pc, #76]	; (8008174 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	0e1b      	lsrs	r3, r3, #24
 800812a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800813a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800813e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800814a:	ee17 2a90 	vmov	r2, s15
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008152:	e008      	b.n	8008166 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	609a      	str	r2, [r3, #8]
}
 8008166:	bf00      	nop
 8008168:	3724      	adds	r7, #36	; 0x24
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	58024400 	.word	0x58024400
 8008178:	03d09000 	.word	0x03d09000
 800817c:	46000000 	.word	0x46000000
 8008180:	4c742400 	.word	0x4c742400
 8008184:	4a742400 	.word	0x4a742400
 8008188:	4bbebc20 	.word	0x4bbebc20

0800818c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800819a:	4b53      	ldr	r3, [pc, #332]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	d101      	bne.n	80081aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e099      	b.n	80082de <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80081aa:	4b4f      	ldr	r3, [pc, #316]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a4e      	ldr	r2, [pc, #312]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80081b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80081b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b6:	f7f9 fa4b 	bl	8001650 <HAL_GetTick>
 80081ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081bc:	e008      	b.n	80081d0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80081be:	f7f9 fa47 	bl	8001650 <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d901      	bls.n	80081d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e086      	b.n	80082de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80081d0:	4b45      	ldr	r3, [pc, #276]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1f0      	bne.n	80081be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80081dc:	4b42      	ldr	r3, [pc, #264]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	031b      	lsls	r3, r3, #12
 80081ea:	493f      	ldr	r1, [pc, #252]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	628b      	str	r3, [r1, #40]	; 0x28
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	3b01      	subs	r3, #1
 8008200:	025b      	lsls	r3, r3, #9
 8008202:	b29b      	uxth	r3, r3
 8008204:	431a      	orrs	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	3b01      	subs	r3, #1
 800820c:	041b      	lsls	r3, r3, #16
 800820e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008212:	431a      	orrs	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	691b      	ldr	r3, [r3, #16]
 8008218:	3b01      	subs	r3, #1
 800821a:	061b      	lsls	r3, r3, #24
 800821c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008220:	4931      	ldr	r1, [pc, #196]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008222:	4313      	orrs	r3, r2
 8008224:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008226:	4b30      	ldr	r3, [pc, #192]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	492d      	ldr	r1, [pc, #180]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008234:	4313      	orrs	r3, r2
 8008236:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008238:	4b2b      	ldr	r3, [pc, #172]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	f023 0220 	bic.w	r2, r3, #32
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	4928      	ldr	r1, [pc, #160]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008246:	4313      	orrs	r3, r2
 8008248:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800824a:	4b27      	ldr	r3, [pc, #156]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 800824c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824e:	4a26      	ldr	r2, [pc, #152]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008250:	f023 0310 	bic.w	r3, r3, #16
 8008254:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008256:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <RCCEx_PLL2_Config+0x160>)
 800825c:	4013      	ands	r3, r2
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	69d2      	ldr	r2, [r2, #28]
 8008262:	00d2      	lsls	r2, r2, #3
 8008264:	4920      	ldr	r1, [pc, #128]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008266:	4313      	orrs	r3, r2
 8008268:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800826a:	4b1f      	ldr	r3, [pc, #124]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008270:	f043 0310 	orr.w	r3, r3, #16
 8008274:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800827c:	4b1a      	ldr	r3, [pc, #104]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	4a19      	ldr	r2, [pc, #100]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008286:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008288:	e00f      	b.n	80082aa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d106      	bne.n	800829e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008290:	4b15      	ldr	r3, [pc, #84]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	4a14      	ldr	r2, [pc, #80]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 8008296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800829a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800829c:	e005      	b.n	80082aa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800829e:	4b12      	ldr	r3, [pc, #72]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80082a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a2:	4a11      	ldr	r2, [pc, #68]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80082a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80082aa:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80082b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b6:	f7f9 f9cb 	bl	8001650 <HAL_GetTick>
 80082ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082bc:	e008      	b.n	80082d0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80082be:	f7f9 f9c7 	bl	8001650 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d901      	bls.n	80082d0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e006      	b.n	80082de <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80082d0:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <RCCEx_PLL2_Config+0x15c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80082dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	58024400 	.word	0x58024400
 80082ec:	ffff0007 	.word	0xffff0007

080082f0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80082fe:	4b53      	ldr	r3, [pc, #332]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	f003 0303 	and.w	r3, r3, #3
 8008306:	2b03      	cmp	r3, #3
 8008308:	d101      	bne.n	800830e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e099      	b.n	8008442 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800830e:	4b4f      	ldr	r3, [pc, #316]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a4e      	ldr	r2, [pc, #312]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831a:	f7f9 f999 	bl	8001650 <HAL_GetTick>
 800831e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008320:	e008      	b.n	8008334 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008322:	f7f9 f995 	bl	8001650 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e086      	b.n	8008442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008334:	4b45      	ldr	r3, [pc, #276]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1f0      	bne.n	8008322 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008340:	4b42      	ldr	r3, [pc, #264]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008344:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	051b      	lsls	r3, r3, #20
 800834e:	493f      	ldr	r1, [pc, #252]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008350:	4313      	orrs	r3, r2
 8008352:	628b      	str	r3, [r1, #40]	; 0x28
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	3b01      	subs	r3, #1
 800835a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	3b01      	subs	r3, #1
 8008364:	025b      	lsls	r3, r3, #9
 8008366:	b29b      	uxth	r3, r3
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	3b01      	subs	r3, #1
 8008370:	041b      	lsls	r3, r3, #16
 8008372:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	3b01      	subs	r3, #1
 800837e:	061b      	lsls	r3, r3, #24
 8008380:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008384:	4931      	ldr	r1, [pc, #196]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008386:	4313      	orrs	r3, r2
 8008388:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800838a:	4b30      	ldr	r3, [pc, #192]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	492d      	ldr	r1, [pc, #180]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008398:	4313      	orrs	r3, r2
 800839a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800839c:	4b2b      	ldr	r3, [pc, #172]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 800839e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	4928      	ldr	r1, [pc, #160]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80083ae:	4b27      	ldr	r3, [pc, #156]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	4a26      	ldr	r2, [pc, #152]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083be:	4b24      	ldr	r3, [pc, #144]	; (8008450 <RCCEx_PLL3_Config+0x160>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	69d2      	ldr	r2, [r2, #28]
 80083c6:	00d2      	lsls	r2, r2, #3
 80083c8:	4920      	ldr	r1, [pc, #128]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80083ce:	4b1f      	ldr	r3, [pc, #124]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d2:	4a1e      	ldr	r2, [pc, #120]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80083e0:	4b1a      	ldr	r3, [pc, #104]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	4a19      	ldr	r2, [pc, #100]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80083ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80083ec:	e00f      	b.n	800840e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d106      	bne.n	8008402 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80083f4:	4b15      	ldr	r3, [pc, #84]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4a14      	ldr	r2, [pc, #80]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 80083fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008400:	e005      	b.n	800840e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008402:	4b12      	ldr	r3, [pc, #72]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008406:	4a11      	ldr	r2, [pc, #68]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800840c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a0e      	ldr	r2, [pc, #56]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800841a:	f7f9 f919 	bl	8001650 <HAL_GetTick>
 800841e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008420:	e008      	b.n	8008434 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008422:	f7f9 f915 	bl	8001650 <HAL_GetTick>
 8008426:	4602      	mov	r2, r0
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	2b02      	cmp	r3, #2
 800842e:	d901      	bls.n	8008434 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e006      	b.n	8008442 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <RCCEx_PLL3_Config+0x15c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0f0      	beq.n	8008422 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	58024400 	.word	0x58024400
 8008450:	ffff0007 	.word	0xffff0007

08008454 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	; 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e07c      	b.n	8008560 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10c      	bne.n	800848c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d102      	bne.n	8008486 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7f8 fe7a 	bl	8001180 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2203      	movs	r2, #3
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f867 	bl	8008568 <HAL_SD_InitCard>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e05d      	b.n	8008560 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4619      	mov	r1, r3
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fdb6 	bl	800901c <HAL_SD_GetCardStatus>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e052      	b.n	8008560 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80084ba:	7e3b      	ldrb	r3, [r7, #24]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80084c0:	7e7b      	ldrb	r3, [r7, #25]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d10a      	bne.n	80084e4 <HAL_SD_Init+0x90>
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <HAL_SD_Init+0x86>
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d004      	beq.n	80084e4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80084e2:	e00b      	b.n	80084fc <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d104      	bne.n	80084f6 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80084f4:	e002      	b.n	80084fc <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	4619      	mov	r1, r3
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fe6c 	bl	80091e0 <HAL_SD_ConfigWideBusOperation>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e026      	b.n	8008560 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008512:	f7f9 f89d 	bl	8001650 <HAL_GetTick>
 8008516:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008518:	e011      	b.n	800853e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800851a:	f7f9 f899 	bl	8001650 <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	1ad3      	subs	r3, r2, r3
 8008524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008528:	d109      	bne.n	800853e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e010      	b.n	8008560 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fef8 	bl	8009334 <HAL_SD_GetCardState>
 8008544:	4603      	mov	r3, r0
 8008546:	2b04      	cmp	r3, #4
 8008548:	d1e7      	bne.n	800851a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3728      	adds	r7, #40	; 0x28
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b08e      	sub	sp, #56	; 0x38
 800856c:	af04      	add	r7, sp, #16
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008570:	2300      	movs	r3, #0
 8008572:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008574:	2300      	movs	r3, #0
 8008576:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008578:	2300      	movs	r3, #0
 800857a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800857c:	2300      	movs	r3, #0
 800857e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008580:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008584:	f7fe ff90 	bl	80074a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008588:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	0a1b      	lsrs	r3, r3, #8
 800858e:	4a40      	ldr	r2, [pc, #256]	; (8008690 <HAL_SD_InitCard+0x128>)
 8008590:	fba2 2303 	umull	r2, r3, r2, r3
 8008594:	091b      	lsrs	r3, r3, #4
 8008596:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d107      	bne.n	80085b0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0210 	orr.w	r2, r2, #16
 80085ae:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681d      	ldr	r5, [r3, #0]
 80085b4:	466c      	mov	r4, sp
 80085b6:	f107 0314 	add.w	r3, r7, #20
 80085ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80085be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085c8:	4628      	mov	r0, r5
 80085ca:	f002 fc37 	bl	800ae3c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f002 fc7a 	bl	800aecc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	005b      	lsls	r3, r3, #1
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80085e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80085ea:	4a2a      	ldr	r2, [pc, #168]	; (8008694 <HAL_SD_InitCard+0x12c>)
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f2:	3301      	adds	r3, #1
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7f9 f837 	bl	8001668 <HAL_Delay>
 80085fa:	e002      	b.n	8008602 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80085fc:	2002      	movs	r0, #2
 80085fe:	f7f9 f833 	bl	8001668 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 ff74 	bl	80094f0 <SD_PowerON>
 8008608:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	431a      	orrs	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e02e      	b.n	8008686 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fea3 	bl	8009374 <SD_InitCard>
 800862e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008630:	6a3b      	ldr	r3, [r7, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00b      	beq.n	800864e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	431a      	orrs	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e01b      	b.n	8008686 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008656:	4618      	mov	r0, r3
 8008658:	f002 fcce 	bl	800aff8 <SDMMC_CmdBlockLength>
 800865c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00f      	beq.n	8008684 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a0b      	ldr	r2, [pc, #44]	; (8008698 <HAL_SD_InitCard+0x130>)
 800866a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008670:	6a3b      	ldr	r3, [r7, #32]
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	3728      	adds	r7, #40	; 0x28
 800868a:	46bd      	mov	sp, r7
 800868c:	bdb0      	pop	{r4, r5, r7, pc}
 800868e:	bf00      	nop
 8008690:	014f8b59 	.word	0x014f8b59
 8008694:	00012110 	.word	0x00012110
 8008698:	1fe00fff 	.word	0x1fe00fff

0800869c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d107      	bne.n	80086c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e08d      	b.n	80087e0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	f040 8086 	bne.w	80087de <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80086d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	441a      	add	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d907      	bls.n	80086f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e074      	b.n	80087e0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2203      	movs	r2, #3
 80086fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	2200      	movs	r2, #0
 8008704:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	025a      	lsls	r2, r3, #9
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d002      	beq.n	8008722 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	025b      	lsls	r3, r3, #9
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008722:	f04f 33ff 	mov.w	r3, #4294967295
 8008726:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	025b      	lsls	r3, r3, #9
 800872c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800872e:	2390      	movs	r3, #144	; 0x90
 8008730:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008732:	2302      	movs	r3, #2
 8008734:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008736:	2300      	movs	r3, #0
 8008738:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800873a:	2300      	movs	r3, #0
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f107 0210 	add.w	r2, r7, #16
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f002 fc29 	bl	800afa0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68da      	ldr	r2, [r3, #12]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800875c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2201      	movs	r2, #1
 800876c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b01      	cmp	r3, #1
 8008772:	d90a      	bls.n	800878a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2282      	movs	r2, #130	; 0x82
 8008778:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008780:	4618      	mov	r0, r3
 8008782:	f002 fc7f 	bl	800b084 <SDMMC_CmdReadMultiBlock>
 8008786:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008788:	e009      	b.n	800879e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2281      	movs	r2, #129	; 0x81
 800878e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008796:	4618      	mov	r0, r3
 8008798:	f002 fc51 	bl	800b03e <SDMMC_CmdReadSingleBlock>
 800879c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800879e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d012      	beq.n	80087ca <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a0f      	ldr	r2, [pc, #60]	; (80087e8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80087aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	431a      	orrs	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e00a      	b.n	80087e0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80087d8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	e000      	b.n	80087e0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80087de:	2302      	movs	r3, #2
  }
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3730      	adds	r7, #48	; 0x30
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	1fe00fff 	.word	0x1fe00fff

080087ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b08c      	sub	sp, #48	; 0x30
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d107      	bne.n	8008814 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e08d      	b.n	8008930 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b01      	cmp	r3, #1
 800881e:	f040 8086 	bne.w	800892e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	441a      	add	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008832:	429a      	cmp	r2, r3
 8008834:	d907      	bls.n	8008846 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	e074      	b.n	8008930 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2203      	movs	r2, #3
 800884a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	025a      	lsls	r2, r3, #9
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d002      	beq.n	8008872 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	025b      	lsls	r3, r3, #9
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008872:	f04f 33ff 	mov.w	r3, #4294967295
 8008876:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	025b      	lsls	r3, r3, #9
 800887c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800887e:	2390      	movs	r3, #144	; 0x90
 8008880:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008882:	2300      	movs	r3, #0
 8008884:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008886:	2300      	movs	r3, #0
 8008888:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800888a:	2300      	movs	r3, #0
 800888c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f107 0210 	add.w	r2, r7, #16
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f002 fb81 	bl	800afa0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ac:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2201      	movs	r2, #1
 80088bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d90a      	bls.n	80088da <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	22a0      	movs	r2, #160	; 0xa0
 80088c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088d0:	4618      	mov	r0, r3
 80088d2:	f002 fc1d 	bl	800b110 <SDMMC_CmdWriteMultiBlock>
 80088d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80088d8:	e009      	b.n	80088ee <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2290      	movs	r2, #144	; 0x90
 80088de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088e6:	4618      	mov	r0, r3
 80088e8:	f002 fbef 	bl	800b0ca <SDMMC_CmdWriteSingleBlock>
 80088ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d012      	beq.n	800891a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a0f      	ldr	r2, [pc, #60]	; (8008938 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80088fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	431a      	orrs	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e00a      	b.n	8008930 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008928:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800892e:	2302      	movs	r3, #2
  }
}
 8008930:	4618      	mov	r0, r3
 8008932:	3730      	adds	r7, #48	; 0x30
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	1fe00fff 	.word	0x1fe00fff

0800893c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008954:	2b00      	cmp	r3, #0
 8008956:	d008      	beq.n	800896a <HAL_SD_IRQHandler+0x2e>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f003 0308 	and.w	r3, r3, #8
 800895e:	2b00      	cmp	r3, #0
 8008960:	d003      	beq.n	800896a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 f92a 	bl	8009bbc <SD_Read_IT>
 8008968:	e19a      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 80ac 	beq.w	8008ad2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008982:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	4b9d      	ldr	r3, [pc, #628]	; (8008c04 <HAL_SD_IRQHandler+0x2c8>)
 8008990:	400b      	ands	r3, r1
 8008992:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80089a2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b2:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f003 0308 	and.w	r3, r3, #8
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d038      	beq.n	8008a30 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d104      	bne.n	80089d2 <HAL_SD_IRQHandler+0x96>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f003 0320 	and.w	r3, r3, #32
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d011      	beq.n	80089f6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f002 fbbe 	bl	800b158 <SDMMC_CmdStopTransfer>
 80089dc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f959 	bl	8008ca8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a83      	ldr	r2, [pc, #524]	; (8008c08 <HAL_SD_IRQHandler+0x2cc>)
 80089fc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <HAL_SD_IRQHandler+0xe4>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f003 f893 	bl	800bb4c <HAL_SD_RxCpltCallback>
 8008a26:	e13b      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f003 f885 	bl	800bb38 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a2e:	e137      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 8132 	beq.w	8008ca0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2200      	movs	r2, #0
 8008a42:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	2200      	movs	r2, #0
 8008a52:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f003 0302 	and.w	r3, r3, #2
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d104      	bne.n	8008a68 <HAL_SD_IRQHandler+0x12c>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d011      	beq.n	8008a8c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f002 fb73 	bl	800b158 <SDMMC_CmdStopTransfer>
 8008a72:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d008      	beq.n	8008a8c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f90e 	bl	8008ca8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 0310 	and.w	r3, r3, #16
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d104      	bne.n	8008aae <HAL_SD_IRQHandler+0x172>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f003 f842 	bl	800bb38 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <HAL_SD_IRQHandler+0x18e>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 80eb 	beq.w	8008ca0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f003 f83e 	bl	800bb4c <HAL_SD_RxCpltCallback>
}
 8008ad0:	e0e6      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d008      	beq.n	8008af2 <HAL_SD_IRQHandler+0x1b6>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f001 f8ac 	bl	8009c48 <SD_Write_IT>
 8008af0:	e0d6      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 80a2 	beq.w	8008c46 <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f043 0202 	orr.w	r2, r3, #2
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f003 0308 	and.w	r3, r3, #8
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f043 0208 	orr.w	r2, r3, #8
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	f003 0320 	and.w	r3, r3, #32
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	f043 0220 	orr.w	r2, r3, #32
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	f003 0310 	and.w	r3, r3, #16
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	f043 0210 	orr.w	r2, r3, #16
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a26      	ldr	r2, [pc, #152]	; (8008c08 <HAL_SD_IRQHandler+0x2cc>)
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008b80:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68da      	ldr	r2, [r3, #12]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b90:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	68da      	ldr	r2, [r3, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008bb0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f002 face 	bl	800b158 <SDMMC_CmdStopTransfer>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bd6:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be0:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f003 0308 	and.w	r3, r3, #8
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00f      	beq.n	8008c0c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f854 	bl	8008ca8 <HAL_SD_ErrorCallback>
}
 8008c00:	e04e      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
 8008c02:	bf00      	nop
 8008c04:	ffff3ec5 	.word	0xffff3ec5
 8008c08:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d044      	beq.n	8008ca0 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d040      	beq.n	8008ca0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008c2c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2200      	movs	r2, #0
 8008c34:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f832 	bl	8008ca8 <HAL_SD_ErrorCallback>
}
 8008c44:	e02c      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d025      	beq.n	8008ca0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	f003 0304 	and.w	r3, r3, #4
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10c      	bne.n	8008c86 <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d003      	beq.n	8008c7e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 f84e 	bl	8009d18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008c7c:	e010      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f001 f836 	bl	8009cf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008c84:	e00c      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 f837 	bl	8009d04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008c96:	e003      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 f81f 	bl	8009cdc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008c9e:	e7ff      	b.n	8008ca0 <HAL_SD_IRQHandler+0x364>
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008cc6:	bf00      	nop
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ce2:	0f9b      	lsrs	r3, r3, #30
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cee:	0e9b      	lsrs	r3, r3, #26
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d00:	0e1b      	lsrs	r3, r3, #24
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d12:	0c1b      	lsrs	r3, r3, #16
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d1e:	0a1b      	lsrs	r3, r3, #8
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d2a:	b2da      	uxtb	r2, r3
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d34:	0d1b      	lsrs	r3, r3, #20
 8008d36:	b29a      	uxth	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d40:	0c1b      	lsrs	r3, r3, #16
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d52:	0bdb      	lsrs	r3, r3, #15
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d64:	0b9b      	lsrs	r3, r3, #14
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d76:	0b5b      	lsrs	r3, r3, #13
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d88:	0b1b      	lsrs	r3, r3, #12
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d163      	bne.n	8008e6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008da8:	009a      	lsls	r2, r3, #2
 8008daa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008dae:	4013      	ands	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008db4:	0f92      	lsrs	r2, r2, #30
 8008db6:	431a      	orrs	r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dc0:	0edb      	lsrs	r3, r3, #27
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	f003 0307 	and.w	r3, r3, #7
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd2:	0e1b      	lsrs	r3, r3, #24
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	f003 0307 	and.w	r3, r3, #7
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008de4:	0d5b      	lsrs	r3, r3, #21
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008df6:	0c9b      	lsrs	r3, r3, #18
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e08:	0bdb      	lsrs	r3, r3, #15
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	1c5a      	adds	r2, r3, #1
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	7e1b      	ldrb	r3, [r3, #24]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	3302      	adds	r3, #2
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008e36:	fb02 f203 	mul.w	r2, r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	7a1b      	ldrb	r3, [r3, #8]
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2201      	movs	r2, #1
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008e58:	0a52      	lsrs	r2, r2, #9
 8008e5a:	fb02 f203 	mul.w	r2, r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e68:	659a      	str	r2, [r3, #88]	; 0x58
 8008e6a:	e031      	b.n	8008ed0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d11d      	bne.n	8008eb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e82:	0c1b      	lsrs	r3, r3, #16
 8008e84:	431a      	orrs	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	029a      	lsls	r2, r3, #10
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ea4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	659a      	str	r2, [r3, #88]	; 0x58
 8008eae:	e00f      	b.n	8008ed0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a58      	ldr	r2, [pc, #352]	; (8009018 <HAL_SD_GetCardCSD+0x344>)
 8008eb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ebc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e09d      	b.n	800900c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed4:	0b9b      	lsrs	r3, r3, #14
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee6:	09db      	lsrs	r3, r3, #7
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f08:	0fdb      	lsrs	r3, r3, #31
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f14:	0f5b      	lsrs	r3, r3, #29
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	f003 0303 	and.w	r3, r3, #3
 8008f1c:	b2da      	uxtb	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f26:	0e9b      	lsrs	r3, r3, #26
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f38:	0d9b      	lsrs	r3, r3, #22
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f4a:	0d5b      	lsrs	r3, r3, #21
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	f003 0301 	and.w	r3, r3, #1
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f66:	0c1b      	lsrs	r3, r3, #16
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	f003 0301 	and.w	r3, r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7a:	0bdb      	lsrs	r3, r3, #15
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	f003 0301 	and.w	r3, r3, #1
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8e:	0b9b      	lsrs	r3, r3, #14
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa2:	0b5b      	lsrs	r3, r3, #13
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb6:	0b1b      	lsrs	r3, r3, #12
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fca:	0a9b      	lsrs	r3, r3, #10
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f003 0303 	and.w	r3, r3, #3
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff2:	085b      	lsrs	r3, r3, #1
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	1fe00fff 	.word	0x1fe00fff

0800901c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b094      	sub	sp, #80	; 0x50
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009026:	2300      	movs	r3, #0
 8009028:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800902c:	f107 0308 	add.w	r3, r7, #8
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb64 	bl	8009700 <SD_SendSDStatus>
 8009038:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800903a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800903c:	2b00      	cmp	r3, #0
 800903e:	d011      	beq.n	8009064 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a4f      	ldr	r2, [pc, #316]	; (8009184 <HAL_SD_GetCardStatus+0x168>)
 8009046:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904e:	431a      	orrs	r2, r3
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009062:	e070      	b.n	8009146 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	099b      	lsrs	r3, r3, #6
 8009068:	b2db      	uxtb	r3, r3
 800906a:	f003 0303 	and.w	r3, r3, #3
 800906e:	b2da      	uxtb	r2, r3
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	b2db      	uxtb	r3, r3
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	b2da      	uxtb	r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	0a1b      	lsrs	r3, r3, #8
 8009088:	b29b      	uxth	r3, r3
 800908a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800908e:	b29a      	uxth	r2, r3
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	0e1b      	lsrs	r3, r3, #24
 8009094:	b29b      	uxth	r3, r3
 8009096:	4313      	orrs	r3, r2
 8009098:	b29a      	uxth	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	061a      	lsls	r2, r3, #24
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	021b      	lsls	r3, r3, #8
 80090a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090aa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	0a1b      	lsrs	r3, r3, #8
 80090b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80090b4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	0e1b      	lsrs	r3, r3, #24
 80090ba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	0a1b      	lsrs	r3, r3, #8
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	0d1b      	lsrs	r3, r3, #20
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 030f 	and.w	r3, r3, #15
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4313      	orrs	r3, r2
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	0a9b      	lsrs	r3, r3, #10
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009108:	b2da      	uxtb	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	0a1b      	lsrs	r3, r3, #8
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	b2da      	uxtb	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	091b      	lsrs	r3, r3, #4
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	b2da      	uxtb	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	0e1b      	lsrs	r3, r3, #24
 8009140:	b2da      	uxtb	r2, r3
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800914e:	4618      	mov	r0, r3
 8009150:	f001 ff52 	bl	800aff8 <SDMMC_CmdBlockLength>
 8009154:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00d      	beq.n	8009178 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a08      	ldr	r2, [pc, #32]	; (8009184 <HAL_SD_GetCardStatus+0x168>)
 8009162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2201      	movs	r2, #1
 800916e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8009178:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800917c:	4618      	mov	r0, r3
 800917e:	3750      	adds	r7, #80	; 0x50
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	1fe00fff 	.word	0x1fe00fff

08009188 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	370c      	adds	r7, #12
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80091e0:	b5b0      	push	{r4, r5, r7, lr}
 80091e2:	b08e      	sub	sp, #56	; 0x38
 80091e4:	af04      	add	r7, sp, #16
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2203      	movs	r2, #3
 80091f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d02e      	beq.n	800925e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009206:	d106      	bne.n	8009216 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
 8009214:	e029      	b.n	800926a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800921c:	d10a      	bne.n	8009234 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fb66 	bl	80098f0 <SD_WideBus_Enable>
 8009224:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
 8009232:	e01a      	b.n	800926a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10a      	bne.n	8009250 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fba3 	bl	8009986 <SD_WideBus_Disable>
 8009240:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	431a      	orrs	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	639a      	str	r2, [r3, #56]	; 0x38
 800924e:	e00c      	b.n	800926a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009254:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	639a      	str	r2, [r3, #56]	; 0x38
 800925c:	e005      	b.n	800926a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926e:	2b00      	cmp	r3, #0
 8009270:	d007      	beq.n	8009282 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a2e      	ldr	r2, [pc, #184]	; (8009330 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009280:	e034      	b.n	80092ec <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d903      	bls.n	80092a8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	61bb      	str	r3, [r7, #24]
 80092a6:	e012      	b.n	80092ce <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092b0:	d103      	bne.n	80092ba <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	61bb      	str	r3, [r7, #24]
 80092b8:	e009      	b.n	80092ce <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c2:	d102      	bne.n	80092ca <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 80092c4:	2302      	movs	r3, #2
 80092c6:	61bb      	str	r3, [r7, #24]
 80092c8:	e001      	b.n	80092ce <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 80092ca:	2304      	movs	r3, #4
 80092cc:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681d      	ldr	r5, [r3, #0]
 80092d2:	466c      	mov	r4, sp
 80092d4:	f107 0314 	add.w	r3, r7, #20
 80092d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80092dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80092e0:	f107 0308 	add.w	r3, r7, #8
 80092e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092e6:	4628      	mov	r0, r5
 80092e8:	f001 fda8 	bl	800ae3c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 fe7f 	bl	800aff8 <SDMMC_CmdBlockLength>
 80092fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00c      	beq.n	800931c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a0a      	ldr	r2, [pc, #40]	; (8009330 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009308:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009328:	4618      	mov	r0, r3
 800932a:	3728      	adds	r7, #40	; 0x28
 800932c:	46bd      	mov	sp, r7
 800932e:	bdb0      	pop	{r4, r5, r7, pc}
 8009330:	1fe00fff 	.word	0x1fe00fff

08009334 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b086      	sub	sp, #24
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009340:	f107 030c 	add.w	r3, r7, #12
 8009344:	4619      	mov	r1, r3
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 faaa 	bl	80098a0 <SD_SendStatus>
 800934c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d005      	beq.n	8009360 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	431a      	orrs	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	0a5b      	lsrs	r3, r3, #9
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800936a:	693b      	ldr	r3, [r7, #16]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009374:	b590      	push	{r4, r7, lr}
 8009376:	b091      	sub	sp, #68	; 0x44
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800937c:	2301      	movs	r3, #1
 800937e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fdb2 	bl	800aeee <SDMMC_GetPowerState>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d102      	bne.n	8009396 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009390:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009394:	e0a8      	b.n	80094e8 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	2b03      	cmp	r3, #3
 800939c:	d02e      	beq.n	80093fc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 fffe 	bl	800b3a4 <SDMMC_CmdSendCID>
 80093a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80093aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80093b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b2:	e099      	b.n	80094e8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fddd 	bl	800af7a <SDMMC_GetResponse>
 80093c0:	4602      	mov	r2, r0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2104      	movs	r1, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 fdd4 	bl	800af7a <SDMMC_GetResponse>
 80093d2:	4602      	mov	r2, r0
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2108      	movs	r1, #8
 80093de:	4618      	mov	r0, r3
 80093e0:	f001 fdcb 	bl	800af7a <SDMMC_GetResponse>
 80093e4:	4602      	mov	r2, r0
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	210c      	movs	r1, #12
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fdc2 	bl	800af7a <SDMMC_GetResponse>
 80093f6:	4602      	mov	r2, r0
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009400:	2b03      	cmp	r3, #3
 8009402:	d00d      	beq.n	8009420 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f107 020e 	add.w	r2, r7, #14
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f002 f807 	bl	800b422 <SDMMC_CmdSetRelAdd>
 8009414:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <SD_InitCard+0xac>
    {
      return errorstate;
 800941c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800941e:	e063      	b.n	80094e8 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009424:	2b03      	cmp	r3, #3
 8009426:	d036      	beq.n	8009496 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009428:	89fb      	ldrh	r3, [r7, #14]
 800942a:	461a      	mov	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009438:	041b      	lsls	r3, r3, #16
 800943a:	4619      	mov	r1, r3
 800943c:	4610      	mov	r0, r2
 800943e:	f001 ffd0 	bl	800b3e2 <SDMMC_CmdSendCSD>
 8009442:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <SD_InitCard+0xda>
    {
      return errorstate;
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	e04c      	b.n	80094e8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f001 fd90 	bl	800af7a <SDMMC_GetResponse>
 800945a:	4602      	mov	r2, r0
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	2104      	movs	r1, #4
 8009466:	4618      	mov	r0, r3
 8009468:	f001 fd87 	bl	800af7a <SDMMC_GetResponse>
 800946c:	4602      	mov	r2, r0
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2108      	movs	r1, #8
 8009478:	4618      	mov	r0, r3
 800947a:	f001 fd7e 	bl	800af7a <SDMMC_GetResponse>
 800947e:	4602      	mov	r2, r0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	210c      	movs	r1, #12
 800948a:	4618      	mov	r0, r3
 800948c:	f001 fd75 	bl	800af7a <SDMMC_GetResponse>
 8009490:	4602      	mov	r2, r0
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2104      	movs	r1, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f001 fd6c 	bl	800af7a <SDMMC_GetResponse>
 80094a2:	4603      	mov	r3, r0
 80094a4:	0d1a      	lsrs	r2, r3, #20
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80094aa:	f107 0310 	add.w	r3, r7, #16
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f7ff fc0f 	bl	8008cd4 <HAL_SD_GetCardCSD>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094c0:	e012      	b.n	80094e8 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6819      	ldr	r1, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	f04f 0400 	mov.w	r4, #0
 80094d0:	461a      	mov	r2, r3
 80094d2:	4623      	mov	r3, r4
 80094d4:	4608      	mov	r0, r1
 80094d6:	f001 fe7b 	bl	800b1d0 <SDMMC_CmdSelDesel>
 80094da:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <SD_InitCard+0x172>
  {
    return errorstate;
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	e000      	b.n	80094e8 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3744      	adds	r7, #68	; 0x44
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd90      	pop	{r4, r7, pc}

080094f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 80094fc:	2300      	movs	r3, #0
 80094fe:	61fb      	str	r3, [r7, #28]
 8009500:	2300      	movs	r3, #0
 8009502:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8009504:	f7f8 f8a4 	bl	8001650 <HAL_GetTick>
 8009508:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4618      	mov	r0, r3
 8009510:	f001 fe82 	bl	800b218 <SDMMC_CmdGoIdleState>
 8009514:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <SD_PowerON+0x30>
  {
    return errorstate;
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	e0e9      	b.n	80096f4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f001 fe95 	bl	800b254 <SDMMC_CmdOperCond>
 800952a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00d      	beq.n	800954e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f001 fe6b 	bl	800b218 <SDMMC_CmdGoIdleState>
 8009542:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d004      	beq.n	8009554 <SD_PowerON+0x64>
    {
      return errorstate;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	e0d2      	b.n	80096f4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	2b01      	cmp	r3, #1
 800955a:	d137      	bne.n	80095cc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fe96 	bl	800b294 <SDMMC_CmdAppCommand>
 8009568:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02d      	beq.n	80095cc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009570:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009574:	e0be      	b.n	80096f4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2100      	movs	r1, #0
 800957c:	4618      	mov	r0, r3
 800957e:	f001 fe89 	bl	800b294 <SDMMC_CmdAppCommand>
 8009582:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <SD_PowerON+0x9e>
    {
      return errorstate;
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	e0b2      	b.n	80096f4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	495a      	ldr	r1, [pc, #360]	; (80096fc <SD_PowerON+0x20c>)
 8009594:	4618      	mov	r0, r3
 8009596:	f001 fea0 	bl	800b2da <SDMMC_CmdAppOperCommand>
 800959a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d002      	beq.n	80095a8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80095a6:	e0a5      	b.n	80096f4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f001 fce3 	bl	800af7a <SDMMC_GetResponse>
 80095b4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	0fdb      	lsrs	r3, r3, #31
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d101      	bne.n	80095c2 <SD_PowerON+0xd2>
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <SD_PowerON+0xd4>
 80095c2:	2300      	movs	r3, #0
 80095c4:	61bb      	str	r3, [r7, #24]

    count++;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d802      	bhi.n	80095dc <SD_PowerON+0xec>
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d0cc      	beq.n	8009576 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d902      	bls.n	80095ec <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80095e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095ea:	e083      	b.n	80096f4 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d07d      	beq.n	80096f2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	2b02      	cmp	r3, #2
 8009602:	d176      	bne.n	80096f2 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d071      	beq.n	80096f2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009614:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0208 	orr.w	r2, r2, #8
 8009624:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4618      	mov	r0, r3
 800962c:	f001 ff60 	bl	800b4f0 <SDMMC_CmdVoltageSwitch>
 8009630:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00c      	beq.n	8009652 <SD_PowerON+0x162>
        {
          return errorstate;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	e05b      	b.n	80096f4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800963c:	f7f8 f808 	bl	8001650 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d102      	bne.n	8009652 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800964c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009650:	e050      	b.n	80096f4 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800965c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009660:	d1ec      	bne.n	800963c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800966a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800967a:	d002      	beq.n	8009682 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800967c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009680:	e038      	b.n	80096f4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009682:	2001      	movs	r0, #1
 8009684:	f7ff fb1a 	bl	8008cbc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0204 	orr.w	r2, r2, #4
 8009696:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009698:	e00a      	b.n	80096b0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800969a:	f7f7 ffd9 	bl	8001650 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a8:	d102      	bne.n	80096b0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80096aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096ae:	e021      	b.n	80096f4 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096be:	d1ec      	bne.n	800969a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096c8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d8:	d102      	bne.n	80096e0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80096da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096de:	e009      	b.n	80096f4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2213      	movs	r2, #19
 80096e6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f04f 32ff 	mov.w	r2, #4294967295
 80096f0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	c1100000 	.word	0xc1100000

08009700 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b08c      	sub	sp, #48	; 0x30
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800970a:	f7f7 ffa1 	bl	8001650 <HAL_GetTick>
 800970e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f001 fc2d 	bl	800af7a <SDMMC_GetResponse>
 8009720:	4603      	mov	r3, r0
 8009722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800972a:	d102      	bne.n	8009732 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800972c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009730:	e0b0      	b.n	8009894 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2140      	movs	r1, #64	; 0x40
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fc5d 	bl	800aff8 <SDMMC_CmdBlockLength>
 800973e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	e0a0      	b.n	8009894 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800975a:	041b      	lsls	r3, r3, #16
 800975c:	4619      	mov	r1, r3
 800975e:	4610      	mov	r0, r2
 8009760:	f001 fd98 	bl	800b294 <SDMMC_CmdAppCommand>
 8009764:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d005      	beq.n	8009778 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	e08d      	b.n	8009894 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009778:	f04f 33ff 	mov.w	r3, #4294967295
 800977c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800977e:	2340      	movs	r3, #64	; 0x40
 8009780:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009782:	2360      	movs	r3, #96	; 0x60
 8009784:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009786:	2302      	movs	r3, #2
 8009788:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800978a:	2300      	movs	r3, #0
 800978c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800978e:	2301      	movs	r3, #1
 8009790:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f107 0208 	add.w	r2, r7, #8
 800979a:	4611      	mov	r1, r2
 800979c:	4618      	mov	r0, r3
 800979e:	f001 fbff 	bl	800afa0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fe80 	bl	800b4ac <SDMMC_CmdStatusRegister>
 80097ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80097ae:	6a3b      	ldr	r3, [r7, #32]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d02b      	beq.n	800980c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	e069      	b.n	8009894 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d013      	beq.n	80097f6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80097ce:	2300      	movs	r3, #0
 80097d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097d2:	e00d      	b.n	80097f0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4618      	mov	r0, r3
 80097da:	f001 fb59 	bl	800ae90 <SDMMC_ReadFIFO>
 80097de:	4602      	mov	r2, r0
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	601a      	str	r2, [r3, #0]
        pData++;
 80097e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e6:	3304      	adds	r3, #4
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80097ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ec:	3301      	adds	r3, #1
 80097ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	2b07      	cmp	r3, #7
 80097f4:	d9ee      	bls.n	80097d4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80097f6:	f7f7 ff2b 	bl	8001650 <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009804:	d102      	bne.n	800980c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009806:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800980a:	e043      	b.n	8009894 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0d2      	beq.n	80097c0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009820:	f003 0308 	and.w	r3, r3, #8
 8009824:	2b00      	cmp	r3, #0
 8009826:	d001      	beq.n	800982c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009828:	2308      	movs	r3, #8
 800982a:	e033      	b.n	8009894 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	f003 0302 	and.w	r3, r3, #2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800983a:	2302      	movs	r3, #2
 800983c:	e02a      	b.n	8009894 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009844:	f003 0320 	and.w	r3, r3, #32
 8009848:	2b00      	cmp	r3, #0
 800984a:	d017      	beq.n	800987c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800984c:	2320      	movs	r3, #32
 800984e:	e021      	b.n	8009894 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4618      	mov	r0, r3
 8009856:	f001 fb1b 	bl	800ae90 <SDMMC_ReadFIFO>
 800985a:	4602      	mov	r2, r0
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	601a      	str	r2, [r3, #0]
    pData++;
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	3304      	adds	r3, #4
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009866:	f7f7 fef3 	bl	8001650 <HAL_GetTick>
 800986a:	4602      	mov	r2, r0
 800986c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009874:	d102      	bne.n	800987c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800987a:	e00b      	b.n	8009894 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e2      	bne.n	8009850 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a03      	ldr	r2, [pc, #12]	; (800989c <SD_SendSDStatus+0x19c>)
 8009890:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3730      	adds	r7, #48	; 0x30
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	18000f3a 	.word	0x18000f3a

080098a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80098b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098b4:	e018      	b.n	80098e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098be:	041b      	lsls	r3, r3, #16
 80098c0:	4619      	mov	r1, r3
 80098c2:	4610      	mov	r0, r2
 80098c4:	f001 fdcf 	bl	800b466 <SDMMC_CmdSendStatus>
 80098c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d001      	beq.n	80098d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	e009      	b.n	80098e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 fb4d 	bl	800af7a <SDMMC_GetResponse>
 80098e0:	4602      	mov	r2, r0
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	2300      	movs	r3, #0
 80098fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f001 fb37 	bl	800af7a <SDMMC_GetResponse>
 800990c:	4603      	mov	r3, r0
 800990e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009916:	d102      	bne.n	800991e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800991c:	e02f      	b.n	800997e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800991e:	f107 030c 	add.w	r3, r7, #12
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f879 	bl	8009a1c <SD_FindSCR>
 800992a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	e023      	b.n	800997e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01c      	beq.n	800997a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009948:	041b      	lsls	r3, r3, #16
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f001 fca1 	bl	800b294 <SDMMC_CmdAppCommand>
 8009952:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	e00f      	b.n	800997e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2102      	movs	r1, #2
 8009964:	4618      	mov	r0, r3
 8009966:	f001 fcd8 	bl	800b31a <SDMMC_CmdBusWidth>
 800996a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	e003      	b.n	800997e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009976:	2300      	movs	r3, #0
 8009978:	e001      	b.n	800997e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800997a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800998e:	2300      	movs	r3, #0
 8009990:	60fb      	str	r3, [r7, #12]
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f001 faec 	bl	800af7a <SDMMC_GetResponse>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099ac:	d102      	bne.n	80099b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099b2:	e02f      	b.n	8009a14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80099b4:	f107 030c 	add.w	r3, r7, #12
 80099b8:	4619      	mov	r1, r3
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f82e 	bl	8009a1c <SD_FindSCR>
 80099c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	e023      	b.n	8009a14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d01c      	beq.n	8009a10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099de:	041b      	lsls	r3, r3, #16
 80099e0:	4619      	mov	r1, r3
 80099e2:	4610      	mov	r0, r2
 80099e4:	f001 fc56 	bl	800b294 <SDMMC_CmdAppCommand>
 80099e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	e00f      	b.n	8009a14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2100      	movs	r1, #0
 80099fa:	4618      	mov	r0, r3
 80099fc:	f001 fc8d 	bl	800b31a <SDMMC_CmdBusWidth>
 8009a00:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	e003      	b.n	8009a14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	e001      	b.n	8009a14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3718      	adds	r7, #24
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08e      	sub	sp, #56	; 0x38
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a26:	f7f7 fe13 	bl	8001650 <HAL_GetTick>
 8009a2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009a30:	2300      	movs	r3, #0
 8009a32:	60bb      	str	r3, [r7, #8]
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2108      	movs	r1, #8
 8009a42:	4618      	mov	r0, r3
 8009a44:	f001 fad8 	bl	800aff8 <SDMMC_CmdBlockLength>
 8009a48:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a52:	e0ad      	b.n	8009bb0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a5c:	041b      	lsls	r3, r3, #16
 8009a5e:	4619      	mov	r1, r3
 8009a60:	4610      	mov	r0, r2
 8009a62:	f001 fc17 	bl	800b294 <SDMMC_CmdAppCommand>
 8009a66:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a70:	e09e      	b.n	8009bb0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a72:	f04f 33ff 	mov.w	r3, #4294967295
 8009a76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009a78:	2308      	movs	r3, #8
 8009a7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009a7c:	2330      	movs	r3, #48	; 0x30
 8009a7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a80:	2302      	movs	r3, #2
 8009a82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f107 0210 	add.w	r2, r7, #16
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f001 fa82 	bl	800afa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f001 fc5d 	bl	800b360 <SDMMC_CmdSendSCR>
 8009aa6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d027      	beq.n	8009afe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	e07e      	b.n	8009bb0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d113      	bne.n	8009ae8 <SD_FindSCR+0xcc>
 8009ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d110      	bne.n	8009ae8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4618      	mov	r0, r3
 8009acc:	f001 f9e0 	bl	800ae90 <SDMMC_ReadFIFO>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 f9d9 	bl	800ae90 <SDMMC_ReadFIFO>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	60fb      	str	r3, [r7, #12]
      index++;
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ae8:	f7f7 fdb2 	bl	8001650 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af6:	d102      	bne.n	8009afe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009afc:	e058      	b.n	8009bb0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b04:	f240 532a 	movw	r3, #1322	; 0x52a
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d0d1      	beq.n	8009ab2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	f003 0308 	and.w	r3, r3, #8
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d005      	beq.n	8009b28 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2208      	movs	r2, #8
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009b24:	2308      	movs	r3, #8
 8009b26:	e043      	b.n	8009bb0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2e:	f003 0302 	and.w	r3, r3, #2
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d005      	beq.n	8009b42 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	e036      	b.n	8009bb0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d005      	beq.n	8009b5c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2220      	movs	r2, #32
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b58:	2320      	movs	r3, #32
 8009b5a:	e029      	b.n	8009bb0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <SD_FindSCR+0x19c>)
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	061a      	lsls	r2, r3, #24
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	0a1b      	lsrs	r3, r3, #8
 8009b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	0e1b      	lsrs	r3, r3, #24
 8009b80:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b84:	601a      	str	r2, [r3, #0]
    scr++;
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	3304      	adds	r3, #4
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	061a      	lsls	r2, r3, #24
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	021b      	lsls	r3, r3, #8
 8009b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	0a1b      	lsrs	r3, r3, #8
 8009b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ba2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	0e1b      	lsrs	r3, r3, #24
 8009ba8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3738      	adds	r7, #56	; 0x38
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	18000f3a 	.word	0x18000f3a

08009bbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b086      	sub	sp, #24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bce:	2b1f      	cmp	r3, #31
 8009bd0:	d936      	bls.n	8009c40 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	e027      	b.n	8009c28 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f001 f957 	bl	800ae90 <SDMMC_ReadFIFO>
 8009be2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	3301      	adds	r3, #1
 8009bf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	0a1b      	lsrs	r3, r3, #8
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	0c1b      	lsrs	r3, r3, #16
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	0e1b      	lsrs	r3, r3, #24
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	3301      	adds	r3, #1
 8009c26:	617b      	str	r3, [r7, #20]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2b07      	cmp	r3, #7
 8009c2c:	d9d4      	bls.n	8009bd8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f1a3 0220 	sub.w	r2, r3, #32
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009c40:	bf00      	nop
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	2b1f      	cmp	r3, #31
 8009c5c:	d93a      	bls.n	8009cd4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
 8009c62:	e02b      	b.n	8009cbc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	021a      	lsls	r2, r3, #8
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	041a      	lsls	r2, r3, #16
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	061a      	lsls	r2, r3, #24
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f107 020c 	add.w	r2, r7, #12
 8009cae:	4611      	mov	r1, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 f8fa 	bl	800aeaa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	3301      	adds	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2b07      	cmp	r3, #7
 8009cc0:	d9d0      	bls.n	8009c64 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ccc:	f1a3 0220 	sub.w	r2, r3, #32
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009cd4:	bf00      	nop
 8009cd6:	3718      	adds	r7, #24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d101      	bne.n	8009d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	e042      	b.n	8009dc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d106      	bne.n	8009d56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7f7 fa89 	bl	8001268 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2224      	movs	r2, #36	; 0x24
 8009d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f82c 	bl	8009dcc <UART_SetConfig>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d101      	bne.n	8009d7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e022      	b.n	8009dc4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fdd0 	bl	800a92c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	685a      	ldr	r2, [r3, #4]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009daa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0201 	orr.w	r2, r2, #1
 8009dba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fe57 	bl	800aa70 <UART_CheckIdleState>
 8009dc2:	4603      	mov	r3, r0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009dcc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009dd0:	b08e      	sub	sp, #56	; 0x38
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689a      	ldr	r2, [r3, #8]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	431a      	orrs	r2, r3
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	431a      	orrs	r2, r3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	69db      	ldr	r3, [r3, #28]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	4bc1      	ldr	r3, [pc, #772]	; (800a10c <UART_SetConfig+0x340>)
 8009e06:	4013      	ands	r3, r2
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	6812      	ldr	r2, [r2, #0]
 8009e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	68da      	ldr	r2, [r3, #12]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4ab7      	ldr	r2, [pc, #732]	; (800a110 <UART_SetConfig+0x344>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d004      	beq.n	8009e42 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689a      	ldr	r2, [r3, #8]
 8009e48:	4bb2      	ldr	r3, [pc, #712]	; (800a114 <UART_SetConfig+0x348>)
 8009e4a:	4013      	ands	r3, r2
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009e52:	430b      	orrs	r3, r1
 8009e54:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	f023 010f 	bic.w	r1, r3, #15
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4aa9      	ldr	r2, [pc, #676]	; (800a118 <UART_SetConfig+0x34c>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d177      	bne.n	8009f66 <UART_SetConfig+0x19a>
 8009e76:	4ba9      	ldr	r3, [pc, #676]	; (800a11c <UART_SetConfig+0x350>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e7e:	2b28      	cmp	r3, #40	; 0x28
 8009e80:	d86c      	bhi.n	8009f5c <UART_SetConfig+0x190>
 8009e82:	a201      	add	r2, pc, #4	; (adr r2, 8009e88 <UART_SetConfig+0xbc>)
 8009e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e88:	08009f2d 	.word	0x08009f2d
 8009e8c:	08009f5d 	.word	0x08009f5d
 8009e90:	08009f5d 	.word	0x08009f5d
 8009e94:	08009f5d 	.word	0x08009f5d
 8009e98:	08009f5d 	.word	0x08009f5d
 8009e9c:	08009f5d 	.word	0x08009f5d
 8009ea0:	08009f5d 	.word	0x08009f5d
 8009ea4:	08009f5d 	.word	0x08009f5d
 8009ea8:	08009f35 	.word	0x08009f35
 8009eac:	08009f5d 	.word	0x08009f5d
 8009eb0:	08009f5d 	.word	0x08009f5d
 8009eb4:	08009f5d 	.word	0x08009f5d
 8009eb8:	08009f5d 	.word	0x08009f5d
 8009ebc:	08009f5d 	.word	0x08009f5d
 8009ec0:	08009f5d 	.word	0x08009f5d
 8009ec4:	08009f5d 	.word	0x08009f5d
 8009ec8:	08009f3d 	.word	0x08009f3d
 8009ecc:	08009f5d 	.word	0x08009f5d
 8009ed0:	08009f5d 	.word	0x08009f5d
 8009ed4:	08009f5d 	.word	0x08009f5d
 8009ed8:	08009f5d 	.word	0x08009f5d
 8009edc:	08009f5d 	.word	0x08009f5d
 8009ee0:	08009f5d 	.word	0x08009f5d
 8009ee4:	08009f5d 	.word	0x08009f5d
 8009ee8:	08009f45 	.word	0x08009f45
 8009eec:	08009f5d 	.word	0x08009f5d
 8009ef0:	08009f5d 	.word	0x08009f5d
 8009ef4:	08009f5d 	.word	0x08009f5d
 8009ef8:	08009f5d 	.word	0x08009f5d
 8009efc:	08009f5d 	.word	0x08009f5d
 8009f00:	08009f5d 	.word	0x08009f5d
 8009f04:	08009f5d 	.word	0x08009f5d
 8009f08:	08009f4d 	.word	0x08009f4d
 8009f0c:	08009f5d 	.word	0x08009f5d
 8009f10:	08009f5d 	.word	0x08009f5d
 8009f14:	08009f5d 	.word	0x08009f5d
 8009f18:	08009f5d 	.word	0x08009f5d
 8009f1c:	08009f5d 	.word	0x08009f5d
 8009f20:	08009f5d 	.word	0x08009f5d
 8009f24:	08009f5d 	.word	0x08009f5d
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e233      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e22f      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e22b      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f44:	2310      	movs	r3, #16
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e227      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e223      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5a:	e21f      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f62:	bf00      	nop
 8009f64:	e21a      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a6d      	ldr	r2, [pc, #436]	; (800a120 <UART_SetConfig+0x354>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d132      	bne.n	8009fd6 <UART_SetConfig+0x20a>
 8009f70:	4b6a      	ldr	r3, [pc, #424]	; (800a11c <UART_SetConfig+0x350>)
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	f003 0307 	and.w	r3, r3, #7
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d827      	bhi.n	8009fcc <UART_SetConfig+0x200>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x1b8>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009f9d 	.word	0x08009f9d
 8009f88:	08009fa5 	.word	0x08009fa5
 8009f8c:	08009fad 	.word	0x08009fad
 8009f90:	08009fb5 	.word	0x08009fb5
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fc5 	.word	0x08009fc5
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa2:	e1fb      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009faa:	e1f7      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fac:	2308      	movs	r3, #8
 8009fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb2:	e1f3      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fba:	e1ef      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc2:	e1eb      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fca:	e1e7      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd2:	bf00      	nop
 8009fd4:	e1e2      	b.n	800a39c <UART_SetConfig+0x5d0>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a52      	ldr	r2, [pc, #328]	; (800a124 <UART_SetConfig+0x358>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d132      	bne.n	800a046 <UART_SetConfig+0x27a>
 8009fe0:	4b4e      	ldr	r3, [pc, #312]	; (800a11c <UART_SetConfig+0x350>)
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe4:	f003 0307 	and.w	r3, r3, #7
 8009fe8:	2b05      	cmp	r3, #5
 8009fea:	d827      	bhi.n	800a03c <UART_SetConfig+0x270>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x228>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a00d 	.word	0x0800a00d
 8009ff8:	0800a015 	.word	0x0800a015
 8009ffc:	0800a01d 	.word	0x0800a01d
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a02d 	.word	0x0800a02d
 800a008:	0800a035 	.word	0x0800a035
 800a00c:	2300      	movs	r3, #0
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e1c3      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a014:	2304      	movs	r3, #4
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e1bf      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a01c:	2308      	movs	r3, #8
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e1bb      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e1b7      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a02c:	2320      	movs	r3, #32
 800a02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a032:	e1b3      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03a:	e1af      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a03c:	2380      	movs	r3, #128	; 0x80
 800a03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a042:	bf00      	nop
 800a044:	e1aa      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a37      	ldr	r2, [pc, #220]	; (800a128 <UART_SetConfig+0x35c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d132      	bne.n	800a0b6 <UART_SetConfig+0x2ea>
 800a050:	4b32      	ldr	r3, [pc, #200]	; (800a11c <UART_SetConfig+0x350>)
 800a052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a054:	f003 0307 	and.w	r3, r3, #7
 800a058:	2b05      	cmp	r3, #5
 800a05a:	d827      	bhi.n	800a0ac <UART_SetConfig+0x2e0>
 800a05c:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x298>)
 800a05e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a062:	bf00      	nop
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a085 	.word	0x0800a085
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a082:	e18b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a084:	2304      	movs	r3, #4
 800a086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08a:	e187      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a08c:	2308      	movs	r3, #8
 800a08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a092:	e183      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a094:	2310      	movs	r3, #16
 800a096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09a:	e17f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a09c:	2320      	movs	r3, #32
 800a09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a2:	e17b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0aa:	e177      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a0ac:	2380      	movs	r3, #128	; 0x80
 800a0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b2:	bf00      	nop
 800a0b4:	e172      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a1c      	ldr	r2, [pc, #112]	; (800a12c <UART_SetConfig+0x360>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d144      	bne.n	800a14a <UART_SetConfig+0x37e>
 800a0c0:	4b16      	ldr	r3, [pc, #88]	; (800a11c <UART_SetConfig+0x350>)
 800a0c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c4:	f003 0307 	and.w	r3, r3, #7
 800a0c8:	2b05      	cmp	r3, #5
 800a0ca:	d839      	bhi.n	800a140 <UART_SetConfig+0x374>
 800a0cc:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0x308>)
 800a0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d2:	bf00      	nop
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0fd 	.word	0x0800a0fd
 800a0e0:	0800a105 	.word	0x0800a105
 800a0e4:	0800a131 	.word	0x0800a131
 800a0e8:	0800a139 	.word	0x0800a139
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e153      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fa:	e14f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a102:	e14b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10a:	e147      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a10c:	cfff69f3 	.word	0xcfff69f3
 800a110:	58000c00 	.word	0x58000c00
 800a114:	11fff4ff 	.word	0x11fff4ff
 800a118:	40011000 	.word	0x40011000
 800a11c:	58024400 	.word	0x58024400
 800a120:	40004400 	.word	0x40004400
 800a124:	40004800 	.word	0x40004800
 800a128:	40004c00 	.word	0x40004c00
 800a12c:	40005000 	.word	0x40005000
 800a130:	2320      	movs	r3, #32
 800a132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a136:	e131      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a138:	2340      	movs	r3, #64	; 0x40
 800a13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13e:	e12d      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a140:	2380      	movs	r3, #128	; 0x80
 800a142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a146:	bf00      	nop
 800a148:	e128      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4ab6      	ldr	r2, [pc, #728]	; (800a428 <UART_SetConfig+0x65c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d178      	bne.n	800a246 <UART_SetConfig+0x47a>
 800a154:	4bb5      	ldr	r3, [pc, #724]	; (800a42c <UART_SetConfig+0x660>)
 800a156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a15c:	2b28      	cmp	r3, #40	; 0x28
 800a15e:	d86d      	bhi.n	800a23c <UART_SetConfig+0x470>
 800a160:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <UART_SetConfig+0x39c>)
 800a162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a166:	bf00      	nop
 800a168:	0800a20d 	.word	0x0800a20d
 800a16c:	0800a23d 	.word	0x0800a23d
 800a170:	0800a23d 	.word	0x0800a23d
 800a174:	0800a23d 	.word	0x0800a23d
 800a178:	0800a23d 	.word	0x0800a23d
 800a17c:	0800a23d 	.word	0x0800a23d
 800a180:	0800a23d 	.word	0x0800a23d
 800a184:	0800a23d 	.word	0x0800a23d
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a23d 	.word	0x0800a23d
 800a190:	0800a23d 	.word	0x0800a23d
 800a194:	0800a23d 	.word	0x0800a23d
 800a198:	0800a23d 	.word	0x0800a23d
 800a19c:	0800a23d 	.word	0x0800a23d
 800a1a0:	0800a23d 	.word	0x0800a23d
 800a1a4:	0800a23d 	.word	0x0800a23d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a23d 	.word	0x0800a23d
 800a1b0:	0800a23d 	.word	0x0800a23d
 800a1b4:	0800a23d 	.word	0x0800a23d
 800a1b8:	0800a23d 	.word	0x0800a23d
 800a1bc:	0800a23d 	.word	0x0800a23d
 800a1c0:	0800a23d 	.word	0x0800a23d
 800a1c4:	0800a23d 	.word	0x0800a23d
 800a1c8:	0800a225 	.word	0x0800a225
 800a1cc:	0800a23d 	.word	0x0800a23d
 800a1d0:	0800a23d 	.word	0x0800a23d
 800a1d4:	0800a23d 	.word	0x0800a23d
 800a1d8:	0800a23d 	.word	0x0800a23d
 800a1dc:	0800a23d 	.word	0x0800a23d
 800a1e0:	0800a23d 	.word	0x0800a23d
 800a1e4:	0800a23d 	.word	0x0800a23d
 800a1e8:	0800a22d 	.word	0x0800a22d
 800a1ec:	0800a23d 	.word	0x0800a23d
 800a1f0:	0800a23d 	.word	0x0800a23d
 800a1f4:	0800a23d 	.word	0x0800a23d
 800a1f8:	0800a23d 	.word	0x0800a23d
 800a1fc:	0800a23d 	.word	0x0800a23d
 800a200:	0800a23d 	.word	0x0800a23d
 800a204:	0800a23d 	.word	0x0800a23d
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a212:	e0c3      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a214:	2304      	movs	r3, #4
 800a216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21a:	e0bf      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a21c:	2308      	movs	r3, #8
 800a21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a222:	e0bb      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a224:	2310      	movs	r3, #16
 800a226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22a:	e0b7      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a22c:	2320      	movs	r3, #32
 800a22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a232:	e0b3      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23a:	e0af      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a23c:	2380      	movs	r3, #128	; 0x80
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a242:	bf00      	nop
 800a244:	e0aa      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a79      	ldr	r2, [pc, #484]	; (800a430 <UART_SetConfig+0x664>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d132      	bne.n	800a2b6 <UART_SetConfig+0x4ea>
 800a250:	4b76      	ldr	r3, [pc, #472]	; (800a42c <UART_SetConfig+0x660>)
 800a252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a254:	f003 0307 	and.w	r3, r3, #7
 800a258:	2b05      	cmp	r3, #5
 800a25a:	d827      	bhi.n	800a2ac <UART_SetConfig+0x4e0>
 800a25c:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <UART_SetConfig+0x498>)
 800a25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a262:	bf00      	nop
 800a264:	0800a27d 	.word	0x0800a27d
 800a268:	0800a285 	.word	0x0800a285
 800a26c:	0800a28d 	.word	0x0800a28d
 800a270:	0800a295 	.word	0x0800a295
 800a274:	0800a29d 	.word	0x0800a29d
 800a278:	0800a2a5 	.word	0x0800a2a5
 800a27c:	2300      	movs	r3, #0
 800a27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a282:	e08b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a284:	2304      	movs	r3, #4
 800a286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28a:	e087      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a28c:	2308      	movs	r3, #8
 800a28e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a292:	e083      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a294:	2310      	movs	r3, #16
 800a296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29a:	e07f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a29c:	2320      	movs	r3, #32
 800a29e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a2:	e07b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a2a4:	2340      	movs	r3, #64	; 0x40
 800a2a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2aa:	e077      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a2ac:	2380      	movs	r3, #128	; 0x80
 800a2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2b2:	bf00      	nop
 800a2b4:	e072      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a5e      	ldr	r2, [pc, #376]	; (800a434 <UART_SetConfig+0x668>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d132      	bne.n	800a326 <UART_SetConfig+0x55a>
 800a2c0:	4b5a      	ldr	r3, [pc, #360]	; (800a42c <UART_SetConfig+0x660>)
 800a2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c4:	f003 0307 	and.w	r3, r3, #7
 800a2c8:	2b05      	cmp	r3, #5
 800a2ca:	d827      	bhi.n	800a31c <UART_SetConfig+0x550>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x508>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a2ed 	.word	0x0800a2ed
 800a2d8:	0800a2f5 	.word	0x0800a2f5
 800a2dc:	0800a2fd 	.word	0x0800a2fd
 800a2e0:	0800a305 	.word	0x0800a305
 800a2e4:	0800a30d 	.word	0x0800a30d
 800a2e8:	0800a315 	.word	0x0800a315
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f2:	e053      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fa:	e04f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a302:	e04b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a304:	2310      	movs	r3, #16
 800a306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30a:	e047      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a30c:	2320      	movs	r3, #32
 800a30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a312:	e043      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a314:	2340      	movs	r3, #64	; 0x40
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31a:	e03f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a322:	bf00      	nop
 800a324:	e03a      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a43      	ldr	r2, [pc, #268]	; (800a438 <UART_SetConfig+0x66c>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d132      	bne.n	800a396 <UART_SetConfig+0x5ca>
 800a330:	4b3e      	ldr	r3, [pc, #248]	; (800a42c <UART_SetConfig+0x660>)
 800a332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	2b05      	cmp	r3, #5
 800a33a:	d827      	bhi.n	800a38c <UART_SetConfig+0x5c0>
 800a33c:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x578>)
 800a33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a342:	bf00      	nop
 800a344:	0800a35d 	.word	0x0800a35d
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a36d 	.word	0x0800a36d
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	2302      	movs	r3, #2
 800a35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a362:	e01b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36a:	e017      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a372:	e013      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e00f      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a37c:	2320      	movs	r3, #32
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e00b      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e007      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	bf00      	nop
 800a394:	e002      	b.n	800a39c <UART_SetConfig+0x5d0>
 800a396:	2380      	movs	r3, #128	; 0x80
 800a398:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a25      	ldr	r2, [pc, #148]	; (800a438 <UART_SetConfig+0x66c>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	f040 80b8 	bne.w	800a518 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d019      	beq.n	800a3e4 <UART_SetConfig+0x618>
 800a3b0:	2b08      	cmp	r3, #8
 800a3b2:	dc04      	bgt.n	800a3be <UART_SetConfig+0x5f2>
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d009      	beq.n	800a3cc <UART_SetConfig+0x600>
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d00b      	beq.n	800a3d4 <UART_SetConfig+0x608>
 800a3bc:	e042      	b.n	800a444 <UART_SetConfig+0x678>
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d02b      	beq.n	800a41a <UART_SetConfig+0x64e>
 800a3c2:	2b40      	cmp	r3, #64	; 0x40
 800a3c4:	d02c      	beq.n	800a420 <UART_SetConfig+0x654>
 800a3c6:	2b10      	cmp	r3, #16
 800a3c8:	d014      	beq.n	800a3f4 <UART_SetConfig+0x628>
 800a3ca:	e03b      	b.n	800a444 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3cc:	f7fd fae4 	bl	8007998 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3d2:	e03d      	b.n	800a450 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fd faf3 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3e2:	e035      	b.n	800a450 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e4:	f107 0308 	add.w	r3, r7, #8
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7fd fc37 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3f2:	e02d      	b.n	800a450 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f4:	4b0d      	ldr	r3, [pc, #52]	; (800a42c <UART_SetConfig+0x660>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0320 	and.w	r3, r3, #32
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <UART_SetConfig+0x660>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	08db      	lsrs	r3, r3, #3
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	4a0c      	ldr	r2, [pc, #48]	; (800a43c <UART_SetConfig+0x670>)
 800a40c:	fa22 f303 	lsr.w	r3, r2, r3
 800a410:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a412:	e01d      	b.n	800a450 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a414:	4b09      	ldr	r3, [pc, #36]	; (800a43c <UART_SetConfig+0x670>)
 800a416:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a418:	e01a      	b.n	800a450 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <UART_SetConfig+0x674>)
 800a41c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a41e:	e017      	b.n	800a450 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a426:	e013      	b.n	800a450 <UART_SetConfig+0x684>
 800a428:	40011400 	.word	0x40011400
 800a42c:	58024400 	.word	0x58024400
 800a430:	40007800 	.word	0x40007800
 800a434:	40007c00 	.word	0x40007c00
 800a438:	58000c00 	.word	0x58000c00
 800a43c:	03d09000 	.word	0x03d09000
 800a440:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a444:	2300      	movs	r3, #0
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a44e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 824d 	beq.w	800a8f2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	4aad      	ldr	r2, [pc, #692]	; (800a714 <UART_SetConfig+0x948>)
 800a45e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a462:	461a      	mov	r2, r3
 800a464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a466:	fbb3 f3f2 	udiv	r3, r3, r2
 800a46a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685a      	ldr	r2, [r3, #4]
 800a470:	4613      	mov	r3, r2
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	4413      	add	r3, r2
 800a476:	6a3a      	ldr	r2, [r7, #32]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d305      	bcc.n	800a488 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a482:	6a3a      	ldr	r2, [r7, #32]
 800a484:	429a      	cmp	r2, r3
 800a486:	d903      	bls.n	800a490 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a48e:	e230      	b.n	800a8f2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a492:	4618      	mov	r0, r3
 800a494:	f04f 0100 	mov.w	r1, #0
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49c:	4a9d      	ldr	r2, [pc, #628]	; (800a714 <UART_SetConfig+0x948>)
 800a49e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	f04f 0400 	mov.w	r4, #0
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	f7f5 ff68 	bl	8000380 <__aeabi_uldivmod>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	f04f 0300 	mov.w	r3, #0
 800a4bc:	f04f 0400 	mov.w	r4, #0
 800a4c0:	0214      	lsls	r4, r2, #8
 800a4c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a4c6:	020b      	lsls	r3, r1, #8
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	6852      	ldr	r2, [r2, #4]
 800a4cc:	0852      	lsrs	r2, r2, #1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	eb13 0b01 	adds.w	fp, r3, r1
 800a4d8:	eb44 0c02 	adc.w	ip, r4, r2
 800a4dc:	4658      	mov	r0, fp
 800a4de:	4661      	mov	r1, ip
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f04f 0400 	mov.w	r4, #0
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	4623      	mov	r3, r4
 800a4ec:	f7f5 ff48 	bl	8000380 <__aeabi_uldivmod>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4fc:	d308      	bcc.n	800a510 <UART_SetConfig+0x744>
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a504:	d204      	bcs.n	800a510 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50c:	60da      	str	r2, [r3, #12]
 800a50e:	e1f0      	b.n	800a8f2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a516:	e1ec      	b.n	800a8f2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	69db      	ldr	r3, [r3, #28]
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a520:	f040 8100 	bne.w	800a724 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a524:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a528:	2b40      	cmp	r3, #64	; 0x40
 800a52a:	f200 80b7 	bhi.w	800a69c <UART_SetConfig+0x8d0>
 800a52e:	a201      	add	r2, pc, #4	; (adr r2, 800a534 <UART_SetConfig+0x768>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a639 	.word	0x0800a639
 800a538:	0800a641 	.word	0x0800a641
 800a53c:	0800a69d 	.word	0x0800a69d
 800a540:	0800a69d 	.word	0x0800a69d
 800a544:	0800a649 	.word	0x0800a649
 800a548:	0800a69d 	.word	0x0800a69d
 800a54c:	0800a69d 	.word	0x0800a69d
 800a550:	0800a69d 	.word	0x0800a69d
 800a554:	0800a659 	.word	0x0800a659
 800a558:	0800a69d 	.word	0x0800a69d
 800a55c:	0800a69d 	.word	0x0800a69d
 800a560:	0800a69d 	.word	0x0800a69d
 800a564:	0800a69d 	.word	0x0800a69d
 800a568:	0800a69d 	.word	0x0800a69d
 800a56c:	0800a69d 	.word	0x0800a69d
 800a570:	0800a69d 	.word	0x0800a69d
 800a574:	0800a669 	.word	0x0800a669
 800a578:	0800a69d 	.word	0x0800a69d
 800a57c:	0800a69d 	.word	0x0800a69d
 800a580:	0800a69d 	.word	0x0800a69d
 800a584:	0800a69d 	.word	0x0800a69d
 800a588:	0800a69d 	.word	0x0800a69d
 800a58c:	0800a69d 	.word	0x0800a69d
 800a590:	0800a69d 	.word	0x0800a69d
 800a594:	0800a69d 	.word	0x0800a69d
 800a598:	0800a69d 	.word	0x0800a69d
 800a59c:	0800a69d 	.word	0x0800a69d
 800a5a0:	0800a69d 	.word	0x0800a69d
 800a5a4:	0800a69d 	.word	0x0800a69d
 800a5a8:	0800a69d 	.word	0x0800a69d
 800a5ac:	0800a69d 	.word	0x0800a69d
 800a5b0:	0800a69d 	.word	0x0800a69d
 800a5b4:	0800a68f 	.word	0x0800a68f
 800a5b8:	0800a69d 	.word	0x0800a69d
 800a5bc:	0800a69d 	.word	0x0800a69d
 800a5c0:	0800a69d 	.word	0x0800a69d
 800a5c4:	0800a69d 	.word	0x0800a69d
 800a5c8:	0800a69d 	.word	0x0800a69d
 800a5cc:	0800a69d 	.word	0x0800a69d
 800a5d0:	0800a69d 	.word	0x0800a69d
 800a5d4:	0800a69d 	.word	0x0800a69d
 800a5d8:	0800a69d 	.word	0x0800a69d
 800a5dc:	0800a69d 	.word	0x0800a69d
 800a5e0:	0800a69d 	.word	0x0800a69d
 800a5e4:	0800a69d 	.word	0x0800a69d
 800a5e8:	0800a69d 	.word	0x0800a69d
 800a5ec:	0800a69d 	.word	0x0800a69d
 800a5f0:	0800a69d 	.word	0x0800a69d
 800a5f4:	0800a69d 	.word	0x0800a69d
 800a5f8:	0800a69d 	.word	0x0800a69d
 800a5fc:	0800a69d 	.word	0x0800a69d
 800a600:	0800a69d 	.word	0x0800a69d
 800a604:	0800a69d 	.word	0x0800a69d
 800a608:	0800a69d 	.word	0x0800a69d
 800a60c:	0800a69d 	.word	0x0800a69d
 800a610:	0800a69d 	.word	0x0800a69d
 800a614:	0800a69d 	.word	0x0800a69d
 800a618:	0800a69d 	.word	0x0800a69d
 800a61c:	0800a69d 	.word	0x0800a69d
 800a620:	0800a69d 	.word	0x0800a69d
 800a624:	0800a69d 	.word	0x0800a69d
 800a628:	0800a69d 	.word	0x0800a69d
 800a62c:	0800a69d 	.word	0x0800a69d
 800a630:	0800a69d 	.word	0x0800a69d
 800a634:	0800a695 	.word	0x0800a695
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a638:	f7fc f81c 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 800a63c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a63e:	e033      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a640:	f7fc f82e 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 800a644:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a646:	e02f      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a648:	f107 0314 	add.w	r3, r7, #20
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fd f9b9 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a656:	e027      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a658:	f107 0308 	add.w	r3, r7, #8
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fd fafd 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a666:	e01f      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a668:	4b2b      	ldr	r3, [pc, #172]	; (800a718 <UART_SetConfig+0x94c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0320 	and.w	r3, r3, #32
 800a670:	2b00      	cmp	r3, #0
 800a672:	d009      	beq.n	800a688 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a674:	4b28      	ldr	r3, [pc, #160]	; (800a718 <UART_SetConfig+0x94c>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	08db      	lsrs	r3, r3, #3
 800a67a:	f003 0303 	and.w	r3, r3, #3
 800a67e:	4a27      	ldr	r2, [pc, #156]	; (800a71c <UART_SetConfig+0x950>)
 800a680:	fa22 f303 	lsr.w	r3, r2, r3
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a686:	e00f      	b.n	800a6a8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a688:	4b24      	ldr	r3, [pc, #144]	; (800a71c <UART_SetConfig+0x950>)
 800a68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68c:	e00c      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a68e:	4b24      	ldr	r3, [pc, #144]	; (800a720 <UART_SetConfig+0x954>)
 800a690:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a692:	e009      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a69a:	e005      	b.n	800a6a8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	f000 8121 	beq.w	800a8f2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	4a17      	ldr	r2, [pc, #92]	; (800a714 <UART_SetConfig+0x948>)
 800a6b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6be:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c2:	005a      	lsls	r2, r3, #1
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	085b      	lsrs	r3, r3, #1
 800a6ca:	441a      	add	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	2b0f      	cmp	r3, #15
 800a6dc:	d916      	bls.n	800a70c <UART_SetConfig+0x940>
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6e4:	d212      	bcs.n	800a70c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f023 030f 	bic.w	r3, r3, #15
 800a6ee:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	085b      	lsrs	r3, r3, #1
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	f003 0307 	and.w	r3, r3, #7
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6fe:	4313      	orrs	r3, r2
 800a700:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a708:	60da      	str	r2, [r3, #12]
 800a70a:	e0f2      	b.n	800a8f2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a712:	e0ee      	b.n	800a8f2 <UART_SetConfig+0xb26>
 800a714:	0802089c 	.word	0x0802089c
 800a718:	58024400 	.word	0x58024400
 800a71c:	03d09000 	.word	0x03d09000
 800a720:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a728:	2b40      	cmp	r3, #64	; 0x40
 800a72a:	f200 80b7 	bhi.w	800a89c <UART_SetConfig+0xad0>
 800a72e:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <UART_SetConfig+0x968>)
 800a730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a734:	0800a839 	.word	0x0800a839
 800a738:	0800a841 	.word	0x0800a841
 800a73c:	0800a89d 	.word	0x0800a89d
 800a740:	0800a89d 	.word	0x0800a89d
 800a744:	0800a849 	.word	0x0800a849
 800a748:	0800a89d 	.word	0x0800a89d
 800a74c:	0800a89d 	.word	0x0800a89d
 800a750:	0800a89d 	.word	0x0800a89d
 800a754:	0800a859 	.word	0x0800a859
 800a758:	0800a89d 	.word	0x0800a89d
 800a75c:	0800a89d 	.word	0x0800a89d
 800a760:	0800a89d 	.word	0x0800a89d
 800a764:	0800a89d 	.word	0x0800a89d
 800a768:	0800a89d 	.word	0x0800a89d
 800a76c:	0800a89d 	.word	0x0800a89d
 800a770:	0800a89d 	.word	0x0800a89d
 800a774:	0800a869 	.word	0x0800a869
 800a778:	0800a89d 	.word	0x0800a89d
 800a77c:	0800a89d 	.word	0x0800a89d
 800a780:	0800a89d 	.word	0x0800a89d
 800a784:	0800a89d 	.word	0x0800a89d
 800a788:	0800a89d 	.word	0x0800a89d
 800a78c:	0800a89d 	.word	0x0800a89d
 800a790:	0800a89d 	.word	0x0800a89d
 800a794:	0800a89d 	.word	0x0800a89d
 800a798:	0800a89d 	.word	0x0800a89d
 800a79c:	0800a89d 	.word	0x0800a89d
 800a7a0:	0800a89d 	.word	0x0800a89d
 800a7a4:	0800a89d 	.word	0x0800a89d
 800a7a8:	0800a89d 	.word	0x0800a89d
 800a7ac:	0800a89d 	.word	0x0800a89d
 800a7b0:	0800a89d 	.word	0x0800a89d
 800a7b4:	0800a88f 	.word	0x0800a88f
 800a7b8:	0800a89d 	.word	0x0800a89d
 800a7bc:	0800a89d 	.word	0x0800a89d
 800a7c0:	0800a89d 	.word	0x0800a89d
 800a7c4:	0800a89d 	.word	0x0800a89d
 800a7c8:	0800a89d 	.word	0x0800a89d
 800a7cc:	0800a89d 	.word	0x0800a89d
 800a7d0:	0800a89d 	.word	0x0800a89d
 800a7d4:	0800a89d 	.word	0x0800a89d
 800a7d8:	0800a89d 	.word	0x0800a89d
 800a7dc:	0800a89d 	.word	0x0800a89d
 800a7e0:	0800a89d 	.word	0x0800a89d
 800a7e4:	0800a89d 	.word	0x0800a89d
 800a7e8:	0800a89d 	.word	0x0800a89d
 800a7ec:	0800a89d 	.word	0x0800a89d
 800a7f0:	0800a89d 	.word	0x0800a89d
 800a7f4:	0800a89d 	.word	0x0800a89d
 800a7f8:	0800a89d 	.word	0x0800a89d
 800a7fc:	0800a89d 	.word	0x0800a89d
 800a800:	0800a89d 	.word	0x0800a89d
 800a804:	0800a89d 	.word	0x0800a89d
 800a808:	0800a89d 	.word	0x0800a89d
 800a80c:	0800a89d 	.word	0x0800a89d
 800a810:	0800a89d 	.word	0x0800a89d
 800a814:	0800a89d 	.word	0x0800a89d
 800a818:	0800a89d 	.word	0x0800a89d
 800a81c:	0800a89d 	.word	0x0800a89d
 800a820:	0800a89d 	.word	0x0800a89d
 800a824:	0800a89d 	.word	0x0800a89d
 800a828:	0800a89d 	.word	0x0800a89d
 800a82c:	0800a89d 	.word	0x0800a89d
 800a830:	0800a89d 	.word	0x0800a89d
 800a834:	0800a895 	.word	0x0800a895
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a838:	f7fb ff1c 	bl	8006674 <HAL_RCC_GetPCLK1Freq>
 800a83c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a83e:	e033      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a840:	f7fb ff2e 	bl	80066a0 <HAL_RCC_GetPCLK2Freq>
 800a844:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a846:	e02f      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	4618      	mov	r0, r3
 800a84e:	f7fd f8b9 	bl	80079c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a856:	e027      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a858:	f107 0308 	add.w	r3, r7, #8
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd f9fd 	bl	8007c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a866:	e01f      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a868:	4b2c      	ldr	r3, [pc, #176]	; (800a91c <UART_SetConfig+0xb50>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0320 	and.w	r3, r3, #32
 800a870:	2b00      	cmp	r3, #0
 800a872:	d009      	beq.n	800a888 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a874:	4b29      	ldr	r3, [pc, #164]	; (800a91c <UART_SetConfig+0xb50>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	08db      	lsrs	r3, r3, #3
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	4a28      	ldr	r2, [pc, #160]	; (800a920 <UART_SetConfig+0xb54>)
 800a880:	fa22 f303 	lsr.w	r3, r2, r3
 800a884:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a886:	e00f      	b.n	800a8a8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a888:	4b25      	ldr	r3, [pc, #148]	; (800a920 <UART_SetConfig+0xb54>)
 800a88a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a88c:	e00c      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a88e:	4b25      	ldr	r3, [pc, #148]	; (800a924 <UART_SetConfig+0xb58>)
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a892:	e009      	b.n	800a8a8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a89a:	e005      	b.n	800a8a8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a8a6:	bf00      	nop
    }

    if (pclk != 0U)
 800a8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d021      	beq.n	800a8f2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	4a1d      	ldr	r2, [pc, #116]	; (800a928 <UART_SetConfig+0xb5c>)
 800a8b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	085b      	lsrs	r3, r3, #1
 800a8c6:	441a      	add	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	2b0f      	cmp	r3, #15
 800a8d8:	d908      	bls.n	800a8ec <UART_SetConfig+0xb20>
 800a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e0:	d204      	bcs.n	800a8ec <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8e8:	60da      	str	r2, [r3, #12]
 800a8ea:	e002      	b.n	800a8f2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2200      	movs	r2, #0
 800a90c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a90e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a912:	4618      	mov	r0, r3
 800a914:	3738      	adds	r7, #56	; 0x38
 800a916:	46bd      	mov	sp, r7
 800a918:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a91c:	58024400 	.word	0x58024400
 800a920:	03d09000 	.word	0x03d09000
 800a924:	003d0900 	.word	0x003d0900
 800a928:	0802089c 	.word	0x0802089c

0800a92c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00a      	beq.n	800a956 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00a      	beq.n	800a978 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	430a      	orrs	r2, r1
 800a976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97c:	f003 0304 	and.w	r3, r3, #4
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00a      	beq.n	800a99a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	430a      	orrs	r2, r1
 800a9dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e2:	f003 0320 	and.w	r3, r3, #32
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	430a      	orrs	r2, r1
 800a9fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d01a      	beq.n	800aa42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa2a:	d10a      	bne.n	800aa42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	605a      	str	r2, [r3, #4]
  }
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aa80:	f7f6 fde6 	bl	8001650 <HAL_GetTick>
 800aa84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0308 	and.w	r3, r3, #8
 800aa90:	2b08      	cmp	r3, #8
 800aa92:	d10e      	bne.n	800aab2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f82c 	bl	800ab00 <UART_WaitOnFlagUntilTimeout>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaae:	2303      	movs	r3, #3
 800aab0:	e022      	b.n	800aaf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d10e      	bne.n	800aade <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f816 	bl	800ab00 <UART_WaitOnFlagUntilTimeout>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e00c      	b.n	800aaf8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2220      	movs	r2, #32
 800aae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2220      	movs	r2, #32
 800aaea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3710      	adds	r7, #16
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b084      	sub	sp, #16
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	4613      	mov	r3, r2
 800ab0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab10:	e062      	b.n	800abd8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab18:	d05e      	beq.n	800abd8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab1a:	f7f6 fd99 	bl	8001650 <HAL_GetTick>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	1ad3      	subs	r3, r2, r3
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d302      	bcc.n	800ab30 <UART_WaitOnFlagUntilTimeout+0x30>
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d11d      	bne.n	800ab6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ab3e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f022 0201 	bic.w	r2, r2, #1
 800ab4e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e045      	b.n	800abf8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d02e      	beq.n	800abd8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69db      	ldr	r3, [r3, #28]
 800ab80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab88:	d126      	bne.n	800abd8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab92:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800aba2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f022 0201 	bic.w	r2, r2, #1
 800abb2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2220      	movs	r2, #32
 800abc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	2220      	movs	r2, #32
 800abc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e00f      	b.n	800abf8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	69da      	ldr	r2, [r3, #28]
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4013      	ands	r3, r2
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	bf0c      	ite	eq
 800abe8:	2301      	moveq	r3, #1
 800abea:	2300      	movne	r3, #0
 800abec:	b2db      	uxtb	r3, r3
 800abee:	461a      	mov	r2, r3
 800abf0:	79fb      	ldrb	r3, [r7, #7]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d08d      	beq.n	800ab12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <HAL_UARTEx_DisableFifoMode+0x16>
 800ac12:	2302      	movs	r3, #2
 800ac14:	e027      	b.n	800ac66 <HAL_UARTEx_DisableFifoMode+0x66>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2224      	movs	r2, #36	; 0x24
 800ac22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	681a      	ldr	r2, [r3, #0]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f022 0201 	bic.w	r2, r2, #1
 800ac3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	68fa      	ldr	r2, [r7, #12]
 800ac52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2220      	movs	r2, #32
 800ac58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr

0800ac72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
 800ac7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d101      	bne.n	800ac8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac86:	2302      	movs	r3, #2
 800ac88:	e02d      	b.n	800ace6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2224      	movs	r2, #36	; 0x24
 800ac96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0201 	bic.w	r2, r2, #1
 800acb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 f850 	bl	800ad6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
 800acf6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d101      	bne.n	800ad06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad02:	2302      	movs	r3, #2
 800ad04:	e02d      	b.n	800ad62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2201      	movs	r2, #1
 800ad0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2224      	movs	r2, #36	; 0x24
 800ad12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f022 0201 	bic.w	r2, r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	430a      	orrs	r2, r1
 800ad40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f812 	bl	800ad6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
	...

0800ad6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b089      	sub	sp, #36	; 0x24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800ad74:	4a2f      	ldr	r2, [pc, #188]	; (800ae34 <UARTEx_SetNbDataToProcess+0xc8>)
 800ad76:	f107 0314 	add.w	r3, r7, #20
 800ad7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad7e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800ad82:	4a2d      	ldr	r2, [pc, #180]	; (800ae38 <UARTEx_SetNbDataToProcess+0xcc>)
 800ad84:	f107 030c 	add.w	r3, r7, #12
 800ad88:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ad8c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d108      	bne.n	800adaa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ada8:	e03d      	b.n	800ae26 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800adaa:	2310      	movs	r3, #16
 800adac:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800adae:	2310      	movs	r3, #16
 800adb0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	0e5b      	lsrs	r3, r3, #25
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	0f5b      	lsrs	r3, r3, #29
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	f003 0307 	and.w	r3, r3, #7
 800add0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800add2:	7fbb      	ldrb	r3, [r7, #30]
 800add4:	7f3a      	ldrb	r2, [r7, #28]
 800add6:	f107 0120 	add.w	r1, r7, #32
 800adda:	440a      	add	r2, r1
 800addc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ade0:	fb02 f303 	mul.w	r3, r2, r3
 800ade4:	7f3a      	ldrb	r2, [r7, #28]
 800ade6:	f107 0120 	add.w	r1, r7, #32
 800adea:	440a      	add	r2, r1
 800adec:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800adf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800adfc:	7ffb      	ldrb	r3, [r7, #31]
 800adfe:	7f7a      	ldrb	r2, [r7, #29]
 800ae00:	f107 0120 	add.w	r1, r7, #32
 800ae04:	440a      	add	r2, r1
 800ae06:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800ae0a:	fb02 f303 	mul.w	r3, r2, r3
 800ae0e:	7f7a      	ldrb	r2, [r7, #29]
 800ae10:	f107 0120 	add.w	r1, r7, #32
 800ae14:	440a      	add	r2, r1
 800ae16:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800ae1a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae26:	bf00      	nop
 800ae28:	3724      	adds	r7, #36	; 0x24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	0801d848 	.word	0x0801d848
 800ae38:	0801d850 	.word	0x0801d850

0800ae3c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ae3c:	b084      	sub	sp, #16
 800ae3e:	b480      	push	{r7}
 800ae40:	b085      	sub	sp, #20
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	f107 001c 	add.w	r0, r7, #28
 800ae4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ae52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800ae54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ae56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800ae5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ae5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800ae5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ae60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800ae62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae64:	68fa      	ldr	r2, [r7, #12]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <SDMMC_Init+0x50>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	431a      	orrs	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	b004      	add	sp, #16
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	ffc02c00 	.word	0xffc02c00

0800ae90 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	370c      	adds	r7, #12
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aebe:	2300      	movs	r3, #0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	370c      	adds	r7, #12
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr

0800aecc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f043 0203 	orr.w	r2, r3, #3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	370c      	adds	r7, #12
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr

0800aeee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0303 	and.w	r3, r3, #3
}
 800aefe:	4618      	mov	r0, r3
 800af00:	370c      	adds	r7, #12
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
	...

0800af0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800af30:	431a      	orrs	r2, r3
                       Command->CPSM);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800af36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68da      	ldr	r2, [r3, #12]
 800af42:	4b06      	ldr	r3, [pc, #24]	; (800af5c <SDMMC_SendCommand+0x50>)
 800af44:	4013      	ands	r3, r2
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	431a      	orrs	r2, r3
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr
 800af5c:	fffee0c0 	.word	0xfffee0c0

0800af60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	b2db      	uxtb	r3, r3
}
 800af6e:	4618      	mov	r0, r3
 800af70:	370c      	adds	r7, #12
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b085      	sub	sp, #20
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3314      	adds	r3, #20
 800af88:	461a      	mov	r2, r3
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	4413      	add	r3, r2
 800af8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800afaa:	2300      	movs	r3, #0
 800afac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800afcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800afd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afea:	2300      	movs	r3, #0

}
 800afec:	4618      	mov	r0, r3
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b088      	sub	sp, #32
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b006:	2310      	movs	r3, #16
 800b008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b00a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b00e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b018:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01a:	f107 0308 	add.w	r3, r7, #8
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f7ff ff73 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b026:	f241 3288 	movw	r2, #5000	; 0x1388
 800b02a:	2110      	movs	r1, #16
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 faaf 	bl	800b590 <SDMMC_GetCmdResp1>
 800b032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b034:	69fb      	ldr	r3, [r7, #28]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b088      	sub	sp, #32
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b04c:	2311      	movs	r3, #17
 800b04e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b056:	2300      	movs	r3, #0
 800b058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b05a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff ff50 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b070:	2111      	movs	r1, #17
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fa8c 	bl	800b590 <SDMMC_GetCmdResp1>
 800b078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b07a:	69fb      	ldr	r3, [r7, #28]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b092:	2312      	movs	r3, #18
 800b094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b09c:	2300      	movs	r3, #0
 800b09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a6:	f107 0308 	add.w	r3, r7, #8
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff ff2d 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b6:	2112      	movs	r1, #18
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 fa69 	bl	800b590 <SDMMC_GetCmdResp1>
 800b0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b0d8:	2318      	movs	r3, #24
 800b0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0ec:	f107 0308 	add.w	r3, r7, #8
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff ff0a 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b0f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fc:	2118      	movs	r1, #24
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 fa46 	bl	800b590 <SDMMC_GetCmdResp1>
 800b104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b106:	69fb      	ldr	r3, [r7, #28]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3720      	adds	r7, #32
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b11e:	2319      	movs	r3, #25
 800b120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b122:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7ff fee7 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b142:	2119      	movs	r1, #25
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fa23 	bl	800b590 <SDMMC_GetCmdResp1>
 800b14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14c:	69fb      	ldr	r3, [r7, #28]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3720      	adds	r7, #32
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b164:	230c      	movs	r3, #12
 800b166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b176:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b190:	f107 0308 	add.w	r3, r7, #8
 800b194:	4619      	mov	r1, r3
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7ff feb8 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b19c:	4a0b      	ldr	r2, [pc, #44]	; (800b1cc <SDMMC_CmdStopTransfer+0x74>)
 800b19e:	210c      	movs	r1, #12
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f9f5 	bl	800b590 <SDMMC_GetCmdResp1>
 800b1a6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1ba:	d101      	bne.n	800b1c0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b1c0:	69fb      	ldr	r3, [r7, #28]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3720      	adds	r7, #32
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	05f5e100 	.word	0x05f5e100

0800b1d0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08a      	sub	sp, #40	; 0x28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b1e0:	2307      	movs	r3, #7
 800b1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b1e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1e8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b1f2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1f4:	f107 0310 	add.w	r3, r7, #16
 800b1f8:	4619      	mov	r1, r3
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fe86 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b200:	f241 3288 	movw	r2, #5000	; 0x1388
 800b204:	2107      	movs	r1, #7
 800b206:	68f8      	ldr	r0, [r7, #12]
 800b208:	f000 f9c2 	bl	800b590 <SDMMC_GetCmdResp1>
 800b20c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b210:	4618      	mov	r0, r3
 800b212:	3728      	adds	r7, #40	; 0x28
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b220:	2300      	movs	r3, #0
 800b222:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b224:	2300      	movs	r3, #0
 800b226:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b228:	2300      	movs	r3, #0
 800b22a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b22c:	2300      	movs	r3, #0
 800b22e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b234:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b236:	f107 0308 	add.w	r3, r7, #8
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff fe65 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f976 	bl	800b534 <SDMMC_GetCmdError>
 800b248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b24a:	69fb      	ldr	r3, [r7, #28]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3720      	adds	r7, #32
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}

0800b254 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b088      	sub	sp, #32
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b25c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b262:	2308      	movs	r3, #8
 800b264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b26a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b26c:	2300      	movs	r3, #0
 800b26e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b276:	f107 0308 	add.w	r3, r7, #8
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f7ff fe45 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fb78 	bl	800b978 <SDMMC_GetCmdResp7>
 800b288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b28a:	69fb      	ldr	r3, [r7, #28]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3720      	adds	r7, #32
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b2a2:	2337      	movs	r3, #55	; 0x37
 800b2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2b6:	f107 0308 	add.w	r3, r7, #8
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fe25 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b2c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c6:	2137      	movs	r1, #55	; 0x37
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 f961 	bl	800b590 <SDMMC_GetCmdResp1>
 800b2ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2d0:	69fb      	ldr	r3, [r7, #28]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3720      	adds	r7, #32
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b088      	sub	sp, #32
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b2e8:	2329      	movs	r3, #41	; 0x29
 800b2ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2fc:	f107 0308 	add.w	r3, r7, #8
 800b300:	4619      	mov	r1, r3
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff fe02 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fa7d 	bl	800b808 <SDMMC_GetCmdResp3>
 800b30e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b310:	69fb      	ldr	r3, [r7, #28]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3720      	adds	r7, #32
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b088      	sub	sp, #32
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b328:	2306      	movs	r3, #6
 800b32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b330:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b336:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b33a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b33c:	f107 0308 	add.w	r3, r7, #8
 800b340:	4619      	mov	r1, r3
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff fde2 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b348:	f241 3288 	movw	r2, #5000	; 0x1388
 800b34c:	2106      	movs	r1, #6
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f91e 	bl	800b590 <SDMMC_GetCmdResp1>
 800b354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b356:	69fb      	ldr	r3, [r7, #28]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3720      	adds	r7, #32
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b088      	sub	sp, #32
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b368:	2300      	movs	r3, #0
 800b36a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b36c:	2333      	movs	r3, #51	; 0x33
 800b36e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b370:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b376:	2300      	movs	r3, #0
 800b378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b37a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b37e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b380:	f107 0308 	add.w	r3, r7, #8
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff fdc0 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b390:	2133      	movs	r1, #51	; 0x33
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f8fc 	bl	800b590 <SDMMC_GetCmdResp1>
 800b398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b39a:	69fb      	ldr	r3, [r7, #28]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3720      	adds	r7, #32
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3c4:	f107 0308 	add.w	r3, r7, #8
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f7ff fd9e 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f9cf 	bl	800b774 <SDMMC_GetCmdResp2>
 800b3d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3720      	adds	r7, #32
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}

0800b3e2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b088      	sub	sp, #32
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
 800b3ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b3f0:	2309      	movs	r3, #9
 800b3f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b3f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b404:	f107 0308 	add.w	r3, r7, #8
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f7ff fd7e 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f9af 	bl	800b774 <SDMMC_GetCmdResp2>
 800b416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b418:	69fb      	ldr	r3, [r7, #28]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3720      	adds	r7, #32
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b422:	b580      	push	{r7, lr}
 800b424:	b088      	sub	sp, #32
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
 800b42a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b430:	2303      	movs	r3, #3
 800b432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b434:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b43a:	2300      	movs	r3, #0
 800b43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b43e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b444:	f107 0308 	add.w	r3, r7, #8
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7ff fd5e 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	2103      	movs	r1, #3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 fa17 	bl	800b888 <SDMMC_GetCmdResp6>
 800b45a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b45c:	69fb      	ldr	r3, [r7, #28]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3720      	adds	r7, #32
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b088      	sub	sp, #32
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b474:	230d      	movs	r3, #13
 800b476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b47e:	2300      	movs	r3, #0
 800b480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b488:	f107 0308 	add.w	r3, r7, #8
 800b48c:	4619      	mov	r1, r3
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f7ff fd3c 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b494:	f241 3288 	movw	r2, #5000	; 0x1388
 800b498:	210d      	movs	r1, #13
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f878 	bl	800b590 <SDMMC_GetCmdResp1>
 800b4a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a2:	69fb      	ldr	r3, [r7, #28]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3720      	adds	r7, #32
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b4b8:	230d      	movs	r3, #13
 800b4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4cc:	f107 0308 	add.w	r3, r7, #8
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f7ff fd1a 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4dc:	210d      	movs	r1, #13
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f856 	bl	800b590 <SDMMC_GetCmdResp1>
 800b4e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4e6:	69fb      	ldr	r3, [r7, #28]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3720      	adds	r7, #32
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b088      	sub	sp, #32
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b4fc:	230b      	movs	r3, #11
 800b4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b500:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b50a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b50e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b510:	f107 0308 	add.w	r3, r7, #8
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7ff fcf8 	bl	800af0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b51c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b520:	210b      	movs	r1, #11
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f834 	bl	800b590 <SDMMC_GetCmdResp1>
 800b528:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b52a:	69fb      	ldr	r3, [r7, #28]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3720      	adds	r7, #32
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b534:	b480      	push	{r7}
 800b536:	b085      	sub	sp, #20
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b53c:	4b11      	ldr	r3, [pc, #68]	; (800b584 <SDMMC_GetCmdError+0x50>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a11      	ldr	r2, [pc, #68]	; (800b588 <SDMMC_GetCmdError+0x54>)
 800b542:	fba2 2303 	umull	r2, r3, r2, r3
 800b546:	0a5b      	lsrs	r3, r3, #9
 800b548:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54c:	fb02 f303 	mul.w	r3, r2, r3
 800b550:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	1e5a      	subs	r2, r3, #1
 800b556:	60fa      	str	r2, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b560:	e009      	b.n	800b576 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0f1      	beq.n	800b552 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a06      	ldr	r2, [pc, #24]	; (800b58c <SDMMC_GetCmdError+0x58>)
 800b572:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3714      	adds	r7, #20
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	24000000 	.word	0x24000000
 800b588:	10624dd3 	.word	0x10624dd3
 800b58c:	002000c5 	.word	0x002000c5

0800b590 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	460b      	mov	r3, r1
 800b59a:	607a      	str	r2, [r7, #4]
 800b59c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b59e:	4b70      	ldr	r3, [pc, #448]	; (800b760 <SDMMC_GetCmdResp1+0x1d0>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a70      	ldr	r2, [pc, #448]	; (800b764 <SDMMC_GetCmdResp1+0x1d4>)
 800b5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800b5a8:	0a5a      	lsrs	r2, r3, #9
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	fb02 f303 	mul.w	r3, r2, r3
 800b5b0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	1e5a      	subs	r2, r3, #1
 800b5b6:	61fa      	str	r2, [r7, #28]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d102      	bne.n	800b5c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5c0:	e0c9      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b5c8:	69ba      	ldr	r2, [r7, #24]
 800b5ca:	4b67      	ldr	r3, [pc, #412]	; (800b768 <SDMMC_GetCmdResp1+0x1d8>)
 800b5cc:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0ef      	beq.n	800b5b2 <SDMMC_GetCmdResp1+0x22>
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1ea      	bne.n	800b5b2 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5e0:	f003 0304 	and.w	r3, r3, #4
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d004      	beq.n	800b5f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2204      	movs	r2, #4
 800b5ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ee:	2304      	movs	r3, #4
 800b5f0:	e0b1      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d004      	beq.n	800b608 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b604:	2301      	movs	r3, #1
 800b606:	e0a6      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4a58      	ldr	r2, [pc, #352]	; (800b76c <SDMMC_GetCmdResp1+0x1dc>)
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fca6 	bl	800af60 <SDMMC_GetCommandResponse>
 800b614:	4603      	mov	r3, r0
 800b616:	461a      	mov	r2, r3
 800b618:	7afb      	ldrb	r3, [r7, #11]
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d001      	beq.n	800b622 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b61e:	2301      	movs	r3, #1
 800b620:	e099      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b622:	2100      	movs	r1, #0
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7ff fca8 	bl	800af7a <SDMMC_GetResponse>
 800b62a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	4b50      	ldr	r3, [pc, #320]	; (800b770 <SDMMC_GetCmdResp1+0x1e0>)
 800b630:	4013      	ands	r3, r2
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b636:	2300      	movs	r3, #0
 800b638:	e08d      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	da02      	bge.n	800b646 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b644:	e087      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d001      	beq.n	800b654 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b650:	2340      	movs	r3, #64	; 0x40
 800b652:	e080      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b65e:	2380      	movs	r3, #128	; 0x80
 800b660:	e079      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b66c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b670:	e071      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b67c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b680:	e069      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b690:	e061      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b69c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b6a0:	e059      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b6ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6b0:	e051      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b6bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6c0:	e049      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b6cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6d0:	e041      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b6dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6e0:	e039      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d002      	beq.n	800b6f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b6ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b6f0:	e031      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b6fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b700:	e029      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b70c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b710:	e021      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d002      	beq.n	800b722 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b71c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b720:	e019      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d002      	beq.n	800b732 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b72c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b730:	e011      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b73c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b740:	e009      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f003 0308 	and.w	r3, r3, #8
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b74c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b750:	e001      	b.n	800b756 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b752:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	24000000 	.word	0x24000000
 800b764:	10624dd3 	.word	0x10624dd3
 800b768:	00200045 	.word	0x00200045
 800b76c:	002000c5 	.word	0x002000c5
 800b770:	fdffe008 	.word	0xfdffe008

0800b774 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b774:	b480      	push	{r7}
 800b776:	b085      	sub	sp, #20
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b77c:	4b1f      	ldr	r3, [pc, #124]	; (800b7fc <SDMMC_GetCmdResp2+0x88>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a1f      	ldr	r2, [pc, #124]	; (800b800 <SDMMC_GetCmdResp2+0x8c>)
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	0a5b      	lsrs	r3, r3, #9
 800b788:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78c:	fb02 f303 	mul.w	r3, r2, r3
 800b790:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	1e5a      	subs	r2, r3, #1
 800b796:	60fa      	str	r2, [r7, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b79c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b7a0:	e026      	b.n	800b7f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d0ef      	beq.n	800b792 <SDMMC_GetCmdResp2+0x1e>
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1ea      	bne.n	800b792 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7c0:	f003 0304 	and.w	r3, r3, #4
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d004      	beq.n	800b7d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2204      	movs	r2, #4
 800b7cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	e00e      	b.n	800b7f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e003      	b.n	800b7f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a06      	ldr	r2, [pc, #24]	; (800b804 <SDMMC_GetCmdResp2+0x90>)
 800b7ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3714      	adds	r7, #20
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr
 800b7fc:	24000000 	.word	0x24000000
 800b800:	10624dd3 	.word	0x10624dd3
 800b804:	002000c5 	.word	0x002000c5

0800b808 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b810:	4b1a      	ldr	r3, [pc, #104]	; (800b87c <SDMMC_GetCmdResp3+0x74>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a1a      	ldr	r2, [pc, #104]	; (800b880 <SDMMC_GetCmdResp3+0x78>)
 800b816:	fba2 2303 	umull	r2, r3, r2, r3
 800b81a:	0a5b      	lsrs	r3, r3, #9
 800b81c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b820:	fb02 f303 	mul.w	r3, r2, r3
 800b824:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	1e5a      	subs	r2, r3, #1
 800b82a:	60fa      	str	r2, [r7, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d102      	bne.n	800b836 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b830:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b834:	e01b      	b.n	800b86e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b842:	2b00      	cmp	r3, #0
 800b844:	d0ef      	beq.n	800b826 <SDMMC_GetCmdResp3+0x1e>
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1ea      	bne.n	800b826 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b854:	f003 0304 	and.w	r3, r3, #4
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d004      	beq.n	800b866 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2204      	movs	r2, #4
 800b860:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b862:	2304      	movs	r3, #4
 800b864:	e003      	b.n	800b86e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a06      	ldr	r2, [pc, #24]	; (800b884 <SDMMC_GetCmdResp3+0x7c>)
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	24000000 	.word	0x24000000
 800b880:	10624dd3 	.word	0x10624dd3
 800b884:	002000c5 	.word	0x002000c5

0800b888 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	460b      	mov	r3, r1
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b896:	4b35      	ldr	r3, [pc, #212]	; (800b96c <SDMMC_GetCmdResp6+0xe4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a35      	ldr	r2, [pc, #212]	; (800b970 <SDMMC_GetCmdResp6+0xe8>)
 800b89c:	fba2 2303 	umull	r2, r3, r2, r3
 800b8a0:	0a5b      	lsrs	r3, r3, #9
 800b8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8a6:	fb02 f303 	mul.w	r3, r2, r3
 800b8aa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	1e5a      	subs	r2, r3, #1
 800b8b0:	61fa      	str	r2, [r7, #28]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d102      	bne.n	800b8bc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8ba:	e052      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8c0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d0ef      	beq.n	800b8ac <SDMMC_GetCmdResp6+0x24>
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1ea      	bne.n	800b8ac <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d004      	beq.n	800b8ec <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2204      	movs	r2, #4
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b8e8:	2304      	movs	r3, #4
 800b8ea:	e03a      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f0:	f003 0301 	and.w	r3, r3, #1
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d004      	beq.n	800b902 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e02f      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	f7ff fb2c 	bl	800af60 <SDMMC_GetCommandResponse>
 800b908:	4603      	mov	r3, r0
 800b90a:	461a      	mov	r2, r3
 800b90c:	7afb      	ldrb	r3, [r7, #11]
 800b90e:	4293      	cmp	r3, r2
 800b910:	d001      	beq.n	800b916 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b912:	2301      	movs	r3, #1
 800b914:	e025      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	4a16      	ldr	r2, [pc, #88]	; (800b974 <SDMMC_GetCmdResp6+0xec>)
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b91c:	2100      	movs	r1, #0
 800b91e:	68f8      	ldr	r0, [r7, #12]
 800b920:	f7ff fb2b 	bl	800af7a <SDMMC_GetResponse>
 800b924:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d106      	bne.n	800b93e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	0c1b      	lsrs	r3, r3, #16
 800b934:	b29a      	uxth	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e011      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b94c:	e009      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b954:	2b00      	cmp	r3, #0
 800b956:	d002      	beq.n	800b95e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b95c:	e001      	b.n	800b962 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b95e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b962:	4618      	mov	r0, r3
 800b964:	3720      	adds	r7, #32
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	24000000 	.word	0x24000000
 800b970:	10624dd3 	.word	0x10624dd3
 800b974:	002000c5 	.word	0x002000c5

0800b978 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b980:	4b22      	ldr	r3, [pc, #136]	; (800ba0c <SDMMC_GetCmdResp7+0x94>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a22      	ldr	r2, [pc, #136]	; (800ba10 <SDMMC_GetCmdResp7+0x98>)
 800b986:	fba2 2303 	umull	r2, r3, r2, r3
 800b98a:	0a5b      	lsrs	r3, r3, #9
 800b98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b990:	fb02 f303 	mul.w	r3, r2, r3
 800b994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	60fa      	str	r2, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9a4:	e02c      	b.n	800ba00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0ef      	beq.n	800b996 <SDMMC_GetCmdResp7+0x1e>
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1ea      	bne.n	800b996 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2204      	movs	r2, #4
 800b9d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9d2:	2304      	movs	r3, #4
 800b9d4:	e014      	b.n	800ba00 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d004      	beq.n	800b9ec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e009      	b.n	800ba00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2240      	movs	r2, #64	; 0x40
 800b9fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9fe:	2300      	movs	r3, #0

}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr
 800ba0c:	24000000 	.word	0x24000000
 800ba10:	10624dd3 	.word	0x10624dd3

0800ba14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ba18:	4904      	ldr	r1, [pc, #16]	; (800ba2c <MX_FATFS_Init+0x18>)
 800ba1a:	4805      	ldr	r0, [pc, #20]	; (800ba30 <MX_FATFS_Init+0x1c>)
 800ba1c:	f005 f912 	bl	8010c44 <FATFS_LinkDriver>
 800ba20:	4603      	mov	r3, r0
 800ba22:	461a      	mov	r2, r3
 800ba24:	4b03      	ldr	r3, [pc, #12]	; (800ba34 <MX_FATFS_Init+0x20>)
 800ba26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	240024fc 	.word	0x240024fc
 800ba30:	080208b4 	.word	0x080208b4
 800ba34:	240024f8 	.word	0x240024f8

0800ba38 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ba3c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba52:	f000 f885 	bl	800bb60 <BSP_SD_IsDetected>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b01      	cmp	r3, #1
 800ba5a:	d001      	beq.n	800ba60 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ba5c:	2302      	movs	r3, #2
 800ba5e:	e012      	b.n	800ba86 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ba60:	480b      	ldr	r0, [pc, #44]	; (800ba90 <BSP_SD_Init+0x48>)
 800ba62:	f7fc fcf7 	bl	8008454 <HAL_SD_Init>
 800ba66:	4603      	mov	r3, r0
 800ba68:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba6a:	79fb      	ldrb	r3, [r7, #7]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d109      	bne.n	800ba84 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ba70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba74:	4806      	ldr	r0, [pc, #24]	; (800ba90 <BSP_SD_Init+0x48>)
 800ba76:	f7fd fbb3 	bl	80091e0 <HAL_SD_ConfigWideBusOperation>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba84:	79fb      	ldrb	r3, [r7, #7]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	24001358 	.word	0x24001358

0800ba94 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	4806      	ldr	r0, [pc, #24]	; (800bac4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800baac:	f7fc fdf6 	bl	800869c <HAL_SD_ReadBlocks_DMA>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800baba:	7dfb      	ldrb	r3, [r7, #23]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3718      	adds	r7, #24
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	24001358 	.word	0x24001358

0800bac8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af00      	add	r7, sp, #0
 800bace:	60f8      	str	r0, [r7, #12]
 800bad0:	60b9      	str	r1, [r7, #8]
 800bad2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	68ba      	ldr	r2, [r7, #8]
 800badc:	68f9      	ldr	r1, [r7, #12]
 800bade:	4806      	ldr	r0, [pc, #24]	; (800baf8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bae0:	f7fc fe84 	bl	80087ec <HAL_SD_WriteBlocks_DMA>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800baee:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	24001358 	.word	0x24001358

0800bafc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bb00:	4805      	ldr	r0, [pc, #20]	; (800bb18 <BSP_SD_GetCardState+0x1c>)
 800bb02:	f7fd fc17 	bl	8009334 <HAL_SD_GetCardState>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b04      	cmp	r3, #4
 800bb0a:	bf14      	ite	ne
 800bb0c:	2301      	movne	r3, #1
 800bb0e:	2300      	moveq	r3, #0
 800bb10:	b2db      	uxtb	r3, r3
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	24001358 	.word	0x24001358

0800bb1c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bb24:	6879      	ldr	r1, [r7, #4]
 800bb26:	4803      	ldr	r0, [pc, #12]	; (800bb34 <BSP_SD_GetCardInfo+0x18>)
 800bb28:	f7fd fb2e 	bl	8009188 <HAL_SD_GetCardInfo>
}
 800bb2c:	bf00      	nop
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}
 800bb34:	24001358 	.word	0x24001358

0800bb38 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bb40:	f000 f9f6 	bl	800bf30 <BSP_SD_WriteCpltCallback>
}
 800bb44:	bf00      	nop
 800bb46:	3708      	adds	r7, #8
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bb54:	f000 f9f8 	bl	800bf48 <BSP_SD_ReadCpltCallback>
}
 800bb58:	bf00      	nop
 800bb5a:	3708      	adds	r7, #8
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}

0800bb60 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb66:	2301      	movs	r3, #1
 800bb68:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800bb6a:	79fb      	ldrb	r3, [r7, #7]
 800bb6c:	b2db      	uxtb	r3, r3
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
	...

0800bb7c <SCB_InvalidateDCache_by_Addr>:
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bb8e:	2320      	movs	r3, #32
 800bb90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bb92:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800bb96:	e00b      	b.n	800bbb0 <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800bb98:	4a0c      	ldr	r2, [pc, #48]	; (800bbcc <SCB_InvalidateDCache_by_Addr+0x50>)
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	4413      	add	r3, r2
 800bba6:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	1ad3      	subs	r3, r2, r3
 800bbae:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dcf0      	bgt.n	800bb98 <SCB_InvalidateDCache_by_Addr+0x1c>
 800bbb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bbba:	f3bf 8f6f 	isb	sy
}
 800bbbe:	bf00      	nop
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	e000ed00 	.word	0xe000ed00

0800bbd0 <SCB_CleanDCache_by_Addr>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800bbe2:	2320      	movs	r3, #32
 800bbe4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800bbe6:	f3bf 8f4f 	dsb	sy
    while (op_size > 0) {
 800bbea:	e00b      	b.n	800bc04 <SCB_CleanDCache_by_Addr+0x34>
      SCB->DCCMVAC = op_addr;
 800bbec:	4a0c      	ldr	r2, [pc, #48]	; (800bc20 <SCB_CleanDCache_by_Addr+0x50>)
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
      op_addr += (uint32_t)linesize;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	dcf0      	bgt.n	800bbec <SCB_CleanDCache_by_Addr+0x1c>
 800bc0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800bc0e:	f3bf 8f6f 	isb	sy
}
 800bc12:	bf00      	nop
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bc2c:	f7f5 fd10 	bl	8001650 <HAL_GetTick>
 800bc30:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bc32:	e006      	b.n	800bc42 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc34:	f7ff ff62 	bl	800bafc <BSP_SD_GetCardState>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e009      	b.n	800bc56 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bc42:	f7f5 fd05 	bl	8001650 <HAL_GetTick>
 800bc46:	4602      	mov	r2, r0
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	1ad3      	subs	r3, r2, r3
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d8f0      	bhi.n	800bc34 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bc52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
	...

0800bc60 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	; (800bc98 <SD_CheckStatus+0x38>)
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bc70:	f7ff ff44 	bl	800bafc <BSP_SD_GetCardState>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d107      	bne.n	800bc8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bc7a:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <SD_CheckStatus+0x38>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	f023 0301 	bic.w	r3, r3, #1
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	4b04      	ldr	r3, [pc, #16]	; (800bc98 <SD_CheckStatus+0x38>)
 800bc88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bc8a:	4b03      	ldr	r3, [pc, #12]	; (800bc98 <SD_CheckStatus+0x38>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	b2db      	uxtb	r3, r3
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	2400000d 	.word	0x2400000d

0800bc9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	4603      	mov	r3, r0
 800bca4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bca6:	f7ff fecf 	bl	800ba48 <BSP_SD_Init>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d107      	bne.n	800bcc0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bcb0:	79fb      	ldrb	r3, [r7, #7]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff ffd4 	bl	800bc60 <SD_CheckStatus>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	461a      	mov	r2, r3
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <SD_initialize+0x34>)
 800bcbe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bcc0:	4b03      	ldr	r3, [pc, #12]	; (800bcd0 <SD_initialize+0x34>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	b2db      	uxtb	r3, r3
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3708      	adds	r7, #8
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	2400000d 	.word	0x2400000d

0800bcd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bcde:	79fb      	ldrb	r3, [r7, #7]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f7ff ffbd 	bl	800bc60 <SD_CheckStatus>
 800bce6:	4603      	mov	r3, r0
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}

0800bcf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b088      	sub	sp, #32
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	603b      	str	r3, [r7, #0]
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd04:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd08:	f7ff ff8c 	bl	800bc24 <SD_CheckStatusWithTimeout>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da01      	bge.n	800bd16 <SD_read+0x26>
  {
    return res;
 800bd12:	7ffb      	ldrb	r3, [r7, #31]
 800bd14:	e049      	b.n	800bdaa <SD_read+0xba>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bd16:	683a      	ldr	r2, [r7, #0]
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	68b8      	ldr	r0, [r7, #8]
 800bd1c:	f7ff feba 	bl	800ba94 <BSP_SD_ReadBlocks_DMA>
 800bd20:	4603      	mov	r3, r0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d140      	bne.n	800bda8 <SD_read+0xb8>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bd26:	4b23      	ldr	r3, [pc, #140]	; (800bdb4 <SD_read+0xc4>)
 800bd28:	2200      	movs	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bd2c:	f7f5 fc90 	bl	8001650 <HAL_GetTick>
 800bd30:	61b8      	str	r0, [r7, #24]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bd32:	bf00      	nop
 800bd34:	4b1f      	ldr	r3, [pc, #124]	; (800bdb4 <SD_read+0xc4>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d108      	bne.n	800bd4e <SD_read+0x5e>
 800bd3c:	f7f5 fc88 	bl	8001650 <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d9f2      	bls.n	800bd34 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800bd4e:	4b19      	ldr	r3, [pc, #100]	; (800bdb4 <SD_read+0xc4>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d102      	bne.n	800bd5c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	77fb      	strb	r3, [r7, #31]
 800bd5a:	e025      	b.n	800bda8 <SD_read+0xb8>
      }
      else
      {
        ReadStatus = 0;
 800bd5c:	4b15      	ldr	r3, [pc, #84]	; (800bdb4 <SD_read+0xc4>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bd62:	f7f5 fc75 	bl	8001650 <HAL_GetTick>
 800bd66:	61b8      	str	r0, [r7, #24]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd68:	e015      	b.n	800bd96 <SD_read+0xa6>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd6a:	f7ff fec7 	bl	800bafc <BSP_SD_GetCardState>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d110      	bne.n	800bd96 <SD_read+0xa6>
          {
            res = RES_OK;
 800bd74:	2300      	movs	r3, #0
 800bd76:	77fb      	strb	r3, [r7, #31]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
            /*
            the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	f023 031f 	bic.w	r3, r3, #31
 800bd7e:	617b      	str	r3, [r7, #20]
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	025a      	lsls	r2, r3, #9
 800bd86:	68b9      	ldr	r1, [r7, #8]
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	1acb      	subs	r3, r1, r3
 800bd8c:	4413      	add	r3, r2
 800bd8e:	4619      	mov	r1, r3
 800bd90:	f7ff fef4 	bl	800bb7c <SCB_InvalidateDCache_by_Addr>
#endif
            break;
 800bd94:	e008      	b.n	800bda8 <SD_read+0xb8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd96:	f7f5 fc5b 	bl	8001650 <HAL_GetTick>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d9e0      	bls.n	800bd6a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bda8:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3720      	adds	r7, #32
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	240000ac 	.word	0x240000ac

0800bdb8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b088      	sub	sp, #32
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	607a      	str	r2, [r7, #4]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	77fb      	strb	r3, [r7, #31]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bdcc:	4b2b      	ldr	r3, [pc, #172]	; (800be7c <SD_write+0xc4>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bdd2:	f247 5030 	movw	r0, #30000	; 0x7530
 800bdd6:	f7ff ff25 	bl	800bc24 <SD_CheckStatusWithTimeout>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	da01      	bge.n	800bde4 <SD_write+0x2c>
  {
    return res;
 800bde0:	7ffb      	ldrb	r3, [r7, #31]
 800bde2:	e046      	b.n	800be72 <SD_write+0xba>

    /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f023 031f 	bic.w	r3, r3, #31
 800bdea:	61bb      	str	r3, [r7, #24]
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 800bdec:	69b8      	ldr	r0, [r7, #24]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	025a      	lsls	r2, r3, #9
 800bdf2:	68b9      	ldr	r1, [r7, #8]
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	1acb      	subs	r3, r1, r3
 800bdf8:	4413      	add	r3, r2
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	f7ff fee8 	bl	800bbd0 <SCB_CleanDCache_by_Addr>
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	68b8      	ldr	r0, [r7, #8]
 800be06:	f7ff fe5f 	bl	800bac8 <BSP_SD_WriteBlocks_DMA>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d12f      	bne.n	800be70 <SD_write+0xb8>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800be10:	f7f5 fc1e 	bl	8001650 <HAL_GetTick>
 800be14:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800be16:	bf00      	nop
 800be18:	4b18      	ldr	r3, [pc, #96]	; (800be7c <SD_write+0xc4>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d108      	bne.n	800be32 <SD_write+0x7a>
 800be20:	f7f5 fc16 	bl	8001650 <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	f247 522f 	movw	r2, #29999	; 0x752f
 800be2e:	4293      	cmp	r3, r2
 800be30:	d9f2      	bls.n	800be18 <SD_write+0x60>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800be32:	4b12      	ldr	r3, [pc, #72]	; (800be7c <SD_write+0xc4>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d102      	bne.n	800be40 <SD_write+0x88>
      {
        res = RES_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	77fb      	strb	r3, [r7, #31]
 800be3e:	e017      	b.n	800be70 <SD_write+0xb8>
      }
      else
      {
        WriteStatus = 0;
 800be40:	4b0e      	ldr	r3, [pc, #56]	; (800be7c <SD_write+0xc4>)
 800be42:	2200      	movs	r2, #0
 800be44:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800be46:	f7f5 fc03 	bl	8001650 <HAL_GetTick>
 800be4a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be4c:	e007      	b.n	800be5e <SD_write+0xa6>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be4e:	f7ff fe55 	bl	800bafc <BSP_SD_GetCardState>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d102      	bne.n	800be5e <SD_write+0xa6>
          {
            res = RES_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	77fb      	strb	r3, [r7, #31]
            break;
 800be5c:	e008      	b.n	800be70 <SD_write+0xb8>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be5e:	f7f5 fbf7 	bl	8001650 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	f247 522f 	movw	r2, #29999	; 0x752f
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d9ee      	bls.n	800be4e <SD_write+0x96>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800be70:	7ffb      	ldrb	r3, [r7, #31]
}
 800be72:	4618      	mov	r0, r3
 800be74:	3720      	adds	r7, #32
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}
 800be7a:	bf00      	nop
 800be7c:	240000a8 	.word	0x240000a8

0800be80 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08c      	sub	sp, #48	; 0x30
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	603a      	str	r2, [r7, #0]
 800be8a:	71fb      	strb	r3, [r7, #7]
 800be8c:	460b      	mov	r3, r1
 800be8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800be96:	4b25      	ldr	r3, [pc, #148]	; (800bf2c <SD_ioctl+0xac>)
 800be98:	781b      	ldrb	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <SD_ioctl+0x28>
 800bea4:	2303      	movs	r3, #3
 800bea6:	e03c      	b.n	800bf22 <SD_ioctl+0xa2>

  switch (cmd)
 800bea8:	79bb      	ldrb	r3, [r7, #6]
 800beaa:	2b03      	cmp	r3, #3
 800beac:	d834      	bhi.n	800bf18 <SD_ioctl+0x98>
 800beae:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <SD_ioctl+0x34>)
 800beb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb4:	0800bec5 	.word	0x0800bec5
 800beb8:	0800becd 	.word	0x0800becd
 800bebc:	0800bee5 	.word	0x0800bee5
 800bec0:	0800beff 	.word	0x0800beff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800beca:	e028      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800becc:	f107 0308 	add.w	r3, r7, #8
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff fe23 	bl	800bb1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bed6:	6a3a      	ldr	r2, [r7, #32]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bee2:	e01c      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bee4:	f107 0308 	add.w	r3, r7, #8
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fe17 	bl	800bb1c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800befc:	e00f      	b.n	800bf1e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800befe:	f107 0308 	add.w	r3, r7, #8
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff fe0a 	bl	800bb1c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	0a5a      	lsrs	r2, r3, #9
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf16:	e002      	b.n	800bf1e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bf18:	2304      	movs	r3, #4
 800bf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bf1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3730      	adds	r7, #48	; 0x30
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	2400000d 	.word	0x2400000d

0800bf30 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bf34:	4b03      	ldr	r3, [pc, #12]	; (800bf44 <BSP_SD_WriteCpltCallback+0x14>)
 800bf36:	2201      	movs	r2, #1
 800bf38:	601a      	str	r2, [r3, #0]
}
 800bf3a:	bf00      	nop
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr
 800bf44:	240000a8 	.word	0x240000a8

0800bf48 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bf4c:	4b03      	ldr	r3, [pc, #12]	; (800bf5c <BSP_SD_ReadCpltCallback+0x14>)
 800bf4e:	2201      	movs	r2, #1
 800bf50:	601a      	str	r2, [r3, #0]
}
 800bf52:	bf00      	nop
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr
 800bf5c:	240000ac 	.word	0x240000ac

0800bf60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bf66:	f007 ff97 	bl	8013e98 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800bf6a:	4b19      	ldr	r3, [pc, #100]	; (800bfd0 <MX_LWIP_Init+0x70>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800bf70:	4b18      	ldr	r3, [pc, #96]	; (800bfd4 <MX_LWIP_Init+0x74>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800bf76:	4b18      	ldr	r3, [pc, #96]	; (800bfd8 <MX_LWIP_Init+0x78>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bf7c:	4b17      	ldr	r3, [pc, #92]	; (800bfdc <MX_LWIP_Init+0x7c>)
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	4b17      	ldr	r3, [pc, #92]	; (800bfe0 <MX_LWIP_Init+0x80>)
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <MX_LWIP_Init+0x78>)
 800bf8a:	4a12      	ldr	r2, [pc, #72]	; (800bfd4 <MX_LWIP_Init+0x74>)
 800bf8c:	4910      	ldr	r1, [pc, #64]	; (800bfd0 <MX_LWIP_Init+0x70>)
 800bf8e:	4815      	ldr	r0, [pc, #84]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bf90:	f009 fd4c 	bl	8015a2c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bf94:	4813      	ldr	r0, [pc, #76]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bf96:	f009 ff03 	bl	8015da0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bf9a:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bf9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bfa0:	089b      	lsrs	r3, r3, #2
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bfac:	480d      	ldr	r0, [pc, #52]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bfae:	f009 ff07 	bl	8015dc0 <netif_set_up>
 800bfb2:	e002      	b.n	800bfba <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bfb4:	480b      	ldr	r0, [pc, #44]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bfb6:	f009 ff6f 	bl	8015e98 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bfba:	490b      	ldr	r1, [pc, #44]	; (800bfe8 <MX_LWIP_Init+0x88>)
 800bfbc:	4809      	ldr	r0, [pc, #36]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bfbe:	f009 ff9d 	bl	8015efc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800bfc2:	4808      	ldr	r0, [pc, #32]	; (800bfe4 <MX_LWIP_Init+0x84>)
 800bfc4:	f005 f9fa 	bl	80113bc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bfc8:	bf00      	nop
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	240045cc 	.word	0x240045cc
 800bfd4:	240045d4 	.word	0x240045d4
 800bfd8:	240045d8 	.word	0x240045d8
 800bfdc:	0801380d 	.word	0x0801380d
 800bfe0:	0800c3e9 	.word	0x0800c3e9
 800bfe4:	24004594 	.word	0x24004594
 800bfe8:	0800bfed 	.word	0x0800bfed

0800bfec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08e      	sub	sp, #56	; 0x38
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c00c:	2200      	movs	r2, #0
 800c00e:	601a      	str	r2, [r3, #0]
 800c010:	605a      	str	r2, [r3, #4]
 800c012:	609a      	str	r2, [r3, #8]
 800c014:	60da      	str	r2, [r3, #12]
 800c016:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a5d      	ldr	r2, [pc, #372]	; (800c194 <HAL_ETH_MspInit+0x194>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	f040 80b3 	bne.w	800c18a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800c024:	4b5c      	ldr	r3, [pc, #368]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c026:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c02a:	4a5b      	ldr	r2, [pc, #364]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c02c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c030:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c034:	4b58      	ldr	r3, [pc, #352]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c036:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c03a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c03e:	623b      	str	r3, [r7, #32]
 800c040:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800c042:	4b55      	ldr	r3, [pc, #340]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c048:	4a53      	ldr	r2, [pc, #332]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c04a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c04e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c052:	4b51      	ldr	r3, [pc, #324]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c05c:	61fb      	str	r3, [r7, #28]
 800c05e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800c060:	4b4d      	ldr	r3, [pc, #308]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c066:	4a4c      	ldr	r2, [pc, #304]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c06c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800c070:	4b49      	ldr	r3, [pc, #292]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800c076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c07a:	61bb      	str	r3, [r7, #24]
 800c07c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c07e:	4b46      	ldr	r3, [pc, #280]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c084:	4a44      	ldr	r2, [pc, #272]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c086:	f043 0304 	orr.w	r3, r3, #4
 800c08a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c08e:	4b42      	ldr	r3, [pc, #264]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c094:	f003 0304 	and.w	r3, r3, #4
 800c098:	617b      	str	r3, [r7, #20]
 800c09a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c09c:	4b3e      	ldr	r3, [pc, #248]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c09e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0a2:	4a3d      	ldr	r2, [pc, #244]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0a4:	f043 0301 	orr.w	r3, r3, #1
 800c0a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0ac:	4b3a      	ldr	r3, [pc, #232]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0b2:	f003 0301 	and.w	r3, r3, #1
 800c0b6:	613b      	str	r3, [r7, #16]
 800c0b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c0ba:	4b37      	ldr	r3, [pc, #220]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0c0:	4a35      	ldr	r2, [pc, #212]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0c2:	f043 0302 	orr.w	r3, r3, #2
 800c0c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0ca:	4b33      	ldr	r3, [pc, #204]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0d0:	f003 0302 	and.w	r3, r3, #2
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c0d8:	4b2f      	ldr	r3, [pc, #188]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0de:	4a2e      	ldr	r2, [pc, #184]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c0e8:	4b2b      	ldr	r3, [pc, #172]	; (800c198 <HAL_ETH_MspInit+0x198>)
 800c0ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0f2:	60bb      	str	r3, [r7, #8]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c0f6:	2332      	movs	r3, #50	; 0x32
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c0fa:	2302      	movs	r3, #2
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0fe:	2300      	movs	r3, #0
 800c100:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c102:	2300      	movs	r3, #0
 800c104:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c106:	230b      	movs	r3, #11
 800c108:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c10e:	4619      	mov	r1, r3
 800c110:	4822      	ldr	r0, [pc, #136]	; (800c19c <HAL_ETH_MspInit+0x19c>)
 800c112:	f7f9 f90f 	bl	8005334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c116:	2386      	movs	r3, #134	; 0x86
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c11a:	2302      	movs	r3, #2
 800c11c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c11e:	2300      	movs	r3, #0
 800c120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c122:	2300      	movs	r3, #0
 800c124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c126:	230b      	movs	r3, #11
 800c128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c12a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c12e:	4619      	mov	r1, r3
 800c130:	481b      	ldr	r0, [pc, #108]	; (800c1a0 <HAL_ETH_MspInit+0x1a0>)
 800c132:	f7f9 f8ff 	bl	8005334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c13a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c13c:	2302      	movs	r3, #2
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c140:	2300      	movs	r3, #0
 800c142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c144:	2300      	movs	r3, #0
 800c146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c148:	230b      	movs	r3, #11
 800c14a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c14c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c150:	4619      	mov	r1, r3
 800c152:	4814      	ldr	r0, [pc, #80]	; (800c1a4 <HAL_ETH_MspInit+0x1a4>)
 800c154:	f7f9 f8ee 	bl	8005334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c158:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c15c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c15e:	2302      	movs	r3, #2
 800c160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c162:	2300      	movs	r3, #0
 800c164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c166:	2300      	movs	r3, #0
 800c168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c16a:	230b      	movs	r3, #11
 800c16c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c172:	4619      	mov	r1, r3
 800c174:	480c      	ldr	r0, [pc, #48]	; (800c1a8 <HAL_ETH_MspInit+0x1a8>)
 800c176:	f7f9 f8dd 	bl	8005334 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800c17a:	2200      	movs	r2, #0
 800c17c:	2100      	movs	r1, #0
 800c17e:	203d      	movs	r0, #61	; 0x3d
 800c180:	f7f6 fadd 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c184:	203d      	movs	r0, #61	; 0x3d
 800c186:	f7f6 faf4 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c18a:	bf00      	nop
 800c18c:	3738      	adds	r7, #56	; 0x38
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	40028000 	.word	0x40028000
 800c198:	58024400 	.word	0x58024400
 800c19c:	58020800 	.word	0x58020800
 800c1a0:	58020000 	.word	0x58020000
 800c1a4:	58020400 	.word	0x58020400
 800c1a8:	58021800 	.word	0x58021800

0800c1ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	74fb      	strb	r3, [r7, #19]
  uint32_t idx = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	617b      	str	r3, [r7, #20]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c1bc:	4b46      	ldr	r3, [pc, #280]	; (800c2d8 <low_level_init+0x12c>)
 800c1be:	4a47      	ldr	r2, [pc, #284]	; (800c2dc <low_level_init+0x130>)
 800c1c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800c1c6:	2380      	movs	r3, #128	; 0x80
 800c1c8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800c1ca:	23e1      	movs	r3, #225	; 0xe1
 800c1cc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800c1da:	4a3f      	ldr	r2, [pc, #252]	; (800c2d8 <low_level_init+0x12c>)
 800c1dc:	f107 030c 	add.w	r3, r7, #12
 800c1e0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c1e2:	4b3d      	ldr	r3, [pc, #244]	; (800c2d8 <low_level_init+0x12c>)
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c1e8:	4b3b      	ldr	r3, [pc, #236]	; (800c2d8 <low_level_init+0x12c>)
 800c1ea:	4a3d      	ldr	r2, [pc, #244]	; (800c2e0 <low_level_init+0x134>)
 800c1ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c1ee:	4b3a      	ldr	r3, [pc, #232]	; (800c2d8 <low_level_init+0x12c>)
 800c1f0:	4a3c      	ldr	r2, [pc, #240]	; (800c2e4 <low_level_init+0x138>)
 800c1f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800c1f4:	4b38      	ldr	r3, [pc, #224]	; (800c2d8 <low_level_init+0x12c>)
 800c1f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c1fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c1fc:	4836      	ldr	r0, [pc, #216]	; (800c2d8 <low_level_init+0x12c>)
 800c1fe:	f7f8 f821 	bl	8004244 <HAL_ETH_Init>
 800c202:	4603      	mov	r3, r0
 800c204:	74fb      	strb	r3, [r7, #19]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c206:	2234      	movs	r2, #52	; 0x34
 800c208:	2100      	movs	r1, #0
 800c20a:	4837      	ldr	r0, [pc, #220]	; (800c2e8 <low_level_init+0x13c>)
 800c20c:	f010 fbcc 	bl	801c9a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c210:	4b35      	ldr	r3, [pc, #212]	; (800c2e8 <low_level_init+0x13c>)
 800c212:	2221      	movs	r2, #33	; 0x21
 800c214:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c216:	4b34      	ldr	r3, [pc, #208]	; (800c2e8 <low_level_init+0x13c>)
 800c218:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c21c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c21e:	4b32      	ldr	r3, [pc, #200]	; (800c2e8 <low_level_init+0x13c>)
 800c220:	2200      	movs	r2, #0
 800c222:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c224:	4831      	ldr	r0, [pc, #196]	; (800c2ec <low_level_init+0x140>)
 800c226:	f009 fb0f 	bl	8015848 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2206      	movs	r2, #6
 800c22e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c232:	4b29      	ldr	r3, [pc, #164]	; (800c2d8 <low_level_init+0x12c>)
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c23e:	4b26      	ldr	r3, [pc, #152]	; (800c2d8 <low_level_init+0x12c>)
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	785a      	ldrb	r2, [r3, #1]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c24a:	4b23      	ldr	r3, [pc, #140]	; (800c2d8 <low_level_init+0x12c>)
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	789a      	ldrb	r2, [r3, #2]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c256:	4b20      	ldr	r3, [pc, #128]	; (800c2d8 <low_level_init+0x12c>)
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	78da      	ldrb	r2, [r3, #3]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c262:	4b1d      	ldr	r3, [pc, #116]	; (800c2d8 <low_level_init+0x12c>)
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	791a      	ldrb	r2, [r3, #4]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c26e:	4b1a      	ldr	r3, [pc, #104]	; (800c2d8 <low_level_init+0x12c>)
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	795a      	ldrb	r2, [r3, #5]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c280:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c288:	f043 030a 	orr.w	r3, r3, #10
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c294:	2300      	movs	r3, #0
 800c296:	617b      	str	r3, [r7, #20]
 800c298:	e00e      	b.n	800c2b8 <low_level_init+0x10c>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	4a12      	ldr	r2, [pc, #72]	; (800c2f0 <low_level_init+0x144>)
 800c2a6:	441a      	add	r2, r3
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	6979      	ldr	r1, [r7, #20]
 800c2ac:	480a      	ldr	r0, [pc, #40]	; (800c2d8 <low_level_init+0x12c>)
 800c2ae:	f7f8 f8a3 	bl	80043f8 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	617b      	str	r3, [r7, #20]
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2b03      	cmp	r3, #3
 800c2bc:	d9ed      	bls.n	800c29a <low_level_init+0xee>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 800c2be:	7cfb      	ldrb	r3, [r7, #19]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d103      	bne.n	800c2cc <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f8c4 	bl	800c452 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c2ca:	e001      	b.n	800c2d0 <low_level_init+0x124>
    Error_Handler();
 800c2cc:	f7f4 fe9a 	bl	8001004 <Error_Handler>
}
 800c2d0:	bf00      	nop
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	240046a8 	.word	0x240046a8
 800c2dc:	40028000 	.word	0x40028000
 800c2e0:	30040060 	.word	0x30040060
 800c2e4:	30040000 	.word	0x30040000
 800c2e8:	24004718 	.word	0x24004718
 800c2ec:	080208c8 	.word	0x080208c8
 800c2f0:	30040200 	.word	0x30040200

0800c2f4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b092      	sub	sp, #72	; 0x48
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800c302:	2300      	movs	r3, #0
 800c304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c308:	f107 030c 	add.w	r3, r7, #12
 800c30c:	2230      	movs	r2, #48	; 0x30
 800c30e:	2100      	movs	r1, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f010 fb49 	bl	801c9a8 <memset>

  for(q = p; q != NULL; q = q->next)
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	643b      	str	r3, [r7, #64]	; 0x40
 800c31a:	e049      	b.n	800c3b0 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d902      	bls.n	800c328 <low_level_output+0x34>
      return ERR_IF;
 800c322:	f06f 030b 	mvn.w	r3, #11
 800c326:	e056      	b.n	800c3d6 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800c328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c32a:	6859      	ldr	r1, [r3, #4]
 800c32c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c32e:	4613      	mov	r3, r2
 800c330:	005b      	lsls	r3, r3, #1
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c33a:	4413      	add	r3, r2
 800c33c:	3b3c      	subs	r3, #60	; 0x3c
 800c33e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c342:	895b      	ldrh	r3, [r3, #10]
 800c344:	4619      	mov	r1, r3
 800c346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c348:	4613      	mov	r3, r2
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c354:	4413      	add	r3, r2
 800c356:	3b38      	subs	r3, #56	; 0x38
 800c358:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d012      	beq.n	800c386 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c362:	1e5a      	subs	r2, r3, #1
 800c364:	f107 000c 	add.w	r0, r7, #12
 800c368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c36a:	460b      	mov	r3, r1
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	440b      	add	r3, r1
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	18c1      	adds	r1, r0, r3
 800c374:	4613      	mov	r3, r2
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c380:	4413      	add	r3, r2
 800c382:	3b34      	subs	r3, #52	; 0x34
 800c384:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10a      	bne.n	800c3a4 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800c38e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c390:	4613      	mov	r3, r2
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	4413      	add	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c39c:	4413      	add	r3, r2
 800c39e:	3b34      	subs	r3, #52	; 0x34
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c3a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c3aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	643b      	str	r3, [r7, #64]	; 0x40
 800c3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1b2      	bne.n	800c31c <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	891b      	ldrh	r3, [r3, #8]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	4b08      	ldr	r3, [pc, #32]	; (800c3e0 <low_level_output+0xec>)
 800c3be:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c3c0:	4a07      	ldr	r2, [pc, #28]	; (800c3e0 <low_level_output+0xec>)
 800c3c2:	f107 030c 	add.w	r3, r7, #12
 800c3c6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c3c8:	2214      	movs	r2, #20
 800c3ca:	4905      	ldr	r1, [pc, #20]	; (800c3e0 <low_level_output+0xec>)
 800c3cc:	4805      	ldr	r0, [pc, #20]	; (800c3e4 <low_level_output+0xf0>)
 800c3ce:	f7f8 f854 	bl	800447a <HAL_ETH_Transmit>

  return errval;
 800c3d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3748      	adds	r7, #72	; 0x48
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	24004718 	.word	0x24004718
 800c3e4:	240046a8 	.word	0x240046a8

0800c3e8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <ethernetif_init+0x1c>
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	; (800c430 <ethernetif_init+0x48>)
 800c3f8:	f240 12f1 	movw	r2, #497	; 0x1f1
 800c3fc:	490d      	ldr	r1, [pc, #52]	; (800c434 <ethernetif_init+0x4c>)
 800c3fe:	480e      	ldr	r0, [pc, #56]	; (800c438 <ethernetif_init+0x50>)
 800c400:	f010 fada 	bl	801c9b8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2273      	movs	r2, #115	; 0x73
 800c408:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2274      	movs	r2, #116	; 0x74
 800c410:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a09      	ldr	r2, [pc, #36]	; (800c43c <ethernetif_init+0x54>)
 800c418:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a08      	ldr	r2, [pc, #32]	; (800c440 <ethernetif_init+0x58>)
 800c41e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7ff fec3 	bl	800c1ac <low_level_init>

  return ERR_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	0801d858 	.word	0x0801d858
 800c434:	0801d874 	.word	0x0801d874
 800c438:	0801d884 	.word	0x0801d884
 800c43c:	0801320d 	.word	0x0801320d
 800c440:	0800c2f5 	.word	0x0800c2f5

0800c444 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c448:	f7f5 f902 	bl	8001650 <HAL_GetTick>
 800c44c:	4603      	mov	r3, r0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	bd80      	pop	{r7, pc}

0800c452 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c452:	b480      	push	{r7}
 800c454:	b083      	sub	sp, #12
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]

}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
	...

0800c468 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	4603      	mov	r3, r0
 800c470:	6039      	str	r1, [r7, #0]
 800c472:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	2b7f      	cmp	r3, #127	; 0x7f
 800c478:	d802      	bhi.n	800c480 <ff_convert+0x18>
		c = chr;
 800c47a:	88fb      	ldrh	r3, [r7, #6]
 800c47c:	81fb      	strh	r3, [r7, #14]
 800c47e:	e025      	b.n	800c4cc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c486:	88fb      	ldrh	r3, [r7, #6]
 800c488:	2bff      	cmp	r3, #255	; 0xff
 800c48a:	d805      	bhi.n	800c498 <ff_convert+0x30>
 800c48c:	88fb      	ldrh	r3, [r7, #6]
 800c48e:	3b80      	subs	r3, #128	; 0x80
 800c490:	4a12      	ldr	r2, [pc, #72]	; (800c4dc <ff_convert+0x74>)
 800c492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c496:	e000      	b.n	800c49a <ff_convert+0x32>
 800c498:	2300      	movs	r3, #0
 800c49a:	81fb      	strh	r3, [r7, #14]
 800c49c:	e016      	b.n	800c4cc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c49e:	2300      	movs	r3, #0
 800c4a0:	81fb      	strh	r3, [r7, #14]
 800c4a2:	e009      	b.n	800c4b8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c4a4:	89fb      	ldrh	r3, [r7, #14]
 800c4a6:	4a0d      	ldr	r2, [pc, #52]	; (800c4dc <ff_convert+0x74>)
 800c4a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4ac:	88fa      	ldrh	r2, [r7, #6]
 800c4ae:	429a      	cmp	r2, r3
 800c4b0:	d006      	beq.n	800c4c0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c4b2:	89fb      	ldrh	r3, [r7, #14]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	81fb      	strh	r3, [r7, #14]
 800c4b8:	89fb      	ldrh	r3, [r7, #14]
 800c4ba:	2b7f      	cmp	r3, #127	; 0x7f
 800c4bc:	d9f2      	bls.n	800c4a4 <ff_convert+0x3c>
 800c4be:	e000      	b.n	800c4c2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c4c0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c4c2:	89fb      	ldrh	r3, [r7, #14]
 800c4c4:	3380      	adds	r3, #128	; 0x80
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c4cc:	89fb      	ldrh	r3, [r7, #14]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3714      	adds	r7, #20
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	080208d4 	.word	0x080208d4

0800c4e0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b087      	sub	sp, #28
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c4ea:	88fb      	ldrh	r3, [r7, #6]
 800c4ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f0:	d201      	bcs.n	800c4f6 <ff_wtoupper+0x16>
 800c4f2:	4b3e      	ldr	r3, [pc, #248]	; (800c5ec <ff_wtoupper+0x10c>)
 800c4f4:	e000      	b.n	800c4f8 <ff_wtoupper+0x18>
 800c4f6:	4b3e      	ldr	r3, [pc, #248]	; (800c5f0 <ff_wtoupper+0x110>)
 800c4f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	1c9a      	adds	r2, r3, #2
 800c4fe:	617a      	str	r2, [r7, #20]
 800c500:	881b      	ldrh	r3, [r3, #0]
 800c502:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c504:	8a7b      	ldrh	r3, [r7, #18]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d068      	beq.n	800c5dc <ff_wtoupper+0xfc>
 800c50a:	88fa      	ldrh	r2, [r7, #6]
 800c50c:	8a7b      	ldrh	r3, [r7, #18]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d364      	bcc.n	800c5dc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	1c9a      	adds	r2, r3, #2
 800c516:	617a      	str	r2, [r7, #20]
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	823b      	strh	r3, [r7, #16]
 800c51c:	8a3b      	ldrh	r3, [r7, #16]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	81fb      	strh	r3, [r7, #14]
 800c522:	8a3b      	ldrh	r3, [r7, #16]
 800c524:	b2db      	uxtb	r3, r3
 800c526:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c528:	88fa      	ldrh	r2, [r7, #6]
 800c52a:	8a79      	ldrh	r1, [r7, #18]
 800c52c:	8a3b      	ldrh	r3, [r7, #16]
 800c52e:	440b      	add	r3, r1
 800c530:	429a      	cmp	r2, r3
 800c532:	da49      	bge.n	800c5c8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c534:	89fb      	ldrh	r3, [r7, #14]
 800c536:	2b08      	cmp	r3, #8
 800c538:	d84f      	bhi.n	800c5da <ff_wtoupper+0xfa>
 800c53a:	a201      	add	r2, pc, #4	; (adr r2, 800c540 <ff_wtoupper+0x60>)
 800c53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c540:	0800c565 	.word	0x0800c565
 800c544:	0800c577 	.word	0x0800c577
 800c548:	0800c58d 	.word	0x0800c58d
 800c54c:	0800c595 	.word	0x0800c595
 800c550:	0800c59d 	.word	0x0800c59d
 800c554:	0800c5a5 	.word	0x0800c5a5
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c5b5 	.word	0x0800c5b5
 800c560:	0800c5bd 	.word	0x0800c5bd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c564:	88fa      	ldrh	r2, [r7, #6]
 800c566:	8a7b      	ldrh	r3, [r7, #18]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	4413      	add	r3, r2
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	80fb      	strh	r3, [r7, #6]
 800c574:	e027      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c576:	88fa      	ldrh	r2, [r7, #6]
 800c578:	8a7b      	ldrh	r3, [r7, #18]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	f003 0301 	and.w	r3, r3, #1
 800c582:	b29b      	uxth	r3, r3
 800c584:	88fa      	ldrh	r2, [r7, #6]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	80fb      	strh	r3, [r7, #6]
 800c58a:	e01c      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c58c:	88fb      	ldrh	r3, [r7, #6]
 800c58e:	3b10      	subs	r3, #16
 800c590:	80fb      	strh	r3, [r7, #6]
 800c592:	e018      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c594:	88fb      	ldrh	r3, [r7, #6]
 800c596:	3b20      	subs	r3, #32
 800c598:	80fb      	strh	r3, [r7, #6]
 800c59a:	e014      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c59c:	88fb      	ldrh	r3, [r7, #6]
 800c59e:	3b30      	subs	r3, #48	; 0x30
 800c5a0:	80fb      	strh	r3, [r7, #6]
 800c5a2:	e010      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c5a4:	88fb      	ldrh	r3, [r7, #6]
 800c5a6:	3b1a      	subs	r3, #26
 800c5a8:	80fb      	strh	r3, [r7, #6]
 800c5aa:	e00c      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c5ac:	88fb      	ldrh	r3, [r7, #6]
 800c5ae:	3308      	adds	r3, #8
 800c5b0:	80fb      	strh	r3, [r7, #6]
 800c5b2:	e008      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c5b4:	88fb      	ldrh	r3, [r7, #6]
 800c5b6:	3b50      	subs	r3, #80	; 0x50
 800c5b8:	80fb      	strh	r3, [r7, #6]
 800c5ba:	e004      	b.n	800c5c6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c5bc:	88fb      	ldrh	r3, [r7, #6]
 800c5be:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c5c2:	80fb      	strh	r3, [r7, #6]
 800c5c4:	bf00      	nop
			}
			break;
 800c5c6:	e008      	b.n	800c5da <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c5c8:	89fb      	ldrh	r3, [r7, #14]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d195      	bne.n	800c4fa <ff_wtoupper+0x1a>
 800c5ce:	8a3b      	ldrh	r3, [r7, #16]
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c5d8:	e78f      	b.n	800c4fa <ff_wtoupper+0x1a>
			break;
 800c5da:	bf00      	nop
	}

	return chr;
 800c5dc:	88fb      	ldrh	r3, [r7, #6]
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	371c      	adds	r7, #28
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	080209d4 	.word	0x080209d4
 800c5f0:	08020bc8 	.word	0x08020bc8

0800c5f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c5fe:	79fb      	ldrb	r3, [r7, #7]
 800c600:	4a08      	ldr	r2, [pc, #32]	; (800c624 <disk_status+0x30>)
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	79fa      	ldrb	r2, [r7, #7]
 800c60c:	4905      	ldr	r1, [pc, #20]	; (800c624 <disk_status+0x30>)
 800c60e:	440a      	add	r2, r1
 800c610:	7a12      	ldrb	r2, [r2, #8]
 800c612:	4610      	mov	r0, r2
 800c614:	4798      	blx	r3
 800c616:	4603      	mov	r3, r0
 800c618:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c61a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	240000dc 	.word	0x240000dc

0800c628 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c636:	79fb      	ldrb	r3, [r7, #7]
 800c638:	4a0d      	ldr	r2, [pc, #52]	; (800c670 <disk_initialize+0x48>)
 800c63a:	5cd3      	ldrb	r3, [r2, r3]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d111      	bne.n	800c664 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c640:	79fb      	ldrb	r3, [r7, #7]
 800c642:	4a0b      	ldr	r2, [pc, #44]	; (800c670 <disk_initialize+0x48>)
 800c644:	2101      	movs	r1, #1
 800c646:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	4a09      	ldr	r2, [pc, #36]	; (800c670 <disk_initialize+0x48>)
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	79fa      	ldrb	r2, [r7, #7]
 800c656:	4906      	ldr	r1, [pc, #24]	; (800c670 <disk_initialize+0x48>)
 800c658:	440a      	add	r2, r1
 800c65a:	7a12      	ldrb	r2, [r2, #8]
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	4603      	mov	r3, r0
 800c662:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	240000dc 	.word	0x240000dc

0800c674 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c674:	b590      	push	{r4, r7, lr}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60b9      	str	r1, [r7, #8]
 800c67c:	607a      	str	r2, [r7, #4]
 800c67e:	603b      	str	r3, [r7, #0]
 800c680:	4603      	mov	r3, r0
 800c682:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c684:	7bfb      	ldrb	r3, [r7, #15]
 800c686:	4a0a      	ldr	r2, [pc, #40]	; (800c6b0 <disk_read+0x3c>)
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	689c      	ldr	r4, [r3, #8]
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	4a07      	ldr	r2, [pc, #28]	; (800c6b0 <disk_read+0x3c>)
 800c694:	4413      	add	r3, r2
 800c696:	7a18      	ldrb	r0, [r3, #8]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	68b9      	ldr	r1, [r7, #8]
 800c69e:	47a0      	blx	r4
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd90      	pop	{r4, r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	240000dc 	.word	0x240000dc

0800c6b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c6b4:	b590      	push	{r4, r7, lr}
 800c6b6:	b087      	sub	sp, #28
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	607a      	str	r2, [r7, #4]
 800c6be:	603b      	str	r3, [r7, #0]
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4a0a      	ldr	r2, [pc, #40]	; (800c6f0 <disk_write+0x3c>)
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	68dc      	ldr	r4, [r3, #12]
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	4a07      	ldr	r2, [pc, #28]	; (800c6f0 <disk_write+0x3c>)
 800c6d4:	4413      	add	r3, r2
 800c6d6:	7a18      	ldrb	r0, [r3, #8]
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	68b9      	ldr	r1, [r7, #8]
 800c6de:	47a0      	blx	r4
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	371c      	adds	r7, #28
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd90      	pop	{r4, r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	240000dc 	.word	0x240000dc

0800c6f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	603a      	str	r2, [r7, #0]
 800c6fe:	71fb      	strb	r3, [r7, #7]
 800c700:	460b      	mov	r3, r1
 800c702:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	4a09      	ldr	r2, [pc, #36]	; (800c72c <disk_ioctl+0x38>)
 800c708:	009b      	lsls	r3, r3, #2
 800c70a:	4413      	add	r3, r2
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	79fa      	ldrb	r2, [r7, #7]
 800c712:	4906      	ldr	r1, [pc, #24]	; (800c72c <disk_ioctl+0x38>)
 800c714:	440a      	add	r2, r1
 800c716:	7a10      	ldrb	r0, [r2, #8]
 800c718:	79b9      	ldrb	r1, [r7, #6]
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	4798      	blx	r3
 800c71e:	4603      	mov	r3, r0
 800c720:	73fb      	strb	r3, [r7, #15]
  return res;
 800c722:	7bfb      	ldrb	r3, [r7, #15]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	240000dc 	.word	0x240000dc

0800c730 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c730:	b480      	push	{r7}
 800c732:	b085      	sub	sp, #20
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	3301      	adds	r3, #1
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c740:	89fb      	ldrh	r3, [r7, #14]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	b21a      	sxth	r2, r3
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	b21b      	sxth	r3, r3
 800c74c:	4313      	orrs	r3, r2
 800c74e:	b21b      	sxth	r3, r3
 800c750:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c752:	89fb      	ldrh	r3, [r7, #14]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	3303      	adds	r3, #3
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	021b      	lsls	r3, r3, #8
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	3202      	adds	r2, #2
 800c778:	7812      	ldrb	r2, [r2, #0]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	3201      	adds	r2, #1
 800c786:	7812      	ldrb	r2, [r2, #0]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	7812      	ldrb	r2, [r2, #0]
 800c794:	4313      	orrs	r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
	return rv;
 800c798:	68fb      	ldr	r3, [r7, #12]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3714      	adds	r7, #20
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c7a6:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800c7aa:	b085      	sub	sp, #20
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	3307      	adds	r3, #7
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	f04f 0400 	mov.w	r4, #0
 800c7bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 800c7c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c7c4:	f04f 0b00 	mov.w	fp, #0
 800c7c8:	f04f 0c00 	mov.w	ip, #0
 800c7cc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c7d0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c7d4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	3206      	adds	r2, #6
 800c7dc:	7812      	ldrb	r2, [r2, #0]
 800c7de:	b2d1      	uxtb	r1, r2
 800c7e0:	f04f 0200 	mov.w	r2, #0
 800c7e4:	ea4b 0301 	orr.w	r3, fp, r1
 800c7e8:	ea4c 0402 	orr.w	r4, ip, r2
 800c7ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 800c7f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c7f4:	f04f 0b00 	mov.w	fp, #0
 800c7f8:	f04f 0c00 	mov.w	ip, #0
 800c7fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c800:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c804:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	3205      	adds	r2, #5
 800c80c:	7812      	ldrb	r2, [r2, #0]
 800c80e:	b2d1      	uxtb	r1, r2
 800c810:	f04f 0200 	mov.w	r2, #0
 800c814:	ea4b 0301 	orr.w	r3, fp, r1
 800c818:	ea4c 0402 	orr.w	r4, ip, r2
 800c81c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 800c820:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c824:	f04f 0b00 	mov.w	fp, #0
 800c828:	f04f 0c00 	mov.w	ip, #0
 800c82c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c830:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c834:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	3204      	adds	r2, #4
 800c83c:	7812      	ldrb	r2, [r2, #0]
 800c83e:	b2d1      	uxtb	r1, r2
 800c840:	f04f 0200 	mov.w	r2, #0
 800c844:	ea4b 0301 	orr.w	r3, fp, r1
 800c848:	ea4c 0402 	orr.w	r4, ip, r2
 800c84c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 800c850:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c854:	f04f 0b00 	mov.w	fp, #0
 800c858:	f04f 0c00 	mov.w	ip, #0
 800c85c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c860:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c864:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	3203      	adds	r2, #3
 800c86c:	7812      	ldrb	r2, [r2, #0]
 800c86e:	b2d1      	uxtb	r1, r2
 800c870:	f04f 0200 	mov.w	r2, #0
 800c874:	ea4b 0301 	orr.w	r3, fp, r1
 800c878:	ea4c 0402 	orr.w	r4, ip, r2
 800c87c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 800c880:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c884:	f04f 0b00 	mov.w	fp, #0
 800c888:	f04f 0c00 	mov.w	ip, #0
 800c88c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c890:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c894:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	3202      	adds	r2, #2
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	b2d1      	uxtb	r1, r2
 800c8a0:	f04f 0200 	mov.w	r2, #0
 800c8a4:	ea4b 0301 	orr.w	r3, fp, r1
 800c8a8:	ea4c 0402 	orr.w	r4, ip, r2
 800c8ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 800c8b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8b4:	f04f 0b00 	mov.w	fp, #0
 800c8b8:	f04f 0c00 	mov.w	ip, #0
 800c8bc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c8c0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c8c4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	3201      	adds	r2, #1
 800c8cc:	7812      	ldrb	r2, [r2, #0]
 800c8ce:	b2d1      	uxtb	r1, r2
 800c8d0:	f04f 0200 	mov.w	r2, #0
 800c8d4:	ea4b 0301 	orr.w	r3, fp, r1
 800c8d8:	ea4c 0402 	orr.w	r4, ip, r2
 800c8dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 800c8e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c8e4:	f04f 0b00 	mov.w	fp, #0
 800c8e8:	f04f 0c00 	mov.w	ip, #0
 800c8ec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 800c8f0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 800c8f4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	b2d1      	uxtb	r1, r2
 800c8fe:	f04f 0200 	mov.w	r2, #0
 800c902:	ea4b 0301 	orr.w	r3, fp, r1
 800c906:	ea4c 0402 	orr.w	r4, ip, r2
 800c90a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800c90e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 800c912:	4618      	mov	r0, r3
 800c914:	4621      	mov	r1, r4
 800c916:	3714      	adds	r7, #20
 800c918:	46bd      	mov	sp, r7
 800c91a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800c91e:	4770      	bx	lr

0800c920 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	607a      	str	r2, [r7, #4]
 800c932:	887a      	ldrh	r2, [r7, #2]
 800c934:	b2d2      	uxtb	r2, r2
 800c936:	701a      	strb	r2, [r3, #0]
 800c938:	887b      	ldrh	r3, [r7, #2]
 800c93a:	0a1b      	lsrs	r3, r3, #8
 800c93c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	887a      	ldrh	r2, [r7, #2]
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]
}
 800c94a:	bf00      	nop
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr

0800c956 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c956:	b480      	push	{r7}
 800c958:	b083      	sub	sp, #12
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	1c5a      	adds	r2, r3, #1
 800c964:	607a      	str	r2, [r7, #4]
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	b2d2      	uxtb	r2, r2
 800c96a:	701a      	strb	r2, [r3, #0]
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	0a1b      	lsrs	r3, r3, #8
 800c970:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	1c5a      	adds	r2, r3, #1
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	683a      	ldr	r2, [r7, #0]
 800c97a:	b2d2      	uxtb	r2, r2
 800c97c:	701a      	strb	r2, [r3, #0]
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	0a1b      	lsrs	r3, r3, #8
 800c982:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	1c5a      	adds	r2, r3, #1
 800c988:	607a      	str	r2, [r7, #4]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	b2d2      	uxtb	r2, r2
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	0a1b      	lsrs	r3, r3, #8
 800c994:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	1c5a      	adds	r2, r3, #1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	683a      	ldr	r2, [r7, #0]
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	701a      	strb	r2, [r3, #0]
}
 800c9a2:	bf00      	nop
 800c9a4:	370c      	adds	r7, #12
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr

0800c9ae <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c9ae:	b490      	push	{r4, r7}
 800c9b0:	b084      	sub	sp, #16
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	60f8      	str	r0, [r7, #12]
 800c9b6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	60fa      	str	r2, [r7, #12]
 800c9c0:	783a      	ldrb	r2, [r7, #0]
 800c9c2:	701a      	strb	r2, [r3, #0]
 800c9c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9c8:	f04f 0300 	mov.w	r3, #0
 800c9cc:	f04f 0400 	mov.w	r4, #0
 800c9d0:	0a0b      	lsrs	r3, r1, #8
 800c9d2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c9d6:	0a14      	lsrs	r4, r2, #8
 800c9d8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	1c5a      	adds	r2, r3, #1
 800c9e0:	60fa      	str	r2, [r7, #12]
 800c9e2:	783a      	ldrb	r2, [r7, #0]
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c9ea:	f04f 0300 	mov.w	r3, #0
 800c9ee:	f04f 0400 	mov.w	r4, #0
 800c9f2:	0a0b      	lsrs	r3, r1, #8
 800c9f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c9f8:	0a14      	lsrs	r4, r2, #8
 800c9fa:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	60fa      	str	r2, [r7, #12]
 800ca04:	783a      	ldrb	r2, [r7, #0]
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca0c:	f04f 0300 	mov.w	r3, #0
 800ca10:	f04f 0400 	mov.w	r4, #0
 800ca14:	0a0b      	lsrs	r3, r1, #8
 800ca16:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca1a:	0a14      	lsrs	r4, r2, #8
 800ca1c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	1c5a      	adds	r2, r3, #1
 800ca24:	60fa      	str	r2, [r7, #12]
 800ca26:	783a      	ldrb	r2, [r7, #0]
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca2e:	f04f 0300 	mov.w	r3, #0
 800ca32:	f04f 0400 	mov.w	r4, #0
 800ca36:	0a0b      	lsrs	r3, r1, #8
 800ca38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca3c:	0a14      	lsrs	r4, r2, #8
 800ca3e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	60fa      	str	r2, [r7, #12]
 800ca48:	783a      	ldrb	r2, [r7, #0]
 800ca4a:	701a      	strb	r2, [r3, #0]
 800ca4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca50:	f04f 0300 	mov.w	r3, #0
 800ca54:	f04f 0400 	mov.w	r4, #0
 800ca58:	0a0b      	lsrs	r3, r1, #8
 800ca5a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca5e:	0a14      	lsrs	r4, r2, #8
 800ca60:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	60fa      	str	r2, [r7, #12]
 800ca6a:	783a      	ldrb	r2, [r7, #0]
 800ca6c:	701a      	strb	r2, [r3, #0]
 800ca6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca72:	f04f 0300 	mov.w	r3, #0
 800ca76:	f04f 0400 	mov.w	r4, #0
 800ca7a:	0a0b      	lsrs	r3, r1, #8
 800ca7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ca80:	0a14      	lsrs	r4, r2, #8
 800ca82:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	1c5a      	adds	r2, r3, #1
 800ca8a:	60fa      	str	r2, [r7, #12]
 800ca8c:	783a      	ldrb	r2, [r7, #0]
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca94:	f04f 0300 	mov.w	r3, #0
 800ca98:	f04f 0400 	mov.w	r4, #0
 800ca9c:	0a0b      	lsrs	r3, r1, #8
 800ca9e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800caa2:	0a14      	lsrs	r4, r2, #8
 800caa4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	60fa      	str	r2, [r7, #12]
 800caae:	783a      	ldrb	r2, [r7, #0]
 800cab0:	701a      	strb	r2, [r3, #0]
}
 800cab2:	bf00      	nop
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bc90      	pop	{r4, r7}
 800caba:	4770      	bx	lr

0800cabc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cabc:	b480      	push	{r7}
 800cabe:	b087      	sub	sp, #28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00d      	beq.n	800caf2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cad6:	693a      	ldr	r2, [r7, #16]
 800cad8:	1c53      	adds	r3, r2, #1
 800cada:	613b      	str	r3, [r7, #16]
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	1c59      	adds	r1, r3, #1
 800cae0:	6179      	str	r1, [r7, #20]
 800cae2:	7812      	ldrb	r2, [r2, #0]
 800cae4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3b01      	subs	r3, #1
 800caea:	607b      	str	r3, [r7, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1f1      	bne.n	800cad6 <mem_cpy+0x1a>
	}
}
 800caf2:	bf00      	nop
 800caf4:	371c      	adds	r7, #28
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr

0800cafe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cafe:	b480      	push	{r7}
 800cb00:	b087      	sub	sp, #28
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	60f8      	str	r0, [r7, #12]
 800cb06:	60b9      	str	r1, [r7, #8]
 800cb08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	617a      	str	r2, [r7, #20]
 800cb14:	68ba      	ldr	r2, [r7, #8]
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	607b      	str	r3, [r7, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1f3      	bne.n	800cb0e <mem_set+0x10>
}
 800cb26:	bf00      	nop
 800cb28:	371c      	adds	r7, #28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cb32:	b480      	push	{r7}
 800cb34:	b089      	sub	sp, #36	; 0x24
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	61fb      	str	r3, [r7, #28]
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	1c5a      	adds	r2, r3, #1
 800cb4e:	61fa      	str	r2, [r7, #28]
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	4619      	mov	r1, r3
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	1c5a      	adds	r2, r3, #1
 800cb58:	61ba      	str	r2, [r7, #24]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	1acb      	subs	r3, r1, r3
 800cb5e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	3b01      	subs	r3, #1
 800cb64:	607b      	str	r3, [r7, #4]
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <mem_cmp+0x40>
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0eb      	beq.n	800cb4a <mem_cmp+0x18>

	return r;
 800cb72:	697b      	ldr	r3, [r7, #20]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3724      	adds	r7, #36	; 0x24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr

0800cb80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
 800cb88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cb8a:	e002      	b.n	800cb92 <chk_chr+0x12>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d005      	beq.n	800cba6 <chk_chr+0x26>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	461a      	mov	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d1f2      	bne.n	800cb8c <chk_chr+0xc>
	return *str;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	781b      	ldrb	r3, [r3, #0]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr
	...

0800cbb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60bb      	str	r3, [r7, #8]
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	e029      	b.n	800cc20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cbcc:	4a27      	ldr	r2, [pc, #156]	; (800cc6c <chk_lock+0xb4>)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	4413      	add	r3, r2
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01d      	beq.n	800cc16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbda:	4a24      	ldr	r2, [pc, #144]	; (800cc6c <chk_lock+0xb4>)
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	011b      	lsls	r3, r3, #4
 800cbe0:	4413      	add	r3, r2
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d116      	bne.n	800cc1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cbec:	4a1f      	ldr	r2, [pc, #124]	; (800cc6c <chk_lock+0xb4>)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	4413      	add	r3, r2
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d10c      	bne.n	800cc1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc00:	4a1a      	ldr	r2, [pc, #104]	; (800cc6c <chk_lock+0xb4>)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	011b      	lsls	r3, r3, #4
 800cc06:	4413      	add	r3, r2
 800cc08:	3308      	adds	r3, #8
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d102      	bne.n	800cc1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc14:	e007      	b.n	800cc26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cc16:	2301      	movs	r3, #1
 800cc18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	60fb      	str	r3, [r7, #12]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d9d2      	bls.n	800cbcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d109      	bne.n	800cc40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d102      	bne.n	800cc38 <chk_lock+0x80>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d101      	bne.n	800cc3c <chk_lock+0x84>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e010      	b.n	800cc5e <chk_lock+0xa6>
 800cc3c:	2312      	movs	r3, #18
 800cc3e:	e00e      	b.n	800cc5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d108      	bne.n	800cc58 <chk_lock+0xa0>
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <chk_lock+0xb4>)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	011b      	lsls	r3, r3, #4
 800cc4c:	4413      	add	r3, r2
 800cc4e:	330c      	adds	r3, #12
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc56:	d101      	bne.n	800cc5c <chk_lock+0xa4>
 800cc58:	2310      	movs	r3, #16
 800cc5a:	e000      	b.n	800cc5e <chk_lock+0xa6>
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	240000bc 	.word	0x240000bc

0800cc70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc76:	2300      	movs	r3, #0
 800cc78:	607b      	str	r3, [r7, #4]
 800cc7a:	e002      	b.n	800cc82 <enq_lock+0x12>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	607b      	str	r3, [r7, #4]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d806      	bhi.n	800cc96 <enq_lock+0x26>
 800cc88:	4a09      	ldr	r2, [pc, #36]	; (800ccb0 <enq_lock+0x40>)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	011b      	lsls	r3, r3, #4
 800cc8e:	4413      	add	r3, r2
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1f2      	bne.n	800cc7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	bf14      	ite	ne
 800cc9c:	2301      	movne	r3, #1
 800cc9e:	2300      	moveq	r3, #0
 800cca0:	b2db      	uxtb	r3, r3
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	370c      	adds	r7, #12
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	240000bc 	.word	0x240000bc

0800ccb4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]
 800ccc2:	e01f      	b.n	800cd04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ccc4:	4a41      	ldr	r2, [pc, #260]	; (800cdcc <inc_lock+0x118>)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	011b      	lsls	r3, r3, #4
 800ccca:	4413      	add	r3, r2
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	429a      	cmp	r2, r3
 800ccd4:	d113      	bne.n	800ccfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ccd6:	4a3d      	ldr	r2, [pc, #244]	; (800cdcc <inc_lock+0x118>)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	011b      	lsls	r3, r3, #4
 800ccdc:	4413      	add	r3, r2
 800ccde:	3304      	adds	r3, #4
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d109      	bne.n	800ccfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ccea:	4a38      	ldr	r2, [pc, #224]	; (800cdcc <inc_lock+0x118>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	4413      	add	r3, r2
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d006      	beq.n	800cd0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	3301      	adds	r3, #1
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d9dc      	bls.n	800ccc4 <inc_lock+0x10>
 800cd0a:	e000      	b.n	800cd0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cd0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	d132      	bne.n	800cd7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e002      	b.n	800cd20 <inc_lock+0x6c>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	60fb      	str	r3, [r7, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d806      	bhi.n	800cd34 <inc_lock+0x80>
 800cd26:	4a29      	ldr	r2, [pc, #164]	; (800cdcc <inc_lock+0x118>)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	011b      	lsls	r3, r3, #4
 800cd2c:	4413      	add	r3, r2
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d1f2      	bne.n	800cd1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d101      	bne.n	800cd3e <inc_lock+0x8a>
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	e040      	b.n	800cdc0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	4922      	ldr	r1, [pc, #136]	; (800cdcc <inc_lock+0x118>)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	011b      	lsls	r3, r3, #4
 800cd48:	440b      	add	r3, r1
 800cd4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	689a      	ldr	r2, [r3, #8]
 800cd50:	491e      	ldr	r1, [pc, #120]	; (800cdcc <inc_lock+0x118>)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	440b      	add	r3, r1
 800cd58:	3304      	adds	r3, #4
 800cd5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd60:	491a      	ldr	r1, [pc, #104]	; (800cdcc <inc_lock+0x118>)
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	011b      	lsls	r3, r3, #4
 800cd66:	440b      	add	r3, r1
 800cd68:	3308      	adds	r3, #8
 800cd6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd6c:	4a17      	ldr	r2, [pc, #92]	; (800cdcc <inc_lock+0x118>)
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	011b      	lsls	r3, r3, #4
 800cd72:	4413      	add	r3, r2
 800cd74:	330c      	adds	r3, #12
 800cd76:	2200      	movs	r2, #0
 800cd78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d009      	beq.n	800cd94 <inc_lock+0xe0>
 800cd80:	4a12      	ldr	r2, [pc, #72]	; (800cdcc <inc_lock+0x118>)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	011b      	lsls	r3, r3, #4
 800cd86:	4413      	add	r3, r2
 800cd88:	330c      	adds	r3, #12
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <inc_lock+0xe0>
 800cd90:	2300      	movs	r3, #0
 800cd92:	e015      	b.n	800cdc0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d108      	bne.n	800cdac <inc_lock+0xf8>
 800cd9a:	4a0c      	ldr	r2, [pc, #48]	; (800cdcc <inc_lock+0x118>)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	011b      	lsls	r3, r3, #4
 800cda0:	4413      	add	r3, r2
 800cda2:	330c      	adds	r3, #12
 800cda4:	881b      	ldrh	r3, [r3, #0]
 800cda6:	3301      	adds	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	e001      	b.n	800cdb0 <inc_lock+0xfc>
 800cdac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdb0:	4906      	ldr	r1, [pc, #24]	; (800cdcc <inc_lock+0x118>)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	011b      	lsls	r3, r3, #4
 800cdb6:	440b      	add	r3, r1
 800cdb8:	330c      	adds	r3, #12
 800cdba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	3301      	adds	r3, #1
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	240000bc 	.word	0x240000bc

0800cdd0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b085      	sub	sp, #20
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3b01      	subs	r3, #1
 800cddc:	607b      	str	r3, [r7, #4]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d825      	bhi.n	800ce30 <dec_lock+0x60>
		n = Files[i].ctr;
 800cde4:	4a17      	ldr	r2, [pc, #92]	; (800ce44 <dec_lock+0x74>)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	4413      	add	r3, r2
 800cdec:	330c      	adds	r3, #12
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdf2:	89fb      	ldrh	r3, [r7, #14]
 800cdf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdf8:	d101      	bne.n	800cdfe <dec_lock+0x2e>
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cdfe:	89fb      	ldrh	r3, [r7, #14]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d002      	beq.n	800ce0a <dec_lock+0x3a>
 800ce04:	89fb      	ldrh	r3, [r7, #14]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ce0a:	4a0e      	ldr	r2, [pc, #56]	; (800ce44 <dec_lock+0x74>)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	011b      	lsls	r3, r3, #4
 800ce10:	4413      	add	r3, r2
 800ce12:	330c      	adds	r3, #12
 800ce14:	89fa      	ldrh	r2, [r7, #14]
 800ce16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ce18:	89fb      	ldrh	r3, [r7, #14]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <dec_lock+0x5a>
 800ce1e:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <dec_lock+0x74>)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	4413      	add	r3, r2
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	737b      	strb	r3, [r7, #13]
 800ce2e:	e001      	b.n	800ce34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce30:	2302      	movs	r3, #2
 800ce32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce34:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3714      	adds	r7, #20
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
 800ce42:	bf00      	nop
 800ce44:	240000bc 	.word	0x240000bc

0800ce48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce50:	2300      	movs	r3, #0
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	e010      	b.n	800ce78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce56:	4a0d      	ldr	r2, [pc, #52]	; (800ce8c <clear_lock+0x44>)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	011b      	lsls	r3, r3, #4
 800ce5c:	4413      	add	r3, r2
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d105      	bne.n	800ce72 <clear_lock+0x2a>
 800ce66:	4a09      	ldr	r2, [pc, #36]	; (800ce8c <clear_lock+0x44>)
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	011b      	lsls	r3, r3, #4
 800ce6c:	4413      	add	r3, r2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3301      	adds	r3, #1
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d9eb      	bls.n	800ce56 <clear_lock+0xe>
	}
}
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	240000bc 	.word	0x240000bc

0800ce90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	78db      	ldrb	r3, [r3, #3]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d034      	beq.n	800cf0e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7858      	ldrb	r0, [r3, #1]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ceb4:	2301      	movs	r3, #1
 800ceb6:	697a      	ldr	r2, [r7, #20]
 800ceb8:	f7ff fbfc 	bl	800c6b4 <disk_write>
 800cebc:	4603      	mov	r3, r0
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	73fb      	strb	r3, [r7, #15]
 800cec6:	e022      	b.n	800cf0e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2200      	movs	r2, #0
 800cecc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	1ad2      	subs	r2, r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d217      	bcs.n	800cf0e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	789b      	ldrb	r3, [r3, #2]
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	e010      	b.n	800cf08 <sync_window+0x78>
					wsect += fs->fsize;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceea:	697a      	ldr	r2, [r7, #20]
 800ceec:	4413      	add	r3, r2
 800ceee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	7858      	ldrb	r0, [r3, #1]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cefa:	2301      	movs	r3, #1
 800cefc:	697a      	ldr	r2, [r7, #20]
 800cefe:	f7ff fbd9 	bl	800c6b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	613b      	str	r3, [r7, #16]
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d8eb      	bhi.n	800cee6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d01b      	beq.n	800cf68 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7ff ffad 	bl	800ce90 <sync_window>
 800cf36:	4603      	mov	r3, r0
 800cf38:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf3a:	7bfb      	ldrb	r3, [r7, #15]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d113      	bne.n	800cf68 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	7858      	ldrb	r0, [r3, #1]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	683a      	ldr	r2, [r7, #0]
 800cf4e:	f7ff fb91 	bl	800c674 <disk_read>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf58:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	683a      	ldr	r2, [r7, #0]
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
	...

0800cf74 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ff87 	bl	800ce90 <sync_window>
 800cf82:	4603      	mov	r3, r0
 800cf84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d159      	bne.n	800d040 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	2b03      	cmp	r3, #3
 800cf92:	d149      	bne.n	800d028 <sync_fs+0xb4>
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	791b      	ldrb	r3, [r3, #4]
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d145      	bne.n	800d028 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	899b      	ldrh	r3, [r3, #12]
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	f7ff fda8 	bl	800cafe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	333c      	adds	r3, #60	; 0x3c
 800cfb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfb6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7ff fcb0 	bl	800c920 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	333c      	adds	r3, #60	; 0x3c
 800cfc4:	4921      	ldr	r1, [pc, #132]	; (800d04c <sync_fs+0xd8>)
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7ff fcc5 	bl	800c956 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	333c      	adds	r3, #60	; 0x3c
 800cfd0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfd4:	491e      	ldr	r1, [pc, #120]	; (800d050 <sync_fs+0xdc>)
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7ff fcbd 	bl	800c956 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	333c      	adds	r3, #60	; 0x3c
 800cfe0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	69db      	ldr	r3, [r3, #28]
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7ff fcb3 	bl	800c956 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	333c      	adds	r3, #60	; 0x3c
 800cff4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	4619      	mov	r1, r3
 800cffe:	4610      	mov	r0, r2
 800d000:	f7ff fca9 	bl	800c956 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d008:	1c5a      	adds	r2, r3, #1
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7858      	ldrb	r0, [r3, #1]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d01c:	2301      	movs	r3, #1
 800d01e:	f7ff fb49 	bl	800c6b4 <disk_write>
			fs->fsi_flag = 0;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	785b      	ldrb	r3, [r3, #1]
 800d02c:	2200      	movs	r2, #0
 800d02e:	2100      	movs	r1, #0
 800d030:	4618      	mov	r0, r3
 800d032:	f7ff fb5f 	bl	800c6f4 <disk_ioctl>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <sync_fs+0xcc>
 800d03c:	2301      	movs	r3, #1
 800d03e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d040:	7bfb      	ldrb	r3, [r7, #15]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	41615252 	.word	0x41615252
 800d050:	61417272 	.word	0x61417272

0800d054 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	3b02      	subs	r3, #2
 800d062:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6a1b      	ldr	r3, [r3, #32]
 800d068:	3b02      	subs	r3, #2
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d301      	bcc.n	800d074 <clust2sect+0x20>
 800d070:	2300      	movs	r3, #0
 800d072:	e008      	b.n	800d086 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	895b      	ldrh	r3, [r3, #10]
 800d078:	461a      	mov	r2, r3
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	fb03 f202 	mul.w	r2, r3, r2
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d084:	4413      	add	r3, r2
}
 800d086:	4618      	mov	r0, r3
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
	...

0800d094 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d094:	b590      	push	{r4, r7, lr}
 800d096:	b089      	sub	sp, #36	; 0x24
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d904      	bls.n	800d0b4 <get_fat+0x20>
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	d302      	bcc.n	800d0ba <get_fat+0x26>
		val = 1;	/* Internal error */
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	e13a      	b.n	800d330 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d0be:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	f200 8126 	bhi.w	800d318 <get_fat+0x284>
 800d0cc:	a201      	add	r2, pc, #4	; (adr r2, 800d0d4 <get_fat+0x40>)
 800d0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d2:	bf00      	nop
 800d0d4:	0800d0e5 	.word	0x0800d0e5
 800d0d8:	0800d193 	.word	0x0800d193
 800d0dc:	0800d1df 	.word	0x0800d1df
 800d0e0:	0800d22f 	.word	0x0800d22f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	60fb      	str	r3, [r7, #12]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	085b      	lsrs	r3, r3, #1
 800d0ec:	68fa      	ldr	r2, [r7, #12]
 800d0ee:	4413      	add	r3, r2
 800d0f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0f2:	69bb      	ldr	r3, [r7, #24]
 800d0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	899b      	ldrh	r3, [r3, #12]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	fbb3 f3f1 	udiv	r3, r3, r1
 800d102:	4413      	add	r3, r2
 800d104:	4619      	mov	r1, r3
 800d106:	69b8      	ldr	r0, [r7, #24]
 800d108:	f7ff ff06 	bl	800cf18 <move_window>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f040 8105 	bne.w	800d31e <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	1c5a      	adds	r2, r3, #1
 800d118:	60fa      	str	r2, [r7, #12]
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	8992      	ldrh	r2, [r2, #12]
 800d11e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d122:	fb02 f201 	mul.w	r2, r2, r1
 800d126:	1a9b      	subs	r3, r3, r2
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	4413      	add	r3, r2
 800d12c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d130:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d132:	69bb      	ldr	r3, [r7, #24]
 800d134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	899b      	ldrh	r3, [r3, #12]
 800d13a:	4619      	mov	r1, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d142:	4413      	add	r3, r2
 800d144:	4619      	mov	r1, r3
 800d146:	69b8      	ldr	r0, [r7, #24]
 800d148:	f7ff fee6 	bl	800cf18 <move_window>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f040 80e7 	bne.w	800d322 <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d154:	69bb      	ldr	r3, [r7, #24]
 800d156:	899b      	ldrh	r3, [r3, #12]
 800d158:	461a      	mov	r2, r3
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d160:	fb02 f201 	mul.w	r2, r2, r1
 800d164:	1a9b      	subs	r3, r3, r2
 800d166:	69ba      	ldr	r2, [r7, #24]
 800d168:	4413      	add	r3, r2
 800d16a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	461a      	mov	r2, r3
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	4313      	orrs	r3, r2
 800d176:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d002      	beq.n	800d188 <get_fat+0xf4>
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	091b      	lsrs	r3, r3, #4
 800d186:	e002      	b.n	800d18e <get_fat+0xfa>
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d18e:	61fb      	str	r3, [r7, #28]
			break;
 800d190:	e0ce      	b.n	800d330 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d196:	69bb      	ldr	r3, [r7, #24]
 800d198:	899b      	ldrh	r3, [r3, #12]
 800d19a:	085b      	lsrs	r3, r3, #1
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	4619      	mov	r1, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1a6:	4413      	add	r3, r2
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	69b8      	ldr	r0, [r7, #24]
 800d1ac:	f7ff feb4 	bl	800cf18 <move_window>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	f040 80b7 	bne.w	800d326 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	005b      	lsls	r3, r3, #1
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	8992      	ldrh	r2, [r2, #12]
 800d1c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1ca:	fb02 f200 	mul.w	r2, r2, r0
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	440b      	add	r3, r1
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7ff faac 	bl	800c730 <ld_word>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	61fb      	str	r3, [r7, #28]
			break;
 800d1dc:	e0a8      	b.n	800d330 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	899b      	ldrh	r3, [r3, #12]
 800d1e6:	089b      	lsrs	r3, r3, #2
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d1f2:	4413      	add	r3, r2
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	69b8      	ldr	r0, [r7, #24]
 800d1f8:	f7ff fe8e 	bl	800cf18 <move_window>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f040 8093 	bne.w	800d32a <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	69ba      	ldr	r2, [r7, #24]
 800d210:	8992      	ldrh	r2, [r2, #12]
 800d212:	fbb3 f0f2 	udiv	r0, r3, r2
 800d216:	fb02 f200 	mul.w	r2, r2, r0
 800d21a:	1a9b      	subs	r3, r3, r2
 800d21c:	440b      	add	r3, r1
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff fa9e 	bl	800c760 <ld_dword>
 800d224:	4603      	mov	r3, r0
 800d226:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d22a:	61fb      	str	r3, [r7, #28]
			break;
 800d22c:	e080      	b.n	800d330 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d234:	4323      	orrs	r3, r4
 800d236:	d06f      	beq.n	800d318 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800d248:	f113 30ff 	adds.w	r0, r3, #4294967295
 800d24c:	f144 31ff 	adc.w	r1, r4, #4294967295
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	899b      	ldrh	r3, [r3, #12]
 800d254:	b29b      	uxth	r3, r3
 800d256:	f04f 0400 	mov.w	r4, #0
 800d25a:	461a      	mov	r2, r3
 800d25c:	4623      	mov	r3, r4
 800d25e:	f7f3 f88f 	bl	8000380 <__aeabi_uldivmod>
 800d262:	4603      	mov	r3, r0
 800d264:	460c      	mov	r4, r1
 800d266:	461a      	mov	r2, r3
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	895b      	ldrh	r3, [r3, #10]
 800d26c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d270:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	79db      	ldrb	r3, [r3, #7]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d10e      	bne.n	800d298 <get_fat+0x204>
					if (cofs <= clen) {
 800d27a:	697a      	ldr	r2, [r7, #20]
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d80a      	bhi.n	800d298 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800d282:	697a      	ldr	r2, [r7, #20]
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	429a      	cmp	r2, r3
 800d288:	d002      	beq.n	800d290 <get_fat+0x1fc>
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	3301      	adds	r3, #1
 800d28e:	e001      	b.n	800d294 <get_fat+0x200>
 800d290:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d294:	61fb      	str	r3, [r7, #28]
						break;
 800d296:	e04b      	b.n	800d330 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	79db      	ldrb	r3, [r3, #7]
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d108      	bne.n	800d2b2 <get_fat+0x21e>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	699b      	ldr	r3, [r3, #24]
 800d2a4:	697a      	ldr	r2, [r7, #20]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d203      	bcs.n	800d2b2 <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	61fb      	str	r3, [r7, #28]
					break;
 800d2b0:	e03e      	b.n	800d330 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	79db      	ldrb	r3, [r3, #7]
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	d02e      	beq.n	800d318 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d003      	beq.n	800d2ca <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800d2c2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d2c6:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800d2c8:	e032      	b.n	800d330 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	69bb      	ldr	r3, [r7, #24]
 800d2d0:	899b      	ldrh	r3, [r3, #12]
 800d2d2:	089b      	lsrs	r3, r3, #2
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	fbb3 f3f1 	udiv	r3, r3, r1
 800d2de:	4413      	add	r3, r2
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	69b8      	ldr	r0, [r7, #24]
 800d2e4:	f7ff fe18 	bl	800cf18 <move_window>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d11f      	bne.n	800d32e <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	69ba      	ldr	r2, [r7, #24]
 800d2fa:	8992      	ldrh	r2, [r2, #12]
 800d2fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800d300:	fb02 f200 	mul.w	r2, r2, r0
 800d304:	1a9b      	subs	r3, r3, r2
 800d306:	440b      	add	r3, r1
 800d308:	4618      	mov	r0, r3
 800d30a:	f7ff fa29 	bl	800c760 <ld_dword>
 800d30e:	4603      	mov	r3, r0
 800d310:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d314:	61fb      	str	r3, [r7, #28]
					break;
 800d316:	e00b      	b.n	800d330 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d318:	2301      	movs	r3, #1
 800d31a:	61fb      	str	r3, [r7, #28]
 800d31c:	e008      	b.n	800d330 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d31e:	bf00      	nop
 800d320:	e006      	b.n	800d330 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d322:	bf00      	nop
 800d324:	e004      	b.n	800d330 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d326:	bf00      	nop
 800d328:	e002      	b.n	800d330 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d32a:	bf00      	nop
 800d32c:	e000      	b.n	800d330 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d32e:	bf00      	nop
		}
	}

	return val;
 800d330:	69fb      	ldr	r3, [r7, #28]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3724      	adds	r7, #36	; 0x24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd90      	pop	{r4, r7, pc}
 800d33a:	bf00      	nop

0800d33c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d33c:	b590      	push	{r4, r7, lr}
 800d33e:	b089      	sub	sp, #36	; 0x24
 800d340:	af00      	add	r7, sp, #0
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d348:	2302      	movs	r3, #2
 800d34a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2b01      	cmp	r3, #1
 800d350:	f240 8111 	bls.w	800d576 <put_fat+0x23a>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	68ba      	ldr	r2, [r7, #8]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	f080 810b 	bcs.w	800d576 <put_fat+0x23a>
		switch (fs->fs_type) {
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	3b01      	subs	r3, #1
 800d366:	2b03      	cmp	r3, #3
 800d368:	f200 8105 	bhi.w	800d576 <put_fat+0x23a>
 800d36c:	a201      	add	r2, pc, #4	; (adr r2, 800d374 <put_fat+0x38>)
 800d36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d372:	bf00      	nop
 800d374:	0800d385 	.word	0x0800d385
 800d378:	0800d489 	.word	0x0800d489
 800d37c:	0800d4df 	.word	0x0800d4df
 800d380:	0800d4df 	.word	0x0800d4df
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	61bb      	str	r3, [r7, #24]
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	085b      	lsrs	r3, r3, #1
 800d38c:	69ba      	ldr	r2, [r7, #24]
 800d38e:	4413      	add	r3, r2
 800d390:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	899b      	ldrh	r3, [r3, #12]
 800d39a:	4619      	mov	r1, r3
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3a2:	4413      	add	r3, r2
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fdb6 	bl	800cf18 <move_window>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3b0:	7ffb      	ldrb	r3, [r7, #31]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f040 80d8 	bne.w	800d568 <put_fat+0x22c>
			p = fs->win + bc++ % SS(fs);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	61ba      	str	r2, [r7, #24]
 800d3c4:	68fa      	ldr	r2, [r7, #12]
 800d3c6:	8992      	ldrh	r2, [r2, #12]
 800d3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800d3cc:	fb02 f200 	mul.w	r2, r2, r0
 800d3d0:	1a9b      	subs	r3, r3, r2
 800d3d2:	440b      	add	r3, r1
 800d3d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	f003 0301 	and.w	r3, r3, #1
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00d      	beq.n	800d3fc <put_fat+0xc0>
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	b25b      	sxtb	r3, r3
 800d3e6:	f003 030f 	and.w	r3, r3, #15
 800d3ea:	b25a      	sxtb	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	011b      	lsls	r3, r3, #4
 800d3f2:	b25b      	sxtb	r3, r3
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	b25b      	sxtb	r3, r3
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	e001      	b.n	800d400 <put_fat+0xc4>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	697a      	ldr	r2, [r7, #20]
 800d402:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2201      	movs	r2, #1
 800d408:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	899b      	ldrh	r3, [r3, #12]
 800d412:	4619      	mov	r1, r3
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	fbb3 f3f1 	udiv	r3, r3, r1
 800d41a:	4413      	add	r3, r2
 800d41c:	4619      	mov	r1, r3
 800d41e:	68f8      	ldr	r0, [r7, #12]
 800d420:	f7ff fd7a 	bl	800cf18 <move_window>
 800d424:	4603      	mov	r3, r0
 800d426:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d428:	7ffb      	ldrb	r3, [r7, #31]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 809e 	bne.w	800d56c <put_fat+0x230>
			p = fs->win + bc % SS(fs);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	899b      	ldrh	r3, [r3, #12]
 800d43a:	461a      	mov	r2, r3
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	fbb3 f0f2 	udiv	r0, r3, r2
 800d442:	fb02 f200 	mul.w	r2, r2, r0
 800d446:	1a9b      	subs	r3, r3, r2
 800d448:	440b      	add	r3, r1
 800d44a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	f003 0301 	and.w	r3, r3, #1
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <put_fat+0x122>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	091b      	lsrs	r3, r3, #4
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	e00e      	b.n	800d47c <put_fat+0x140>
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	b25b      	sxtb	r3, r3
 800d464:	f023 030f 	bic.w	r3, r3, #15
 800d468:	b25a      	sxtb	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	0a1b      	lsrs	r3, r3, #8
 800d46e:	b25b      	sxtb	r3, r3
 800d470:	f003 030f 	and.w	r3, r3, #15
 800d474:	b25b      	sxtb	r3, r3
 800d476:	4313      	orrs	r3, r2
 800d478:	b25b      	sxtb	r3, r3
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2201      	movs	r2, #1
 800d484:	70da      	strb	r2, [r3, #3]
			break;
 800d486:	e076      	b.n	800d576 <put_fat+0x23a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	085b      	lsrs	r3, r3, #1
 800d492:	b29b      	uxth	r3, r3
 800d494:	4619      	mov	r1, r3
 800d496:	68bb      	ldr	r3, [r7, #8]
 800d498:	fbb3 f3f1 	udiv	r3, r3, r1
 800d49c:	4413      	add	r3, r2
 800d49e:	4619      	mov	r1, r3
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f7ff fd39 	bl	800cf18 <move_window>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4aa:	7ffb      	ldrb	r3, [r7, #31]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d15f      	bne.n	800d570 <put_fat+0x234>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	005b      	lsls	r3, r3, #1
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	8992      	ldrh	r2, [r2, #12]
 800d4be:	fbb3 f0f2 	udiv	r0, r3, r2
 800d4c2:	fb02 f200 	mul.w	r2, r2, r0
 800d4c6:	1a9b      	subs	r3, r3, r2
 800d4c8:	440b      	add	r3, r1
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	b292      	uxth	r2, r2
 800d4ce:	4611      	mov	r1, r2
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7ff fa25 	bl	800c920 <st_word>
			fs->wflag = 1;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	70da      	strb	r2, [r3, #3]
			break;
 800d4dc:	e04b      	b.n	800d576 <put_fat+0x23a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	899b      	ldrh	r3, [r3, #12]
 800d4e6:	089b      	lsrs	r3, r3, #2
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d4f2:	4413      	add	r3, r2
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	68f8      	ldr	r0, [r7, #12]
 800d4f8:	f7ff fd0e 	bl	800cf18 <move_window>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d500:	7ffb      	ldrb	r3, [r7, #31]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d136      	bne.n	800d574 <put_fat+0x238>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	2b04      	cmp	r3, #4
 800d50c:	d017      	beq.n	800d53e <put_fat+0x202>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	68fa      	ldr	r2, [r7, #12]
 800d520:	8992      	ldrh	r2, [r2, #12]
 800d522:	fbb3 f0f2 	udiv	r0, r3, r2
 800d526:	fb02 f200 	mul.w	r2, r2, r0
 800d52a:	1a9b      	subs	r3, r3, r2
 800d52c:	440b      	add	r3, r1
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff f916 	bl	800c760 <ld_dword>
 800d534:	4603      	mov	r3, r0
 800d536:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d53a:	4323      	orrs	r3, r4
 800d53c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d544:	68bb      	ldr	r3, [r7, #8]
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	68fa      	ldr	r2, [r7, #12]
 800d54a:	8992      	ldrh	r2, [r2, #12]
 800d54c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d550:	fb02 f200 	mul.w	r2, r2, r0
 800d554:	1a9b      	subs	r3, r3, r2
 800d556:	440b      	add	r3, r1
 800d558:	6879      	ldr	r1, [r7, #4]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff f9fb 	bl	800c956 <st_dword>
			fs->wflag = 1;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2201      	movs	r2, #1
 800d564:	70da      	strb	r2, [r3, #3]
			break;
 800d566:	e006      	b.n	800d576 <put_fat+0x23a>
			if (res != FR_OK) break;
 800d568:	bf00      	nop
 800d56a:	e004      	b.n	800d576 <put_fat+0x23a>
			if (res != FR_OK) break;
 800d56c:	bf00      	nop
 800d56e:	e002      	b.n	800d576 <put_fat+0x23a>
			if (res != FR_OK) break;
 800d570:	bf00      	nop
 800d572:	e000      	b.n	800d576 <put_fat+0x23a>
			if (res != FR_OK) break;
 800d574:	bf00      	nop
		}
	}
	return res;
 800d576:	7ffb      	ldrb	r3, [r7, #31]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3724      	adds	r7, #36	; 0x24
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd90      	pop	{r4, r7, pc}

0800d580 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b08a      	sub	sp, #40	; 0x28
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	3b02      	subs	r3, #2
 800d590:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	3b02      	subs	r3, #2
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d301      	bcc.n	800d5a2 <find_bitmap+0x22>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	61fb      	str	r3, [r7, #28]
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	61bb      	str	r3, [r7, #24]
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	08db      	lsrs	r3, r3, #3
 800d5b6:	68f9      	ldr	r1, [r7, #12]
 800d5b8:	8989      	ldrh	r1, [r1, #12]
 800d5ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5be:	4413      	add	r3, r2
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f7ff fca8 	bl	800cf18 <move_window>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <find_bitmap+0x54>
 800d5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d2:	e058      	b.n	800d686 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	08db      	lsrs	r3, r3, #3
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	8992      	ldrh	r2, [r2, #12]
 800d5dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5e0:	fb02 f201 	mul.w	r2, r2, r1
 800d5e4:	1a9b      	subs	r3, r3, r2
 800d5e6:	623b      	str	r3, [r7, #32]
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	f003 0307 	and.w	r3, r3, #7
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	6a3b      	ldr	r3, [r7, #32]
 800d5fc:	4413      	add	r3, r2
 800d5fe:	333c      	adds	r3, #60	; 0x3c
 800d600:	781a      	ldrb	r2, [r3, #0]
 800d602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d606:	4013      	ands	r3, r2
 800d608:	74fb      	strb	r3, [r7, #19]
 800d60a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d60e:	005b      	lsls	r3, r3, #1
 800d610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	3301      	adds	r3, #1
 800d618:	61fb      	str	r3, [r7, #28]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	3b02      	subs	r3, #2
 800d620:	69fa      	ldr	r2, [r7, #28]
 800d622:	429a      	cmp	r2, r3
 800d624:	d307      	bcc.n	800d636 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800d626:	2300      	movs	r3, #0
 800d628:	61fb      	str	r3, [r7, #28]
 800d62a:	2300      	movs	r3, #0
 800d62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	899b      	ldrh	r3, [r3, #12]
 800d634:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d636:	7cfb      	ldrb	r3, [r7, #19]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d109      	bne.n	800d650 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	3301      	adds	r3, #1
 800d640:	617b      	str	r3, [r7, #20]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	429a      	cmp	r2, r3
 800d648:	d106      	bne.n	800d658 <find_bitmap+0xd8>
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	3302      	adds	r3, #2
 800d64e:	e01a      	b.n	800d686 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	61bb      	str	r3, [r7, #24]
 800d654:	2300      	movs	r3, #0
 800d656:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d658:	69fa      	ldr	r2, [r7, #28]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d101      	bne.n	800d664 <find_bitmap+0xe4>
 800d660:	2300      	movs	r3, #0
 800d662:	e010      	b.n	800d686 <find_bitmap+0x106>
			} while (bm);
 800d664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1c5      	bne.n	800d5f8 <find_bitmap+0x78>
			bm = 1;
 800d66c:	2301      	movs	r3, #1
 800d66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d672:	6a3b      	ldr	r3, [r7, #32]
 800d674:	3301      	adds	r3, #1
 800d676:	623b      	str	r3, [r7, #32]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	899b      	ldrh	r3, [r3, #12]
 800d67c:	461a      	mov	r2, r3
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	4293      	cmp	r3, r2
 800d682:	d3b9      	bcc.n	800d5f8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d684:	e793      	b.n	800d5ae <find_bitmap+0x2e>
	}
}
 800d686:	4618      	mov	r0, r3
 800d688:	3728      	adds	r7, #40	; 0x28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}

0800d68e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b088      	sub	sp, #32
 800d692:	af00      	add	r7, sp, #0
 800d694:	60f8      	str	r0, [r7, #12]
 800d696:	60b9      	str	r1, [r7, #8]
 800d698:	607a      	str	r2, [r7, #4]
 800d69a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	3b02      	subs	r3, #2
 800d6a0:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	08db      	lsrs	r3, r3, #3
 800d6aa:	68f9      	ldr	r1, [r7, #12]
 800d6ac:	8989      	ldrh	r1, [r1, #12]
 800d6ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	08db      	lsrs	r3, r3, #3
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	8992      	ldrh	r2, [r2, #12]
 800d6be:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6c2:	fb02 f201 	mul.w	r2, r2, r1
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	f003 0307 	and.w	r3, r3, #7
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d6d6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	617a      	str	r2, [r7, #20]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7ff fc19 	bl	800cf18 <move_window>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <change_bitmap+0x62>
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e03f      	b.n	800d770 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	333c      	adds	r3, #60	; 0x3c
 800d6f8:	781a      	ldrb	r2, [r3, #0]
 800d6fa:	7ffb      	ldrb	r3, [r7, #31]
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	2b00      	cmp	r3, #0
 800d702:	bf14      	ite	ne
 800d704:	2301      	movne	r3, #1
 800d706:	2300      	moveq	r3, #0
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	461a      	mov	r2, r3
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	4293      	cmp	r3, r2
 800d710:	d101      	bne.n	800d716 <change_bitmap+0x88>
 800d712:	2302      	movs	r3, #2
 800d714:	e02c      	b.n	800d770 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	4413      	add	r3, r2
 800d71c:	333c      	adds	r3, #60	; 0x3c
 800d71e:	781a      	ldrb	r2, [r3, #0]
 800d720:	7ffb      	ldrb	r3, [r7, #31]
 800d722:	4053      	eors	r3, r2
 800d724:	b2d9      	uxtb	r1, r3
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	4413      	add	r3, r2
 800d72c:	333c      	adds	r3, #60	; 0x3c
 800d72e:	460a      	mov	r2, r1
 800d730:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	2201      	movs	r2, #1
 800d736:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	607b      	str	r3, [r7, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <change_bitmap+0xba>
 800d744:	2300      	movs	r3, #0
 800d746:	e013      	b.n	800d770 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800d748:	7ffb      	ldrb	r3, [r7, #31]
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	77fb      	strb	r3, [r7, #31]
 800d74e:	7ffb      	ldrb	r3, [r7, #31]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1cd      	bne.n	800d6f0 <change_bitmap+0x62>
			bm = 1;
 800d754:	2301      	movs	r3, #1
 800d756:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	3301      	adds	r3, #1
 800d75c:	61bb      	str	r3, [r7, #24]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	899b      	ldrh	r3, [r3, #12]
 800d762:	461a      	mov	r2, r3
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	4293      	cmp	r3, r2
 800d768:	d3c2      	bcc.n	800d6f0 <change_bitmap+0x62>
		i = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d76e:	e7b3      	b.n	800d6d8 <change_bitmap+0x4a>
	}
}
 800d770:	4618      	mov	r0, r3
 800d772:	3720      	adds	r7, #32
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b086      	sub	sp, #24
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	79db      	ldrb	r3, [r3, #7]
 800d784:	2b03      	cmp	r3, #3
 800d786:	d121      	bne.n	800d7cc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	617b      	str	r3, [r7, #20]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	699b      	ldr	r3, [r3, #24]
 800d792:	613b      	str	r3, [r7, #16]
 800d794:	e014      	b.n	800d7c0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	3301      	adds	r3, #1
 800d79e:	461a      	mov	r2, r3
 800d7a0:	6979      	ldr	r1, [r7, #20]
 800d7a2:	f7ff fdcb 	bl	800d33c <put_fat>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <fill_first_frag+0x3c>
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	e00c      	b.n	800d7ce <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	617b      	str	r3, [r7, #20]
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	3b01      	subs	r3, #1
 800d7be:	613b      	str	r3, [r7, #16]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e7      	bne.n	800d796 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3718      	adds	r7, #24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}

0800d7d6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d7d6:	b580      	push	{r7, lr}
 800d7d8:	b086      	sub	sp, #24
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	60f8      	str	r0, [r7, #12]
 800d7de:	60b9      	str	r1, [r7, #8]
 800d7e0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d7e2:	e020      	b.n	800d826 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	68ba      	ldr	r2, [r7, #8]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	1c59      	adds	r1, r3, #1
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	69db      	ldr	r3, [r3, #28]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d905      	bls.n	800d806 <fill_last_frag+0x30>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	68ba      	ldr	r2, [r7, #8]
 800d800:	1ad3      	subs	r3, r2, r3
 800d802:	3302      	adds	r3, #2
 800d804:	e000      	b.n	800d808 <fill_last_frag+0x32>
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	461a      	mov	r2, r3
 800d80a:	f7ff fd97 	bl	800d33c <put_fat>
 800d80e:	4603      	mov	r3, r0
 800d810:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d812:	7dfb      	ldrb	r3, [r7, #23]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <fill_last_frag+0x46>
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	e009      	b.n	800d830 <fill_last_frag+0x5a>
		obj->n_frag--;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	1e5a      	subs	r2, r3, #1
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	69db      	ldr	r3, [r3, #28]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1da      	bne.n	800d7e4 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b08a      	sub	sp, #40	; 0x28
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	60f8      	str	r0, [r7, #12]
 800d840:	60b9      	str	r1, [r7, #8]
 800d842:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	627b      	str	r3, [r7, #36]	; 0x24
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d904      	bls.n	800d866 <remove_chain+0x2e>
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	68ba      	ldr	r2, [r7, #8]
 800d862:	429a      	cmp	r2, r3
 800d864:	d301      	bcc.n	800d86a <remove_chain+0x32>
 800d866:	2302      	movs	r3, #2
 800d868:	e096      	b.n	800d998 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d014      	beq.n	800d89a <remove_chain+0x62>
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b04      	cmp	r3, #4
 800d876:	d103      	bne.n	800d880 <remove_chain+0x48>
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	79db      	ldrb	r3, [r3, #7]
 800d87c:	2b02      	cmp	r3, #2
 800d87e:	d00c      	beq.n	800d89a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d880:	f04f 32ff 	mov.w	r2, #4294967295
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	69b8      	ldr	r0, [r7, #24]
 800d888:	f7ff fd58 	bl	800d33c <put_fat>
 800d88c:	4603      	mov	r3, r0
 800d88e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d890:	7ffb      	ldrb	r3, [r7, #31]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d001      	beq.n	800d89a <remove_chain+0x62>
 800d896:	7ffb      	ldrb	r3, [r7, #31]
 800d898:	e07e      	b.n	800d998 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d89a:	68b9      	ldr	r1, [r7, #8]
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f7ff fbf9 	bl	800d094 <get_fat>
 800d8a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d055      	beq.n	800d956 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d101      	bne.n	800d8b4 <remove_chain+0x7c>
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	e071      	b.n	800d998 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ba:	d101      	bne.n	800d8c0 <remove_chain+0x88>
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e06b      	b.n	800d998 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	781b      	ldrb	r3, [r3, #0]
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d00b      	beq.n	800d8e0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	68b9      	ldr	r1, [r7, #8]
 800d8cc:	69b8      	ldr	r0, [r7, #24]
 800d8ce:	f7ff fd35 	bl	800d33c <put_fat>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d8d6:	7ffb      	ldrb	r3, [r7, #31]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d001      	beq.n	800d8e0 <remove_chain+0xa8>
 800d8dc:	7ffb      	ldrb	r3, [r7, #31]
 800d8de:	e05b      	b.n	800d998 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	69da      	ldr	r2, [r3, #28]
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	3b02      	subs	r3, #2
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d20b      	bcs.n	800d906 <remove_chain+0xce>
			fs->free_clst++;
 800d8ee:	69bb      	ldr	r3, [r7, #24]
 800d8f0:	69db      	ldr	r3, [r3, #28]
 800d8f2:	1c5a      	adds	r2, r3, #1
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	791b      	ldrb	r3, [r3, #4]
 800d8fc:	f043 0301 	orr.w	r3, r3, #1
 800d900:	b2da      	uxtb	r2, r3
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	3301      	adds	r3, #1
 800d90a:	697a      	ldr	r2, [r7, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d102      	bne.n	800d916 <remove_chain+0xde>
			ecl = nxt;
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	623b      	str	r3, [r7, #32]
 800d914:	e017      	b.n	800d946 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d916:	69bb      	ldr	r3, [r7, #24]
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b04      	cmp	r3, #4
 800d91c:	d10f      	bne.n	800d93e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d91e:	6a3a      	ldr	r2, [r7, #32]
 800d920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	2300      	movs	r3, #0
 800d928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d92a:	69b8      	ldr	r0, [r7, #24]
 800d92c:	f7ff feaf 	bl	800d68e <change_bitmap>
 800d930:	4603      	mov	r3, r0
 800d932:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d934:	7ffb      	ldrb	r3, [r7, #31]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <remove_chain+0x106>
 800d93a:	7ffb      	ldrb	r3, [r7, #31]
 800d93c:	e02c      	b.n	800d998 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	623b      	str	r3, [r7, #32]
 800d942:	6a3b      	ldr	r3, [r7, #32]
 800d944:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	429a      	cmp	r2, r3
 800d952:	d3a2      	bcc.n	800d89a <remove_chain+0x62>
 800d954:	e000      	b.n	800d958 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d956:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b04      	cmp	r3, #4
 800d95e:	d11a      	bne.n	800d996 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d103      	bne.n	800d96e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2200      	movs	r2, #0
 800d96a:	71da      	strb	r2, [r3, #7]
 800d96c:	e013      	b.n	800d996 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	79db      	ldrb	r3, [r3, #7]
 800d972:	2b03      	cmp	r3, #3
 800d974:	d10f      	bne.n	800d996 <remove_chain+0x15e>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d30a      	bcc.n	800d996 <remove_chain+0x15e>
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	689a      	ldr	r2, [r3, #8]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	4413      	add	r3, r2
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d802      	bhi.n	800d996 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2202      	movs	r2, #2
 800d994:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3728      	adds	r7, #40	; 0x28
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b088      	sub	sp, #32
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10d      	bne.n	800d9d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d9b6:	693b      	ldr	r3, [r7, #16]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d004      	beq.n	800d9cc <create_chain+0x2c>
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	6a1b      	ldr	r3, [r3, #32]
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d31b      	bcc.n	800da04 <create_chain+0x64>
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	61bb      	str	r3, [r7, #24]
 800d9d0:	e018      	b.n	800da04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff fb5d 	bl	800d094 <get_fat>
 800d9da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d801      	bhi.n	800d9e6 <create_chain+0x46>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e0d9      	b.n	800db9a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ec:	d101      	bne.n	800d9f2 <create_chain+0x52>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	e0d3      	b.n	800db9a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	68fa      	ldr	r2, [r7, #12]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d201      	bcs.n	800da00 <create_chain+0x60>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	e0cc      	b.n	800db9a <create_chain+0x1fa>
		scl = clst;
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	2b04      	cmp	r3, #4
 800da0a:	d164      	bne.n	800dad6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800da0c:	2201      	movs	r2, #1
 800da0e:	69b9      	ldr	r1, [r7, #24]
 800da10:	6938      	ldr	r0, [r7, #16]
 800da12:	f7ff fdb5 	bl	800d580 <find_bitmap>
 800da16:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800da18:	69fb      	ldr	r3, [r7, #28]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d003      	beq.n	800da26 <create_chain+0x86>
 800da1e:	69fb      	ldr	r3, [r7, #28]
 800da20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da24:	d101      	bne.n	800da2a <create_chain+0x8a>
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	e0b7      	b.n	800db9a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800da2a:	2301      	movs	r3, #1
 800da2c:	2201      	movs	r2, #1
 800da2e:	69f9      	ldr	r1, [r7, #28]
 800da30:	6938      	ldr	r0, [r7, #16]
 800da32:	f7ff fe2c 	bl	800d68e <change_bitmap>
 800da36:	4603      	mov	r3, r0
 800da38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d101      	bne.n	800da44 <create_chain+0xa4>
 800da40:	2301      	movs	r3, #1
 800da42:	e0aa      	b.n	800db9a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800da44:	7dfb      	ldrb	r3, [r7, #23]
 800da46:	2b01      	cmp	r3, #1
 800da48:	d102      	bne.n	800da50 <create_chain+0xb0>
 800da4a:	f04f 33ff 	mov.w	r3, #4294967295
 800da4e:	e0a4      	b.n	800db9a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d103      	bne.n	800da5e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2202      	movs	r2, #2
 800da5a:	71da      	strb	r2, [r3, #7]
 800da5c:	e011      	b.n	800da82 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	79db      	ldrb	r3, [r3, #7]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d10d      	bne.n	800da82 <create_chain+0xe2>
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	3301      	adds	r3, #1
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d008      	beq.n	800da82 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	1ad2      	subs	r2, r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2203      	movs	r2, #3
 800da80:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	79db      	ldrb	r3, [r3, #7]
 800da86:	2b02      	cmp	r3, #2
 800da88:	d064      	beq.n	800db54 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	3301      	adds	r3, #1
 800da8e:	69fa      	ldr	r2, [r7, #28]
 800da90:	429a      	cmp	r2, r3
 800da92:	d10b      	bne.n	800daac <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d003      	beq.n	800daa4 <create_chain+0x104>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	69db      	ldr	r3, [r3, #28]
 800daa0:	3301      	adds	r3, #1
 800daa2:	e000      	b.n	800daa6 <create_chain+0x106>
 800daa4:	2302      	movs	r3, #2
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	61d3      	str	r3, [r2, #28]
 800daaa:	e053      	b.n	800db54 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	69db      	ldr	r3, [r3, #28]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d102      	bne.n	800daba <create_chain+0x11a>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7ff fe89 	bl	800d7d6 <fill_last_frag>
 800dac4:	4603      	mov	r3, r0
 800dac6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800dac8:	7dfb      	ldrb	r3, [r7, #23]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d142      	bne.n	800db54 <create_chain+0x1b4>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	61da      	str	r2, [r3, #28]
 800dad4:	e03e      	b.n	800db54 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	3301      	adds	r3, #1
 800dade:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	69fa      	ldr	r2, [r7, #28]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d307      	bcc.n	800dafa <create_chain+0x15a>
				ncl = 2;
 800daea:	2302      	movs	r3, #2
 800daec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800daee:	69fa      	ldr	r2, [r7, #28]
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d901      	bls.n	800dafa <create_chain+0x15a>
 800daf6:	2300      	movs	r3, #0
 800daf8:	e04f      	b.n	800db9a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dafa:	69f9      	ldr	r1, [r7, #28]
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7ff fac9 	bl	800d094 <get_fat>
 800db02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d00e      	beq.n	800db28 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d003      	beq.n	800db18 <create_chain+0x178>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db16:	d101      	bne.n	800db1c <create_chain+0x17c>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	e03e      	b.n	800db9a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800db1c:	69fa      	ldr	r2, [r7, #28]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	429a      	cmp	r2, r3
 800db22:	d1da      	bne.n	800dada <create_chain+0x13a>
 800db24:	2300      	movs	r3, #0
 800db26:	e038      	b.n	800db9a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800db28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800db2a:	f04f 32ff 	mov.w	r2, #4294967295
 800db2e:	69f9      	ldr	r1, [r7, #28]
 800db30:	6938      	ldr	r0, [r7, #16]
 800db32:	f7ff fc03 	bl	800d33c <put_fat>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d109      	bne.n	800db54 <create_chain+0x1b4>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d006      	beq.n	800db54 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800db46:	69fa      	ldr	r2, [r7, #28]
 800db48:	6839      	ldr	r1, [r7, #0]
 800db4a:	6938      	ldr	r0, [r7, #16]
 800db4c:	f7ff fbf6 	bl	800d33c <put_fat>
 800db50:	4603      	mov	r3, r0
 800db52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db54:	7dfb      	ldrb	r3, [r7, #23]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d116      	bne.n	800db88 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	69fa      	ldr	r2, [r7, #28]
 800db5e:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	69da      	ldr	r2, [r3, #28]
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	6a1b      	ldr	r3, [r3, #32]
 800db68:	3b02      	subs	r3, #2
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d804      	bhi.n	800db78 <create_chain+0x1d8>
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	69db      	ldr	r3, [r3, #28]
 800db72:	1e5a      	subs	r2, r3, #1
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	791b      	ldrb	r3, [r3, #4]
 800db7c:	f043 0301 	orr.w	r3, r3, #1
 800db80:	b2da      	uxtb	r2, r3
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	711a      	strb	r2, [r3, #4]
 800db86:	e007      	b.n	800db98 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d102      	bne.n	800db94 <create_chain+0x1f4>
 800db8e:	f04f 33ff 	mov.w	r3, #4294967295
 800db92:	e000      	b.n	800db96 <create_chain+0x1f6>
 800db94:	2301      	movs	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db98:	69fb      	ldr	r3, [r7, #28]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3720      	adds	r7, #32
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dba2:	b590      	push	{r4, r7, lr}
 800dba4:	b089      	sub	sp, #36	; 0x24
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbb8:	3304      	adds	r3, #4
 800dbba:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	899b      	ldrh	r3, [r3, #12]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f04f 0400 	mov.w	r4, #0
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	4623      	mov	r3, r4
 800dbca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800dbce:	f7f2 fbd7 	bl	8000380 <__aeabi_uldivmod>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	460c      	mov	r4, r1
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	4621      	mov	r1, r4
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	895b      	ldrh	r3, [r3, #10]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f04f 0400 	mov.w	r4, #0
 800dbe4:	461a      	mov	r2, r3
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	f7f2 fbca 	bl	8000380 <__aeabi_uldivmod>
 800dbec:	4603      	mov	r3, r0
 800dbee:	460c      	mov	r4, r1
 800dbf0:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbf2:	69bb      	ldr	r3, [r7, #24]
 800dbf4:	1d1a      	adds	r2, r3, #4
 800dbf6:	61ba      	str	r2, [r7, #24]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d101      	bne.n	800dc06 <clmt_clust+0x64>
 800dc02:	2300      	movs	r3, #0
 800dc04:	e010      	b.n	800dc28 <clmt_clust+0x86>
		if (cl < ncl) break;	/* In this fragment? */
 800dc06:	69fa      	ldr	r2, [r7, #28]
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d307      	bcc.n	800dc1e <clmt_clust+0x7c>
		cl -= ncl; tbl++;		/* Next fragment */
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	1ad3      	subs	r3, r2, r3
 800dc14:	61fb      	str	r3, [r7, #28]
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dc1c:	e7e9      	b.n	800dbf2 <clmt_clust+0x50>
		if (cl < ncl) break;	/* In this fragment? */
 800dc1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	4413      	add	r3, r2
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3724      	adds	r7, #36	; 0x24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd90      	pop	{r4, r7, pc}

0800dc30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b086      	sub	sp, #24
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d102      	bne.n	800dc4e <dir_sdi+0x1e>
 800dc48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc4c:	e001      	b.n	800dc52 <dir_sdi+0x22>
 800dc4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d904      	bls.n	800dc62 <dir_sdi+0x32>
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	f003 031f 	and.w	r3, r3, #31
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <dir_sdi+0x36>
		return FR_INT_ERR;
 800dc62:	2302      	movs	r3, #2
 800dc64:	e074      	b.n	800dd50 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	689b      	ldr	r3, [r3, #8]
 800dc70:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d109      	bne.n	800dc8c <dir_sdi+0x5c>
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	2b02      	cmp	r3, #2
 800dc7e:	d905      	bls.n	800dc8c <dir_sdi+0x5c>
		clst = fs->dirbase;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc84:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10c      	bne.n	800dcac <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	095b      	lsrs	r3, r3, #5
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	8912      	ldrh	r2, [r2, #8]
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d301      	bcc.n	800dca2 <dir_sdi+0x72>
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e056      	b.n	800dd50 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcaa:	e02d      	b.n	800dd08 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	895b      	ldrh	r3, [r3, #10]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	693b      	ldr	r3, [r7, #16]
 800dcb4:	899b      	ldrh	r3, [r3, #12]
 800dcb6:	fb03 f302 	mul.w	r3, r3, r2
 800dcba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcbc:	e019      	b.n	800dcf2 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6979      	ldr	r1, [r7, #20]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7ff f9e6 	bl	800d094 <get_fat>
 800dcc8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d101      	bne.n	800dcd6 <dir_sdi+0xa6>
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	e03c      	b.n	800dd50 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d904      	bls.n	800dce6 <dir_sdi+0xb6>
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	6a1b      	ldr	r3, [r3, #32]
 800dce0:	697a      	ldr	r2, [r7, #20]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d301      	bcc.n	800dcea <dir_sdi+0xba>
 800dce6:	2302      	movs	r3, #2
 800dce8:	e032      	b.n	800dd50 <dir_sdi+0x120>
			ofs -= csz;
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dcf2:	683a      	ldr	r2, [r7, #0]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d2e1      	bcs.n	800dcbe <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800dcfa:	6979      	ldr	r1, [r7, #20]
 800dcfc:	6938      	ldr	r0, [r7, #16]
 800dcfe:	f7ff f9a9 	bl	800d054 <clust2sect>
 800dd02:	4602      	mov	r2, r0
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d101      	bne.n	800dd1a <dir_sdi+0xea>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e01a      	b.n	800dd50 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	899b      	ldrh	r3, [r3, #12]
 800dd22:	4619      	mov	r1, r3
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd2a:	441a      	add	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	899b      	ldrh	r3, [r3, #12]
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd42:	fb02 f200 	mul.w	r2, r2, r0
 800dd46:	1a9b      	subs	r3, r3, r2
 800dd48:	18ca      	adds	r2, r1, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3718      	adds	r7, #24
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd6c:	3320      	adds	r3, #32
 800dd6e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <dir_next+0x38>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b04      	cmp	r3, #4
 800dd7e:	d102      	bne.n	800dd86 <dir_next+0x2e>
 800dd80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd84:	e001      	b.n	800dd8a <dir_next+0x32>
 800dd86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d801      	bhi.n	800dd94 <dir_next+0x3c>
 800dd90:	2304      	movs	r3, #4
 800dd92:	e0c3      	b.n	800df1c <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	899b      	ldrh	r3, [r3, #12]
 800dd98:	461a      	mov	r2, r3
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800dda0:	fb02 f201 	mul.w	r2, r2, r1
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	f040 80a5 	bne.w	800def6 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10b      	bne.n	800ddd6 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	095b      	lsrs	r3, r3, #5
 800ddc2:	68fa      	ldr	r2, [r7, #12]
 800ddc4:	8912      	ldrh	r2, [r2, #8]
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	f0c0 8095 	bcc.w	800def6 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38
 800ddd2:	2304      	movs	r3, #4
 800ddd4:	e0a2      	b.n	800df1c <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	899b      	ldrh	r3, [r3, #12]
 800ddda:	461a      	mov	r2, r3
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	fbb3 f3f2 	udiv	r3, r3, r2
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	8952      	ldrh	r2, [r2, #10]
 800dde6:	3a01      	subs	r2, #1
 800dde8:	4013      	ands	r3, r2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f040 8083 	bne.w	800def6 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	4610      	mov	r0, r2
 800ddfa:	f7ff f94b 	bl	800d094 <get_fat>
 800ddfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d801      	bhi.n	800de0a <dir_next+0xb2>
 800de06:	2302      	movs	r3, #2
 800de08:	e088      	b.n	800df1c <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de10:	d101      	bne.n	800de16 <dir_next+0xbe>
 800de12:	2301      	movs	r3, #1
 800de14:	e082      	b.n	800df1c <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	697a      	ldr	r2, [r7, #20]
 800de1c:	429a      	cmp	r2, r3
 800de1e:	d360      	bcc.n	800dee2 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d104      	bne.n	800de30 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2200      	movs	r2, #0
 800de2a:	639a      	str	r2, [r3, #56]	; 0x38
 800de2c:	2304      	movs	r3, #4
 800de2e:	e075      	b.n	800df1c <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de36:	4619      	mov	r1, r3
 800de38:	4610      	mov	r0, r2
 800de3a:	f7ff fdb1 	bl	800d9a0 <create_chain>
 800de3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d101      	bne.n	800de4a <dir_next+0xf2>
 800de46:	2307      	movs	r3, #7
 800de48:	e068      	b.n	800df1c <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d101      	bne.n	800de54 <dir_next+0xfc>
 800de50:	2302      	movs	r3, #2
 800de52:	e063      	b.n	800df1c <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de5a:	d101      	bne.n	800de60 <dir_next+0x108>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e05d      	b.n	800df1c <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	79db      	ldrb	r3, [r3, #7]
 800de64:	f043 0304 	orr.w	r3, r3, #4
 800de68:	b2da      	uxtb	r2, r3
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800de6e:	68f8      	ldr	r0, [r7, #12]
 800de70:	f7ff f80e 	bl	800ce90 <sync_window>
 800de74:	4603      	mov	r3, r0
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <dir_next+0x126>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e04e      	b.n	800df1c <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	899b      	ldrh	r3, [r3, #12]
 800de88:	461a      	mov	r2, r3
 800de8a:	2100      	movs	r1, #0
 800de8c:	f7fe fe37 	bl	800cafe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de90:	2300      	movs	r3, #0
 800de92:	613b      	str	r3, [r7, #16]
 800de94:	6979      	ldr	r1, [r7, #20]
 800de96:	68f8      	ldr	r0, [r7, #12]
 800de98:	f7ff f8dc 	bl	800d054 <clust2sect>
 800de9c:	4602      	mov	r2, r0
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	639a      	str	r2, [r3, #56]	; 0x38
 800dea2:	e012      	b.n	800deca <dir_next+0x172>
						fs->wflag = 1;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2201      	movs	r2, #1
 800dea8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f7fe fff0 	bl	800ce90 <sync_window>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <dir_next+0x162>
 800deb6:	2301      	movs	r3, #1
 800deb8:	e030      	b.n	800df1c <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	3301      	adds	r3, #1
 800debe:	613b      	str	r3, [r7, #16]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	895b      	ldrh	r3, [r3, #10]
 800dece:	461a      	mov	r2, r3
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d3e6      	bcc.n	800dea4 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	1ad2      	subs	r2, r2, r3
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	697a      	ldr	r2, [r7, #20]
 800dee6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800dee8:	6979      	ldr	r1, [r7, #20]
 800deea:	68f8      	ldr	r0, [r7, #12]
 800deec:	f7ff f8b2 	bl	800d054 <clust2sect>
 800def0:	4602      	mov	r2, r0
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68ba      	ldr	r2, [r7, #8]
 800defa:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	899b      	ldrh	r3, [r3, #12]
 800df06:	461a      	mov	r2, r3
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800df0e:	fb02 f200 	mul.w	r2, r2, r0
 800df12:	1a9b      	subs	r3, r3, r2
 800df14:	18ca      	adds	r2, r1, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b086      	sub	sp, #24
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800df34:	2100      	movs	r1, #0
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fe7a 	bl	800dc30 <dir_sdi>
 800df3c:	4603      	mov	r3, r0
 800df3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df40:	7dfb      	ldrb	r3, [r7, #23]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d140      	bne.n	800dfc8 <dir_alloc+0xa4>
		n = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df4e:	4619      	mov	r1, r3
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7fe ffe1 	bl	800cf18 <move_window>
 800df56:	4603      	mov	r3, r0
 800df58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d132      	bne.n	800dfc6 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	781b      	ldrb	r3, [r3, #0]
 800df64:	2b04      	cmp	r3, #4
 800df66:	d108      	bne.n	800df7a <dir_alloc+0x56>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df6c:	781b      	ldrb	r3, [r3, #0]
 800df6e:	b25b      	sxtb	r3, r3
 800df70:	43db      	mvns	r3, r3
 800df72:	b2db      	uxtb	r3, r3
 800df74:	09db      	lsrs	r3, r3, #7
 800df76:	b2db      	uxtb	r3, r3
 800df78:	e00f      	b.n	800df9a <dir_alloc+0x76>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2be5      	cmp	r3, #229	; 0xe5
 800df82:	d004      	beq.n	800df8e <dir_alloc+0x6a>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d101      	bne.n	800df92 <dir_alloc+0x6e>
 800df8e:	2301      	movs	r3, #1
 800df90:	e000      	b.n	800df94 <dir_alloc+0x70>
 800df92:	2300      	movs	r3, #0
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d007      	beq.n	800dfae <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	613b      	str	r3, [r7, #16]
 800dfa4:	693a      	ldr	r2, [r7, #16]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d102      	bne.n	800dfb2 <dir_alloc+0x8e>
 800dfac:	e00c      	b.n	800dfc8 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dfae:	2300      	movs	r3, #0
 800dfb0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dfb2:	2101      	movs	r1, #1
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f7ff fecf 	bl	800dd58 <dir_next>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dfbe:	7dfb      	ldrb	r3, [r7, #23]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d0c2      	beq.n	800df4a <dir_alloc+0x26>
 800dfc4:	e000      	b.n	800dfc8 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800dfc6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	2b04      	cmp	r3, #4
 800dfcc:	d101      	bne.n	800dfd2 <dir_alloc+0xae>
 800dfce:	2307      	movs	r3, #7
 800dfd0:	75fb      	strb	r3, [r7, #23]
	return res;
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3718      	adds	r7, #24
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	331a      	adds	r3, #26
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fe fba0 	bl	800c730 <ld_word>
 800dff0:	4603      	mov	r3, r0
 800dff2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	2b03      	cmp	r3, #3
 800dffa:	d109      	bne.n	800e010 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	3314      	adds	r3, #20
 800e000:	4618      	mov	r0, r3
 800e002:	f7fe fb95 	bl	800c730 <ld_word>
 800e006:	4603      	mov	r3, r0
 800e008:	041b      	lsls	r3, r3, #16
 800e00a:	68fa      	ldr	r2, [r7, #12]
 800e00c:	4313      	orrs	r3, r2
 800e00e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e010:	68fb      	ldr	r3, [r7, #12]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}

0800e01a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e01a:	b580      	push	{r7, lr}
 800e01c:	b084      	sub	sp, #16
 800e01e:	af00      	add	r7, sp, #0
 800e020:	60f8      	str	r0, [r7, #12]
 800e022:	60b9      	str	r1, [r7, #8]
 800e024:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	331a      	adds	r3, #26
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	b292      	uxth	r2, r2
 800e02e:	4611      	mov	r1, r2
 800e030:	4618      	mov	r0, r3
 800e032:	f7fe fc75 	bl	800c920 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	2b03      	cmp	r3, #3
 800e03c:	d109      	bne.n	800e052 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f103 0214 	add.w	r2, r3, #20
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	0c1b      	lsrs	r3, r3, #16
 800e048:	b29b      	uxth	r3, r3
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7fe fc67 	bl	800c920 <st_word>
	}
}
 800e052:	bf00      	nop
 800e054:	3710      	adds	r7, #16
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}
	...

0800e05c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	331a      	adds	r3, #26
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fe fb60 	bl	800c730 <ld_word>
 800e070:	4603      	mov	r3, r0
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <cmp_lfn+0x1e>
 800e076:	2300      	movs	r3, #0
 800e078:	e059      	b.n	800e12e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e082:	1e5a      	subs	r2, r3, #1
 800e084:	4613      	mov	r3, r2
 800e086:	005b      	lsls	r3, r3, #1
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e090:	2301      	movs	r3, #1
 800e092:	81fb      	strh	r3, [r7, #14]
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
 800e098:	e033      	b.n	800e102 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e09a:	4a27      	ldr	r2, [pc, #156]	; (800e138 <cmp_lfn+0xdc>)
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	4413      	add	r3, r2
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	461a      	mov	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7fe fb41 	bl	800c730 <ld_word>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e0b2:	89fb      	ldrh	r3, [r7, #14]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d01a      	beq.n	800e0ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2bfe      	cmp	r3, #254	; 0xfe
 800e0bc:	d812      	bhi.n	800e0e4 <cmp_lfn+0x88>
 800e0be:	89bb      	ldrh	r3, [r7, #12]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fe fa0d 	bl	800c4e0 <ff_wtoupper>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	461c      	mov	r4, r3
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	1c5a      	adds	r2, r3, #1
 800e0ce:	617a      	str	r2, [r7, #20]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	881b      	ldrh	r3, [r3, #0]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe fa01 	bl	800c4e0 <ff_wtoupper>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	429c      	cmp	r4, r3
 800e0e2:	d001      	beq.n	800e0e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e022      	b.n	800e12e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e0e8:	89bb      	ldrh	r3, [r7, #12]
 800e0ea:	81fb      	strh	r3, [r7, #14]
 800e0ec:	e006      	b.n	800e0fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e0ee:	89bb      	ldrh	r3, [r7, #12]
 800e0f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d001      	beq.n	800e0fc <cmp_lfn+0xa0>
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e018      	b.n	800e12e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	3301      	adds	r3, #1
 800e100:	613b      	str	r3, [r7, #16]
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b0c      	cmp	r3, #12
 800e106:	d9c8      	bls.n	800e09a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00b      	beq.n	800e12c <cmp_lfn+0xd0>
 800e114:	89fb      	ldrh	r3, [r7, #14]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d008      	beq.n	800e12c <cmp_lfn+0xd0>
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	4413      	add	r3, r2
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <cmp_lfn+0xd0>
 800e128:	2300      	movs	r3, #0
 800e12a:	e000      	b.n	800e12e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e12c:	2301      	movs	r3, #1
}
 800e12e:	4618      	mov	r0, r3
 800e130:	371c      	adds	r7, #28
 800e132:	46bd      	mov	sp, r7
 800e134:	bd90      	pop	{r4, r7, pc}
 800e136:	bf00      	nop
 800e138:	08020d04 	.word	0x08020d04

0800e13c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b086      	sub	sp, #24
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	331a      	adds	r3, #26
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe faf0 	bl	800c730 <ld_word>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <pick_lfn+0x1e>
 800e156:	2300      	movs	r3, #0
 800e158:	e04d      	b.n	800e1f6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	781b      	ldrb	r3, [r3, #0]
 800e15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e162:	1e5a      	subs	r2, r3, #1
 800e164:	4613      	mov	r3, r2
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	4413      	add	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e170:	2301      	movs	r3, #1
 800e172:	81fb      	strh	r3, [r7, #14]
 800e174:	2300      	movs	r3, #0
 800e176:	613b      	str	r3, [r7, #16]
 800e178:	e028      	b.n	800e1cc <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e17a:	4a21      	ldr	r2, [pc, #132]	; (800e200 <pick_lfn+0xc4>)
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	4413      	add	r3, r2
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	461a      	mov	r2, r3
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	4413      	add	r3, r2
 800e188:	4618      	mov	r0, r3
 800e18a:	f7fe fad1 	bl	800c730 <ld_word>
 800e18e:	4603      	mov	r3, r0
 800e190:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e192:	89fb      	ldrh	r3, [r7, #14]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d00f      	beq.n	800e1b8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	2bfe      	cmp	r3, #254	; 0xfe
 800e19c:	d901      	bls.n	800e1a2 <pick_lfn+0x66>
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e029      	b.n	800e1f6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e1a2:	89bb      	ldrh	r3, [r7, #12]
 800e1a4:	81fb      	strh	r3, [r7, #14]
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	1c5a      	adds	r2, r3, #1
 800e1aa:	617a      	str	r2, [r7, #20]
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	89fa      	ldrh	r2, [r7, #14]
 800e1b4:	801a      	strh	r2, [r3, #0]
 800e1b6:	e006      	b.n	800e1c6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e1b8:	89bb      	ldrh	r3, [r7, #12]
 800e1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d001      	beq.n	800e1c6 <pick_lfn+0x8a>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e017      	b.n	800e1f6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	2b0c      	cmp	r3, #12
 800e1d0:	d9d3      	bls.n	800e17a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d00a      	beq.n	800e1f4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2bfe      	cmp	r3, #254	; 0xfe
 800e1e2:	d901      	bls.n	800e1e8 <pick_lfn+0xac>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	e006      	b.n	800e1f6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e1f4:	2301      	movs	r3, #1
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3718      	adds	r7, #24
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	08020d04 	.word	0x08020d04

0800e204 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b088      	sub	sp, #32
 800e208:	af00      	add	r7, sp, #0
 800e20a:	60f8      	str	r0, [r7, #12]
 800e20c:	60b9      	str	r1, [r7, #8]
 800e20e:	4611      	mov	r1, r2
 800e210:	461a      	mov	r2, r3
 800e212:	460b      	mov	r3, r1
 800e214:	71fb      	strb	r3, [r7, #7]
 800e216:	4613      	mov	r3, r2
 800e218:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	330d      	adds	r3, #13
 800e21e:	79ba      	ldrb	r2, [r7, #6]
 800e220:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	330b      	adds	r3, #11
 800e226:	220f      	movs	r2, #15
 800e228:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	330c      	adds	r3, #12
 800e22e:	2200      	movs	r2, #0
 800e230:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	331a      	adds	r3, #26
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f7fe fb71 	bl	800c920 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e23e:	79fb      	ldrb	r3, [r7, #7]
 800e240:	1e5a      	subs	r2, r3, #1
 800e242:	4613      	mov	r3, r2
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	4413      	add	r3, r2
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	4413      	add	r3, r2
 800e24c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e24e:	2300      	movs	r3, #0
 800e250:	82fb      	strh	r3, [r7, #22]
 800e252:	2300      	movs	r3, #0
 800e254:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e256:	8afb      	ldrh	r3, [r7, #22]
 800e258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d007      	beq.n	800e270 <put_lfn+0x6c>
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	1c5a      	adds	r2, r3, #1
 800e264:	61fa      	str	r2, [r7, #28]
 800e266:	005b      	lsls	r3, r3, #1
 800e268:	68fa      	ldr	r2, [r7, #12]
 800e26a:	4413      	add	r3, r2
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e270:	4a17      	ldr	r2, [pc, #92]	; (800e2d0 <put_lfn+0xcc>)
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	4413      	add	r3, r2
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	461a      	mov	r2, r3
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	4413      	add	r3, r2
 800e27e:	8afa      	ldrh	r2, [r7, #22]
 800e280:	4611      	mov	r1, r2
 800e282:	4618      	mov	r0, r3
 800e284:	f7fe fb4c 	bl	800c920 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e288:	8afb      	ldrh	r3, [r7, #22]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d102      	bne.n	800e294 <put_lfn+0x90>
 800e28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e292:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	3301      	adds	r3, #1
 800e298:	61bb      	str	r3, [r7, #24]
 800e29a:	69bb      	ldr	r3, [r7, #24]
 800e29c:	2b0c      	cmp	r3, #12
 800e29e:	d9da      	bls.n	800e256 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e2a0:	8afb      	ldrh	r3, [r7, #22]
 800e2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d006      	beq.n	800e2b8 <put_lfn+0xb4>
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	005b      	lsls	r3, r3, #1
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d103      	bne.n	800e2c0 <put_lfn+0xbc>
 800e2b8:	79fb      	ldrb	r3, [r7, #7]
 800e2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2be:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	79fa      	ldrb	r2, [r7, #7]
 800e2c4:	701a      	strb	r2, [r3, #0]
}
 800e2c6:	bf00      	nop
 800e2c8:	3720      	adds	r7, #32
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08020d04 	.word	0x08020d04

0800e2d4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b08c      	sub	sp, #48	; 0x30
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	60f8      	str	r0, [r7, #12]
 800e2dc:	60b9      	str	r1, [r7, #8]
 800e2de:	607a      	str	r2, [r7, #4]
 800e2e0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e2e2:	220b      	movs	r2, #11
 800e2e4:	68b9      	ldr	r1, [r7, #8]
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f7fe fbe8 	bl	800cabc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	2b05      	cmp	r3, #5
 800e2f0:	d929      	bls.n	800e346 <gen_numname+0x72>
		sr = seq;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e2f6:	e020      	b.n	800e33a <gen_numname+0x66>
			wc = *lfn++;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	1c9a      	adds	r2, r3, #2
 800e2fc:	607a      	str	r2, [r7, #4]
 800e2fe:	881b      	ldrh	r3, [r3, #0]
 800e300:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e302:	2300      	movs	r3, #0
 800e304:	62bb      	str	r3, [r7, #40]	; 0x28
 800e306:	e015      	b.n	800e334 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	005a      	lsls	r2, r3, #1
 800e30c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	4413      	add	r3, r2
 800e314:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e318:	085b      	lsrs	r3, r3, #1
 800e31a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <gen_numname+0x5a>
 800e326:	69fa      	ldr	r2, [r7, #28]
 800e328:	4b31      	ldr	r3, [pc, #196]	; (800e3f0 <gen_numname+0x11c>)
 800e32a:	4053      	eors	r3, r2
 800e32c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	3301      	adds	r3, #1
 800e332:	62bb      	str	r3, [r7, #40]	; 0x28
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	2b0f      	cmp	r3, #15
 800e338:	d9e6      	bls.n	800e308 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	881b      	ldrh	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1da      	bne.n	800e2f8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e342:	69fb      	ldr	r3, [r7, #28]
 800e344:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e346:	2307      	movs	r3, #7
 800e348:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	f003 030f 	and.w	r3, r3, #15
 800e352:	b2db      	uxtb	r3, r3
 800e354:	3330      	adds	r3, #48	; 0x30
 800e356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e35a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e35e:	2b39      	cmp	r3, #57	; 0x39
 800e360:	d904      	bls.n	800e36c <gen_numname+0x98>
 800e362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e366:	3307      	adds	r3, #7
 800e368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36e:	1e5a      	subs	r2, r3, #1
 800e370:	62ba      	str	r2, [r7, #40]	; 0x28
 800e372:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e376:	4413      	add	r3, r2
 800e378:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e37c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	091b      	lsrs	r3, r3, #4
 800e384:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d1de      	bne.n	800e34a <gen_numname+0x76>
	ns[i] = '~';
 800e38c:	f107 0214 	add.w	r2, r7, #20
 800e390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e392:	4413      	add	r3, r2
 800e394:	227e      	movs	r2, #126	; 0x7e
 800e396:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e398:	2300      	movs	r3, #0
 800e39a:	627b      	str	r3, [r7, #36]	; 0x24
 800e39c:	e002      	b.n	800e3a4 <gen_numname+0xd0>
 800e39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d205      	bcs.n	800e3b8 <gen_numname+0xe4>
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	4413      	add	r3, r2
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b20      	cmp	r3, #32
 800e3b6:	d1f2      	bne.n	800e39e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	2b07      	cmp	r3, #7
 800e3bc:	d808      	bhi.n	800e3d0 <gen_numname+0xfc>
 800e3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c0:	1c5a      	adds	r2, r3, #1
 800e3c2:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e3c8:	4413      	add	r3, r2
 800e3ca:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e3ce:	e000      	b.n	800e3d2 <gen_numname+0xfe>
 800e3d0:	2120      	movs	r1, #32
 800e3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d4:	1c5a      	adds	r2, r3, #1
 800e3d6:	627a      	str	r2, [r7, #36]	; 0x24
 800e3d8:	68fa      	ldr	r2, [r7, #12]
 800e3da:	4413      	add	r3, r2
 800e3dc:	460a      	mov	r2, r1
 800e3de:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	2b07      	cmp	r3, #7
 800e3e4:	d9e8      	bls.n	800e3b8 <gen_numname+0xe4>
}
 800e3e6:	bf00      	nop
 800e3e8:	3730      	adds	r7, #48	; 0x30
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	bd80      	pop	{r7, pc}
 800e3ee:	bf00      	nop
 800e3f0:	00011021 	.word	0x00011021

0800e3f4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e3f4:	b480      	push	{r7}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e400:	230b      	movs	r3, #11
 800e402:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e404:	7bfb      	ldrb	r3, [r7, #15]
 800e406:	b2da      	uxtb	r2, r3
 800e408:	0852      	lsrs	r2, r2, #1
 800e40a:	01db      	lsls	r3, r3, #7
 800e40c:	4313      	orrs	r3, r2
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	1c59      	adds	r1, r3, #1
 800e414:	6079      	str	r1, [r7, #4]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	4413      	add	r3, r2
 800e41a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	3b01      	subs	r3, #1
 800e420:	60bb      	str	r3, [r7, #8]
 800e422:	68bb      	ldr	r3, [r7, #8]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1ed      	bne.n	800e404 <sum_sfn+0x10>
	return sum;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e436:	b480      	push	{r7}
 800e438:	b087      	sub	sp, #28
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	3301      	adds	r3, #1
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	3301      	adds	r3, #1
 800e446:	015b      	lsls	r3, r3, #5
 800e448:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e44a:	2300      	movs	r3, #0
 800e44c:	827b      	strh	r3, [r7, #18]
 800e44e:	2300      	movs	r3, #0
 800e450:	617b      	str	r3, [r7, #20]
 800e452:	e018      	b.n	800e486 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	2b02      	cmp	r3, #2
 800e458:	d103      	bne.n	800e462 <xdir_sum+0x2c>
			i++;
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	3301      	adds	r3, #1
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	e00e      	b.n	800e480 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e462:	8a7b      	ldrh	r3, [r7, #18]
 800e464:	03db      	lsls	r3, r3, #15
 800e466:	b29a      	uxth	r2, r3
 800e468:	8a7b      	ldrh	r3, [r7, #18]
 800e46a:	085b      	lsrs	r3, r3, #1
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	4413      	add	r3, r2
 800e470:	b29a      	uxth	r2, r3
 800e472:	6879      	ldr	r1, [r7, #4]
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	440b      	add	r3, r1
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	4413      	add	r3, r2
 800e47e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e480:	697b      	ldr	r3, [r7, #20]
 800e482:	3301      	adds	r3, #1
 800e484:	617b      	str	r3, [r7, #20]
 800e486:	697a      	ldr	r2, [r7, #20]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d3e2      	bcc.n	800e454 <xdir_sum+0x1e>
		}
	}
	return sum;
 800e48e:	8a7b      	ldrh	r3, [r7, #18]
}
 800e490:	4618      	mov	r0, r3
 800e492:	371c      	adds	r7, #28
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e4a8:	e01f      	b.n	800e4ea <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e4aa:	89bb      	ldrh	r3, [r7, #12]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f7fe f817 	bl	800c4e0 <ff_wtoupper>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e4b6:	89fb      	ldrh	r3, [r7, #14]
 800e4b8:	03db      	lsls	r3, r3, #15
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	89fb      	ldrh	r3, [r7, #14]
 800e4be:	085b      	lsrs	r3, r3, #1
 800e4c0:	b29b      	uxth	r3, r3
 800e4c2:	4413      	add	r3, r2
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	89bb      	ldrh	r3, [r7, #12]
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	4413      	add	r3, r2
 800e4ce:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e4d0:	89fb      	ldrh	r3, [r7, #14]
 800e4d2:	03db      	lsls	r3, r3, #15
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	89fb      	ldrh	r3, [r7, #14]
 800e4d8:	085b      	lsrs	r3, r3, #1
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	4413      	add	r3, r2
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	89bb      	ldrh	r3, [r7, #12]
 800e4e2:	0a1b      	lsrs	r3, r3, #8
 800e4e4:	b29b      	uxth	r3, r3
 800e4e6:	4413      	add	r3, r2
 800e4e8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	1c9a      	adds	r2, r3, #2
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	881b      	ldrh	r3, [r3, #0]
 800e4f2:	81bb      	strh	r3, [r7, #12]
 800e4f4:	89bb      	ldrh	r3, [r7, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d1d7      	bne.n	800e4aa <xname_sum+0xe>
	}
	return sum;
 800e4fa:	89fb      	ldrh	r3, [r7, #14]
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e504:	b590      	push	{r4, r7, lr}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e51c:	4619      	mov	r1, r3
 800e51e:	4610      	mov	r0, r2
 800e520:	f7fe fcfa 	bl	800cf18 <move_window>
 800e524:	4603      	mov	r3, r0
 800e526:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e528:	7bfb      	ldrb	r3, [r7, #15]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d001      	beq.n	800e532 <load_xdir+0x2e>
 800e52e:	7bfb      	ldrb	r3, [r7, #15]
 800e530:	e09f      	b.n	800e672 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	2b85      	cmp	r3, #133	; 0x85
 800e53a:	d001      	beq.n	800e540 <load_xdir+0x3c>
 800e53c:	2302      	movs	r3, #2
 800e53e:	e098      	b.n	800e672 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e544:	2220      	movs	r2, #32
 800e546:	4619      	mov	r1, r3
 800e548:	6938      	ldr	r0, [r7, #16]
 800e54a:	f7fe fab7 	bl	800cabc <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	3301      	adds	r3, #1
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	3301      	adds	r3, #1
 800e556:	015b      	lsls	r3, r3, #5
 800e558:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	2b5f      	cmp	r3, #95	; 0x5f
 800e55e:	d903      	bls.n	800e568 <load_xdir+0x64>
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e566:	d901      	bls.n	800e56c <load_xdir+0x68>
 800e568:	2302      	movs	r3, #2
 800e56a:	e082      	b.n	800e672 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e56c:	2100      	movs	r1, #0
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f7ff fbf2 	bl	800dd58 <dir_next>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e578:	7bfb      	ldrb	r3, [r7, #15]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d001      	beq.n	800e582 <load_xdir+0x7e>
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
 800e580:	e077      	b.n	800e672 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fe fcc3 	bl	800cf18 <move_window>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e596:	7bfb      	ldrb	r3, [r7, #15]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <load_xdir+0x9c>
 800e59c:	7bfb      	ldrb	r3, [r7, #15]
 800e59e:	e068      	b.n	800e672 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2bc0      	cmp	r3, #192	; 0xc0
 800e5a8:	d001      	beq.n	800e5ae <load_xdir+0xaa>
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	e061      	b.n	800e672 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f103 0020 	add.w	r0, r3, #32
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5b8:	2220      	movs	r2, #32
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	f7fe fa7e 	bl	800cabc <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	3323      	adds	r3, #35	; 0x23
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	332c      	adds	r3, #44	; 0x2c
 800e5c8:	4a2c      	ldr	r2, [pc, #176]	; (800e67c <load_xdir+0x178>)
 800e5ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ce:	08db      	lsrs	r3, r3, #3
 800e5d0:	015b      	lsls	r3, r3, #5
 800e5d2:	68ba      	ldr	r2, [r7, #8]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d201      	bcs.n	800e5dc <load_xdir+0xd8>
 800e5d8:	2302      	movs	r3, #2
 800e5da:	e04a      	b.n	800e672 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e5dc:	2340      	movs	r3, #64	; 0x40
 800e5de:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e5e0:	2100      	movs	r1, #0
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff fbb8 	bl	800dd58 <dir_next>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e5ec:	7bfb      	ldrb	r3, [r7, #15]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d001      	beq.n	800e5f6 <load_xdir+0xf2>
 800e5f2:	7bfb      	ldrb	r3, [r7, #15]
 800e5f4:	e03d      	b.n	800e672 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681a      	ldr	r2, [r3, #0]
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5fe:	4619      	mov	r1, r3
 800e600:	4610      	mov	r0, r2
 800e602:	f7fe fc89 	bl	800cf18 <move_window>
 800e606:	4603      	mov	r3, r0
 800e608:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d001      	beq.n	800e614 <load_xdir+0x110>
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	e02e      	b.n	800e672 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	2bc1      	cmp	r3, #193	; 0xc1
 800e61c:	d001      	beq.n	800e622 <load_xdir+0x11e>
 800e61e:	2302      	movs	r3, #2
 800e620:	e027      	b.n	800e672 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e628:	d208      	bcs.n	800e63c <load_xdir+0x138>
 800e62a:	693a      	ldr	r2, [r7, #16]
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	18d0      	adds	r0, r2, r3
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e634:	2220      	movs	r2, #32
 800e636:	4619      	mov	r1, r3
 800e638:	f7fe fa40 	bl	800cabc <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	3320      	adds	r3, #32
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	429a      	cmp	r2, r3
 800e648:	d3ca      	bcc.n	800e5e0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e650:	d80e      	bhi.n	800e670 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e652:	6938      	ldr	r0, [r7, #16]
 800e654:	f7ff feef 	bl	800e436 <xdir_sum>
 800e658:	4603      	mov	r3, r0
 800e65a:	461c      	mov	r4, r3
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3302      	adds	r3, #2
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe f865 	bl	800c730 <ld_word>
 800e666:	4603      	mov	r3, r0
 800e668:	429c      	cmp	r4, r3
 800e66a:	d001      	beq.n	800e670 <load_xdir+0x16c>
 800e66c:	2302      	movs	r3, #2
 800e66e:	e000      	b.n	800e672 <load_xdir+0x16e>
	}
	return FR_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	bd90      	pop	{r4, r7, pc}
 800e67a:	bf00      	nop
 800e67c:	88888889 	.word	0x88888889

0800e680 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e680:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e684:	b084      	sub	sp, #16
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	681a      	ldr	r2, [r3, #0]
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	6a1a      	ldr	r2, [r3, #32]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6aa:	469b      	mov	fp, r3
 800e6ac:	f04f 0c00 	mov.w	ip, #0
 800e6b0:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800e6b4:	f04f 0200 	mov.w	r2, #0
 800e6b8:	ea0b 0301 	and.w	r3, fp, r1
 800e6bc:	ea0c 0402 	and.w	r4, ip, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->blk_ofs = obj->c_ofs;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7ff faab 	bl	800dc30 <dir_sdi>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d104      	bne.n	800e6ee <load_obj_dir+0x6e>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7ff ff0d 	bl	800e504 <load_xdir>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3710      	adds	r7, #16
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800e6fa <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e6fa:	b590      	push	{r4, r7, lr}
 800e6fc:	b087      	sub	sp, #28
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	695b      	ldr	r3, [r3, #20]
 800e708:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	1c9c      	adds	r4, r3, #2
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fe91 	bl	800e436 <xdir_sum>
 800e714:	4603      	mov	r3, r0
 800e716:	4619      	mov	r1, r3
 800e718:	4620      	mov	r0, r4
 800e71a:	f7fe f901 	bl	800c920 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	3301      	adds	r3, #1
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e72c:	4619      	mov	r1, r3
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff fa7e 	bl	800dc30 <dir_sdi>
 800e734:	4603      	mov	r3, r0
 800e736:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e738:	e026      	b.n	800e788 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e742:	4619      	mov	r1, r3
 800e744:	4610      	mov	r0, r2
 800e746:	f7fe fbe7 	bl	800cf18 <move_window>
 800e74a:	4603      	mov	r3, r0
 800e74c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d11d      	bne.n	800e790 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e758:	2220      	movs	r2, #32
 800e75a:	68f9      	ldr	r1, [r7, #12]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe f9ad 	bl	800cabc <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	2201      	movs	r2, #1
 800e768:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	3b01      	subs	r3, #1
 800e76e:	613b      	str	r3, [r7, #16]
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00e      	beq.n	800e794 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	3320      	adds	r3, #32
 800e77a:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e77c:	2100      	movs	r1, #0
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff faea 	bl	800dd58 <dir_next>
 800e784:	4603      	mov	r3, r0
 800e786:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0d5      	beq.n	800e73a <store_xdir+0x40>
 800e78e:	e002      	b.n	800e796 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e790:	bf00      	nop
 800e792:	e000      	b.n	800e796 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e794:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e796:	7dfb      	ldrb	r3, [r7, #23]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d002      	beq.n	800e7a2 <store_xdir+0xa8>
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d101      	bne.n	800e7a6 <store_xdir+0xac>
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	e000      	b.n	800e7a8 <store_xdir+0xae>
 800e7a6:	2302      	movs	r3, #2
}
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	371c      	adds	r7, #28
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd90      	pop	{r4, r7, pc}

0800e7b0 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e7b0:	b590      	push	{r4, r7, lr}
 800e7b2:	b085      	sub	sp, #20
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e7ba:	2240      	movs	r2, #64	; 0x40
 800e7bc:	2100      	movs	r1, #0
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7fe f99d 	bl	800cafe <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2285      	movs	r2, #133	; 0x85
 800e7c8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	3320      	adds	r3, #32
 800e7ce:	22c0      	movs	r2, #192	; 0xc0
 800e7d0:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	72bb      	strb	r3, [r7, #10]
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	72fb      	strb	r3, [r7, #11]
 800e7da:	2301      	movs	r3, #1
 800e7dc:	813b      	strh	r3, [r7, #8]
 800e7de:	2340      	movs	r3, #64	; 0x40
 800e7e0:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	60fa      	str	r2, [r7, #12]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	22c1      	movs	r2, #193	; 0xc1
 800e7ee:	701a      	strb	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	1c5a      	adds	r2, r3, #1
 800e7f4:	60fa      	str	r2, [r7, #12]
 800e7f6:	687a      	ldr	r2, [r7, #4]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e7fe:	893b      	ldrh	r3, [r7, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00b      	beq.n	800e81c <create_xdir+0x6c>
 800e804:	7abb      	ldrb	r3, [r7, #10]
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	4413      	add	r3, r2
 800e80c:	881b      	ldrh	r3, [r3, #0]
 800e80e:	813b      	strh	r3, [r7, #8]
 800e810:	893b      	ldrh	r3, [r7, #8]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <create_xdir+0x6c>
 800e816:	7abb      	ldrb	r3, [r7, #10]
 800e818:	3301      	adds	r3, #1
 800e81a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e81c:	687a      	ldr	r2, [r7, #4]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	4413      	add	r3, r2
 800e822:	893a      	ldrh	r2, [r7, #8]
 800e824:	4611      	mov	r1, r2
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe f87a 	bl	800c920 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3302      	adds	r3, #2
 800e830:	60fb      	str	r3, [r7, #12]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f003 031f 	and.w	r3, r3, #31
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1e0      	bne.n	800e7fe <create_xdir+0x4e>
		nb++;
 800e83c:	7afb      	ldrb	r3, [r7, #11]
 800e83e:	3301      	adds	r3, #1
 800e840:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e842:	7abb      	ldrb	r3, [r7, #10]
 800e844:	005b      	lsls	r3, r3, #1
 800e846:	683a      	ldr	r2, [r7, #0]
 800e848:	4413      	add	r3, r2
 800e84a:	881b      	ldrh	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1c8      	bne.n	800e7e2 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3323      	adds	r3, #35	; 0x23
 800e854:	7aba      	ldrb	r2, [r7, #10]
 800e856:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	3301      	adds	r3, #1
 800e85c:	7afa      	ldrb	r2, [r7, #11]
 800e85e:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e866:	6838      	ldr	r0, [r7, #0]
 800e868:	f7ff fe18 	bl	800e49c <xname_sum>
 800e86c:	4603      	mov	r3, r0
 800e86e:	4619      	mov	r1, r3
 800e870:	4620      	mov	r0, r4
 800e872:	f7fe f855 	bl	800c920 <st_word>
}
 800e876:	bf00      	nop
 800e878:	3714      	adds	r7, #20
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd90      	pop	{r4, r7, pc}

0800e87e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b086      	sub	sp, #24
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e888:	2304      	movs	r3, #4
 800e88a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e892:	23ff      	movs	r3, #255	; 0xff
 800e894:	757b      	strb	r3, [r7, #21]
 800e896:	23ff      	movs	r3, #255	; 0xff
 800e898:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e89a:	e09f      	b.n	800e9dc <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	6938      	ldr	r0, [r7, #16]
 800e8a4:	f7fe fb38 	bl	800cf18 <move_window>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f040 809a 	bne.w	800e9e8 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b8:	781b      	ldrb	r3, [r3, #0]
 800e8ba:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e8bc:	7dbb      	ldrb	r3, [r7, #22]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e8c2:	2304      	movs	r3, #4
 800e8c4:	75fb      	strb	r3, [r7, #23]
 800e8c6:	e096      	b.n	800e9f6 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	d118      	bne.n	800e902 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e8d0:	7dbb      	ldrb	r3, [r7, #22]
 800e8d2:	2b85      	cmp	r3, #133	; 0x85
 800e8d4:	d179      	bne.n	800e9ca <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7ff fe10 	bl	800e504 <load_xdir>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d17e      	bne.n	800e9ec <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	3304      	adds	r3, #4
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8fa:	b2da      	uxtb	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e900:	e074      	b.n	800e9ec <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e906:	330b      	adds	r3, #11
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e90e:	73fb      	strb	r3, [r7, #15]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	7bfa      	ldrb	r2, [r7, #15]
 800e914:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e916:	7dbb      	ldrb	r3, [r7, #22]
 800e918:	2be5      	cmp	r3, #229	; 0xe5
 800e91a:	d00e      	beq.n	800e93a <dir_read+0xbc>
 800e91c:	7dbb      	ldrb	r3, [r7, #22]
 800e91e:	2b2e      	cmp	r3, #46	; 0x2e
 800e920:	d00b      	beq.n	800e93a <dir_read+0xbc>
 800e922:	7bfb      	ldrb	r3, [r7, #15]
 800e924:	f023 0320 	bic.w	r3, r3, #32
 800e928:	2b08      	cmp	r3, #8
 800e92a:	bf0c      	ite	eq
 800e92c:	2301      	moveq	r3, #1
 800e92e:	2300      	movne	r3, #0
 800e930:	b2db      	uxtb	r3, r3
 800e932:	461a      	mov	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	4293      	cmp	r3, r2
 800e938:	d002      	beq.n	800e940 <dir_read+0xc2>
				ord = 0xFF;
 800e93a:	23ff      	movs	r3, #255	; 0xff
 800e93c:	757b      	strb	r3, [r7, #21]
 800e93e:	e044      	b.n	800e9ca <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	2b0f      	cmp	r3, #15
 800e944:	d12f      	bne.n	800e9a6 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e946:	7dbb      	ldrb	r3, [r7, #22]
 800e948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00d      	beq.n	800e96c <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e954:	7b5b      	ldrb	r3, [r3, #13]
 800e956:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e958:	7dbb      	ldrb	r3, [r7, #22]
 800e95a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e95e:	75bb      	strb	r3, [r7, #22]
 800e960:	7dbb      	ldrb	r3, [r7, #22]
 800e962:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e96c:	7dba      	ldrb	r2, [r7, #22]
 800e96e:	7d7b      	ldrb	r3, [r7, #21]
 800e970:	429a      	cmp	r2, r3
 800e972:	d115      	bne.n	800e9a0 <dir_read+0x122>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e978:	330d      	adds	r3, #13
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	7d3a      	ldrb	r2, [r7, #20]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d10e      	bne.n	800e9a0 <dir_read+0x122>
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	691a      	ldr	r2, [r3, #16]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e98a:	4619      	mov	r1, r3
 800e98c:	4610      	mov	r0, r2
 800e98e:	f7ff fbd5 	bl	800e13c <pick_lfn>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d003      	beq.n	800e9a0 <dir_read+0x122>
 800e998:	7d7b      	ldrb	r3, [r7, #21]
 800e99a:	3b01      	subs	r3, #1
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	e000      	b.n	800e9a2 <dir_read+0x124>
 800e9a0:	23ff      	movs	r3, #255	; 0xff
 800e9a2:	757b      	strb	r3, [r7, #21]
 800e9a4:	e011      	b.n	800e9ca <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e9a6:	7d7b      	ldrb	r3, [r7, #21]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d109      	bne.n	800e9c0 <dir_read+0x142>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff fd1f 	bl	800e3f4 <sum_sfn>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	7d3b      	ldrb	r3, [r7, #20]
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d017      	beq.n	800e9f0 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9c6:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800e9c8:	e012      	b.n	800e9f0 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff f9c3 	bl	800dd58 <dir_next>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9d6:	7dfb      	ldrb	r3, [r7, #23]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10b      	bne.n	800e9f4 <dir_read+0x176>
	while (dp->sect) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f47f af5b 	bne.w	800e89c <dir_read+0x1e>
 800e9e6:	e006      	b.n	800e9f6 <dir_read+0x178>
		if (res != FR_OK) break;
 800e9e8:	bf00      	nop
 800e9ea:	e004      	b.n	800e9f6 <dir_read+0x178>
					break;
 800e9ec:	bf00      	nop
 800e9ee:	e002      	b.n	800e9f6 <dir_read+0x178>
					break;
 800e9f0:	bf00      	nop
 800e9f2:	e000      	b.n	800e9f6 <dir_read+0x178>
		if (res != FR_OK) break;
 800e9f4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e9f6:	7dfb      	ldrb	r3, [r7, #23]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d002      	beq.n	800ea02 <dir_read+0x184>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ea0c:	b590      	push	{r4, r7, lr}
 800ea0e:	b089      	sub	sp, #36	; 0x24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7ff f907 	bl	800dc30 <dir_sdi>
 800ea22:	4603      	mov	r3, r0
 800ea24:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800ea26:	7ffb      	ldrb	r3, [r7, #31]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d001      	beq.n	800ea30 <dir_find+0x24>
 800ea2c:	7ffb      	ldrb	r3, [r7, #31]
 800ea2e:	e112      	b.n	800ec56 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d164      	bne.n	800eb02 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7ff fd2d 	bl	800e49c <xname_sum>
 800ea42:	4603      	mov	r3, r0
 800ea44:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800ea46:	e04f      	b.n	800eae8 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	3324      	adds	r3, #36	; 0x24
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f7fd fe6e 	bl	800c730 <ld_word>
 800ea54:	4603      	mov	r3, r0
 800ea56:	461a      	mov	r2, r3
 800ea58:	893b      	ldrh	r3, [r7, #8]
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d000      	beq.n	800ea60 <dir_find+0x54>
 800ea5e:	e043      	b.n	800eae8 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800ea68:	76fb      	strb	r3, [r7, #27]
 800ea6a:	2340      	movs	r3, #64	; 0x40
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	613b      	str	r3, [r7, #16]
 800ea72:	e029      	b.n	800eac8 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	f003 031f 	and.w	r3, r3, #31
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <dir_find+0x78>
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	3302      	adds	r3, #2
 800ea82:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	695a      	ldr	r2, [r3, #20]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fd fe4f 	bl	800c730 <ld_word>
 800ea92:	4603      	mov	r3, r0
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fd fd23 	bl	800c4e0 <ff_wtoupper>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	461c      	mov	r4, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	691a      	ldr	r2, [r3, #16]
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	4413      	add	r3, r2
 800eaa8:	881b      	ldrh	r3, [r3, #0]
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fd fd18 	bl	800c4e0 <ff_wtoupper>
 800eab0:	4603      	mov	r3, r0
 800eab2:	429c      	cmp	r4, r3
 800eab4:	d10c      	bne.n	800ead0 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800eab6:	7efb      	ldrb	r3, [r7, #27]
 800eab8:	3b01      	subs	r3, #1
 800eaba:	76fb      	strb	r3, [r7, #27]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	3302      	adds	r3, #2
 800eac0:	617b      	str	r3, [r7, #20]
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	3301      	adds	r3, #1
 800eac6:	613b      	str	r3, [r7, #16]
 800eac8:	7efb      	ldrb	r3, [r7, #27]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1d2      	bne.n	800ea74 <dir_find+0x68>
 800eace:	e000      	b.n	800ead2 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800ead0:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800ead2:	7efb      	ldrb	r3, [r7, #27]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d107      	bne.n	800eae8 <dir_find+0xdc>
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	691a      	ldr	r2, [r3, #16]
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	005b      	lsls	r3, r3, #1
 800eae0:	4413      	add	r3, r2
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800eae8:	2100      	movs	r1, #0
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f7ff fec7 	bl	800e87e <dir_read>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	77fb      	strb	r3, [r7, #31]
 800eaf4:	7ffb      	ldrb	r3, [r7, #31]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d0a6      	beq.n	800ea48 <dir_find+0x3c>
 800eafa:	e000      	b.n	800eafe <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800eafc:	bf00      	nop
		}
		return res;
 800eafe:	7ffb      	ldrb	r3, [r7, #31]
 800eb00:	e0a9      	b.n	800ec56 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb02:	23ff      	movs	r3, #255	; 0xff
 800eb04:	773b      	strb	r3, [r7, #28]
 800eb06:	7f3b      	ldrb	r3, [r7, #28]
 800eb08:	777b      	strb	r3, [r7, #29]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb10:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	4619      	mov	r1, r3
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f7fe f9fd 	bl	800cf18 <move_window>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800eb22:	7ffb      	ldrb	r3, [r7, #31]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f040 8090 	bne.w	800ec4a <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb32:	7fbb      	ldrb	r3, [r7, #30]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <dir_find+0x132>
 800eb38:	2304      	movs	r3, #4
 800eb3a:	77fb      	strb	r3, [r7, #31]
 800eb3c:	e08a      	b.n	800ec54 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb42:	330b      	adds	r3, #11
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb4a:	72fb      	strb	r3, [r7, #11]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	7afa      	ldrb	r2, [r7, #11]
 800eb50:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eb52:	7fbb      	ldrb	r3, [r7, #30]
 800eb54:	2be5      	cmp	r3, #229	; 0xe5
 800eb56:	d007      	beq.n	800eb68 <dir_find+0x15c>
 800eb58:	7afb      	ldrb	r3, [r7, #11]
 800eb5a:	f003 0308 	and.w	r3, r3, #8
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d009      	beq.n	800eb76 <dir_find+0x16a>
 800eb62:	7afb      	ldrb	r3, [r7, #11]
 800eb64:	2b0f      	cmp	r3, #15
 800eb66:	d006      	beq.n	800eb76 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb68:	23ff      	movs	r3, #255	; 0xff
 800eb6a:	777b      	strb	r3, [r7, #29]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb72:	64da      	str	r2, [r3, #76]	; 0x4c
 800eb74:	e05e      	b.n	800ec34 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eb76:	7afb      	ldrb	r3, [r7, #11]
 800eb78:	2b0f      	cmp	r3, #15
 800eb7a:	d136      	bne.n	800ebea <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800eb82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d154      	bne.n	800ec34 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800eb8a:	7fbb      	ldrb	r3, [r7, #30]
 800eb8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00d      	beq.n	800ebb0 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb98:	7b5b      	ldrb	r3, [r3, #13]
 800eb9a:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800eb9c:	7fbb      	ldrb	r3, [r7, #30]
 800eb9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eba2:	77bb      	strb	r3, [r7, #30]
 800eba4:	7fbb      	ldrb	r3, [r7, #30]
 800eba6:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ebb0:	7fba      	ldrb	r2, [r7, #30]
 800ebb2:	7f7b      	ldrb	r3, [r7, #29]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d115      	bne.n	800ebe4 <dir_find+0x1d8>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebbc:	330d      	adds	r3, #13
 800ebbe:	781b      	ldrb	r3, [r3, #0]
 800ebc0:	7f3a      	ldrb	r2, [r7, #28]
 800ebc2:	429a      	cmp	r2, r3
 800ebc4:	d10e      	bne.n	800ebe4 <dir_find+0x1d8>
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	691a      	ldr	r2, [r3, #16]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebce:	4619      	mov	r1, r3
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	f7ff fa43 	bl	800e05c <cmp_lfn>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <dir_find+0x1d8>
 800ebdc:	7f7b      	ldrb	r3, [r7, #29]
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	b2db      	uxtb	r3, r3
 800ebe2:	e000      	b.n	800ebe6 <dir_find+0x1da>
 800ebe4:	23ff      	movs	r3, #255	; 0xff
 800ebe6:	777b      	strb	r3, [r7, #29]
 800ebe8:	e024      	b.n	800ec34 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ebea:	7f7b      	ldrb	r3, [r7, #29]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d109      	bne.n	800ec04 <dir_find+0x1f8>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7ff fbfd 	bl	800e3f4 <sum_sfn>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	461a      	mov	r2, r3
 800ebfe:	7f3b      	ldrb	r3, [r7, #28]
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d024      	beq.n	800ec4e <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ec0a:	f003 0301 	and.w	r3, r3, #1
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d10a      	bne.n	800ec28 <dir_find+0x21c>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3340      	adds	r3, #64	; 0x40
 800ec1a:	220b      	movs	r2, #11
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	f7fd ff88 	bl	800cb32 <mem_cmp>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d014      	beq.n	800ec52 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec28:	23ff      	movs	r3, #255	; 0xff
 800ec2a:	777b      	strb	r3, [r7, #29]
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec32:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec34:	2100      	movs	r1, #0
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff f88e 	bl	800dd58 <dir_next>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800ec40:	7ffb      	ldrb	r3, [r7, #31]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f43f af65 	beq.w	800eb12 <dir_find+0x106>
 800ec48:	e004      	b.n	800ec54 <dir_find+0x248>
		if (res != FR_OK) break;
 800ec4a:	bf00      	nop
 800ec4c:	e002      	b.n	800ec54 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec4e:	bf00      	nop
 800ec50:	e000      	b.n	800ec54 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec52:	bf00      	nop

	return res;
 800ec54:	7ffb      	ldrb	r3, [r7, #31]
}
 800ec56:	4618      	mov	r0, r3
 800ec58:	3724      	adds	r7, #36	; 0x24
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd90      	pop	{r4, r7, pc}
	...

0800ec60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec60:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ec64:	b0a0      	sub	sp, #128	; 0x80
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ec76:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d001      	beq.n	800ec82 <dir_register+0x22>
 800ec7e:	2306      	movs	r3, #6
 800ec80:	e198      	b.n	800efb4 <dir_register+0x354>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ec82:	2300      	movs	r3, #0
 800ec84:	677b      	str	r3, [r7, #116]	; 0x74
 800ec86:	e002      	b.n	800ec8e <dir_register+0x2e>
 800ec88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	677b      	str	r3, [r7, #116]	; 0x74
 800ec8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec90:	691a      	ldr	r2, [r3, #16]
 800ec92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ec94:	005b      	lsls	r3, r3, #1
 800ec96:	4413      	add	r3, r2
 800ec98:	881b      	ldrh	r3, [r3, #0]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d1f4      	bne.n	800ec88 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800ec9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b04      	cmp	r3, #4
 800eca4:	f040 80a9 	bne.w	800edfa <dir_register+0x19a>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800eca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecaa:	330e      	adds	r3, #14
 800ecac:	4aa7      	ldr	r2, [pc, #668]	; (800ef4c <dir_register+0x2ec>)
 800ecae:	fba2 2303 	umull	r2, r3, r2, r3
 800ecb2:	08db      	lsrs	r3, r3, #3
 800ecb4:	3302      	adds	r3, #2
 800ecb6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800ecb8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f7ff f932 	bl	800df24 <dir_alloc>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800ecc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <dir_register+0x74>
 800ecce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ecd2:	e16f      	b.n	800efb4 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecd8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800ecda:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 800ecde:	440b      	add	r3, r1
 800ece0:	015b      	lsls	r3, r3, #5
 800ece2:	1ad2      	subs	r2, r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d07a      	beq.n	800ede6 <dir_register+0x186>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	79db      	ldrb	r3, [r3, #7]
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d074      	beq.n	800ede6 <dir_register+0x186>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800ed02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed04:	895b      	ldrh	r3, [r3, #10]
 800ed06:	4618      	mov	r0, r3
 800ed08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed0a:	899b      	ldrh	r3, [r3, #12]
 800ed0c:	fb03 f300 	mul.w	r3, r3, r0
 800ed10:	469b      	mov	fp, r3
 800ed12:	f04f 0c00 	mov.w	ip, #0
 800ed16:	eb1b 0301 	adds.w	r3, fp, r1
 800ed1a:	eb4c 0402 	adc.w	r4, ip, r2
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	e9c2 3404 	strd	r3, r4, [r2, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fd26 	bl	800d778 <fill_first_frag>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ed32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <dir_register+0xe0>
 800ed3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed3e:	e139      	b.n	800efb4 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed46:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	f7fe fd43 	bl	800d7d6 <fill_last_frag>
 800ed50:	4603      	mov	r3, r0
 800ed52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ed56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d002      	beq.n	800ed64 <dir_register+0x104>
 800ed5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed62:	e127      	b.n	800efb4 <dir_register+0x354>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	f107 0308 	add.w	r3, r7, #8
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7ff fc87 	bl	800e680 <load_obj_dir>
 800ed72:	4603      	mov	r3, r0
 800ed74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ed78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <dir_register+0x126>
 800ed80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed84:	e116      	b.n	800efb4 <dir_register+0x354>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ed86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed88:	695b      	ldr	r3, [r3, #20]
 800ed8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800ed94:	461a      	mov	r2, r3
 800ed96:	4623      	mov	r3, r4
 800ed98:	4608      	mov	r0, r1
 800ed9a:	f7fd fe08 	bl	800c9ae <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ed9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eda0:	695b      	ldr	r3, [r3, #20]
 800eda2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800edac:	461a      	mov	r2, r3
 800edae:	4623      	mov	r3, r4
 800edb0:	4608      	mov	r0, r1
 800edb2:	f7fd fdfc 	bl	800c9ae <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	79da      	ldrb	r2, [r3, #7]
 800edba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	3321      	adds	r3, #33	; 0x21
 800edc0:	f042 0201 	orr.w	r2, r2, #1
 800edc4:	b2d2      	uxtb	r2, r2
 800edc6:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800edc8:	f107 0308 	add.w	r3, r7, #8
 800edcc:	4618      	mov	r0, r3
 800edce:	f7ff fc94 	bl	800e6fa <store_xdir>
 800edd2:	4603      	mov	r3, r0
 800edd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800edd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <dir_register+0x186>
 800ede0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ede4:	e0e6      	b.n	800efb4 <dir_register+0x354>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ede6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede8:	695a      	ldr	r2, [r3, #20]
 800edea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edec:	691b      	ldr	r3, [r3, #16]
 800edee:	4619      	mov	r1, r3
 800edf0:	4610      	mov	r0, r2
 800edf2:	f7ff fcdd 	bl	800e7b0 <create_xdir>
		return FR_OK;
 800edf6:	2300      	movs	r3, #0
 800edf8:	e0dc      	b.n	800efb4 <dir_register+0x354>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ee00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ee04:	220c      	movs	r2, #12
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fd fe58 	bl	800cabc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ee0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d033      	beq.n	800ee80 <dir_register+0x220>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2240      	movs	r2, #64	; 0x40
 800ee1c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ee20:	2301      	movs	r3, #1
 800ee22:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee24:	e016      	b.n	800ee54 <dir_register+0x1f4>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ee2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee2e:	691a      	ldr	r2, [r3, #16]
 800ee30:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ee34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee36:	f7ff fa4d 	bl	800e2d4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff fde6 	bl	800ea0c <dir_find>
 800ee40:	4603      	mov	r3, r0
 800ee42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ee46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d106      	bne.n	800ee5c <dir_register+0x1fc>
		for (n = 1; n < 100; n++) {
 800ee4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee50:	3301      	adds	r3, #1
 800ee52:	67bb      	str	r3, [r7, #120]	; 0x78
 800ee54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee56:	2b63      	cmp	r3, #99	; 0x63
 800ee58:	d9e5      	bls.n	800ee26 <dir_register+0x1c6>
 800ee5a:	e000      	b.n	800ee5e <dir_register+0x1fe>
			if (res != FR_OK) break;
 800ee5c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ee5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee60:	2b64      	cmp	r3, #100	; 0x64
 800ee62:	d101      	bne.n	800ee68 <dir_register+0x208>
 800ee64:	2307      	movs	r3, #7
 800ee66:	e0a5      	b.n	800efb4 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ee68:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d002      	beq.n	800ee76 <dir_register+0x216>
 800ee70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee74:	e09e      	b.n	800efb4 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ee76:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ee80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ee84:	f003 0302 	and.w	r3, r3, #2
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d007      	beq.n	800ee9c <dir_register+0x23c>
 800ee8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee8e:	330c      	adds	r3, #12
 800ee90:	4a2f      	ldr	r2, [pc, #188]	; (800ef50 <dir_register+0x2f0>)
 800ee92:	fba2 2303 	umull	r2, r3, r2, r3
 800ee96:	089b      	lsrs	r3, r3, #2
 800ee98:	3301      	adds	r3, #1
 800ee9a:	e000      	b.n	800ee9e <dir_register+0x23e>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eea0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff f83e 	bl	800df24 <dir_alloc>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eeae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d14f      	bne.n	800ef56 <dir_register+0x2f6>
 800eeb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eeb8:	3b01      	subs	r3, #1
 800eeba:	673b      	str	r3, [r7, #112]	; 0x70
 800eebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d049      	beq.n	800ef56 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eec8:	015b      	lsls	r3, r3, #5
 800eeca:	1ad3      	subs	r3, r2, r3
 800eecc:	4619      	mov	r1, r3
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7fe feae 	bl	800dc30 <dir_sdi>
 800eed4:	4603      	mov	r3, r0
 800eed6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800eeda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d139      	bne.n	800ef56 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3340      	adds	r3, #64	; 0x40
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7ff fa84 	bl	800e3f4 <sum_sfn>
 800eeec:	4603      	mov	r3, r0
 800eeee:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eef6:	4619      	mov	r1, r3
 800eef8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eefa:	f7fe f80d 	bl	800cf18 <move_window>
 800eefe:	4603      	mov	r3, r0
 800ef00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ef04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d123      	bne.n	800ef54 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ef0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef0e:	6918      	ldr	r0, [r3, #16]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ef14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ef1c:	f7ff f972 	bl	800e204 <put_lfn>
				fs->wflag = 1;
 800ef20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef22:	2201      	movs	r2, #1
 800ef24:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ef26:	2100      	movs	r1, #0
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7fe ff15 	bl	800dd58 <dir_next>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ef34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10c      	bne.n	800ef56 <dir_register+0x2f6>
 800ef3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	673b      	str	r3, [r7, #112]	; 0x70
 800ef42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1d4      	bne.n	800eef2 <dir_register+0x292>
 800ef48:	e005      	b.n	800ef56 <dir_register+0x2f6>
 800ef4a:	bf00      	nop
 800ef4c:	88888889 	.word	0x88888889
 800ef50:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800ef54:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ef56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d128      	bne.n	800efb0 <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef62:	4619      	mov	r1, r3
 800ef64:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ef66:	f7fd ffd7 	bl	800cf18 <move_window>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ef70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d11b      	bne.n	800efb0 <dir_register+0x350>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef7c:	2220      	movs	r2, #32
 800ef7e:	2100      	movs	r1, #0
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7fd fdbc 	bl	800cafe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3340      	adds	r3, #64	; 0x40
 800ef8e:	220b      	movs	r2, #11
 800ef90:	4619      	mov	r1, r3
 800ef92:	f7fd fd93 	bl	800cabc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa0:	330c      	adds	r3, #12
 800efa2:	f002 0218 	and.w	r2, r2, #24
 800efa6:	b2d2      	uxtb	r2, r2
 800efa8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800efaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800efac:	2201      	movs	r2, #1
 800efae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800efb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3780      	adds	r7, #128	; 0x80
 800efb8:	46bd      	mov	sp, r7
 800efba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800efbe:	bf00      	nop

0800efc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b08a      	sub	sp, #40	; 0x28
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	613b      	str	r3, [r7, #16]
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	60fb      	str	r3, [r7, #12]
 800efd8:	2300      	movs	r3, #0
 800efda:	617b      	str	r3, [r7, #20]
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	61ba      	str	r2, [r7, #24]
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	4413      	add	r3, r2
 800efea:	781b      	ldrb	r3, [r3, #0]
 800efec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800efee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff0:	2b1f      	cmp	r3, #31
 800eff2:	d940      	bls.n	800f076 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff6:	2b2f      	cmp	r3, #47	; 0x2f
 800eff8:	d006      	beq.n	800f008 <create_name+0x48>
 800effa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800effc:	2b5c      	cmp	r3, #92	; 0x5c
 800effe:	d110      	bne.n	800f022 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f000:	e002      	b.n	800f008 <create_name+0x48>
 800f002:	69bb      	ldr	r3, [r7, #24]
 800f004:	3301      	adds	r3, #1
 800f006:	61bb      	str	r3, [r7, #24]
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	4413      	add	r3, r2
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	2b2f      	cmp	r3, #47	; 0x2f
 800f012:	d0f6      	beq.n	800f002 <create_name+0x42>
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	69bb      	ldr	r3, [r7, #24]
 800f018:	4413      	add	r3, r2
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	2b5c      	cmp	r3, #92	; 0x5c
 800f01e:	d0f0      	beq.n	800f002 <create_name+0x42>
			break;
 800f020:	e02a      	b.n	800f078 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	2bfe      	cmp	r3, #254	; 0xfe
 800f026:	d901      	bls.n	800f02c <create_name+0x6c>
 800f028:	2306      	movs	r3, #6
 800f02a:	e177      	b.n	800f31c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f032:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f034:	2101      	movs	r1, #1
 800f036:	4618      	mov	r0, r3
 800f038:	f7fd fa16 	bl	800c468 <ff_convert>
 800f03c:	4603      	mov	r3, r0
 800f03e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d101      	bne.n	800f04a <create_name+0x8a>
 800f046:	2306      	movs	r3, #6
 800f048:	e168      	b.n	800f31c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f04a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f04c:	2b7f      	cmp	r3, #127	; 0x7f
 800f04e:	d809      	bhi.n	800f064 <create_name+0xa4>
 800f050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f052:	4619      	mov	r1, r3
 800f054:	48b3      	ldr	r0, [pc, #716]	; (800f324 <create_name+0x364>)
 800f056:	f7fd fd93 	bl	800cb80 <chk_chr>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <create_name+0xa4>
 800f060:	2306      	movs	r3, #6
 800f062:	e15b      	b.n	800f31c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	1c5a      	adds	r2, r3, #1
 800f068:	617a      	str	r2, [r7, #20]
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	4413      	add	r3, r2
 800f070:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f072:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f074:	e7b4      	b.n	800efe0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f076:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f078:	693a      	ldr	r2, [r7, #16]
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	441a      	add	r2, r3
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f084:	2b1f      	cmp	r3, #31
 800f086:	d801      	bhi.n	800f08c <create_name+0xcc>
 800f088:	2304      	movs	r3, #4
 800f08a:	e000      	b.n	800f08e <create_name+0xce>
 800f08c:	2300      	movs	r3, #0
 800f08e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f092:	e011      	b.n	800f0b8 <create_name+0xf8>
		w = lfn[di - 1];
 800f094:	697a      	ldr	r2, [r7, #20]
 800f096:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f09a:	4413      	add	r3, r2
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	4413      	add	r3, r2
 800f0a2:	881b      	ldrh	r3, [r3, #0]
 800f0a4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f0a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a8:	2b20      	cmp	r3, #32
 800f0aa:	d002      	beq.n	800f0b2 <create_name+0xf2>
 800f0ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0ae:	2b2e      	cmp	r3, #46	; 0x2e
 800f0b0:	d106      	bne.n	800f0c0 <create_name+0x100>
		di--;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	3b01      	subs	r3, #1
 800f0b6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d1ea      	bne.n	800f094 <create_name+0xd4>
 800f0be:	e000      	b.n	800f0c2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f0c0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	005b      	lsls	r3, r3, #1
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d101      	bne.n	800f0d8 <create_name+0x118>
 800f0d4:	2306      	movs	r3, #6
 800f0d6:	e121      	b.n	800f31c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	3340      	adds	r3, #64	; 0x40
 800f0dc:	220b      	movs	r2, #11
 800f0de:	2120      	movs	r1, #32
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd fd0c 	bl	800cafe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	61bb      	str	r3, [r7, #24]
 800f0ea:	e002      	b.n	800f0f2 <create_name+0x132>
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	005b      	lsls	r3, r3, #1
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	d0f5      	beq.n	800f0ec <create_name+0x12c>
 800f100:	69bb      	ldr	r3, [r7, #24]
 800f102:	005b      	lsls	r3, r3, #1
 800f104:	68fa      	ldr	r2, [r7, #12]
 800f106:	4413      	add	r3, r2
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	2b2e      	cmp	r3, #46	; 0x2e
 800f10c:	d0ee      	beq.n	800f0ec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d009      	beq.n	800f128 <create_name+0x168>
 800f114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f118:	f043 0303 	orr.w	r3, r3, #3
 800f11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f120:	e002      	b.n	800f128 <create_name+0x168>
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	3b01      	subs	r3, #1
 800f126:	617b      	str	r3, [r7, #20]
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d009      	beq.n	800f142 <create_name+0x182>
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f134:	4413      	add	r3, r2
 800f136:	005b      	lsls	r3, r3, #1
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	4413      	add	r3, r2
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	2b2e      	cmp	r3, #46	; 0x2e
 800f140:	d1ef      	bne.n	800f122 <create_name+0x162>

	i = b = 0; ni = 8;
 800f142:	2300      	movs	r3, #0
 800f144:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f148:	2300      	movs	r3, #0
 800f14a:	623b      	str	r3, [r7, #32]
 800f14c:	2308      	movs	r3, #8
 800f14e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	1c5a      	adds	r2, r3, #1
 800f154:	61ba      	str	r2, [r7, #24]
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	4413      	add	r3, r2
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f162:	2b00      	cmp	r3, #0
 800f164:	f000 8090 	beq.w	800f288 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f16a:	2b20      	cmp	r3, #32
 800f16c:	d006      	beq.n	800f17c <create_name+0x1bc>
 800f16e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f170:	2b2e      	cmp	r3, #46	; 0x2e
 800f172:	d10a      	bne.n	800f18a <create_name+0x1ca>
 800f174:	69ba      	ldr	r2, [r7, #24]
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d006      	beq.n	800f18a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f180:	f043 0303 	orr.w	r3, r3, #3
 800f184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f188:	e07d      	b.n	800f286 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f18a:	6a3a      	ldr	r2, [r7, #32]
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d203      	bcs.n	800f19a <create_name+0x1da>
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	429a      	cmp	r2, r3
 800f198:	d123      	bne.n	800f1e2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	2b0b      	cmp	r3, #11
 800f19e:	d106      	bne.n	800f1ae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1a4:	f043 0303 	orr.w	r3, r3, #3
 800f1a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1ac:	e06f      	b.n	800f28e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f1ae:	69ba      	ldr	r2, [r7, #24]
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d005      	beq.n	800f1c2 <create_name+0x202>
 800f1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1ba:	f043 0303 	orr.w	r3, r3, #3
 800f1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f1c2:	69ba      	ldr	r2, [r7, #24]
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d860      	bhi.n	800f28c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	2308      	movs	r3, #8
 800f1d0:	623b      	str	r3, [r7, #32]
 800f1d2:	230b      	movs	r3, #11
 800f1d4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1e0:	e051      	b.n	800f286 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f1e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1e4:	2b7f      	cmp	r3, #127	; 0x7f
 800f1e6:	d914      	bls.n	800f212 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1ea:	2100      	movs	r1, #0
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7fd f93b 	bl	800c468 <ff_convert>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d004      	beq.n	800f206 <create_name+0x246>
 800f1fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1fe:	3b80      	subs	r3, #128	; 0x80
 800f200:	4a49      	ldr	r2, [pc, #292]	; (800f328 <create_name+0x368>)
 800f202:	5cd3      	ldrb	r3, [r2, r3]
 800f204:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f20a:	f043 0302 	orr.w	r3, r3, #2
 800f20e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f212:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <create_name+0x268>
 800f218:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f21a:	4619      	mov	r1, r3
 800f21c:	4843      	ldr	r0, [pc, #268]	; (800f32c <create_name+0x36c>)
 800f21e:	f7fd fcaf 	bl	800cb80 <chk_chr>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d008      	beq.n	800f23a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f228:	235f      	movs	r3, #95	; 0x5f
 800f22a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f230:	f043 0303 	orr.w	r3, r3, #3
 800f234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f238:	e01b      	b.n	800f272 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f23a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f23c:	2b40      	cmp	r3, #64	; 0x40
 800f23e:	d909      	bls.n	800f254 <create_name+0x294>
 800f240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f242:	2b5a      	cmp	r3, #90	; 0x5a
 800f244:	d806      	bhi.n	800f254 <create_name+0x294>
					b |= 2;
 800f246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f24a:	f043 0302 	orr.w	r3, r3, #2
 800f24e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f252:	e00e      	b.n	800f272 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f254:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f256:	2b60      	cmp	r3, #96	; 0x60
 800f258:	d90b      	bls.n	800f272 <create_name+0x2b2>
 800f25a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f25c:	2b7a      	cmp	r3, #122	; 0x7a
 800f25e:	d808      	bhi.n	800f272 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f264:	f043 0301 	orr.w	r3, r3, #1
 800f268:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f26e:	3b20      	subs	r3, #32
 800f270:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f272:	6a3b      	ldr	r3, [r7, #32]
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	623a      	str	r2, [r7, #32]
 800f278:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f27a:	b2d1      	uxtb	r1, r2
 800f27c:	687a      	ldr	r2, [r7, #4]
 800f27e:	4413      	add	r3, r2
 800f280:	460a      	mov	r2, r1
 800f282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800f286:	e763      	b.n	800f150 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f288:	bf00      	nop
 800f28a:	e000      	b.n	800f28e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800f28c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f294:	2be5      	cmp	r3, #229	; 0xe5
 800f296:	d103      	bne.n	800f2a0 <create_name+0x2e0>
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2205      	movs	r2, #5
 800f29c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	2b08      	cmp	r3, #8
 800f2a4:	d104      	bne.n	800f2b0 <create_name+0x2f0>
 800f2a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f2b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2b4:	f003 030c 	and.w	r3, r3, #12
 800f2b8:	2b0c      	cmp	r3, #12
 800f2ba:	d005      	beq.n	800f2c8 <create_name+0x308>
 800f2bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2c0:	f003 0303 	and.w	r3, r3, #3
 800f2c4:	2b03      	cmp	r3, #3
 800f2c6:	d105      	bne.n	800f2d4 <create_name+0x314>
 800f2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2cc:	f043 0302 	orr.w	r3, r3, #2
 800f2d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f2d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2d8:	f003 0302 	and.w	r3, r3, #2
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d117      	bne.n	800f310 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f2e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2e4:	f003 0303 	and.w	r3, r3, #3
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d105      	bne.n	800f2f8 <create_name+0x338>
 800f2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2f0:	f043 0310 	orr.w	r3, r3, #16
 800f2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2fc:	f003 030c 	and.w	r3, r3, #12
 800f300:	2b04      	cmp	r3, #4
 800f302:	d105      	bne.n	800f310 <create_name+0x350>
 800f304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f308:	f043 0308 	orr.w	r3, r3, #8
 800f30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f316:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800f31a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3728      	adds	r7, #40	; 0x28
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	0801d8ac 	.word	0x0801d8ac
 800f328:	08020c84 	.word	0x08020c84
 800f32c:	0801d8b8 	.word	0x0801d8b8

0800f330 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f330:	b590      	push	{r4, r7, lr}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f344:	e002      	b.n	800f34c <follow_path+0x1c>
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	3301      	adds	r3, #1
 800f34a:	603b      	str	r3, [r7, #0]
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	2b2f      	cmp	r3, #47	; 0x2f
 800f352:	d0f8      	beq.n	800f346 <follow_path+0x16>
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	2b5c      	cmp	r3, #92	; 0x5c
 800f35a:	d0f4      	beq.n	800f346 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f35c:	693b      	ldr	r3, [r7, #16]
 800f35e:	2200      	movs	r2, #0
 800f360:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2200      	movs	r2, #0
 800f366:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	2b1f      	cmp	r3, #31
 800f36e:	d80a      	bhi.n	800f386 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2280      	movs	r2, #128	; 0x80
 800f374:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800f378:	2100      	movs	r1, #0
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f7fe fc58 	bl	800dc30 <dir_sdi>
 800f380:	4603      	mov	r3, r0
 800f382:	75fb      	strb	r3, [r7, #23]
 800f384:	e07c      	b.n	800f480 <follow_path+0x150>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f386:	463b      	mov	r3, r7
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f7ff fe18 	bl	800efc0 <create_name>
 800f390:	4603      	mov	r3, r0
 800f392:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d16d      	bne.n	800f476 <follow_path+0x146>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f7ff fb36 	bl	800ea0c <dir_find>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f3aa:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f3ac:	7dfb      	ldrb	r3, [r7, #23]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00a      	beq.n	800f3c8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f3b2:	7dfb      	ldrb	r3, [r7, #23]
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	d160      	bne.n	800f47a <follow_path+0x14a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f3b8:	7afb      	ldrb	r3, [r7, #11]
 800f3ba:	f003 0304 	and.w	r3, r3, #4
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d15b      	bne.n	800f47a <follow_path+0x14a>
 800f3c2:	2305      	movs	r3, #5
 800f3c4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f3c6:	e058      	b.n	800f47a <follow_path+0x14a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f3c8:	7afb      	ldrb	r3, [r7, #11]
 800f3ca:	f003 0304 	and.w	r3, r3, #4
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d155      	bne.n	800f47e <follow_path+0x14e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f3d2:	693b      	ldr	r3, [r7, #16]
 800f3d4:	799b      	ldrb	r3, [r3, #6]
 800f3d6:	f003 0310 	and.w	r3, r3, #16
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d102      	bne.n	800f3e4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f3de:	2305      	movs	r3, #5
 800f3e0:	75fb      	strb	r3, [r7, #23]
 800f3e2:	e04d      	b.n	800f480 <follow_path+0x150>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	2b04      	cmp	r3, #4
 800f3ea:	d12f      	bne.n	800f44c <follow_path+0x11c>
				obj->c_scl = obj->sclust;
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	689a      	ldr	r2, [r3, #8]
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800f3fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f3fe:	693a      	ldr	r2, [r7, #16]
 800f400:	79d2      	ldrb	r2, [r2, #7]
 800f402:	431a      	orrs	r2, r3
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	695b      	ldr	r3, [r3, #20]
 800f414:	3334      	adds	r3, #52	; 0x34
 800f416:	4618      	mov	r0, r3
 800f418:	f7fd f9a2 	bl	800c760 <ld_dword>
 800f41c:	4602      	mov	r2, r0
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	695b      	ldr	r3, [r3, #20]
 800f426:	3321      	adds	r3, #33	; 0x21
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	f003 0302 	and.w	r3, r3, #2
 800f42e:	b2da      	uxtb	r2, r3
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	695b      	ldr	r3, [r3, #20]
 800f438:	3338      	adds	r3, #56	; 0x38
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fd f9b3 	bl	800c7a6 <ld_qword>
 800f440:	4603      	mov	r3, r0
 800f442:	460c      	mov	r4, r1
 800f444:	693a      	ldr	r2, [r7, #16]
 800f446:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800f44a:	e79c      	b.n	800f386 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f456:	68fa      	ldr	r2, [r7, #12]
 800f458:	8992      	ldrh	r2, [r2, #12]
 800f45a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f45e:	fb02 f200 	mul.w	r2, r2, r0
 800f462:	1a9b      	subs	r3, r3, r2
 800f464:	440b      	add	r3, r1
 800f466:	4619      	mov	r1, r3
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7fe fdb7 	bl	800dfdc <ld_clust>
 800f46e:	4602      	mov	r2, r0
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f474:	e787      	b.n	800f386 <follow_path+0x56>
			if (res != FR_OK) break;
 800f476:	bf00      	nop
 800f478:	e002      	b.n	800f480 <follow_path+0x150>
				break;
 800f47a:	bf00      	nop
 800f47c:	e000      	b.n	800f480 <follow_path+0x150>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f47e:	bf00      	nop
			}
		}
	}

	return res;
 800f480:	7dfb      	ldrb	r3, [r7, #23]
}
 800f482:	4618      	mov	r0, r3
 800f484:	371c      	adds	r7, #28
 800f486:	46bd      	mov	sp, r7
 800f488:	bd90      	pop	{r4, r7, pc}

0800f48a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b087      	sub	sp, #28
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f492:	f04f 33ff 	mov.w	r3, #4294967295
 800f496:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d031      	beq.n	800f504 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	e002      	b.n	800f4ae <get_ldnumber+0x24>
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	3301      	adds	r3, #1
 800f4ac:	617b      	str	r3, [r7, #20]
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	2b1f      	cmp	r3, #31
 800f4b4:	d903      	bls.n	800f4be <get_ldnumber+0x34>
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	2b3a      	cmp	r3, #58	; 0x3a
 800f4bc:	d1f4      	bne.n	800f4a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4be:	697b      	ldr	r3, [r7, #20]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	2b3a      	cmp	r3, #58	; 0x3a
 800f4c4:	d11c      	bne.n	800f500 <get_ldnumber+0x76>
			tp = *path;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	1c5a      	adds	r2, r3, #1
 800f4d0:	60fa      	str	r2, [r7, #12]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	3b30      	subs	r3, #48	; 0x30
 800f4d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	2b09      	cmp	r3, #9
 800f4dc:	d80e      	bhi.n	800f4fc <get_ldnumber+0x72>
 800f4de:	68fa      	ldr	r2, [r7, #12]
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d10a      	bne.n	800f4fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d107      	bne.n	800f4fc <get_ldnumber+0x72>
					vol = (int)i;
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	617b      	str	r3, [r7, #20]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	e002      	b.n	800f506 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f500:	2300      	movs	r3, #0
 800f502:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f504:	693b      	ldr	r3, [r7, #16]
}
 800f506:	4618      	mov	r0, r3
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
	...

0800f514 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2200      	movs	r2, #0
 800f522:	70da      	strb	r2, [r3, #3]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f04f 32ff 	mov.w	r2, #4294967295
 800f52a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f52c:	6839      	ldr	r1, [r7, #0]
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f7fd fcf2 	bl	800cf18 <move_window>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <check_fs+0x2a>
 800f53a:	2304      	movs	r3, #4
 800f53c:	e044      	b.n	800f5c8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	333c      	adds	r3, #60	; 0x3c
 800f542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f546:	4618      	mov	r0, r3
 800f548:	f7fd f8f2 	bl	800c730 <ld_word>
 800f54c:	4603      	mov	r3, r0
 800f54e:	461a      	mov	r2, r3
 800f550:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f554:	429a      	cmp	r2, r3
 800f556:	d001      	beq.n	800f55c <check_fs+0x48>
 800f558:	2303      	movs	r3, #3
 800f55a:	e035      	b.n	800f5c8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f562:	2be9      	cmp	r3, #233	; 0xe9
 800f564:	d009      	beq.n	800f57a <check_fs+0x66>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f56c:	2beb      	cmp	r3, #235	; 0xeb
 800f56e:	d11e      	bne.n	800f5ae <check_fs+0x9a>
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f576:	2b90      	cmp	r3, #144	; 0x90
 800f578:	d119      	bne.n	800f5ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	333c      	adds	r3, #60	; 0x3c
 800f57e:	3336      	adds	r3, #54	; 0x36
 800f580:	4618      	mov	r0, r3
 800f582:	f7fd f8ed 	bl	800c760 <ld_dword>
 800f586:	4603      	mov	r3, r0
 800f588:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f58c:	4a10      	ldr	r2, [pc, #64]	; (800f5d0 <check_fs+0xbc>)
 800f58e:	4293      	cmp	r3, r2
 800f590:	d101      	bne.n	800f596 <check_fs+0x82>
 800f592:	2300      	movs	r3, #0
 800f594:	e018      	b.n	800f5c8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	333c      	adds	r3, #60	; 0x3c
 800f59a:	3352      	adds	r3, #82	; 0x52
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fd f8df 	bl	800c760 <ld_dword>
 800f5a2:	4602      	mov	r2, r0
 800f5a4:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <check_fs+0xc0>)
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d101      	bne.n	800f5ae <check_fs+0x9a>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	e00c      	b.n	800f5c8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	333c      	adds	r3, #60	; 0x3c
 800f5b2:	220b      	movs	r2, #11
 800f5b4:	4908      	ldr	r1, [pc, #32]	; (800f5d8 <check_fs+0xc4>)
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd fabb 	bl	800cb32 <mem_cmp>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d101      	bne.n	800f5c6 <check_fs+0xb2>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	e000      	b.n	800f5c8 <check_fs+0xb4>
#endif
	return 2;
 800f5c6:	2302      	movs	r3, #2
}
 800f5c8:	4618      	mov	r0, r3
 800f5ca:	3708      	adds	r7, #8
 800f5cc:	46bd      	mov	sp, r7
 800f5ce:	bd80      	pop	{r7, pc}
 800f5d0:	00544146 	.word	0x00544146
 800f5d4:	33544146 	.word	0x33544146
 800f5d8:	0801d8c0 	.word	0x0801d8c0

0800f5dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800f5e0:	b098      	sub	sp, #96	; 0x60
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	4613      	mov	r3, r2
 800f5ea:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f7ff ff49 	bl	800f48a <get_ldnumber>
 800f5f8:	6478      	str	r0, [r7, #68]	; 0x44
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	da01      	bge.n	800f604 <find_volume+0x28>
 800f600:	230b      	movs	r3, #11
 800f602:	e368      	b.n	800fcd6 <find_volume+0x6fa>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f604:	4aaa      	ldr	r2, [pc, #680]	; (800f8b0 <find_volume+0x2d4>)
 800f606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f60c:	643b      	str	r3, [r7, #64]	; 0x40
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f60e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <find_volume+0x3c>
 800f614:	230c      	movs	r3, #12
 800f616:	e35e      	b.n	800fcd6 <find_volume+0x6fa>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f61c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	f023 0301 	bic.w	r3, r3, #1
 800f624:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01a      	beq.n	800f664 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800f62e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f630:	785b      	ldrb	r3, [r3, #1]
 800f632:	4618      	mov	r0, r3
 800f634:	f7fc ffde 	bl	800c5f4 <disk_status>
 800f638:	4603      	mov	r3, r0
 800f63a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f63e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f642:	f003 0301 	and.w	r3, r3, #1
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10c      	bne.n	800f664 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f64a:	79fb      	ldrb	r3, [r7, #7]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d007      	beq.n	800f660 <find_volume+0x84>
 800f650:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f654:	f003 0304 	and.w	r3, r3, #4
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d001      	beq.n	800f660 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f65c:	230a      	movs	r3, #10
 800f65e:	e33a      	b.n	800fcd6 <find_volume+0x6fa>
			}
			return FR_OK;				/* The file system object is valid */
 800f660:	2300      	movs	r3, #0
 800f662:	e338      	b.n	800fcd6 <find_volume+0x6fa>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f666:	2200      	movs	r2, #0
 800f668:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f670:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f674:	785b      	ldrb	r3, [r3, #1]
 800f676:	4618      	mov	r0, r3
 800f678:	f7fc ffd6 	bl	800c628 <disk_initialize>
 800f67c:	4603      	mov	r3, r0
 800f67e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f682:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d001      	beq.n	800f692 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f68e:	2303      	movs	r3, #3
 800f690:	e321      	b.n	800fcd6 <find_volume+0x6fa>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f692:	79fb      	ldrb	r3, [r7, #7]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d007      	beq.n	800f6a8 <find_volume+0xcc>
 800f698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f6a4:	230a      	movs	r3, #10
 800f6a6:	e316      	b.n	800fcd6 <find_volume+0x6fa>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6aa:	7858      	ldrb	r0, [r3, #1]
 800f6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ae:	330c      	adds	r3, #12
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	2102      	movs	r1, #2
 800f6b4:	f7fd f81e 	bl	800c6f4 <disk_ioctl>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <find_volume+0xe6>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e309      	b.n	800fcd6 <find_volume+0x6fa>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f6c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6c4:	899b      	ldrh	r3, [r3, #12]
 800f6c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6ca:	d80d      	bhi.n	800f6e8 <find_volume+0x10c>
 800f6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ce:	899b      	ldrh	r3, [r3, #12]
 800f6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6d4:	d308      	bcc.n	800f6e8 <find_volume+0x10c>
 800f6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d8:	899b      	ldrh	r3, [r3, #12]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6de:	899b      	ldrh	r3, [r3, #12]
 800f6e0:	3b01      	subs	r3, #1
 800f6e2:	4013      	ands	r3, r2
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d001      	beq.n	800f6ec <find_volume+0x110>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	e2f4      	b.n	800fcd6 <find_volume+0x6fa>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	65bb      	str	r3, [r7, #88]	; 0x58
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f6f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6f2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f6f4:	f7ff ff0e 	bl	800f514 <check_fs>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f6fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f702:	2b02      	cmp	r3, #2
 800f704:	d14b      	bne.n	800f79e <find_volume+0x1c2>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f706:	2300      	movs	r3, #0
 800f708:	64bb      	str	r3, [r7, #72]	; 0x48
 800f70a:	e01f      	b.n	800f74c <find_volume+0x170>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f70c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f70e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f714:	011b      	lsls	r3, r3, #4
 800f716:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f71a:	4413      	add	r3, r2
 800f71c:	63bb      	str	r3, [r7, #56]	; 0x38
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f720:	3304      	adds	r3, #4
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d006      	beq.n	800f736 <find_volume+0x15a>
 800f728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f72a:	3308      	adds	r3, #8
 800f72c:	4618      	mov	r0, r3
 800f72e:	f7fd f817 	bl	800c760 <ld_dword>
 800f732:	4602      	mov	r2, r0
 800f734:	e000      	b.n	800f738 <find_volume+0x15c>
 800f736:	2200      	movs	r2, #0
 800f738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f740:	440b      	add	r3, r1
 800f742:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f748:	3301      	adds	r3, #1
 800f74a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f74c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f74e:	2b03      	cmp	r3, #3
 800f750:	d9dc      	bls.n	800f70c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f752:	2300      	movs	r3, #0
 800f754:	64bb      	str	r3, [r7, #72]	; 0x48
		if (i) i--;
 800f756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <find_volume+0x186>
 800f75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f75e:	3b01      	subs	r3, #1
 800f760:	64bb      	str	r3, [r7, #72]	; 0x48
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f764:	009b      	lsls	r3, r3, #2
 800f766:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f76a:	4413      	add	r3, r2
 800f76c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f770:	65bb      	str	r3, [r7, #88]	; 0x58
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f774:	2b00      	cmp	r3, #0
 800f776:	d005      	beq.n	800f784 <find_volume+0x1a8>
 800f778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f77a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f77c:	f7ff feca 	bl	800f514 <check_fs>
 800f780:	4603      	mov	r3, r0
 800f782:	e000      	b.n	800f786 <find_volume+0x1aa>
 800f784:	2303      	movs	r3, #3
 800f786:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f78a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f78e:	2b01      	cmp	r3, #1
 800f790:	d905      	bls.n	800f79e <find_volume+0x1c2>
 800f792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f794:	3301      	adds	r3, #1
 800f796:	64bb      	str	r3, [r7, #72]	; 0x48
 800f798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f79a:	2b03      	cmp	r3, #3
 800f79c:	d9e1      	bls.n	800f762 <find_volume+0x186>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7a2:	2b04      	cmp	r3, #4
 800f7a4:	d101      	bne.n	800f7aa <find_volume+0x1ce>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e295      	b.n	800fcd6 <find_volume+0x6fa>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f7aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d901      	bls.n	800f7b6 <find_volume+0x1da>
 800f7b2:	230d      	movs	r3, #13
 800f7b4:	e28f      	b.n	800fcd6 <find_volume+0x6fa>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7ba:	2b01      	cmp	r3, #1
 800f7bc:	f040 8101 	bne.w	800f9c2 <find_volume+0x3e6>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f7c0:	230b      	movs	r3, #11
 800f7c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7c4:	e002      	b.n	800f7cc <find_volume+0x1f0>
 800f7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7ce:	2b3f      	cmp	r3, #63	; 0x3f
 800f7d0:	d806      	bhi.n	800f7e0 <find_volume+0x204>
 800f7d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7d6:	4413      	add	r3, r2
 800f7d8:	333c      	adds	r3, #60	; 0x3c
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0f2      	beq.n	800f7c6 <find_volume+0x1ea>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f7e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7e2:	2b3f      	cmp	r3, #63	; 0x3f
 800f7e4:	d801      	bhi.n	800f7ea <find_volume+0x20e>
 800f7e6:	230d      	movs	r3, #13
 800f7e8:	e275      	b.n	800fcd6 <find_volume+0x6fa>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f7ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7ec:	333c      	adds	r3, #60	; 0x3c
 800f7ee:	3368      	adds	r3, #104	; 0x68
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fc ff9d 	bl	800c730 <ld_word>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7fc:	d001      	beq.n	800f802 <find_volume+0x226>
 800f7fe:	230d      	movs	r3, #13
 800f800:	e269      	b.n	800fcd6 <find_volume+0x6fa>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f804:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800f808:	461a      	mov	r2, r3
 800f80a:	2301      	movs	r3, #1
 800f80c:	4093      	lsls	r3, r2
 800f80e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f810:	8992      	ldrh	r2, [r2, #12]
 800f812:	4293      	cmp	r3, r2
 800f814:	d001      	beq.n	800f81a <find_volume+0x23e>
			return FR_NO_FILESYSTEM;
 800f816:	230d      	movs	r3, #13
 800f818:	e25d      	b.n	800fcd6 <find_volume+0x6fa>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f81a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f81c:	333c      	adds	r3, #60	; 0x3c
 800f81e:	3348      	adds	r3, #72	; 0x48
 800f820:	4618      	mov	r0, r3
 800f822:	f7fc ffc0 	bl	800c7a6 <ld_qword>
 800f826:	460a      	mov	r2, r1
 800f828:	4601      	mov	r1, r0
 800f82a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f82c:	469b      	mov	fp, r3
 800f82e:	f04f 0c00 	mov.w	ip, #0
 800f832:	eb1b 0301 	adds.w	r3, fp, r1
 800f836:	eb4c 0402 	adc.w	r4, ip, r2
 800f83a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f83e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800f842:	2c01      	cmp	r4, #1
 800f844:	bf08      	it	eq
 800f846:	2b00      	cmpeq	r3, #0
 800f848:	d301      	bcc.n	800f84e <find_volume+0x272>
 800f84a:	230d      	movs	r3, #13
 800f84c:	e243      	b.n	800fcd6 <find_volume+0x6fa>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f850:	333c      	adds	r3, #60	; 0x3c
 800f852:	3354      	adds	r3, #84	; 0x54
 800f854:	4618      	mov	r0, r3
 800f856:	f7fc ff83 	bl	800c760 <ld_dword>
 800f85a:	4602      	mov	r2, r0
 800f85c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f85e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f862:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800f866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f868:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f86a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f86c:	789b      	ldrb	r3, [r3, #2]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d001      	beq.n	800f876 <find_volume+0x29a>
 800f872:	230d      	movs	r3, #13
 800f874:	e22f      	b.n	800fcd6 <find_volume+0x6fa>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f878:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f87c:	461a      	mov	r2, r3
 800f87e:	2301      	movs	r3, #1
 800f880:	4093      	lsls	r3, r2
 800f882:	b29a      	uxth	r2, r3
 800f884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f886:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f88a:	895b      	ldrh	r3, [r3, #10]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d101      	bne.n	800f894 <find_volume+0x2b8>
 800f890:	230d      	movs	r3, #13
 800f892:	e220      	b.n	800fcd6 <find_volume+0x6fa>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f896:	333c      	adds	r3, #60	; 0x3c
 800f898:	335c      	adds	r3, #92	; 0x5c
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7fc ff60 	bl	800c760 <ld_dword>
 800f8a0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8a4:	4a03      	ldr	r2, [pc, #12]	; (800f8b4 <find_volume+0x2d8>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d906      	bls.n	800f8b8 <find_volume+0x2dc>
 800f8aa:	230d      	movs	r3, #13
 800f8ac:	e213      	b.n	800fcd6 <find_volume+0x6fa>
 800f8ae:	bf00      	nop
 800f8b0:	240000b4 	.word	0x240000b4
 800f8b4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	1c9a      	adds	r2, r3, #2
 800f8bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8be:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f8c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8c4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8c8:	333c      	adds	r3, #60	; 0x3c
 800f8ca:	3358      	adds	r3, #88	; 0x58
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fc ff47 	bl	800c760 <ld_dword>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8d6:	441a      	add	r2, r3
 800f8d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8da:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8de:	333c      	adds	r3, #60	; 0x3c
 800f8e0:	3350      	adds	r3, #80	; 0x50
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fc ff3c 	bl	800c760 <ld_dword>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8ec:	441a      	add	r2, r3
 800f8ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8f0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f8f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	f04f 0200 	mov.w	r2, #0
 800f8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8fe:	895b      	ldrh	r3, [r3, #10]
 800f900:	4618      	mov	r0, r3
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	fb03 f300 	mul.w	r3, r3, r0
 800f908:	469b      	mov	fp, r3
 800f90a:	f04f 0c00 	mov.w	ip, #0
 800f90e:	eb1b 0301 	adds.w	r3, fp, r1
 800f912:	eb4c 0402 	adc.w	r4, ip, r2
 800f916:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800f91a:	42a2      	cmp	r2, r4
 800f91c:	bf08      	it	eq
 800f91e:	4299      	cmpeq	r1, r3
 800f920:	d201      	bcs.n	800f926 <find_volume+0x34a>
 800f922:	230d      	movs	r3, #13
 800f924:	e1d7      	b.n	800fcd6 <find_volume+0x6fa>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f928:	333c      	adds	r3, #60	; 0x3c
 800f92a:	3360      	adds	r3, #96	; 0x60
 800f92c:	4618      	mov	r0, r3
 800f92e:	f7fc ff17 	bl	800c760 <ld_dword>
 800f932:	4602      	mov	r2, r0
 800f934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f936:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f93c:	4619      	mov	r1, r3
 800f93e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f940:	f7fd fb88 	bl	800d054 <clust2sect>
 800f944:	4603      	mov	r3, r0
 800f946:	4619      	mov	r1, r3
 800f948:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f94a:	f7fd fae5 	bl	800cf18 <move_window>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d001      	beq.n	800f958 <find_volume+0x37c>
 800f954:	2301      	movs	r3, #1
 800f956:	e1be      	b.n	800fcd6 <find_volume+0x6fa>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f958:	2300      	movs	r3, #0
 800f95a:	64bb      	str	r3, [r7, #72]	; 0x48
 800f95c:	e015      	b.n	800f98a <find_volume+0x3ae>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f95e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f962:	4413      	add	r3, r2
 800f964:	333c      	adds	r3, #60	; 0x3c
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	2b81      	cmp	r3, #129	; 0x81
 800f96a:	d10b      	bne.n	800f984 <find_volume+0x3a8>
 800f96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f96e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f974:	3314      	adds	r3, #20
 800f976:	4413      	add	r3, r2
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fc fef1 	bl	800c760 <ld_dword>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b02      	cmp	r3, #2
 800f982:	d009      	beq.n	800f998 <find_volume+0x3bc>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f986:	3320      	adds	r3, #32
 800f988:	64bb      	str	r3, [r7, #72]	; 0x48
 800f98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	461a      	mov	r2, r3
 800f990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f992:	4293      	cmp	r3, r2
 800f994:	d3e3      	bcc.n	800f95e <find_volume+0x382>
 800f996:	e000      	b.n	800f99a <find_volume+0x3be>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f998:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f99c:	899b      	ldrh	r3, [r3, #12]
 800f99e:	461a      	mov	r2, r3
 800f9a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d101      	bne.n	800f9aa <find_volume+0x3ce>
 800f9a6:	230d      	movs	r3, #13
 800f9a8:	e195      	b.n	800fcd6 <find_volume+0x6fa>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b0:	61da      	str	r2, [r3, #28]
 800f9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9b4:	69da      	ldr	r2, [r3, #28]
 800f9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9b8:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f9ba:	2304      	movs	r3, #4
 800f9bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f9c0:	e177      	b.n	800fcb2 <find_volume+0x6d6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f9c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9c4:	333c      	adds	r3, #60	; 0x3c
 800f9c6:	330b      	adds	r3, #11
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fc feb1 	bl	800c730 <ld_word>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9d4:	899b      	ldrh	r3, [r3, #12]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d001      	beq.n	800f9de <find_volume+0x402>
 800f9da:	230d      	movs	r3, #13
 800f9dc:	e17b      	b.n	800fcd6 <find_volume+0x6fa>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9e0:	333c      	adds	r3, #60	; 0x3c
 800f9e2:	3316      	adds	r3, #22
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fc fea3 	bl	800c730 <ld_word>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	657b      	str	r3, [r7, #84]	; 0x54
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f9ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d106      	bne.n	800fa02 <find_volume+0x426>
 800f9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f9f6:	333c      	adds	r3, #60	; 0x3c
 800f9f8:	3324      	adds	r3, #36	; 0x24
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fc feb0 	bl	800c760 <ld_dword>
 800fa00:	6578      	str	r0, [r7, #84]	; 0x54
		fs->fsize = fasize;
 800fa02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fa06:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fa08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa0a:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800fa0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa10:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fa12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa14:	789b      	ldrb	r3, [r3, #2]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d005      	beq.n	800fa26 <find_volume+0x44a>
 800fa1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa1c:	789b      	ldrb	r3, [r3, #2]
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d001      	beq.n	800fa26 <find_volume+0x44a>
 800fa22:	230d      	movs	r3, #13
 800fa24:	e157      	b.n	800fcd6 <find_volume+0x6fa>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fa26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa28:	789b      	ldrb	r3, [r3, #2]
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa2e:	fb02 f303 	mul.w	r3, r2, r3
 800fa32:	657b      	str	r3, [r7, #84]	; 0x54

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fa34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa36:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa3e:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fa40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa42:	895b      	ldrh	r3, [r3, #10]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d008      	beq.n	800fa5a <find_volume+0x47e>
 800fa48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa4a:	895b      	ldrh	r3, [r3, #10]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa50:	895b      	ldrh	r3, [r3, #10]
 800fa52:	3b01      	subs	r3, #1
 800fa54:	4013      	ands	r3, r2
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d001      	beq.n	800fa5e <find_volume+0x482>
 800fa5a:	230d      	movs	r3, #13
 800fa5c:	e13b      	b.n	800fcd6 <find_volume+0x6fa>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fa5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa60:	333c      	adds	r3, #60	; 0x3c
 800fa62:	3311      	adds	r3, #17
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fc fe63 	bl	800c730 <ld_word>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa70:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fa72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa74:	891b      	ldrh	r3, [r3, #8]
 800fa76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa78:	8992      	ldrh	r2, [r2, #12]
 800fa7a:	0952      	lsrs	r2, r2, #5
 800fa7c:	b292      	uxth	r2, r2
 800fa7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa82:	fb02 f201 	mul.w	r2, r2, r1
 800fa86:	1a9b      	subs	r3, r3, r2
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <find_volume+0x4b6>
 800fa8e:	230d      	movs	r3, #13
 800fa90:	e121      	b.n	800fcd6 <find_volume+0x6fa>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fa92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa94:	333c      	adds	r3, #60	; 0x3c
 800fa96:	3313      	adds	r3, #19
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7fc fe49 	bl	800c730 <ld_word>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	653b      	str	r3, [r7, #80]	; 0x50
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800faa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d106      	bne.n	800fab6 <find_volume+0x4da>
 800faa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800faaa:	333c      	adds	r3, #60	; 0x3c
 800faac:	3320      	adds	r3, #32
 800faae:	4618      	mov	r0, r3
 800fab0:	f7fc fe56 	bl	800c760 <ld_dword>
 800fab4:	6538      	str	r0, [r7, #80]	; 0x50

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fab6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fab8:	333c      	adds	r3, #60	; 0x3c
 800faba:	330e      	adds	r3, #14
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fc fe37 	bl	800c730 <ld_word>
 800fac2:	4603      	mov	r3, r0
 800fac4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fac6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <find_volume+0x4f4>
 800facc:	230d      	movs	r3, #13
 800face:	e102      	b.n	800fcd6 <find_volume+0x6fa>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fad0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fad4:	4413      	add	r3, r2
 800fad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fad8:	8911      	ldrh	r1, [r2, #8]
 800fada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fadc:	8992      	ldrh	r2, [r2, #12]
 800fade:	0952      	lsrs	r2, r2, #5
 800fae0:	b292      	uxth	r2, r2
 800fae2:	fbb1 f2f2 	udiv	r2, r1, r2
 800fae6:	b292      	uxth	r2, r2
 800fae8:	4413      	add	r3, r2
 800faea:	633b      	str	r3, [r7, #48]	; 0x30
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800faec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800faee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d201      	bcs.n	800faf8 <find_volume+0x51c>
 800faf4:	230d      	movs	r3, #13
 800faf6:	e0ee      	b.n	800fcd6 <find_volume+0x6fa>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800faf8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb00:	8952      	ldrh	r2, [r2, #10]
 800fb02:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb06:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d101      	bne.n	800fb12 <find_volume+0x536>
 800fb0e:	230d      	movs	r3, #13
 800fb10:	e0e1      	b.n	800fcd6 <find_volume+0x6fa>
		fmt = FS_FAT32;
 800fb12:	2303      	movs	r3, #3
 800fb14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d802      	bhi.n	800fb28 <find_volume+0x54c>
 800fb22:	2302      	movs	r3, #2
 800fb24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d802      	bhi.n	800fb38 <find_volume+0x55c>
 800fb32:	2301      	movs	r3, #1
 800fb34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	1c9a      	adds	r2, r3, #2
 800fb3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb3e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800fb40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb44:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fb46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb4a:	441a      	add	r2, r3
 800fb4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb4e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800fb50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	441a      	add	r2, r3
 800fb56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb58:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800fb5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb5e:	2b03      	cmp	r3, #3
 800fb60:	d11e      	bne.n	800fba0 <find_volume+0x5c4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fb62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb64:	333c      	adds	r3, #60	; 0x3c
 800fb66:	332a      	adds	r3, #42	; 0x2a
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fc fde1 	bl	800c730 <ld_word>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d001      	beq.n	800fb78 <find_volume+0x59c>
 800fb74:	230d      	movs	r3, #13
 800fb76:	e0ae      	b.n	800fcd6 <find_volume+0x6fa>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fb78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb7a:	891b      	ldrh	r3, [r3, #8]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d001      	beq.n	800fb84 <find_volume+0x5a8>
 800fb80:	230d      	movs	r3, #13
 800fb82:	e0a8      	b.n	800fcd6 <find_volume+0x6fa>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fb84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb86:	333c      	adds	r3, #60	; 0x3c
 800fb88:	332c      	adds	r3, #44	; 0x2c
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fc fde8 	bl	800c760 <ld_dword>
 800fb90:	4602      	mov	r2, r0
 800fb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb94:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb9e:	e01f      	b.n	800fbe0 <find_volume+0x604>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fba2:	891b      	ldrh	r3, [r3, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <find_volume+0x5d0>
 800fba8:	230d      	movs	r3, #13
 800fbaa:	e094      	b.n	800fcd6 <find_volume+0x6fa>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fbac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fbb2:	441a      	add	r2, r3
 800fbb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbb6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fbb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fbbc:	2b02      	cmp	r3, #2
 800fbbe:	d103      	bne.n	800fbc8 <find_volume+0x5ec>
 800fbc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbc2:	6a1b      	ldr	r3, [r3, #32]
 800fbc4:	005b      	lsls	r3, r3, #1
 800fbc6:	e00a      	b.n	800fbde <find_volume+0x602>
 800fbc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbca:	6a1a      	ldr	r2, [r3, #32]
 800fbcc:	4613      	mov	r3, r2
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	4413      	add	r3, r2
 800fbd2:	085a      	lsrs	r2, r3, #1
 800fbd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbd6:	6a1b      	ldr	r3, [r3, #32]
 800fbd8:	f003 0301 	and.w	r3, r3, #1
 800fbdc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fbde:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fbe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fbe6:	899b      	ldrh	r3, [r3, #12]
 800fbe8:	4619      	mov	r1, r3
 800fbea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbec:	440b      	add	r3, r1
 800fbee:	3b01      	subs	r3, #1
 800fbf0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fbf2:	8989      	ldrh	r1, [r1, #12]
 800fbf4:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d201      	bcs.n	800fc00 <find_volume+0x624>
 800fbfc:	230d      	movs	r3, #13
 800fbfe:	e06a      	b.n	800fcd6 <find_volume+0x6fa>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fc00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc02:	f04f 32ff 	mov.w	r2, #4294967295
 800fc06:	61da      	str	r2, [r3, #28]
 800fc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0a:	69da      	ldr	r2, [r3, #28]
 800fc0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800fc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc12:	2280      	movs	r2, #128	; 0x80
 800fc14:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800fc16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc1a:	2b03      	cmp	r3, #3
 800fc1c:	d149      	bne.n	800fcb2 <find_volume+0x6d6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800fc1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc20:	333c      	adds	r3, #60	; 0x3c
 800fc22:	3330      	adds	r3, #48	; 0x30
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fc fd83 	bl	800c730 <ld_word>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b01      	cmp	r3, #1
 800fc2e:	d140      	bne.n	800fcb2 <find_volume+0x6d6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800fc30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc32:	3301      	adds	r3, #1
 800fc34:	4619      	mov	r1, r3
 800fc36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fc38:	f7fd f96e 	bl	800cf18 <move_window>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d137      	bne.n	800fcb2 <find_volume+0x6d6>
		{
			fs->fsi_flag = 0;
 800fc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc44:	2200      	movs	r2, #0
 800fc46:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fc48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc4a:	333c      	adds	r3, #60	; 0x3c
 800fc4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fc fd6d 	bl	800c730 <ld_word>
 800fc56:	4603      	mov	r3, r0
 800fc58:	461a      	mov	r2, r3
 800fc5a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d127      	bne.n	800fcb2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc64:	333c      	adds	r3, #60	; 0x3c
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fc fd7a 	bl	800c760 <ld_dword>
 800fc6c:	4602      	mov	r2, r0
 800fc6e:	4b1c      	ldr	r3, [pc, #112]	; (800fce0 <find_volume+0x704>)
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d11e      	bne.n	800fcb2 <find_volume+0x6d6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc76:	333c      	adds	r3, #60	; 0x3c
 800fc78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7fc fd6f 	bl	800c760 <ld_dword>
 800fc82:	4602      	mov	r2, r0
 800fc84:	4b17      	ldr	r3, [pc, #92]	; (800fce4 <find_volume+0x708>)
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d113      	bne.n	800fcb2 <find_volume+0x6d6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8c:	333c      	adds	r3, #60	; 0x3c
 800fc8e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fc92:	4618      	mov	r0, r3
 800fc94:	f7fc fd64 	bl	800c760 <ld_dword>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc9c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fc9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fca0:	333c      	adds	r3, #60	; 0x3c
 800fca2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fc fd5a 	bl	800c760 <ld_dword>
 800fcac:	4602      	mov	r2, r0
 800fcae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fcb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800fcb8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fcba:	4b0b      	ldr	r3, [pc, #44]	; (800fce8 <find_volume+0x70c>)
 800fcbc:	881b      	ldrh	r3, [r3, #0]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	b29a      	uxth	r2, r3
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <find_volume+0x70c>)
 800fcc4:	801a      	strh	r2, [r3, #0]
 800fcc6:	4b08      	ldr	r3, [pc, #32]	; (800fce8 <find_volume+0x70c>)
 800fcc8:	881a      	ldrh	r2, [r3, #0]
 800fcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fccc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fcce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fcd0:	f7fd f8ba 	bl	800ce48 <clear_lock>
#endif
	return FR_OK;
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3760      	adds	r7, #96	; 0x60
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800fce0:	41615252 	.word	0x41615252
 800fce4:	61417272 	.word	0x61417272
 800fce8:	240000b8 	.word	0x240000b8

0800fcec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fcf6:	2309      	movs	r3, #9
 800fcf8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d01c      	beq.n	800fd3a <validate+0x4e>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d018      	beq.n	800fd3a <validate+0x4e>
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d013      	beq.n	800fd3a <validate+0x4e>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	889a      	ldrh	r2, [r3, #4]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	88db      	ldrh	r3, [r3, #6]
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d10c      	bne.n	800fd3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	785b      	ldrb	r3, [r3, #1]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fc fc64 	bl	800c5f4 <disk_status>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	f003 0301 	and.w	r3, r3, #1
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d101      	bne.n	800fd3a <validate+0x4e>
			res = FR_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fd3a:	7bfb      	ldrb	r3, [r7, #15]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d102      	bne.n	800fd46 <validate+0x5a>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	e000      	b.n	800fd48 <validate+0x5c>
 800fd46:	2300      	movs	r3, #0
 800fd48:	683a      	ldr	r2, [r7, #0]
 800fd4a:	6013      	str	r3, [r2, #0]
	return res;
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	4613      	mov	r3, r2
 800fd64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fd6a:	f107 0310 	add.w	r3, r7, #16
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7ff fb8b 	bl	800f48a <get_ldnumber>
 800fd74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	da01      	bge.n	800fd80 <f_mount+0x28>
 800fd7c:	230b      	movs	r3, #11
 800fd7e:	e02b      	b.n	800fdd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fd80:	4a17      	ldr	r2, [pc, #92]	; (800fde0 <f_mount+0x88>)
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d005      	beq.n	800fd9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fd90:	69b8      	ldr	r0, [r7, #24]
 800fd92:	f7fd f859 	bl	800ce48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d002      	beq.n	800fda8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fda8:	68fa      	ldr	r2, [r7, #12]
 800fdaa:	490d      	ldr	r1, [pc, #52]	; (800fde0 <f_mount+0x88>)
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d002      	beq.n	800fdbe <f_mount+0x66>
 800fdb8:	79fb      	ldrb	r3, [r7, #7]
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d001      	beq.n	800fdc2 <f_mount+0x6a>
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	e00a      	b.n	800fdd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fdc2:	f107 010c 	add.w	r1, r7, #12
 800fdc6:	f107 0308 	add.w	r3, r7, #8
 800fdca:	2200      	movs	r2, #0
 800fdcc:	4618      	mov	r0, r3
 800fdce:	f7ff fc05 	bl	800f5dc <find_volume>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fdd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdd8:	4618      	mov	r0, r3
 800fdda:	3720      	adds	r7, #32
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}
 800fde0:	240000b4 	.word	0x240000b4

0800fde4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fde4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fde8:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	f107 030c 	add.w	r3, r7, #12
 800fdf2:	6018      	str	r0, [r3, #0]
 800fdf4:	f107 0308 	add.w	r3, r7, #8
 800fdf8:	6019      	str	r1, [r3, #0]
 800fdfa:	1dfb      	adds	r3, r7, #7
 800fdfc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fdfe:	f107 030c 	add.w	r3, r7, #12
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <f_open+0x28>
 800fe08:	2309      	movs	r3, #9
 800fe0a:	e369      	b.n	80104e0 <f_open+0x6fc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fe0c:	1dfb      	adds	r3, r7, #7
 800fe0e:	1dfa      	adds	r2, r7, #7
 800fe10:	7812      	ldrb	r2, [r2, #0]
 800fe12:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fe16:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800fe18:	1dfb      	adds	r3, r7, #7
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	f207 4174 	addw	r1, r7, #1140	; 0x474
 800fe20:	f107 0308 	add.w	r3, r7, #8
 800fe24:	4618      	mov	r0, r3
 800fe26:	f7ff fbd9 	bl	800f5dc <find_volume>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
	if (res == FR_OK) {
 800fe30:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f040 8348 	bne.w	80104ca <f_open+0x6e6>
		dj.obj.fs = fs;
 800fe3a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fe3e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		INIT_NAMBUF(fs);
 800fe42:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fe46:	f507 721d 	add.w	r2, r7, #628	; 0x274
 800fe4a:	611a      	str	r2, [r3, #16]
 800fe4c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fe50:	f107 0214 	add.w	r2, r7, #20
 800fe54:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fe56:	f107 0308 	add.w	r3, r7, #8
 800fe5a:	681a      	ldr	r2, [r3, #0]
 800fe5c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800fe60:	4611      	mov	r1, r2
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7ff fa64 	bl	800f330 <follow_path>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fe6e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d11b      	bne.n	800feae <f_open+0xca>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fe76:	f897 34c3 	ldrb.w	r3, [r7, #1219]	; 0x4c3
 800fe7a:	b25b      	sxtb	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	da03      	bge.n	800fe88 <f_open+0xa4>
				res = FR_INVALID_NAME;
 800fe80:	2306      	movs	r3, #6
 800fe82:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800fe86:	e012      	b.n	800feae <f_open+0xca>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe88:	1dfb      	adds	r3, r7, #7
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f023 0301 	bic.w	r3, r3, #1
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	bf14      	ite	ne
 800fe94:	2301      	movne	r3, #1
 800fe96:	2300      	moveq	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800fea0:	4611      	mov	r1, r2
 800fea2:	4618      	mov	r0, r3
 800fea4:	f7fc fe88 	bl	800cbb8 <chk_lock>
 800fea8:	4603      	mov	r3, r0
 800feaa:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800feae:	1dfb      	adds	r3, r7, #7
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	f003 031c 	and.w	r3, r3, #28
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 8148 	beq.w	801014c <f_open+0x368>
			if (res != FR_OK) {					/* No file, create new */
 800febc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d019      	beq.n	800fef8 <f_open+0x114>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fec4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800fec8:	2b04      	cmp	r3, #4
 800feca:	d10e      	bne.n	800feea <f_open+0x106>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fecc:	f7fc fed0 	bl	800cc70 <enq_lock>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d006      	beq.n	800fee4 <f_open+0x100>
 800fed6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe fec0 	bl	800ec60 <dir_register>
 800fee0:	4603      	mov	r3, r0
 800fee2:	e000      	b.n	800fee6 <f_open+0x102>
 800fee4:	2312      	movs	r3, #18
 800fee6:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800feea:	1dfb      	adds	r3, r7, #7
 800feec:	1dfa      	adds	r2, r7, #7
 800feee:	7812      	ldrb	r2, [r2, #0]
 800fef0:	f042 0208 	orr.w	r2, r2, #8
 800fef4:	701a      	strb	r2, [r3, #0]
 800fef6:	e012      	b.n	800ff1e <f_open+0x13a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fef8:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 800fefc:	f003 0311 	and.w	r3, r3, #17
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d003      	beq.n	800ff0c <f_open+0x128>
					res = FR_DENIED;
 800ff04:	2307      	movs	r3, #7
 800ff06:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800ff0a:	e008      	b.n	800ff1e <f_open+0x13a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ff0c:	1dfb      	adds	r3, r7, #7
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	f003 0304 	and.w	r3, r3, #4
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d002      	beq.n	800ff1e <f_open+0x13a>
 800ff18:	2308      	movs	r3, #8
 800ff1a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ff1e:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	f040 812f 	bne.w	8010186 <f_open+0x3a2>
 800ff28:	1dfb      	adds	r3, r7, #7
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	f003 0308 	and.w	r3, r3, #8
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	f000 8128 	beq.w	8010186 <f_open+0x3a2>
				dw = GET_FATTIME();
 800ff36:	f7fb fd7f 	bl	800ba38 <get_fattime>
 800ff3a:	f8c7 04d4 	str.w	r0, [r7, #1236]	; 0x4d4
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800ff3e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	2b04      	cmp	r3, #4
 800ff46:	f040 80a6 	bne.w	8010096 <f_open+0x2b2>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800ff4a:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800ff4e:	f107 030c 	add.w	r3, r7, #12
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800ff56:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ff5a:	695b      	ldr	r3, [r3, #20]
 800ff5c:	3334      	adds	r3, #52	; 0x34
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fc fbfe 	bl	800c760 <ld_dword>
 800ff64:	4602      	mov	r2, r0
 800ff66:	f107 030c 	add.w	r3, r7, #12
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ff6e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ff72:	695b      	ldr	r3, [r3, #20]
 800ff74:	3338      	adds	r3, #56	; 0x38
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fc fc15 	bl	800c7a6 <ld_qword>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	460c      	mov	r4, r1
 800ff80:	f107 020c 	add.w	r2, r7, #12
 800ff84:	6812      	ldr	r2, [r2, #0]
 800ff86:	e9c2 3404 	strd	r3, r4, [r2, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800ff8a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ff8e:	695b      	ldr	r3, [r3, #20]
 800ff90:	3321      	adds	r3, #33	; 0x21
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	f003 0302 	and.w	r3, r3, #2
 800ff98:	b2da      	uxtb	r2, r3
 800ff9a:	f107 030c 	add.w	r3, r7, #12
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800ffa2:	f107 030c 	add.w	r3, r7, #12
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800ffac:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ffb0:	695b      	ldr	r3, [r3, #20]
 800ffb2:	3308      	adds	r3, #8
 800ffb4:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fc fccc 	bl	800c956 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800ffbe:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ffc2:	695b      	ldr	r3, [r3, #20]
 800ffc4:	3314      	adds	r3, #20
 800ffc6:	2200      	movs	r2, #0
 800ffc8:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800ffca:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ffce:	695b      	ldr	r3, [r3, #20]
 800ffd0:	330c      	adds	r3, #12
 800ffd2:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fc fcbd 	bl	800c956 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800ffdc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ffe0:	695b      	ldr	r3, [r3, #20]
 800ffe2:	3315      	adds	r3, #21
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800ffe8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800ffec:	695b      	ldr	r3, [r3, #20]
 800ffee:	3304      	adds	r3, #4
 800fff0:	2220      	movs	r2, #32
 800fff2:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800fff4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800fff8:	695b      	ldr	r3, [r3, #20]
 800fffa:	3334      	adds	r3, #52	; 0x34
 800fffc:	2100      	movs	r1, #0
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fc fca9 	bl	800c956 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010004:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010008:	695b      	ldr	r3, [r3, #20]
 801000a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801000e:	f04f 0200 	mov.w	r2, #0
 8010012:	f04f 0300 	mov.w	r3, #0
 8010016:	4608      	mov	r0, r1
 8010018:	f7fc fcc9 	bl	800c9ae <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 801001c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010020:	695b      	ldr	r3, [r3, #20]
 8010022:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010026:	f04f 0200 	mov.w	r2, #0
 801002a:	f04f 0300 	mov.w	r3, #0
 801002e:	4608      	mov	r0, r1
 8010030:	f7fc fcbd 	bl	800c9ae <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010034:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	3321      	adds	r3, #33	; 0x21
 801003c:	2201      	movs	r2, #1
 801003e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010040:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8010044:	4618      	mov	r0, r3
 8010046:	f7fe fb58 	bl	800e6fa <store_xdir>
 801004a:	4603      	mov	r3, r0
 801004c:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010050:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8010054:	2b00      	cmp	r3, #0
 8010056:	f040 8096 	bne.w	8010186 <f_open+0x3a2>
 801005a:	f107 030c 	add.w	r3, r7, #12
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	2b00      	cmp	r3, #0
 8010064:	f000 808f 	beq.w	8010186 <f_open+0x3a2>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010068:	f107 030c 	add.w	r3, r7, #12
 801006c:	6818      	ldr	r0, [r3, #0]
 801006e:	f107 030c 	add.w	r3, r7, #12
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	689b      	ldr	r3, [r3, #8]
 8010076:	2200      	movs	r2, #0
 8010078:	4619      	mov	r1, r3
 801007a:	f7fd fbdd 	bl	800d838 <remove_chain>
 801007e:	4603      	mov	r3, r0
 8010080:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010084:	f107 030c 	add.w	r3, r7, #12
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	689a      	ldr	r2, [r3, #8]
 801008c:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010090:	3a01      	subs	r2, #1
 8010092:	619a      	str	r2, [r3, #24]
 8010094:	e077      	b.n	8010186 <f_open+0x3a2>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010096:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 801009a:	330e      	adds	r3, #14
 801009c:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fc fc58 	bl	800c956 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80100a6:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80100aa:	3316      	adds	r3, #22
 80100ac:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fc fc50 	bl	800c956 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80100b6:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80100ba:	330b      	adds	r3, #11
 80100bc:	2220      	movs	r2, #32
 80100be:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80100c0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80100c4:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 80100c8:	4611      	mov	r1, r2
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fd ff86 	bl	800dfdc <ld_clust>
 80100d0:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80100d4:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80100d8:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	; 0x4b4
 80100dc:	2200      	movs	r2, #0
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fd ff9b 	bl	800e01a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80100e4:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80100e8:	331c      	adds	r3, #28
 80100ea:	2100      	movs	r1, #0
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7fc fc32 	bl	800c956 <st_dword>
					fs->wflag = 1;
 80100f2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80100f6:	2201      	movs	r2, #1
 80100f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80100fa:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d041      	beq.n	8010186 <f_open+0x3a2>
						dw = fs->winsect;
 8010102:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010108:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
						res = remove_chain(&dj.obj, cl, 0);
 801010c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8010110:	2200      	movs	r2, #0
 8010112:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	; 0x4d0
 8010116:	4618      	mov	r0, r3
 8010118:	f7fd fb8e 	bl	800d838 <remove_chain>
 801011c:	4603      	mov	r3, r0
 801011e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
						if (res == FR_OK) {
 8010122:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8010126:	2b00      	cmp	r3, #0
 8010128:	d12d      	bne.n	8010186 <f_open+0x3a2>
							res = move_window(fs, dw);
 801012a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801012e:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8010132:	4618      	mov	r0, r3
 8010134:	f7fc fef0 	bl	800cf18 <move_window>
 8010138:	4603      	mov	r3, r0
 801013a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801013e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010142:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8010146:	3a01      	subs	r2, #1
 8010148:	619a      	str	r2, [r3, #24]
 801014a:	e01c      	b.n	8010186 <f_open+0x3a2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801014c:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8010150:	2b00      	cmp	r3, #0
 8010152:	d118      	bne.n	8010186 <f_open+0x3a2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010154:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8010158:	f003 0310 	and.w	r3, r3, #16
 801015c:	2b00      	cmp	r3, #0
 801015e:	d003      	beq.n	8010168 <f_open+0x384>
					res = FR_NO_FILE;
 8010160:	2304      	movs	r3, #4
 8010162:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 8010166:	e00e      	b.n	8010186 <f_open+0x3a2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010168:	1dfb      	adds	r3, r7, #7
 801016a:	781b      	ldrb	r3, [r3, #0]
 801016c:	f003 0302 	and.w	r3, r3, #2
 8010170:	2b00      	cmp	r3, #0
 8010172:	d008      	beq.n	8010186 <f_open+0x3a2>
 8010174:	f897 347e 	ldrb.w	r3, [r7, #1150]	; 0x47e
 8010178:	f003 0301 	and.w	r3, r3, #1
 801017c:	2b00      	cmp	r3, #0
 801017e:	d002      	beq.n	8010186 <f_open+0x3a2>
						res = FR_DENIED;
 8010180:	2307      	movs	r3, #7
 8010182:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					}
				}
			}
		}
		if (res == FR_OK) {
 8010186:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 801018a:	2b00      	cmp	r3, #0
 801018c:	d136      	bne.n	80101fc <f_open+0x418>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801018e:	1dfb      	adds	r3, r7, #7
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	f003 0308 	and.w	r3, r3, #8
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <f_open+0x3c2>
				mode |= FA_MODIFIED;
 801019a:	1dfb      	adds	r3, r7, #7
 801019c:	1dfa      	adds	r2, r7, #7
 801019e:	7812      	ldrb	r2, [r2, #0]
 80101a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80101a4:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80101a6:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80101aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101ac:	f107 030c 	add.w	r3, r7, #12
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 80101b4:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 80101b8:	f107 030c 	add.w	r3, r7, #12
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101c0:	1dfb      	adds	r3, r7, #7
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f023 0301 	bic.w	r3, r3, #1
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	bf14      	ite	ne
 80101cc:	2301      	movne	r3, #1
 80101ce:	2300      	moveq	r3, #0
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	461a      	mov	r2, r3
 80101d4:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fc fd6a 	bl	800ccb4 <inc_lock>
 80101e0:	4602      	mov	r2, r0
 80101e2:	f107 030c 	add.w	r3, r7, #12
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80101ea:	f107 030c 	add.w	r3, r7, #12
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d102      	bne.n	80101fc <f_open+0x418>
 80101f6:	2302      	movs	r3, #2
 80101f8:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				}
			}
		}
#endif

		if (res == FR_OK) {
 80101fc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8010200:	2b00      	cmp	r3, #0
 8010202:	f040 8162 	bne.w	80104ca <f_open+0x6e6>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010206:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801020a:	781b      	ldrb	r3, [r3, #0]
 801020c:	2b04      	cmp	r3, #4
 801020e:	d13f      	bne.n	8010290 <f_open+0x4ac>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010210:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8010214:	f107 030c 	add.w	r3, r7, #12
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 801021c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8010220:	e9d3 3400 	ldrd	r3, r4, [r3]
 8010224:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010228:	f897 247f 	ldrb.w	r2, [r7, #1151]	; 0x47f
 801022c:	431a      	orrs	r2, r3
 801022e:	f107 030c 	add.w	r3, r7, #12
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010236:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 801023a:	f107 030c 	add.w	r3, r7, #12
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010242:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010246:	695b      	ldr	r3, [r3, #20]
 8010248:	3334      	adds	r3, #52	; 0x34
 801024a:	4618      	mov	r0, r3
 801024c:	f7fc fa88 	bl	800c760 <ld_dword>
 8010250:	4602      	mov	r2, r0
 8010252:	f107 030c 	add.w	r3, r7, #12
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 801025a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	3338      	adds	r3, #56	; 0x38
 8010262:	4618      	mov	r0, r3
 8010264:	f7fc fa9f 	bl	800c7a6 <ld_qword>
 8010268:	4603      	mov	r3, r0
 801026a:	460c      	mov	r4, r1
 801026c:	f107 020c 	add.w	r2, r7, #12
 8010270:	6812      	ldr	r2, [r2, #0]
 8010272:	e9c2 3404 	strd	r3, r4, [r2, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010276:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	3321      	adds	r3, #33	; 0x21
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f003 0302 	and.w	r3, r3, #2
 8010284:	b2da      	uxtb	r2, r3
 8010286:	f107 030c 	add.w	r3, r7, #12
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	71da      	strb	r2, [r3, #7]
 801028e:	e01a      	b.n	80102c6 <f_open+0x4e2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010290:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010294:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8010298:	4611      	mov	r1, r2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fd fe9e 	bl	800dfdc <ld_clust>
 80102a0:	4602      	mov	r2, r0
 80102a2:	f107 030c 	add.w	r3, r7, #12
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80102aa:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80102ae:	331c      	adds	r3, #28
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fc fa55 	bl	800c760 <ld_dword>
 80102b6:	4603      	mov	r3, r0
 80102b8:	f04f 0400 	mov.w	r4, #0
 80102bc:	f107 020c 	add.w	r2, r7, #12
 80102c0:	6812      	ldr	r2, [r2, #0]
 80102c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80102c6:	f107 030c 	add.w	r3, r7, #12
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2200      	movs	r2, #0
 80102ce:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80102d0:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80102d4:	f107 030c 	add.w	r3, r7, #12
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80102dc:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80102e0:	88da      	ldrh	r2, [r3, #6]
 80102e2:	f107 030c 	add.w	r3, r7, #12
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80102ea:	f107 030c 	add.w	r3, r7, #12
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	1dfa      	adds	r2, r7, #7
 80102f2:	7812      	ldrb	r2, [r2, #0]
 80102f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80102f8:	f107 030c 	add.w	r3, r7, #12
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	2200      	movs	r2, #0
 8010300:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010304:	f107 030c 	add.w	r3, r7, #12
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2200      	movs	r2, #0
 801030c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 801030e:	f107 030c 	add.w	r3, r7, #12
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	f04f 0300 	mov.w	r3, #0
 8010318:	f04f 0400 	mov.w	r4, #0
 801031c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010320:	f107 030c 	add.w	r3, r7, #12
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3354      	adds	r3, #84	; 0x54
 8010328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801032c:	2100      	movs	r1, #0
 801032e:	4618      	mov	r0, r3
 8010330:	f7fc fbe5 	bl	800cafe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010334:	1dfb      	adds	r3, r7, #7
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	f003 0320 	and.w	r3, r3, #32
 801033c:	2b00      	cmp	r3, #0
 801033e:	f000 80c4 	beq.w	80104ca <f_open+0x6e6>
 8010342:	f107 030c 	add.w	r3, r7, #12
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801034c:	4323      	orrs	r3, r4
 801034e:	f000 80bc 	beq.w	80104ca <f_open+0x6e6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010352:	f107 030c 	add.w	r3, r7, #12
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 801035c:	f107 020c 	add.w	r2, r7, #12
 8010360:	6812      	ldr	r2, [r2, #0]
 8010362:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010366:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801036a:	895b      	ldrh	r3, [r3, #10]
 801036c:	461a      	mov	r2, r3
 801036e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010372:	899b      	ldrh	r3, [r3, #12]
 8010374:	fb03 f302 	mul.w	r3, r3, r2
 8010378:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801037c:	f107 030c 	add.w	r3, r7, #12
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010388:	f107 030c 	add.w	r3, r7, #12
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010392:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 8010396:	e9c2 3400 	strd	r3, r4, [r2]
 801039a:	e02b      	b.n	80103f4 <f_open+0x610>
					clst = get_fat(&fp->obj, clst);
 801039c:	f107 030c 	add.w	r3, r7, #12
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fc fe74 	bl	800d094 <get_fat>
 80103ac:	f8c7 04e0 	str.w	r0, [r7, #1248]	; 0x4e0
					if (clst <= 1) res = FR_INT_ERR;
 80103b0:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80103b4:	2b01      	cmp	r3, #1
 80103b6:	d802      	bhi.n	80103be <f_open+0x5da>
 80103b8:	2302      	movs	r3, #2
 80103ba:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80103be:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80103c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c6:	d102      	bne.n	80103ce <f_open+0x5ea>
 80103c8:	2301      	movs	r3, #1
 80103ca:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80103ce:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 80103d2:	469b      	mov	fp, r3
 80103d4:	f04f 0c00 	mov.w	ip, #0
 80103d8:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 80103dc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80103e0:	460b      	mov	r3, r1
 80103e2:	4614      	mov	r4, r2
 80103e4:	ebb3 030b 	subs.w	r3, r3, fp
 80103e8:	eb64 040c 	sbc.w	r4, r4, ip
 80103ec:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80103f0:	e9c2 3400 	strd	r3, r4, [r2]
 80103f4:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d10c      	bne.n	8010416 <f_open+0x632>
 80103fc:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8010400:	4619      	mov	r1, r3
 8010402:	f04f 0200 	mov.w	r2, #0
 8010406:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 801040a:	e9d3 3400 	ldrd	r3, r4, [r3]
 801040e:	42a2      	cmp	r2, r4
 8010410:	bf08      	it	eq
 8010412:	4299      	cmpeq	r1, r3
 8010414:	d3c2      	bcc.n	801039c <f_open+0x5b8>
				}
				fp->clust = clst;
 8010416:	f107 030c 	add.w	r3, r7, #12
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8010420:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010422:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8010426:	2b00      	cmp	r3, #0
 8010428:	d14f      	bne.n	80104ca <f_open+0x6e6>
 801042a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 801042e:	899b      	ldrh	r3, [r3, #12]
 8010430:	b29b      	uxth	r3, r3
 8010432:	f04f 0400 	mov.w	r4, #0
 8010436:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 801043a:	e9d2 0100 	ldrd	r0, r1, [r2]
 801043e:	461a      	mov	r2, r3
 8010440:	4623      	mov	r3, r4
 8010442:	f7ef ff9d 	bl	8000380 <__aeabi_uldivmod>
 8010446:	461c      	mov	r4, r3
 8010448:	4613      	mov	r3, r2
 801044a:	4323      	orrs	r3, r4
 801044c:	d03d      	beq.n	80104ca <f_open+0x6e6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801044e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010452:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	; 0x4e0
 8010456:	4618      	mov	r0, r3
 8010458:	f7fc fdfc 	bl	800d054 <clust2sect>
 801045c:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
 8010460:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8010464:	2b00      	cmp	r3, #0
 8010466:	d103      	bne.n	8010470 <f_open+0x68c>
						res = FR_INT_ERR;
 8010468:	2302      	movs	r3, #2
 801046a:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 801046e:	e02c      	b.n	80104ca <f_open+0x6e6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010470:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8010474:	899b      	ldrh	r3, [r3, #12]
 8010476:	b29b      	uxth	r3, r3
 8010478:	f04f 0400 	mov.w	r4, #0
 801047c:	461a      	mov	r2, r3
 801047e:	4623      	mov	r3, r4
 8010480:	f507 619b 	add.w	r1, r7, #1240	; 0x4d8
 8010484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010488:	f7ef ff7a 	bl	8000380 <__aeabi_uldivmod>
 801048c:	4603      	mov	r3, r0
 801048e:	460c      	mov	r4, r1
 8010490:	461a      	mov	r2, r3
 8010492:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 8010496:	441a      	add	r2, r3
 8010498:	f107 030c 	add.w	r3, r7, #12
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80104a0:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 80104a4:	7858      	ldrb	r0, [r3, #1]
 80104a6:	f107 030c 	add.w	r3, r7, #12
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80104b0:	f107 030c 	add.w	r3, r7, #12
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104b8:	2301      	movs	r3, #1
 80104ba:	f7fc f8db 	bl	800c674 <disk_read>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d002      	beq.n	80104ca <f_open+0x6e6>
 80104c4:	2301      	movs	r3, #1
 80104c6:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80104ca:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d004      	beq.n	80104dc <f_open+0x6f8>
 80104d2:	f107 030c 	add.w	r3, r7, #12
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104dc:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 80104e6:	46bd      	mov	sp, r7
 80104e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080104ec <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80104ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104ee:	b08d      	sub	sp, #52	; 0x34
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2200      	movs	r2, #0
 8010502:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f107 0210 	add.w	r2, r7, #16
 801050a:	4611      	mov	r1, r2
 801050c:	4618      	mov	r0, r3
 801050e:	f7ff fbed 	bl	800fcec <validate>
 8010512:	4603      	mov	r3, r0
 8010514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801051c:	2b00      	cmp	r3, #0
 801051e:	d108      	bne.n	8010532 <f_write+0x46>
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801052a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <f_write+0x4c>
 8010532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010536:	e1ab      	b.n	8010890 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801053e:	f003 0302 	and.w	r3, r3, #2
 8010542:	2b00      	cmp	r3, #0
 8010544:	d101      	bne.n	801054a <f_write+0x5e>
 8010546:	2307      	movs	r3, #7
 8010548:	e1a2      	b.n	8010890 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	2b04      	cmp	r3, #4
 8010550:	f000 818e 	beq.w	8010870 <f_write+0x384>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 801055a:	461a      	mov	r2, r3
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	441a      	add	r2, r3
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010566:	429a      	cmp	r2, r3
 8010568:	f080 8182 	bcs.w	8010870 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8010572:	43db      	mvns	r3, r3
 8010574:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010576:	e17b      	b.n	8010870 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	899b      	ldrh	r3, [r3, #12]
 8010582:	b29b      	uxth	r3, r3
 8010584:	f04f 0400 	mov.w	r4, #0
 8010588:	461a      	mov	r2, r3
 801058a:	4623      	mov	r3, r4
 801058c:	f7ef fef8 	bl	8000380 <__aeabi_uldivmod>
 8010590:	461c      	mov	r4, r3
 8010592:	4613      	mov	r3, r2
 8010594:	4323      	orrs	r3, r4
 8010596:	f040 810c 	bne.w	80107b2 <f_write+0x2c6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	899b      	ldrh	r3, [r3, #12]
 80105a4:	b29b      	uxth	r3, r3
 80105a6:	f04f 0400 	mov.w	r4, #0
 80105aa:	461a      	mov	r2, r3
 80105ac:	4623      	mov	r3, r4
 80105ae:	f7ef fee7 	bl	8000380 <__aeabi_uldivmod>
 80105b2:	4603      	mov	r3, r0
 80105b4:	460c      	mov	r4, r1
 80105b6:	461a      	mov	r2, r3
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	895b      	ldrh	r3, [r3, #10]
 80105bc:	3b01      	subs	r3, #1
 80105be:	4013      	ands	r3, r2
 80105c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d148      	bne.n	801065a <f_write+0x16e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80105ce:	4323      	orrs	r3, r4
 80105d0:	d10c      	bne.n	80105ec <f_write+0x100>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80105d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d11c      	bne.n	8010618 <f_write+0x12c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2100      	movs	r1, #0
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fd f9dc 	bl	800d9a0 <create_chain>
 80105e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80105ea:	e015      	b.n	8010618 <f_write+0x12c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d009      	beq.n	8010608 <f_write+0x11c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80105fa:	461a      	mov	r2, r3
 80105fc:	4623      	mov	r3, r4
 80105fe:	68f8      	ldr	r0, [r7, #12]
 8010600:	f7fd facf 	bl	800dba2 <clmt_clust>
 8010604:	62b8      	str	r0, [r7, #40]	; 0x28
 8010606:	e007      	b.n	8010618 <f_write+0x12c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010608:	68fa      	ldr	r2, [r7, #12]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060e:	4619      	mov	r1, r3
 8010610:	4610      	mov	r0, r2
 8010612:	f7fd f9c5 	bl	800d9a0 <create_chain>
 8010616:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801061a:	2b00      	cmp	r3, #0
 801061c:	f000 812d 	beq.w	801087a <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010622:	2b01      	cmp	r3, #1
 8010624:	d105      	bne.n	8010632 <f_write+0x146>
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	2202      	movs	r2, #2
 801062a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801062e:	2302      	movs	r3, #2
 8010630:	e12e      	b.n	8010890 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010638:	d105      	bne.n	8010646 <f_write+0x15a>
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2201      	movs	r2, #1
 801063e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010642:	2301      	movs	r3, #1
 8010644:	e124      	b.n	8010890 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801064a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	689b      	ldr	r3, [r3, #8]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <f_write+0x16e>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010658:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010660:	b25b      	sxtb	r3, r3
 8010662:	2b00      	cmp	r3, #0
 8010664:	da1b      	bge.n	801069e <f_write+0x1b2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	7858      	ldrb	r0, [r3, #1]
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010674:	2301      	movs	r3, #1
 8010676:	f7fc f81d 	bl	800c6b4 <disk_write>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d005      	beq.n	801068c <f_write+0x1a0>
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2201      	movs	r2, #1
 8010684:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010688:	2301      	movs	r3, #1
 801068a:	e101      	b.n	8010890 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010696:	b2da      	uxtb	r2, r3
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a4:	4619      	mov	r1, r3
 80106a6:	4610      	mov	r0, r2
 80106a8:	f7fc fcd4 	bl	800d054 <clust2sect>
 80106ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d105      	bne.n	80106c0 <f_write+0x1d4>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2202      	movs	r2, #2
 80106b8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80106bc:	2302      	movs	r3, #2
 80106be:	e0e7      	b.n	8010890 <f_write+0x3a4>
			sect += csect;
 80106c0:	697a      	ldr	r2, [r7, #20]
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	4413      	add	r3, r2
 80106c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	899b      	ldrh	r3, [r3, #12]
 80106cc:	461a      	mov	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80106d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d046      	beq.n	801076a <f_write+0x27e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80106dc:	69ba      	ldr	r2, [r7, #24]
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	4413      	add	r3, r2
 80106e2:	693a      	ldr	r2, [r7, #16]
 80106e4:	8952      	ldrh	r2, [r2, #10]
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d905      	bls.n	80106f6 <f_write+0x20a>
					cc = fs->csize - csect;
 80106ea:	693b      	ldr	r3, [r7, #16]
 80106ec:	895b      	ldrh	r3, [r3, #10]
 80106ee:	461a      	mov	r2, r3
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	7858      	ldrb	r0, [r3, #1]
 80106fa:	6a3b      	ldr	r3, [r7, #32]
 80106fc:	697a      	ldr	r2, [r7, #20]
 80106fe:	69f9      	ldr	r1, [r7, #28]
 8010700:	f7fb ffd8 	bl	800c6b4 <disk_write>
 8010704:	4603      	mov	r3, r0
 8010706:	2b00      	cmp	r3, #0
 8010708:	d005      	beq.n	8010716 <f_write+0x22a>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	2201      	movs	r2, #1
 801070e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010712:	2301      	movs	r3, #1
 8010714:	e0bc      	b.n	8010890 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	6a3a      	ldr	r2, [r7, #32]
 8010720:	429a      	cmp	r2, r3
 8010722:	d91a      	bls.n	801075a <f_write+0x26e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	8992      	ldrh	r2, [r2, #12]
 8010736:	fb02 f303 	mul.w	r3, r2, r3
 801073a:	69fa      	ldr	r2, [r7, #28]
 801073c:	18d1      	adds	r1, r2, r3
 801073e:	693b      	ldr	r3, [r7, #16]
 8010740:	899b      	ldrh	r3, [r3, #12]
 8010742:	461a      	mov	r2, r3
 8010744:	f7fc f9ba 	bl	800cabc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801074e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010752:	b2da      	uxtb	r2, r3
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	899b      	ldrh	r3, [r3, #12]
 801075e:	461a      	mov	r2, r3
 8010760:	6a3b      	ldr	r3, [r7, #32]
 8010762:	fb02 f303 	mul.w	r3, r2, r3
 8010766:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010768:	e058      	b.n	801081c <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801076e:	697a      	ldr	r2, [r7, #20]
 8010770:	429a      	cmp	r2, r3
 8010772:	d01b      	beq.n	80107ac <f_write+0x2c0>
				fp->fptr < fp->obj.objsize &&
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010780:	42a2      	cmp	r2, r4
 8010782:	bf08      	it	eq
 8010784:	4299      	cmpeq	r1, r3
 8010786:	d211      	bcs.n	80107ac <f_write+0x2c0>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010788:	693b      	ldr	r3, [r7, #16]
 801078a:	7858      	ldrb	r0, [r3, #1]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010792:	2301      	movs	r3, #1
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	f7fb ff6d 	bl	800c674 <disk_read>
 801079a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801079c:	2b00      	cmp	r3, #0
 801079e:	d005      	beq.n	80107ac <f_write+0x2c0>
					ABORT(fs, FR_DISK_ERR);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80107a8:	2301      	movs	r3, #1
 80107aa:	e071      	b.n	8010890 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	697a      	ldr	r2, [r7, #20]
 80107b0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	899b      	ldrh	r3, [r3, #12]
 80107b6:	4618      	mov	r0, r3
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	8992      	ldrh	r2, [r2, #12]
 80107c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80107c6:	fb02 f201 	mul.w	r2, r2, r1
 80107ca:	1a9b      	subs	r3, r3, r2
 80107cc:	1ac3      	subs	r3, r0, r3
 80107ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80107d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d901      	bls.n	80107dc <f_write+0x2f0>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	f103 0554 	add.w	r5, r3, #84	; 0x54
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	899b      	ldrh	r3, [r3, #12]
 80107ec:	b29b      	uxth	r3, r3
 80107ee:	f04f 0400 	mov.w	r4, #0
 80107f2:	461a      	mov	r2, r3
 80107f4:	4623      	mov	r3, r4
 80107f6:	f7ef fdc3 	bl	8000380 <__aeabi_uldivmod>
 80107fa:	461c      	mov	r4, r3
 80107fc:	4613      	mov	r3, r2
 80107fe:	442b      	add	r3, r5
 8010800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010802:	69f9      	ldr	r1, [r7, #28]
 8010804:	4618      	mov	r0, r3
 8010806:	f7fc f959 	bl	800cabc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010814:	b2da      	uxtb	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801081c:	69fa      	ldr	r2, [r7, #28]
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	4413      	add	r3, r2
 8010822:	61fb      	str	r3, [r7, #28]
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 801082a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082c:	461d      	mov	r5, r3
 801082e:	f04f 0600 	mov.w	r6, #0
 8010832:	186b      	adds	r3, r5, r1
 8010834:	eb46 0402 	adc.w	r4, r6, r2
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 801084a:	4294      	cmp	r4, r2
 801084c:	bf08      	it	eq
 801084e:	428b      	cmpeq	r3, r1
 8010850:	d201      	bcs.n	8010856 <f_write+0x36a>
 8010852:	460b      	mov	r3, r1
 8010854:	4614      	mov	r4, r2
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	e9c2 3404 	strd	r3, r4, [r2, #16]
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	681a      	ldr	r2, [r3, #0]
 8010860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010862:	441a      	add	r2, r3
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	601a      	str	r2, [r3, #0]
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	2b00      	cmp	r3, #0
 8010874:	f47f ae80 	bne.w	8010578 <f_write+0x8c>
 8010878:	e000      	b.n	801087c <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801087a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010886:	b2da      	uxtb	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3734      	adds	r7, #52	; 0x34
 8010894:	46bd      	mov	sp, r7
 8010896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010898 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010898:	b590      	push	{r4, r7, lr}
 801089a:	f2ad 4dcc 	subw	sp, sp, #1228	; 0x4cc
 801089e:	af00      	add	r7, sp, #0
 80108a0:	1d3b      	adds	r3, r7, #4
 80108a2:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80108a4:	1d3b      	adds	r3, r7, #4
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f507 6297 	add.w	r2, r7, #1208	; 0x4b8
 80108ac:	4611      	mov	r1, r2
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7ff fa1c 	bl	800fcec <validate>
 80108b4:	4603      	mov	r3, r0
 80108b6:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
	if (res == FR_OK) {
 80108ba:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 80108be:	2b00      	cmp	r3, #0
 80108c0:	f040 8143 	bne.w	8010b4a <f_sync+0x2b2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80108c4:	1d3b      	adds	r3, r7, #4
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f000 813a 	beq.w	8010b4a <f_sync+0x2b2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80108d6:	1d3b      	adds	r3, r7, #4
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108de:	b25b      	sxtb	r3, r3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	da1c      	bge.n	801091e <f_sync+0x86>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80108e4:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80108e8:	7858      	ldrb	r0, [r3, #1]
 80108ea:	1d3b      	adds	r3, r7, #4
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80108f2:	1d3b      	adds	r3, r7, #4
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108f8:	2301      	movs	r3, #1
 80108fa:	f7fb fedb 	bl	800c6b4 <disk_write>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d001      	beq.n	8010908 <f_sync+0x70>
 8010904:	2301      	movs	r3, #1
 8010906:	e122      	b.n	8010b4e <f_sync+0x2b6>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010908:	1d3b      	adds	r3, r7, #4
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010914:	b2da      	uxtb	r2, r3
 8010916:	1d3b      	adds	r3, r7, #4
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801091e:	f7fb f88b 	bl	800ba38 <get_fattime>
 8010922:	f8c7 04c0 	str.w	r0, [r7, #1216]	; 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010926:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	2b04      	cmp	r3, #4
 801092e:	f040 80af 	bne.w	8010a90 <f_sync+0x1f8>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010932:	1d3b      	adds	r3, r7, #4
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4618      	mov	r0, r3
 8010938:	f7fc ff1e 	bl	800d778 <fill_first_frag>
 801093c:	4603      	mov	r3, r0
 801093e:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 8010942:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8010946:	2b00      	cmp	r3, #0
 8010948:	d10c      	bne.n	8010964 <f_sync+0xcc>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 801094a:	1d3b      	adds	r3, r7, #4
 801094c:	6818      	ldr	r0, [r3, #0]
 801094e:	1d3b      	adds	r3, r7, #4
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010954:	f04f 32ff 	mov.w	r2, #4294967295
 8010958:	4619      	mov	r1, r3
 801095a:	f7fc ff3c 	bl	800d7d6 <fill_last_frag>
 801095e:	4603      	mov	r3, r0
 8010960:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				}
				if (res == FR_OK) {
 8010964:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8010968:	2b00      	cmp	r3, #0
 801096a:	f040 80ee 	bne.w	8010b4a <f_sync+0x2b2>
					INIT_NAMBUF(fs);
 801096e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010972:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8010976:	611a      	str	r2, [r3, #16]
 8010978:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 801097c:	f107 0208 	add.w	r2, r7, #8
 8010980:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010982:	1d3b      	adds	r3, r7, #4
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7fd fe77 	bl	800e680 <load_obj_dir>
 8010992:	4603      	mov	r3, r0
 8010994:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					if (res == FR_OK) {
 8010998:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 801099c:	2b00      	cmp	r3, #0
 801099e:	f040 80d4 	bne.w	8010b4a <f_sync+0x2b2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80109a2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80109a6:	695b      	ldr	r3, [r3, #20]
 80109a8:	3304      	adds	r3, #4
 80109aa:	781a      	ldrb	r2, [r3, #0]
 80109ac:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80109b0:	695b      	ldr	r3, [r3, #20]
 80109b2:	3304      	adds	r3, #4
 80109b4:	f042 0220 	orr.w	r2, r2, #32
 80109b8:	b2d2      	uxtb	r2, r2
 80109ba:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80109bc:	1d3b      	adds	r3, r7, #4
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	79da      	ldrb	r2, [r3, #7]
 80109c2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80109c6:	695b      	ldr	r3, [r3, #20]
 80109c8:	3321      	adds	r3, #33	; 0x21
 80109ca:	f042 0201 	orr.w	r2, r2, #1
 80109ce:	b2d2      	uxtb	r2, r2
 80109d0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80109d2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80109d6:	695b      	ldr	r3, [r3, #20]
 80109d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80109dc:	1d3b      	adds	r3, r7, #4
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	689b      	ldr	r3, [r3, #8]
 80109e2:	4619      	mov	r1, r3
 80109e4:	4610      	mov	r0, r2
 80109e6:	f7fb ffb6 	bl	800c956 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80109ea:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80109f4:	1d3b      	adds	r3, r7, #4
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80109fc:	461a      	mov	r2, r3
 80109fe:	4623      	mov	r3, r4
 8010a00:	4608      	mov	r0, r1
 8010a02:	f7fb ffd4 	bl	800c9ae <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010a06:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010a0a:	695b      	ldr	r3, [r3, #20]
 8010a0c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010a10:	1d3b      	adds	r3, r7, #4
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4623      	mov	r3, r4
 8010a1c:	4608      	mov	r0, r1
 8010a1e:	f7fb ffc6 	bl	800c9ae <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8010a22:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010a26:	695b      	ldr	r3, [r3, #20]
 8010a28:	330c      	adds	r3, #12
 8010a2a:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb ff91 	bl	800c956 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010a34:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010a38:	695b      	ldr	r3, [r3, #20]
 8010a3a:	3315      	adds	r3, #21
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010a40:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010a44:	695b      	ldr	r3, [r3, #20]
 8010a46:	3310      	adds	r3, #16
 8010a48:	2100      	movs	r1, #0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fb ff83 	bl	800c956 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010a50:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fd fe50 	bl	800e6fa <store_xdir>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
						if (res == FR_OK) {
 8010a60:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d170      	bne.n	8010b4a <f_sync+0x2b2>
							res = sync_fs(fs);
 8010a68:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fc fa81 	bl	800cf74 <sync_fs>
 8010a72:	4603      	mov	r3, r0
 8010a74:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010a78:	1d3b      	adds	r3, r7, #4
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	1d3b      	adds	r3, r7, #4
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010a8e:	e05c      	b.n	8010b4a <f_sync+0x2b2>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010a90:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	; 0x4b8
 8010a94:	1d3b      	adds	r3, r7, #4
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	4610      	mov	r0, r2
 8010a9e:	f7fc fa3b 	bl	800cf18 <move_window>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
				if (res == FR_OK) {
 8010aa8:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d14c      	bne.n	8010b4a <f_sync+0x2b2>
					dir = fp->dir_ptr;
 8010ab0:	1d3b      	adds	r3, r7, #4
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ab6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010aba:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8010abe:	330b      	adds	r3, #11
 8010ac0:	781a      	ldrb	r2, [r3, #0]
 8010ac2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8010ac6:	330b      	adds	r3, #11
 8010ac8:	f042 0220 	orr.w	r2, r2, #32
 8010acc:	b2d2      	uxtb	r2, r2
 8010ace:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010ad0:	1d3b      	adds	r3, r7, #4
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6818      	ldr	r0, [r3, #0]
 8010ad6:	1d3b      	adds	r3, r7, #4
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	461a      	mov	r2, r3
 8010ade:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	; 0x4bc
 8010ae2:	f7fd fa9a 	bl	800e01a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010ae6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8010aea:	f103 021c 	add.w	r2, r3, #28
 8010aee:	1d3b      	adds	r3, r7, #4
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8010af6:	4619      	mov	r1, r3
 8010af8:	4610      	mov	r0, r2
 8010afa:	f7fb ff2c 	bl	800c956 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010afe:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8010b02:	3316      	adds	r3, #22
 8010b04:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	; 0x4c0
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7fb ff24 	bl	800c956 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b0e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 8010b12:	3312      	adds	r3, #18
 8010b14:	2100      	movs	r1, #0
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fb ff02 	bl	800c920 <st_word>
					fs->wflag = 1;
 8010b1c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010b20:	2201      	movs	r2, #1
 8010b22:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b24:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	; 0x4b8
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f7fc fa23 	bl	800cf74 <sync_fs>
 8010b2e:	4603      	mov	r3, r0
 8010b30:	f887 34c7 	strb.w	r3, [r7, #1223]	; 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b34:	1d3b      	adds	r3, r7, #4
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	1d3b      	adds	r3, r7, #4
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b4a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	; 0x4c7
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f207 47cc 	addw	r7, r7, #1228	; 0x4cc
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd90      	pop	{r4, r7, pc}

08010b58 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7ff fe99 	bl	8010898 <f_sync>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b6a:	7bfb      	ldrb	r3, [r7, #15]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d118      	bne.n	8010ba2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f107 0208 	add.w	r2, r7, #8
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7ff f8b7 	bl	800fcec <validate>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10c      	bne.n	8010ba2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7fc f91f 	bl	800cdd0 <dec_lock>
 8010b92:	4603      	mov	r3, r0
 8010b94:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d102      	bne.n	8010ba2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010bac:	b480      	push	{r7}
 8010bae:	b087      	sub	sp, #28
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010bc2:	4b1f      	ldr	r3, [pc, #124]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bc4:	7a5b      	ldrb	r3, [r3, #9]
 8010bc6:	b2db      	uxtb	r3, r3
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d131      	bne.n	8010c30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010bcc:	4b1c      	ldr	r3, [pc, #112]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bce:	7a5b      	ldrb	r3, [r3, #9]
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	461a      	mov	r2, r3
 8010bd4:	4b1a      	ldr	r3, [pc, #104]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bd6:	2100      	movs	r1, #0
 8010bd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010bda:	4b19      	ldr	r3, [pc, #100]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bdc:	7a5b      	ldrb	r3, [r3, #9]
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4a17      	ldr	r2, [pc, #92]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010be2:	009b      	lsls	r3, r3, #2
 8010be4:	4413      	add	r3, r2
 8010be6:	68fa      	ldr	r2, [r7, #12]
 8010be8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010bea:	4b15      	ldr	r3, [pc, #84]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bec:	7a5b      	ldrb	r3, [r3, #9]
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4b13      	ldr	r3, [pc, #76]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bf4:	4413      	add	r3, r2
 8010bf6:	79fa      	ldrb	r2, [r7, #7]
 8010bf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010bfa:	4b11      	ldr	r3, [pc, #68]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010bfc:	7a5b      	ldrb	r3, [r3, #9]
 8010bfe:	b2db      	uxtb	r3, r3
 8010c00:	1c5a      	adds	r2, r3, #1
 8010c02:	b2d1      	uxtb	r1, r2
 8010c04:	4a0e      	ldr	r2, [pc, #56]	; (8010c40 <FATFS_LinkDriverEx+0x94>)
 8010c06:	7251      	strb	r1, [r2, #9]
 8010c08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c0a:	7dbb      	ldrb	r3, [r7, #22]
 8010c0c:	3330      	adds	r3, #48	; 0x30
 8010c0e:	b2da      	uxtb	r2, r3
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	3301      	adds	r3, #1
 8010c18:	223a      	movs	r2, #58	; 0x3a
 8010c1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	3302      	adds	r3, #2
 8010c20:	222f      	movs	r2, #47	; 0x2f
 8010c22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	3303      	adds	r3, #3
 8010c28:	2200      	movs	r2, #0
 8010c2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	371c      	adds	r7, #28
 8010c36:	46bd      	mov	sp, r7
 8010c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3c:	4770      	bx	lr
 8010c3e:	bf00      	nop
 8010c40:	240000dc 	.word	0x240000dc

08010c44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c4e:	2200      	movs	r2, #0
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff ffaa 	bl	8010bac <FATFS_LinkDriverEx>
 8010c58:	4603      	mov	r3, r0
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3708      	adds	r7, #8
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010c62:	b480      	push	{r7}
 8010c64:	b083      	sub	sp, #12
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	4603      	mov	r3, r0
 8010c6a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	021b      	lsls	r3, r3, #8
 8010c70:	b21a      	sxth	r2, r3
 8010c72:	88fb      	ldrh	r3, [r7, #6]
 8010c74:	0a1b      	lsrs	r3, r3, #8
 8010c76:	b29b      	uxth	r3, r3
 8010c78:	b21b      	sxth	r3, r3
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	b29b      	uxth	r3, r3
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b083      	sub	sp, #12
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	061a      	lsls	r2, r3, #24
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	021b      	lsls	r3, r3, #8
 8010c9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010ca0:	431a      	orrs	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	0a1b      	lsrs	r3, r3, #8
 8010ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010caa:	431a      	orrs	r2, r3
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	0e1b      	lsrs	r3, r3, #24
 8010cb0:	4313      	orrs	r3, r2
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
	...

08010cc0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010cc4:	4b20      	ldr	r3, [pc, #128]	; (8010d48 <dhcp_inc_pcb_refcount+0x88>)
 8010cc6:	781b      	ldrb	r3, [r3, #0]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d133      	bne.n	8010d34 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010ccc:	4b1f      	ldr	r3, [pc, #124]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d005      	beq.n	8010ce0 <dhcp_inc_pcb_refcount+0x20>
 8010cd4:	4b1e      	ldr	r3, [pc, #120]	; (8010d50 <dhcp_inc_pcb_refcount+0x90>)
 8010cd6:	22e5      	movs	r2, #229	; 0xe5
 8010cd8:	491e      	ldr	r1, [pc, #120]	; (8010d54 <dhcp_inc_pcb_refcount+0x94>)
 8010cda:	481f      	ldr	r0, [pc, #124]	; (8010d58 <dhcp_inc_pcb_refcount+0x98>)
 8010cdc:	f00b fe6c 	bl	801c9b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010ce0:	f00b fddc 	bl	801c89c <udp_new>
 8010ce4:	4602      	mov	r2, r0
 8010ce6:	4b19      	ldr	r3, [pc, #100]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010ce8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8010cea:	4b18      	ldr	r3, [pc, #96]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d102      	bne.n	8010cf8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf6:	e024      	b.n	8010d42 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010cf8:	4b14      	ldr	r3, [pc, #80]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	7a5a      	ldrb	r2, [r3, #9]
 8010cfe:	4b13      	ldr	r3, [pc, #76]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f042 0220 	orr.w	r2, r2, #32
 8010d06:	b2d2      	uxtb	r2, r2
 8010d08:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010d0a:	4b10      	ldr	r3, [pc, #64]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2244      	movs	r2, #68	; 0x44
 8010d10:	4912      	ldr	r1, [pc, #72]	; (8010d5c <dhcp_inc_pcb_refcount+0x9c>)
 8010d12:	4618      	mov	r0, r3
 8010d14:	f00b fc6a 	bl	801c5ec <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010d18:	4b0c      	ldr	r3, [pc, #48]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2243      	movs	r2, #67	; 0x43
 8010d1e:	490f      	ldr	r1, [pc, #60]	; (8010d5c <dhcp_inc_pcb_refcount+0x9c>)
 8010d20:	4618      	mov	r0, r3
 8010d22:	f00b fceb 	bl	801c6fc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010d26:	4b09      	ldr	r3, [pc, #36]	; (8010d4c <dhcp_inc_pcb_refcount+0x8c>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	490c      	ldr	r1, [pc, #48]	; (8010d60 <dhcp_inc_pcb_refcount+0xa0>)
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f00b fd52 	bl	801c7d8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010d34:	4b04      	ldr	r3, [pc, #16]	; (8010d48 <dhcp_inc_pcb_refcount+0x88>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	4b02      	ldr	r3, [pc, #8]	; (8010d48 <dhcp_inc_pcb_refcount+0x88>)
 8010d3e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	240000ec 	.word	0x240000ec
 8010d4c:	240000e8 	.word	0x240000e8
 8010d50:	0801d900 	.word	0x0801d900
 8010d54:	0801d960 	.word	0x0801d960
 8010d58:	0801d988 	.word	0x0801d988
 8010d5c:	08020d24 	.word	0x08020d24
 8010d60:	08012581 	.word	0x08012581

08010d64 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010d68:	4b0e      	ldr	r3, [pc, #56]	; (8010da4 <dhcp_dec_pcb_refcount+0x40>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d105      	bne.n	8010d7c <dhcp_dec_pcb_refcount+0x18>
 8010d70:	4b0d      	ldr	r3, [pc, #52]	; (8010da8 <dhcp_dec_pcb_refcount+0x44>)
 8010d72:	22ff      	movs	r2, #255	; 0xff
 8010d74:	490d      	ldr	r1, [pc, #52]	; (8010dac <dhcp_dec_pcb_refcount+0x48>)
 8010d76:	480e      	ldr	r0, [pc, #56]	; (8010db0 <dhcp_dec_pcb_refcount+0x4c>)
 8010d78:	f00b fe1e 	bl	801c9b8 <iprintf>
  dhcp_pcb_refcount--;
 8010d7c:	4b09      	ldr	r3, [pc, #36]	; (8010da4 <dhcp_dec_pcb_refcount+0x40>)
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	3b01      	subs	r3, #1
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	4b07      	ldr	r3, [pc, #28]	; (8010da4 <dhcp_dec_pcb_refcount+0x40>)
 8010d86:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010d88:	4b06      	ldr	r3, [pc, #24]	; (8010da4 <dhcp_dec_pcb_refcount+0x40>)
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d107      	bne.n	8010da0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010d90:	4b08      	ldr	r3, [pc, #32]	; (8010db4 <dhcp_dec_pcb_refcount+0x50>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4618      	mov	r0, r3
 8010d96:	f00b fd3f 	bl	801c818 <udp_remove>
    dhcp_pcb = NULL;
 8010d9a:	4b06      	ldr	r3, [pc, #24]	; (8010db4 <dhcp_dec_pcb_refcount+0x50>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	601a      	str	r2, [r3, #0]
  }
}
 8010da0:	bf00      	nop
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	240000ec 	.word	0x240000ec
 8010da8:	0801d900 	.word	0x0801d900
 8010dac:	0801d9b0 	.word	0x0801d9b0
 8010db0:	0801d988 	.word	0x0801d988
 8010db4:	240000e8 	.word	0x240000e8

08010db8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010db8:	b580      	push	{r7, lr}
 8010dba:	b084      	sub	sp, #16
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dc4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010dc6:	210c      	movs	r1, #12
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f001 f81b 	bl	8011e04 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010dce:	4b06      	ldr	r3, [pc, #24]	; (8010de8 <dhcp_handle_nak+0x30>)
 8010dd0:	4a05      	ldr	r2, [pc, #20]	; (8010de8 <dhcp_handle_nak+0x30>)
 8010dd2:	4905      	ldr	r1, [pc, #20]	; (8010de8 <dhcp_handle_nak+0x30>)
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f004 ff99 	bl	8015d0c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fc0e 	bl	80115fc <dhcp_discover>
}
 8010de0:	bf00      	nop
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	08020d24 	.word	0x08020d24

08010dec <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010dec:	b580      	push	{r7, lr}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010df8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010dfa:	2108      	movs	r1, #8
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f001 f801 	bl	8011e04 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	331c      	adds	r3, #28
 8010e06:	2200      	movs	r2, #0
 8010e08:	4619      	mov	r1, r3
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f002 fb00 	bl	8013410 <etharp_query>
 8010e10:	4603      	mov	r3, r0
 8010e12:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	799b      	ldrb	r3, [r3, #6]
 8010e18:	2bff      	cmp	r3, #255	; 0xff
 8010e1a:	d005      	beq.n	8010e28 <dhcp_check+0x3c>
    dhcp->tries++;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	799b      	ldrb	r3, [r3, #6]
 8010e20:	3301      	adds	r3, #1
 8010e22:	b2da      	uxtb	r2, r3
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010e28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010e2c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010e2e:	893b      	ldrh	r3, [r7, #8]
 8010e30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010e34:	4a06      	ldr	r2, [pc, #24]	; (8010e50 <dhcp_check+0x64>)
 8010e36:	fb82 1203 	smull	r1, r2, r2, r3
 8010e3a:	1152      	asrs	r2, r2, #5
 8010e3c:	17db      	asrs	r3, r3, #31
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010e46:	bf00      	nop
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	10624dd3 	.word	0x10624dd3

08010e54 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010e64:	4b0c      	ldr	r3, [pc, #48]	; (8010e98 <dhcp_handle_offer+0x44>)
 8010e66:	789b      	ldrb	r3, [r3, #2]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d011      	beq.n	8010e90 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010e72:	4b0a      	ldr	r3, [pc, #40]	; (8010e9c <dhcp_handle_offer+0x48>)
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ff ff08 	bl	8010c8c <lwip_htonl>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	691a      	ldr	r2, [r3, #16]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f000 f808 	bl	8010ea0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010e90:	bf00      	nop
 8010e92:	3710      	adds	r7, #16
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}
 8010e98:	2400474c 	.word	0x2400474c
 8010e9c:	24004754 	.word	0x24004754

08010ea0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010ea0:	b5b0      	push	{r4, r5, r7, lr}
 8010ea2:	b08a      	sub	sp, #40	; 0x28
 8010ea4:	af02      	add	r7, sp, #8
 8010ea6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d109      	bne.n	8010ec2 <dhcp_select+0x22>
 8010eae:	4b71      	ldr	r3, [pc, #452]	; (8011074 <dhcp_select+0x1d4>)
 8010eb0:	f240 1277 	movw	r2, #375	; 0x177
 8010eb4:	4970      	ldr	r1, [pc, #448]	; (8011078 <dhcp_select+0x1d8>)
 8010eb6:	4871      	ldr	r0, [pc, #452]	; (801107c <dhcp_select+0x1dc>)
 8010eb8:	f00b fd7e 	bl	801c9b8 <iprintf>
 8010ebc:	f06f 030f 	mvn.w	r3, #15
 8010ec0:	e0d3      	b.n	801106a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ec6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010ec8:	69bb      	ldr	r3, [r7, #24]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d109      	bne.n	8010ee2 <dhcp_select+0x42>
 8010ece:	4b69      	ldr	r3, [pc, #420]	; (8011074 <dhcp_select+0x1d4>)
 8010ed0:	f240 1279 	movw	r2, #377	; 0x179
 8010ed4:	496a      	ldr	r1, [pc, #424]	; (8011080 <dhcp_select+0x1e0>)
 8010ed6:	4869      	ldr	r0, [pc, #420]	; (801107c <dhcp_select+0x1dc>)
 8010ed8:	f00b fd6e 	bl	801c9b8 <iprintf>
 8010edc:	f06f 0305 	mvn.w	r3, #5
 8010ee0:	e0c3      	b.n	801106a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010ee2:	2101      	movs	r1, #1
 8010ee4:	69b8      	ldr	r0, [r7, #24]
 8010ee6:	f000 ff8d 	bl	8011e04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010eea:	f107 030c 	add.w	r3, r7, #12
 8010eee:	2203      	movs	r2, #3
 8010ef0:	69b9      	ldr	r1, [r7, #24]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f001 fc10 	bl	8012718 <dhcp_create_msg>
 8010ef8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010efa:	697b      	ldr	r3, [r7, #20]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	f000 8085 	beq.w	801100c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010f08:	89b8      	ldrh	r0, [r7, #12]
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010f10:	2302      	movs	r3, #2
 8010f12:	2239      	movs	r2, #57	; 0x39
 8010f14:	f000 ff90 	bl	8011e38 <dhcp_option>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010f1c:	89b8      	ldrh	r0, [r7, #12]
 8010f1e:	693b      	ldr	r3, [r7, #16]
 8010f20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f28:	461a      	mov	r2, r3
 8010f2a:	f000 ffdf 	bl	8011eec <dhcp_option_short>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010f32:	89b8      	ldrh	r0, [r7, #12]
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010f3a:	2304      	movs	r3, #4
 8010f3c:	2232      	movs	r2, #50	; 0x32
 8010f3e:	f000 ff7b 	bl	8011e38 <dhcp_option>
 8010f42:	4603      	mov	r3, r0
 8010f44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010f46:	89bc      	ldrh	r4, [r7, #12]
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010f4e:	69bb      	ldr	r3, [r7, #24]
 8010f50:	69db      	ldr	r3, [r3, #28]
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff fe9a 	bl	8010c8c <lwip_htonl>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	461a      	mov	r2, r3
 8010f5c:	4629      	mov	r1, r5
 8010f5e:	4620      	mov	r0, r4
 8010f60:	f000 fff6 	bl	8011f50 <dhcp_option_long>
 8010f64:	4603      	mov	r3, r0
 8010f66:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010f68:	89b8      	ldrh	r0, [r7, #12]
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010f70:	2304      	movs	r3, #4
 8010f72:	2236      	movs	r2, #54	; 0x36
 8010f74:	f000 ff60 	bl	8011e38 <dhcp_option>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010f7c:	89bc      	ldrh	r4, [r7, #12]
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010f84:	69bb      	ldr	r3, [r7, #24]
 8010f86:	699b      	ldr	r3, [r3, #24]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7ff fe7f 	bl	8010c8c <lwip_htonl>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	461a      	mov	r2, r3
 8010f92:	4629      	mov	r1, r5
 8010f94:	4620      	mov	r0, r4
 8010f96:	f000 ffdb 	bl	8011f50 <dhcp_option_long>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010f9e:	89b8      	ldrh	r0, [r7, #12]
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010fa6:	2303      	movs	r3, #3
 8010fa8:	2237      	movs	r2, #55	; 0x37
 8010faa:	f000 ff45 	bl	8011e38 <dhcp_option>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	77bb      	strb	r3, [r7, #30]
 8010fb6:	e00e      	b.n	8010fd6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010fb8:	89b8      	ldrh	r0, [r7, #12]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010fc0:	7fbb      	ldrb	r3, [r7, #30]
 8010fc2:	4a30      	ldr	r2, [pc, #192]	; (8011084 <dhcp_select+0x1e4>)
 8010fc4:	5cd3      	ldrb	r3, [r2, r3]
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	f000 ff6a 	bl	8011ea0 <dhcp_option_byte>
 8010fcc:	4603      	mov	r3, r0
 8010fce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010fd0:	7fbb      	ldrb	r3, [r7, #30]
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	77bb      	strb	r3, [r7, #30]
 8010fd6:	7fbb      	ldrb	r3, [r7, #30]
 8010fd8:	2b02      	cmp	r3, #2
 8010fda:	d9ed      	bls.n	8010fb8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010fdc:	89b8      	ldrh	r0, [r7, #12]
 8010fde:	693b      	ldr	r3, [r7, #16]
 8010fe0:	33f0      	adds	r3, #240	; 0xf0
 8010fe2:	697a      	ldr	r2, [r7, #20]
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	f001 fc6d 	bl	80128c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010fea:	4b27      	ldr	r3, [pc, #156]	; (8011088 <dhcp_select+0x1e8>)
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	4b27      	ldr	r3, [pc, #156]	; (801108c <dhcp_select+0x1ec>)
 8010ff0:	9301      	str	r3, [sp, #4]
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	9300      	str	r3, [sp, #0]
 8010ff6:	2343      	movs	r3, #67	; 0x43
 8010ff8:	4a25      	ldr	r2, [pc, #148]	; (8011090 <dhcp_select+0x1f0>)
 8010ffa:	6979      	ldr	r1, [r7, #20]
 8010ffc:	f00b fa10 	bl	801c420 <udp_sendto_if_src>
 8011000:	4603      	mov	r3, r0
 8011002:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011004:	6978      	ldr	r0, [r7, #20]
 8011006:	f005 fad5 	bl	80165b4 <pbuf_free>
 801100a:	e001      	b.n	8011010 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801100c:	23ff      	movs	r3, #255	; 0xff
 801100e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011010:	69bb      	ldr	r3, [r7, #24]
 8011012:	799b      	ldrb	r3, [r3, #6]
 8011014:	2bff      	cmp	r3, #255	; 0xff
 8011016:	d005      	beq.n	8011024 <dhcp_select+0x184>
    dhcp->tries++;
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	799b      	ldrb	r3, [r3, #6]
 801101c:	3301      	adds	r3, #1
 801101e:	b2da      	uxtb	r2, r3
 8011020:	69bb      	ldr	r3, [r7, #24]
 8011022:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011024:	69bb      	ldr	r3, [r7, #24]
 8011026:	799b      	ldrb	r3, [r3, #6]
 8011028:	2b05      	cmp	r3, #5
 801102a:	d80d      	bhi.n	8011048 <dhcp_select+0x1a8>
 801102c:	69bb      	ldr	r3, [r7, #24]
 801102e:	799b      	ldrb	r3, [r3, #6]
 8011030:	461a      	mov	r2, r3
 8011032:	2301      	movs	r3, #1
 8011034:	4093      	lsls	r3, r2
 8011036:	b29b      	uxth	r3, r3
 8011038:	461a      	mov	r2, r3
 801103a:	0152      	lsls	r2, r2, #5
 801103c:	1ad2      	subs	r2, r2, r3
 801103e:	0092      	lsls	r2, r2, #2
 8011040:	4413      	add	r3, r2
 8011042:	00db      	lsls	r3, r3, #3
 8011044:	b29b      	uxth	r3, r3
 8011046:	e001      	b.n	801104c <dhcp_select+0x1ac>
 8011048:	f64e 2360 	movw	r3, #60000	; 0xea60
 801104c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801104e:	89fb      	ldrh	r3, [r7, #14]
 8011050:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011054:	4a0f      	ldr	r2, [pc, #60]	; (8011094 <dhcp_select+0x1f4>)
 8011056:	fb82 1203 	smull	r1, r2, r2, r3
 801105a:	1152      	asrs	r2, r2, #5
 801105c:	17db      	asrs	r3, r3, #31
 801105e:	1ad3      	subs	r3, r2, r3
 8011060:	b29a      	uxth	r2, r3
 8011062:	69bb      	ldr	r3, [r7, #24]
 8011064:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011066:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801106a:	4618      	mov	r0, r3
 801106c:	3720      	adds	r7, #32
 801106e:	46bd      	mov	sp, r7
 8011070:	bdb0      	pop	{r4, r5, r7, pc}
 8011072:	bf00      	nop
 8011074:	0801d900 	.word	0x0801d900
 8011078:	0801d9d4 	.word	0x0801d9d4
 801107c:	0801d988 	.word	0x0801d988
 8011080:	0801d9f0 	.word	0x0801d9f0
 8011084:	24000010 	.word	0x24000010
 8011088:	240000e8 	.word	0x240000e8
 801108c:	08020d24 	.word	0x08020d24
 8011090:	08020d28 	.word	0x08020d28
 8011094:	10624dd3 	.word	0x10624dd3

08011098 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801109e:	4b27      	ldr	r3, [pc, #156]	; (801113c <dhcp_coarse_tmr+0xa4>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	607b      	str	r3, [r7, #4]
 80110a4:	e042      	b.n	801112c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110aa:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d039      	beq.n	8011126 <dhcp_coarse_tmr+0x8e>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	795b      	ldrb	r3, [r3, #5]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d035      	beq.n	8011126 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	8a9b      	ldrh	r3, [r3, #20]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d012      	beq.n	80110e8 <dhcp_coarse_tmr+0x50>
 80110c2:	683b      	ldr	r3, [r7, #0]
 80110c4:	8a5b      	ldrh	r3, [r3, #18]
 80110c6:	3301      	adds	r3, #1
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	825a      	strh	r2, [r3, #18]
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	8a5a      	ldrh	r2, [r3, #18]
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	8a9b      	ldrh	r3, [r3, #20]
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d106      	bne.n	80110e8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fdf8 	bl	8011cd0 <dhcp_release_and_stop>
        dhcp_start(netif);
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f96b 	bl	80113bc <dhcp_start>
 80110e6:	e01e      	b.n	8011126 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	8a1b      	ldrh	r3, [r3, #16]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d00b      	beq.n	8011108 <dhcp_coarse_tmr+0x70>
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	8a1b      	ldrh	r3, [r3, #16]
 80110f4:	1e5a      	subs	r2, r3, #1
 80110f6:	b291      	uxth	r1, r2
 80110f8:	683a      	ldr	r2, [r7, #0]
 80110fa:	8211      	strh	r1, [r2, #16]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d103      	bne.n	8011108 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 f8c7 	bl	8011294 <dhcp_t2_timeout>
 8011106:	e00e      	b.n	8011126 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	89db      	ldrh	r3, [r3, #14]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d00a      	beq.n	8011126 <dhcp_coarse_tmr+0x8e>
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	89db      	ldrh	r3, [r3, #14]
 8011114:	1e5a      	subs	r2, r3, #1
 8011116:	b291      	uxth	r1, r2
 8011118:	683a      	ldr	r2, [r7, #0]
 801111a:	81d1      	strh	r1, [r2, #14]
 801111c:	2b01      	cmp	r3, #1
 801111e:	d102      	bne.n	8011126 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011120:	6878      	ldr	r0, [r7, #4]
 8011122:	f000 f888 	bl	8011236 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	607b      	str	r3, [r7, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d1b9      	bne.n	80110a6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011132:	bf00      	nop
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	24007674 	.word	0x24007674

08011140 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011146:	4b16      	ldr	r3, [pc, #88]	; (80111a0 <dhcp_fine_tmr+0x60>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	607b      	str	r3, [r7, #4]
 801114c:	e020      	b.n	8011190 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011152:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d017      	beq.n	801118a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	891b      	ldrh	r3, [r3, #8]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d906      	bls.n	8011170 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	891b      	ldrh	r3, [r3, #8]
 8011166:	3b01      	subs	r3, #1
 8011168:	b29a      	uxth	r2, r3
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	811a      	strh	r2, [r3, #8]
 801116e:	e00c      	b.n	801118a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	891b      	ldrh	r3, [r3, #8]
 8011174:	2b01      	cmp	r3, #1
 8011176:	d108      	bne.n	801118a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	891b      	ldrh	r3, [r3, #8]
 801117c:	3b01      	subs	r3, #1
 801117e:	b29a      	uxth	r2, r3
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 f80d 	bl	80111a4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	607b      	str	r3, [r7, #4]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d1db      	bne.n	801114e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011196:	bf00      	nop
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
 801119e:	bf00      	nop
 80111a0:	24007674 	.word	0x24007674

080111a4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b084      	sub	sp, #16
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	795b      	ldrb	r3, [r3, #5]
 80111b6:	2b0c      	cmp	r3, #12
 80111b8:	d003      	beq.n	80111c2 <dhcp_timeout+0x1e>
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	795b      	ldrb	r3, [r3, #5]
 80111be:	2b06      	cmp	r3, #6
 80111c0:	d103      	bne.n	80111ca <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fa1a 	bl	80115fc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80111c8:	e031      	b.n	801122e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	795b      	ldrb	r3, [r3, #5]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d10e      	bne.n	80111f0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	799b      	ldrb	r3, [r3, #6]
 80111d6:	2b05      	cmp	r3, #5
 80111d8:	d803      	bhi.n	80111e2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80111da:	6878      	ldr	r0, [r7, #4]
 80111dc:	f7ff fe60 	bl	8010ea0 <dhcp_select>
}
 80111e0:	e025      	b.n	801122e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 fd74 	bl	8011cd0 <dhcp_release_and_stop>
      dhcp_start(netif);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 f8e7 	bl	80113bc <dhcp_start>
}
 80111ee:	e01e      	b.n	801122e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	795b      	ldrb	r3, [r3, #5]
 80111f4:	2b08      	cmp	r3, #8
 80111f6:	d10b      	bne.n	8011210 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	799b      	ldrb	r3, [r3, #6]
 80111fc:	2b01      	cmp	r3, #1
 80111fe:	d803      	bhi.n	8011208 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff fdf3 	bl	8010dec <dhcp_check>
}
 8011206:	e012      	b.n	801122e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 fa99 	bl	8011740 <dhcp_bind>
}
 801120e:	e00e      	b.n	801122e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	795b      	ldrb	r3, [r3, #5]
 8011214:	2b03      	cmp	r3, #3
 8011216:	d10a      	bne.n	801122e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	799b      	ldrb	r3, [r3, #6]
 801121c:	2b01      	cmp	r3, #1
 801121e:	d803      	bhi.n	8011228 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f000 fc9f 	bl	8011b64 <dhcp_reboot>
}
 8011226:	e002      	b.n	801122e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f9e7 	bl	80115fc <dhcp_discover>
}
 801122e:	bf00      	nop
 8011230:	3710      	adds	r7, #16
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b084      	sub	sp, #16
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011242:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	795b      	ldrb	r3, [r3, #5]
 8011248:	2b01      	cmp	r3, #1
 801124a:	d007      	beq.n	801125c <dhcp_t1_timeout+0x26>
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	795b      	ldrb	r3, [r3, #5]
 8011250:	2b0a      	cmp	r3, #10
 8011252:	d003      	beq.n	801125c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011258:	2b05      	cmp	r3, #5
 801125a:	d117      	bne.n	801128c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fb49 	bl	80118f4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	899b      	ldrh	r3, [r3, #12]
 8011266:	461a      	mov	r2, r3
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	8a5b      	ldrh	r3, [r3, #18]
 801126c:	1ad3      	subs	r3, r2, r3
 801126e:	2b01      	cmp	r3, #1
 8011270:	dd0c      	ble.n	801128c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	899b      	ldrh	r3, [r3, #12]
 8011276:	461a      	mov	r2, r3
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	8a5b      	ldrh	r3, [r3, #18]
 801127c:	1ad3      	subs	r3, r2, r3
 801127e:	2b00      	cmp	r3, #0
 8011280:	da00      	bge.n	8011284 <dhcp_t1_timeout+0x4e>
 8011282:	3301      	adds	r3, #1
 8011284:	105b      	asrs	r3, r3, #1
 8011286:	b29a      	uxth	r2, r3
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801128c:	bf00      	nop
 801128e:	3710      	adds	r7, #16
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	795b      	ldrb	r3, [r3, #5]
 80112a6:	2b01      	cmp	r3, #1
 80112a8:	d00b      	beq.n	80112c2 <dhcp_t2_timeout+0x2e>
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	795b      	ldrb	r3, [r3, #5]
 80112ae:	2b0a      	cmp	r3, #10
 80112b0:	d007      	beq.n	80112c2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80112b6:	2b05      	cmp	r3, #5
 80112b8:	d003      	beq.n	80112c2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	795b      	ldrb	r3, [r3, #5]
 80112be:	2b04      	cmp	r3, #4
 80112c0:	d117      	bne.n	80112f2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fbb2 	bl	8011a2c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	8a9b      	ldrh	r3, [r3, #20]
 80112cc:	461a      	mov	r2, r3
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	8a5b      	ldrh	r3, [r3, #18]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	2b01      	cmp	r3, #1
 80112d6:	dd0c      	ble.n	80112f2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	8a9b      	ldrh	r3, [r3, #20]
 80112dc:	461a      	mov	r2, r3
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	8a5b      	ldrh	r3, [r3, #18]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	da00      	bge.n	80112ea <dhcp_t2_timeout+0x56>
 80112e8:	3301      	adds	r3, #1
 80112ea:	105b      	asrs	r3, r3, #1
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80112f2:	bf00      	nop
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801130a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2200      	movs	r2, #0
 8011310:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011318:	4b26      	ldr	r3, [pc, #152]	; (80113b4 <dhcp_handle_ack+0xb8>)
 801131a:	78db      	ldrb	r3, [r3, #3]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d003      	beq.n	8011328 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011320:	4b25      	ldr	r3, [pc, #148]	; (80113b8 <dhcp_handle_ack+0xbc>)
 8011322:	68da      	ldr	r2, [r3, #12]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011328:	4b22      	ldr	r3, [pc, #136]	; (80113b4 <dhcp_handle_ack+0xb8>)
 801132a:	791b      	ldrb	r3, [r3, #4]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d004      	beq.n	801133a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011330:	4b21      	ldr	r3, [pc, #132]	; (80113b8 <dhcp_handle_ack+0xbc>)
 8011332:	691a      	ldr	r2, [r3, #16]
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	62da      	str	r2, [r3, #44]	; 0x2c
 8011338:	e004      	b.n	8011344 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133e:	085a      	lsrs	r2, r3, #1
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011344:	4b1b      	ldr	r3, [pc, #108]	; (80113b4 <dhcp_handle_ack+0xb8>)
 8011346:	795b      	ldrb	r3, [r3, #5]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d004      	beq.n	8011356 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801134c:	4b1a      	ldr	r3, [pc, #104]	; (80113b8 <dhcp_handle_ack+0xbc>)
 801134e:	695a      	ldr	r2, [r3, #20]
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	631a      	str	r2, [r3, #48]	; 0x30
 8011354:	e007      	b.n	8011366 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801135a:	4613      	mov	r3, r2
 801135c:	00db      	lsls	r3, r3, #3
 801135e:	1a9b      	subs	r3, r3, r2
 8011360:	08da      	lsrs	r2, r3, #3
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	691a      	ldr	r2, [r3, #16]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801136e:	4b11      	ldr	r3, [pc, #68]	; (80113b4 <dhcp_handle_ack+0xb8>)
 8011370:	799b      	ldrb	r3, [r3, #6]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d00b      	beq.n	801138e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011376:	4b10      	ldr	r3, [pc, #64]	; (80113b8 <dhcp_handle_ack+0xbc>)
 8011378:	699b      	ldr	r3, [r3, #24]
 801137a:	4618      	mov	r0, r3
 801137c:	f7ff fc86 	bl	8010c8c <lwip_htonl>
 8011380:	4602      	mov	r2, r0
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2201      	movs	r2, #1
 801138a:	71da      	strb	r2, [r3, #7]
 801138c:	e002      	b.n	8011394 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2200      	movs	r2, #0
 8011392:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011394:	4b07      	ldr	r3, [pc, #28]	; (80113b4 <dhcp_handle_ack+0xb8>)
 8011396:	79db      	ldrb	r3, [r3, #7]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d007      	beq.n	80113ac <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801139c:	4b06      	ldr	r3, [pc, #24]	; (80113b8 <dhcp_handle_ack+0xbc>)
 801139e:	69db      	ldr	r3, [r3, #28]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f7ff fc73 	bl	8010c8c <lwip_htonl>
 80113a6:	4602      	mov	r2, r0
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80113ac:	bf00      	nop
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	2400474c 	.word	0x2400474c
 80113b8:	24004754 	.word	0x24004754

080113bc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d109      	bne.n	80113de <dhcp_start+0x22>
 80113ca:	4b37      	ldr	r3, [pc, #220]	; (80114a8 <dhcp_start+0xec>)
 80113cc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80113d0:	4936      	ldr	r1, [pc, #216]	; (80114ac <dhcp_start+0xf0>)
 80113d2:	4837      	ldr	r0, [pc, #220]	; (80114b0 <dhcp_start+0xf4>)
 80113d4:	f00b faf0 	bl	801c9b8 <iprintf>
 80113d8:	f06f 030f 	mvn.w	r3, #15
 80113dc:	e060      	b.n	80114a0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80113e4:	f003 0301 	and.w	r3, r3, #1
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d109      	bne.n	8011400 <dhcp_start+0x44>
 80113ec:	4b2e      	ldr	r3, [pc, #184]	; (80114a8 <dhcp_start+0xec>)
 80113ee:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80113f2:	4930      	ldr	r1, [pc, #192]	; (80114b4 <dhcp_start+0xf8>)
 80113f4:	482e      	ldr	r0, [pc, #184]	; (80114b0 <dhcp_start+0xf4>)
 80113f6:	f00b fadf 	bl	801c9b8 <iprintf>
 80113fa:	f06f 030f 	mvn.w	r3, #15
 80113fe:	e04f      	b.n	80114a0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011404:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801140a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801140e:	d202      	bcs.n	8011416 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011410:	f04f 33ff 	mov.w	r3, #4294967295
 8011414:	e044      	b.n	80114a0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d10d      	bne.n	8011438 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801141c:	2034      	movs	r0, #52	; 0x34
 801141e:	f004 f919 	bl	8015654 <mem_malloc>
 8011422:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d102      	bne.n	8011430 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801142a:	f04f 33ff 	mov.w	r3, #4294967295
 801142e:	e037      	b.n	80114a0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	625a      	str	r2, [r3, #36]	; 0x24
 8011436:	e005      	b.n	8011444 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	791b      	ldrb	r3, [r3, #4]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011440:	f7ff fc90 	bl	8010d64 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011444:	2234      	movs	r2, #52	; 0x34
 8011446:	2100      	movs	r1, #0
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f00b faad 	bl	801c9a8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801144e:	f7ff fc37 	bl	8010cc0 <dhcp_inc_pcb_refcount>
 8011452:	4603      	mov	r3, r0
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <dhcp_start+0xa2>
    return ERR_MEM;
 8011458:	f04f 33ff 	mov.w	r3, #4294967295
 801145c:	e020      	b.n	80114a0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	2201      	movs	r2, #1
 8011462:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801146a:	f003 0304 	and.w	r3, r3, #4
 801146e:	2b00      	cmp	r3, #0
 8011470:	d105      	bne.n	801147e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011472:	2102      	movs	r1, #2
 8011474:	68f8      	ldr	r0, [r7, #12]
 8011476:	f000 fcc5 	bl	8011e04 <dhcp_set_state>
    return ERR_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	e010      	b.n	80114a0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801147e:	6878      	ldr	r0, [r7, #4]
 8011480:	f000 f8bc 	bl	80115fc <dhcp_discover>
 8011484:	4603      	mov	r3, r0
 8011486:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011488:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d005      	beq.n	801149c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f000 fc1d 	bl	8011cd0 <dhcp_release_and_stop>
    return ERR_MEM;
 8011496:	f04f 33ff 	mov.w	r3, #4294967295
 801149a:	e001      	b.n	80114a0 <dhcp_start+0xe4>
  }
  return result;
 801149c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3710      	adds	r7, #16
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	0801d900 	.word	0x0801d900
 80114ac:	0801da0c 	.word	0x0801da0c
 80114b0:	0801d988 	.word	0x0801d988
 80114b4:	0801da50 	.word	0x0801da50

080114b8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b084      	sub	sp, #16
 80114bc:	af00      	add	r7, sp, #0
 80114be:	6078      	str	r0, [r7, #4]
 80114c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d107      	bne.n	80114d8 <dhcp_arp_reply+0x20>
 80114c8:	4b0e      	ldr	r3, [pc, #56]	; (8011504 <dhcp_arp_reply+0x4c>)
 80114ca:	f240 328b 	movw	r2, #907	; 0x38b
 80114ce:	490e      	ldr	r1, [pc, #56]	; (8011508 <dhcp_arp_reply+0x50>)
 80114d0:	480e      	ldr	r0, [pc, #56]	; (801150c <dhcp_arp_reply+0x54>)
 80114d2:	f00b fa71 	bl	801c9b8 <iprintf>
 80114d6:	e012      	b.n	80114fe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d00c      	beq.n	80114fe <dhcp_arp_reply+0x46>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	795b      	ldrb	r3, [r3, #5]
 80114e8:	2b08      	cmp	r3, #8
 80114ea:	d108      	bne.n	80114fe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	681a      	ldr	r2, [r3, #0]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	69db      	ldr	r3, [r3, #28]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d102      	bne.n	80114fe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 f809 	bl	8011510 <dhcp_decline>
    }
  }
}
 80114fe:	3710      	adds	r7, #16
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	0801d900 	.word	0x0801d900
 8011508:	0801da0c 	.word	0x0801da0c
 801150c:	0801d988 	.word	0x0801d988

08011510 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8011510:	b5b0      	push	{r4, r5, r7, lr}
 8011512:	b08a      	sub	sp, #40	; 0x28
 8011514:	af02      	add	r7, sp, #8
 8011516:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801151e:	210c      	movs	r1, #12
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f000 fc6f 	bl	8011e04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011526:	f107 030c 	add.w	r3, r7, #12
 801152a:	2204      	movs	r2, #4
 801152c:	69b9      	ldr	r1, [r7, #24]
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f001 f8f2 	bl	8012718 <dhcp_create_msg>
 8011534:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d035      	beq.n	80115a8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011542:	89b8      	ldrh	r0, [r7, #12]
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801154a:	2304      	movs	r3, #4
 801154c:	2232      	movs	r2, #50	; 0x32
 801154e:	f000 fc73 	bl	8011e38 <dhcp_option>
 8011552:	4603      	mov	r3, r0
 8011554:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011556:	89bc      	ldrh	r4, [r7, #12]
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	69db      	ldr	r3, [r3, #28]
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff fb92 	bl	8010c8c <lwip_htonl>
 8011568:	4603      	mov	r3, r0
 801156a:	461a      	mov	r2, r3
 801156c:	4629      	mov	r1, r5
 801156e:	4620      	mov	r0, r4
 8011570:	f000 fcee 	bl	8011f50 <dhcp_option_long>
 8011574:	4603      	mov	r3, r0
 8011576:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011578:	89b8      	ldrh	r0, [r7, #12]
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	33f0      	adds	r3, #240	; 0xf0
 801157e:	697a      	ldr	r2, [r7, #20]
 8011580:	4619      	mov	r1, r3
 8011582:	f001 f99f 	bl	80128c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011586:	4b19      	ldr	r3, [pc, #100]	; (80115ec <dhcp_decline+0xdc>)
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	4b19      	ldr	r3, [pc, #100]	; (80115f0 <dhcp_decline+0xe0>)
 801158c:	9301      	str	r3, [sp, #4]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	9300      	str	r3, [sp, #0]
 8011592:	2343      	movs	r3, #67	; 0x43
 8011594:	4a17      	ldr	r2, [pc, #92]	; (80115f4 <dhcp_decline+0xe4>)
 8011596:	6979      	ldr	r1, [r7, #20]
 8011598:	f00a ff42 	bl	801c420 <udp_sendto_if_src>
 801159c:	4603      	mov	r3, r0
 801159e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80115a0:	6978      	ldr	r0, [r7, #20]
 80115a2:	f005 f807 	bl	80165b4 <pbuf_free>
 80115a6:	e001      	b.n	80115ac <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80115a8:	23ff      	movs	r3, #255	; 0xff
 80115aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	799b      	ldrb	r3, [r3, #6]
 80115b0:	2bff      	cmp	r3, #255	; 0xff
 80115b2:	d005      	beq.n	80115c0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	799b      	ldrb	r3, [r3, #6]
 80115b8:	3301      	adds	r3, #1
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80115c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80115c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80115c6:	89fb      	ldrh	r3, [r7, #14]
 80115c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80115cc:	4a0a      	ldr	r2, [pc, #40]	; (80115f8 <dhcp_decline+0xe8>)
 80115ce:	fb82 1203 	smull	r1, r2, r2, r3
 80115d2:	1152      	asrs	r2, r2, #5
 80115d4:	17db      	asrs	r3, r3, #31
 80115d6:	1ad3      	subs	r3, r2, r3
 80115d8:	b29a      	uxth	r2, r3
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80115de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3720      	adds	r7, #32
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bdb0      	pop	{r4, r5, r7, pc}
 80115ea:	bf00      	nop
 80115ec:	240000e8 	.word	0x240000e8
 80115f0:	08020d24 	.word	0x08020d24
 80115f4:	08020d28 	.word	0x08020d28
 80115f8:	10624dd3 	.word	0x10624dd3

080115fc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b08a      	sub	sp, #40	; 0x28
 8011600:	af02      	add	r7, sp, #8
 8011602:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011608:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801160a:	2300      	movs	r3, #0
 801160c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	2200      	movs	r2, #0
 8011612:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011614:	2106      	movs	r1, #6
 8011616:	69b8      	ldr	r0, [r7, #24]
 8011618:	f000 fbf4 	bl	8011e04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801161c:	f107 0308 	add.w	r3, r7, #8
 8011620:	2201      	movs	r2, #1
 8011622:	69b9      	ldr	r1, [r7, #24]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f001 f877 	bl	8012718 <dhcp_create_msg>
 801162a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d04b      	beq.n	80116ca <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	685b      	ldr	r3, [r3, #4]
 8011636:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011638:	8938      	ldrh	r0, [r7, #8]
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011640:	2302      	movs	r3, #2
 8011642:	2239      	movs	r2, #57	; 0x39
 8011644:	f000 fbf8 	bl	8011e38 <dhcp_option>
 8011648:	4603      	mov	r3, r0
 801164a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801164c:	8938      	ldrh	r0, [r7, #8]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011658:	461a      	mov	r2, r3
 801165a:	f000 fc47 	bl	8011eec <dhcp_option_short>
 801165e:	4603      	mov	r3, r0
 8011660:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011662:	8938      	ldrh	r0, [r7, #8]
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801166a:	2303      	movs	r3, #3
 801166c:	2237      	movs	r2, #55	; 0x37
 801166e:	f000 fbe3 	bl	8011e38 <dhcp_option>
 8011672:	4603      	mov	r3, r0
 8011674:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011676:	2300      	movs	r3, #0
 8011678:	77fb      	strb	r3, [r7, #31]
 801167a:	e00e      	b.n	801169a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801167c:	8938      	ldrh	r0, [r7, #8]
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011684:	7ffb      	ldrb	r3, [r7, #31]
 8011686:	4a29      	ldr	r2, [pc, #164]	; (801172c <dhcp_discover+0x130>)
 8011688:	5cd3      	ldrb	r3, [r2, r3]
 801168a:	461a      	mov	r2, r3
 801168c:	f000 fc08 	bl	8011ea0 <dhcp_option_byte>
 8011690:	4603      	mov	r3, r0
 8011692:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011694:	7ffb      	ldrb	r3, [r7, #31]
 8011696:	3301      	adds	r3, #1
 8011698:	77fb      	strb	r3, [r7, #31]
 801169a:	7ffb      	ldrb	r3, [r7, #31]
 801169c:	2b02      	cmp	r3, #2
 801169e:	d9ed      	bls.n	801167c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80116a0:	8938      	ldrh	r0, [r7, #8]
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	33f0      	adds	r3, #240	; 0xf0
 80116a6:	693a      	ldr	r2, [r7, #16]
 80116a8:	4619      	mov	r1, r3
 80116aa:	f001 f90b 	bl	80128c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80116ae:	4b20      	ldr	r3, [pc, #128]	; (8011730 <dhcp_discover+0x134>)
 80116b0:	6818      	ldr	r0, [r3, #0]
 80116b2:	4b20      	ldr	r3, [pc, #128]	; (8011734 <dhcp_discover+0x138>)
 80116b4:	9301      	str	r3, [sp, #4]
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	9300      	str	r3, [sp, #0]
 80116ba:	2343      	movs	r3, #67	; 0x43
 80116bc:	4a1e      	ldr	r2, [pc, #120]	; (8011738 <dhcp_discover+0x13c>)
 80116be:	6939      	ldr	r1, [r7, #16]
 80116c0:	f00a feae 	bl	801c420 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80116c4:	6938      	ldr	r0, [r7, #16]
 80116c6:	f004 ff75 	bl	80165b4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	799b      	ldrb	r3, [r3, #6]
 80116ce:	2bff      	cmp	r3, #255	; 0xff
 80116d0:	d005      	beq.n	80116de <dhcp_discover+0xe2>
    dhcp->tries++;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	799b      	ldrb	r3, [r3, #6]
 80116d6:	3301      	adds	r3, #1
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	799b      	ldrb	r3, [r3, #6]
 80116e2:	2b05      	cmp	r3, #5
 80116e4:	d80d      	bhi.n	8011702 <dhcp_discover+0x106>
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	799b      	ldrb	r3, [r3, #6]
 80116ea:	461a      	mov	r2, r3
 80116ec:	2301      	movs	r3, #1
 80116ee:	4093      	lsls	r3, r2
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	461a      	mov	r2, r3
 80116f4:	0152      	lsls	r2, r2, #5
 80116f6:	1ad2      	subs	r2, r2, r3
 80116f8:	0092      	lsls	r2, r2, #2
 80116fa:	4413      	add	r3, r2
 80116fc:	00db      	lsls	r3, r3, #3
 80116fe:	b29b      	uxth	r3, r3
 8011700:	e001      	b.n	8011706 <dhcp_discover+0x10a>
 8011702:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011706:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011708:	897b      	ldrh	r3, [r7, #10]
 801170a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801170e:	4a0b      	ldr	r2, [pc, #44]	; (801173c <dhcp_discover+0x140>)
 8011710:	fb82 1203 	smull	r1, r2, r2, r3
 8011714:	1152      	asrs	r2, r2, #5
 8011716:	17db      	asrs	r3, r3, #31
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	b29a      	uxth	r2, r3
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011720:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011724:	4618      	mov	r0, r3
 8011726:	3720      	adds	r7, #32
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	24000010 	.word	0x24000010
 8011730:	240000e8 	.word	0x240000e8
 8011734:	08020d24 	.word	0x08020d24
 8011738:	08020d28 	.word	0x08020d28
 801173c:	10624dd3 	.word	0x10624dd3

08011740 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d107      	bne.n	801175e <dhcp_bind+0x1e>
 801174e:	4b64      	ldr	r3, [pc, #400]	; (80118e0 <dhcp_bind+0x1a0>)
 8011750:	f240 4215 	movw	r2, #1045	; 0x415
 8011754:	4963      	ldr	r1, [pc, #396]	; (80118e4 <dhcp_bind+0x1a4>)
 8011756:	4864      	ldr	r0, [pc, #400]	; (80118e8 <dhcp_bind+0x1a8>)
 8011758:	f00b f92e 	bl	801c9b8 <iprintf>
 801175c:	e0bc      	b.n	80118d8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011762:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d107      	bne.n	801177a <dhcp_bind+0x3a>
 801176a:	4b5d      	ldr	r3, [pc, #372]	; (80118e0 <dhcp_bind+0x1a0>)
 801176c:	f240 4217 	movw	r2, #1047	; 0x417
 8011770:	495e      	ldr	r1, [pc, #376]	; (80118ec <dhcp_bind+0x1ac>)
 8011772:	485d      	ldr	r0, [pc, #372]	; (80118e8 <dhcp_bind+0x1a8>)
 8011774:	f00b f920 	bl	801c9b8 <iprintf>
 8011778:	e0ae      	b.n	80118d8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	2200      	movs	r2, #0
 801177e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011788:	d019      	beq.n	80117be <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801178e:	331e      	adds	r3, #30
 8011790:	4a57      	ldr	r2, [pc, #348]	; (80118f0 <dhcp_bind+0x1b0>)
 8011792:	fba2 2303 	umull	r2, r3, r2, r3
 8011796:	095b      	lsrs	r3, r3, #5
 8011798:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117a0:	d302      	bcc.n	80117a8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80117a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80117a8:	69fb      	ldr	r3, [r7, #28]
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80117b0:	69bb      	ldr	r3, [r7, #24]
 80117b2:	8a9b      	ldrh	r3, [r3, #20]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d102      	bne.n	80117be <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	2201      	movs	r2, #1
 80117bc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c6:	d01d      	beq.n	8011804 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80117c8:	69bb      	ldr	r3, [r7, #24]
 80117ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117cc:	331e      	adds	r3, #30
 80117ce:	4a48      	ldr	r2, [pc, #288]	; (80118f0 <dhcp_bind+0x1b0>)
 80117d0:	fba2 2303 	umull	r2, r3, r2, r3
 80117d4:	095b      	lsrs	r3, r3, #5
 80117d6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80117d8:	69fb      	ldr	r3, [r7, #28]
 80117da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117de:	d302      	bcc.n	80117e6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80117e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80117e4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80117ee:	69bb      	ldr	r3, [r7, #24]
 80117f0:	895b      	ldrh	r3, [r3, #10]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d102      	bne.n	80117fc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	2201      	movs	r2, #1
 80117fa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	895a      	ldrh	r2, [r3, #10]
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801180c:	d01d      	beq.n	801184a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011812:	331e      	adds	r3, #30
 8011814:	4a36      	ldr	r2, [pc, #216]	; (80118f0 <dhcp_bind+0x1b0>)
 8011816:	fba2 2303 	umull	r2, r3, r2, r3
 801181a:	095b      	lsrs	r3, r3, #5
 801181c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011824:	d302      	bcc.n	801182c <dhcp_bind+0xec>
      timeout = 0xffff;
 8011826:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801182a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801182c:	69fb      	ldr	r3, [r7, #28]
 801182e:	b29a      	uxth	r2, r3
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	899b      	ldrh	r3, [r3, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d102      	bne.n	8011842 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801183c:	69bb      	ldr	r3, [r7, #24]
 801183e:	2201      	movs	r2, #1
 8011840:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8011842:	69bb      	ldr	r3, [r7, #24]
 8011844:	899a      	ldrh	r2, [r3, #12]
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801184a:	69bb      	ldr	r3, [r7, #24]
 801184c:	895a      	ldrh	r2, [r3, #10]
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	899b      	ldrh	r3, [r3, #12]
 8011852:	429a      	cmp	r2, r3
 8011854:	d306      	bcc.n	8011864 <dhcp_bind+0x124>
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	899b      	ldrh	r3, [r3, #12]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d002      	beq.n	8011864 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	2200      	movs	r2, #0
 8011862:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	79db      	ldrb	r3, [r3, #7]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d003      	beq.n	8011874 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	6a1b      	ldr	r3, [r3, #32]
 8011870:	613b      	str	r3, [r7, #16]
 8011872:	e014      	b.n	801189e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011874:	69bb      	ldr	r3, [r7, #24]
 8011876:	331c      	adds	r3, #28
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801187c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011880:	2b00      	cmp	r3, #0
 8011882:	db02      	blt.n	801188a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011884:	23ff      	movs	r3, #255	; 0xff
 8011886:	613b      	str	r3, [r7, #16]
 8011888:	e009      	b.n	801189e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801188a:	7dfb      	ldrb	r3, [r7, #23]
 801188c:	2bbf      	cmp	r3, #191	; 0xbf
 801188e:	d903      	bls.n	8011898 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8011890:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011894:	613b      	str	r3, [r7, #16]
 8011896:	e002      	b.n	801189e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801189c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d108      	bne.n	80118bc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	69da      	ldr	r2, [r3, #28]
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	4013      	ands	r3, r2
 80118b2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80118ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80118bc:	210a      	movs	r1, #10
 80118be:	69b8      	ldr	r0, [r7, #24]
 80118c0:	f000 faa0 	bl	8011e04 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80118c4:	69bb      	ldr	r3, [r7, #24]
 80118c6:	f103 011c 	add.w	r1, r3, #28
 80118ca:	f107 030c 	add.w	r3, r7, #12
 80118ce:	f107 0210 	add.w	r2, r7, #16
 80118d2:	6878      	ldr	r0, [r7, #4]
 80118d4:	f004 fa1a 	bl	8015d0c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80118d8:	3720      	adds	r7, #32
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	0801d900 	.word	0x0801d900
 80118e4:	0801da88 	.word	0x0801da88
 80118e8:	0801d988 	.word	0x0801d988
 80118ec:	0801daa4 	.word	0x0801daa4
 80118f0:	88888889 	.word	0x88888889

080118f4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b08a      	sub	sp, #40	; 0x28
 80118f8:	af02      	add	r7, sp, #8
 80118fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011900:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8011902:	2105      	movs	r1, #5
 8011904:	69b8      	ldr	r0, [r7, #24]
 8011906:	f000 fa7d 	bl	8011e04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801190a:	f107 030c 	add.w	r3, r7, #12
 801190e:	2203      	movs	r2, #3
 8011910:	69b9      	ldr	r1, [r7, #24]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 ff00 	bl	8012718 <dhcp_create_msg>
 8011918:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d04e      	beq.n	80119be <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011926:	89b8      	ldrh	r0, [r7, #12]
 8011928:	693b      	ldr	r3, [r7, #16]
 801192a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801192e:	2302      	movs	r3, #2
 8011930:	2239      	movs	r2, #57	; 0x39
 8011932:	f000 fa81 	bl	8011e38 <dhcp_option>
 8011936:	4603      	mov	r3, r0
 8011938:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801193a:	89b8      	ldrh	r0, [r7, #12]
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011946:	461a      	mov	r2, r3
 8011948:	f000 fad0 	bl	8011eec <dhcp_option_short>
 801194c:	4603      	mov	r3, r0
 801194e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011950:	89b8      	ldrh	r0, [r7, #12]
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011958:	2303      	movs	r3, #3
 801195a:	2237      	movs	r2, #55	; 0x37
 801195c:	f000 fa6c 	bl	8011e38 <dhcp_option>
 8011960:	4603      	mov	r3, r0
 8011962:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011964:	2300      	movs	r3, #0
 8011966:	77bb      	strb	r3, [r7, #30]
 8011968:	e00e      	b.n	8011988 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801196a:	89b8      	ldrh	r0, [r7, #12]
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011972:	7fbb      	ldrb	r3, [r7, #30]
 8011974:	4a2a      	ldr	r2, [pc, #168]	; (8011a20 <dhcp_renew+0x12c>)
 8011976:	5cd3      	ldrb	r3, [r2, r3]
 8011978:	461a      	mov	r2, r3
 801197a:	f000 fa91 	bl	8011ea0 <dhcp_option_byte>
 801197e:	4603      	mov	r3, r0
 8011980:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011982:	7fbb      	ldrb	r3, [r7, #30]
 8011984:	3301      	adds	r3, #1
 8011986:	77bb      	strb	r3, [r7, #30]
 8011988:	7fbb      	ldrb	r3, [r7, #30]
 801198a:	2b02      	cmp	r3, #2
 801198c:	d9ed      	bls.n	801196a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801198e:	89b8      	ldrh	r0, [r7, #12]
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	33f0      	adds	r3, #240	; 0xf0
 8011994:	697a      	ldr	r2, [r7, #20]
 8011996:	4619      	mov	r1, r3
 8011998:	f000 ff94 	bl	80128c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801199c:	4b21      	ldr	r3, [pc, #132]	; (8011a24 <dhcp_renew+0x130>)
 801199e:	6818      	ldr	r0, [r3, #0]
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	f103 0218 	add.w	r2, r3, #24
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	9300      	str	r3, [sp, #0]
 80119aa:	2343      	movs	r3, #67	; 0x43
 80119ac:	6979      	ldr	r1, [r7, #20]
 80119ae:	f00a fcc3 	bl	801c338 <udp_sendto_if>
 80119b2:	4603      	mov	r3, r0
 80119b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80119b6:	6978      	ldr	r0, [r7, #20]
 80119b8:	f004 fdfc 	bl	80165b4 <pbuf_free>
 80119bc:	e001      	b.n	80119c2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80119be:	23ff      	movs	r3, #255	; 0xff
 80119c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	799b      	ldrb	r3, [r3, #6]
 80119c6:	2bff      	cmp	r3, #255	; 0xff
 80119c8:	d005      	beq.n	80119d6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80119ca:	69bb      	ldr	r3, [r7, #24]
 80119cc:	799b      	ldrb	r3, [r3, #6]
 80119ce:	3301      	adds	r3, #1
 80119d0:	b2da      	uxtb	r2, r3
 80119d2:	69bb      	ldr	r3, [r7, #24]
 80119d4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	799b      	ldrb	r3, [r3, #6]
 80119da:	2b09      	cmp	r3, #9
 80119dc:	d80a      	bhi.n	80119f4 <dhcp_renew+0x100>
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	799b      	ldrb	r3, [r3, #6]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	461a      	mov	r2, r3
 80119e6:	0152      	lsls	r2, r2, #5
 80119e8:	1ad2      	subs	r2, r2, r3
 80119ea:	0092      	lsls	r2, r2, #2
 80119ec:	4413      	add	r3, r2
 80119ee:	011b      	lsls	r3, r3, #4
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	e001      	b.n	80119f8 <dhcp_renew+0x104>
 80119f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80119f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80119fa:	89fb      	ldrh	r3, [r7, #14]
 80119fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011a00:	4a09      	ldr	r2, [pc, #36]	; (8011a28 <dhcp_renew+0x134>)
 8011a02:	fb82 1203 	smull	r1, r2, r2, r3
 8011a06:	1152      	asrs	r2, r2, #5
 8011a08:	17db      	asrs	r3, r3, #31
 8011a0a:	1ad3      	subs	r3, r2, r3
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3720      	adds	r7, #32
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}
 8011a1e:	bf00      	nop
 8011a20:	24000010 	.word	0x24000010
 8011a24:	240000e8 	.word	0x240000e8
 8011a28:	10624dd3 	.word	0x10624dd3

08011a2c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b08a      	sub	sp, #40	; 0x28
 8011a30:	af02      	add	r7, sp, #8
 8011a32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a38:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011a3a:	2104      	movs	r1, #4
 8011a3c:	69b8      	ldr	r0, [r7, #24]
 8011a3e:	f000 f9e1 	bl	8011e04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011a42:	f107 030c 	add.w	r3, r7, #12
 8011a46:	2203      	movs	r2, #3
 8011a48:	69b9      	ldr	r1, [r7, #24]
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 fe64 	bl	8012718 <dhcp_create_msg>
 8011a50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d04c      	beq.n	8011af2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011a58:	697b      	ldr	r3, [r7, #20]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011a5e:	89b8      	ldrh	r0, [r7, #12]
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a66:	2302      	movs	r3, #2
 8011a68:	2239      	movs	r2, #57	; 0x39
 8011a6a:	f000 f9e5 	bl	8011e38 <dhcp_option>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011a72:	89b8      	ldrh	r0, [r7, #12]
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a7e:	461a      	mov	r2, r3
 8011a80:	f000 fa34 	bl	8011eec <dhcp_option_short>
 8011a84:	4603      	mov	r3, r0
 8011a86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011a88:	89b8      	ldrh	r0, [r7, #12]
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a90:	2303      	movs	r3, #3
 8011a92:	2237      	movs	r2, #55	; 0x37
 8011a94:	f000 f9d0 	bl	8011e38 <dhcp_option>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	77bb      	strb	r3, [r7, #30]
 8011aa0:	e00e      	b.n	8011ac0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011aa2:	89b8      	ldrh	r0, [r7, #12]
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011aaa:	7fbb      	ldrb	r3, [r7, #30]
 8011aac:	4a29      	ldr	r2, [pc, #164]	; (8011b54 <dhcp_rebind+0x128>)
 8011aae:	5cd3      	ldrb	r3, [r2, r3]
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	f000 f9f5 	bl	8011ea0 <dhcp_option_byte>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011aba:	7fbb      	ldrb	r3, [r7, #30]
 8011abc:	3301      	adds	r3, #1
 8011abe:	77bb      	strb	r3, [r7, #30]
 8011ac0:	7fbb      	ldrb	r3, [r7, #30]
 8011ac2:	2b02      	cmp	r3, #2
 8011ac4:	d9ed      	bls.n	8011aa2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011ac6:	89b8      	ldrh	r0, [r7, #12]
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	33f0      	adds	r3, #240	; 0xf0
 8011acc:	697a      	ldr	r2, [r7, #20]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	f000 fef8 	bl	80128c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011ad4:	4b20      	ldr	r3, [pc, #128]	; (8011b58 <dhcp_rebind+0x12c>)
 8011ad6:	6818      	ldr	r0, [r3, #0]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	9300      	str	r3, [sp, #0]
 8011adc:	2343      	movs	r3, #67	; 0x43
 8011ade:	4a1f      	ldr	r2, [pc, #124]	; (8011b5c <dhcp_rebind+0x130>)
 8011ae0:	6979      	ldr	r1, [r7, #20]
 8011ae2:	f00a fc29 	bl	801c338 <udp_sendto_if>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011aea:	6978      	ldr	r0, [r7, #20]
 8011aec:	f004 fd62 	bl	80165b4 <pbuf_free>
 8011af0:	e001      	b.n	8011af6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011af2:	23ff      	movs	r3, #255	; 0xff
 8011af4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	799b      	ldrb	r3, [r3, #6]
 8011afa:	2bff      	cmp	r3, #255	; 0xff
 8011afc:	d005      	beq.n	8011b0a <dhcp_rebind+0xde>
    dhcp->tries++;
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	799b      	ldrb	r3, [r3, #6]
 8011b02:	3301      	adds	r3, #1
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011b0a:	69bb      	ldr	r3, [r7, #24]
 8011b0c:	799b      	ldrb	r3, [r3, #6]
 8011b0e:	2b09      	cmp	r3, #9
 8011b10:	d80a      	bhi.n	8011b28 <dhcp_rebind+0xfc>
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	799b      	ldrb	r3, [r3, #6]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	461a      	mov	r2, r3
 8011b1a:	0152      	lsls	r2, r2, #5
 8011b1c:	1ad2      	subs	r2, r2, r3
 8011b1e:	0092      	lsls	r2, r2, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	e001      	b.n	8011b2c <dhcp_rebind+0x100>
 8011b28:	f242 7310 	movw	r3, #10000	; 0x2710
 8011b2c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b2e:	89fb      	ldrh	r3, [r7, #14]
 8011b30:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011b34:	4a0a      	ldr	r2, [pc, #40]	; (8011b60 <dhcp_rebind+0x134>)
 8011b36:	fb82 1203 	smull	r1, r2, r2, r3
 8011b3a:	1152      	asrs	r2, r2, #5
 8011b3c:	17db      	asrs	r3, r3, #31
 8011b3e:	1ad3      	subs	r3, r2, r3
 8011b40:	b29a      	uxth	r2, r3
 8011b42:	69bb      	ldr	r3, [r7, #24]
 8011b44:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011b46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3720      	adds	r7, #32
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	24000010 	.word	0x24000010
 8011b58:	240000e8 	.word	0x240000e8
 8011b5c:	08020d28 	.word	0x08020d28
 8011b60:	10624dd3 	.word	0x10624dd3

08011b64 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011b64:	b5b0      	push	{r4, r5, r7, lr}
 8011b66:	b08a      	sub	sp, #40	; 0x28
 8011b68:	af02      	add	r7, sp, #8
 8011b6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b70:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8011b72:	2103      	movs	r1, #3
 8011b74:	69b8      	ldr	r0, [r7, #24]
 8011b76:	f000 f945 	bl	8011e04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011b7a:	f107 030c 	add.w	r3, r7, #12
 8011b7e:	2203      	movs	r2, #3
 8011b80:	69b9      	ldr	r1, [r7, #24]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f000 fdc8 	bl	8012718 <dhcp_create_msg>
 8011b88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d066      	beq.n	8011c5e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011b96:	89b8      	ldrh	r0, [r7, #12]
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b9e:	2302      	movs	r3, #2
 8011ba0:	2239      	movs	r2, #57	; 0x39
 8011ba2:	f000 f949 	bl	8011e38 <dhcp_option>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8011baa:	89b8      	ldrh	r0, [r7, #12]
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	33f0      	adds	r3, #240	; 0xf0
 8011bb0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	f000 f999 	bl	8011eec <dhcp_option_short>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011bbe:	89b8      	ldrh	r0, [r7, #12]
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bc6:	2304      	movs	r3, #4
 8011bc8:	2232      	movs	r2, #50	; 0x32
 8011bca:	f000 f935 	bl	8011e38 <dhcp_option>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011bd2:	89bc      	ldrh	r4, [r7, #12]
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	69db      	ldr	r3, [r3, #28]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff f854 	bl	8010c8c <lwip_htonl>
 8011be4:	4603      	mov	r3, r0
 8011be6:	461a      	mov	r2, r3
 8011be8:	4629      	mov	r1, r5
 8011bea:	4620      	mov	r0, r4
 8011bec:	f000 f9b0 	bl	8011f50 <dhcp_option_long>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011bf4:	89b8      	ldrh	r0, [r7, #12]
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011bfc:	2303      	movs	r3, #3
 8011bfe:	2237      	movs	r2, #55	; 0x37
 8011c00:	f000 f91a 	bl	8011e38 <dhcp_option>
 8011c04:	4603      	mov	r3, r0
 8011c06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c08:	2300      	movs	r3, #0
 8011c0a:	77bb      	strb	r3, [r7, #30]
 8011c0c:	e00e      	b.n	8011c2c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011c0e:	89b8      	ldrh	r0, [r7, #12]
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011c16:	7fbb      	ldrb	r3, [r7, #30]
 8011c18:	4a29      	ldr	r2, [pc, #164]	; (8011cc0 <dhcp_reboot+0x15c>)
 8011c1a:	5cd3      	ldrb	r3, [r2, r3]
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	f000 f93f 	bl	8011ea0 <dhcp_option_byte>
 8011c22:	4603      	mov	r3, r0
 8011c24:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011c26:	7fbb      	ldrb	r3, [r7, #30]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	77bb      	strb	r3, [r7, #30]
 8011c2c:	7fbb      	ldrb	r3, [r7, #30]
 8011c2e:	2b02      	cmp	r3, #2
 8011c30:	d9ed      	bls.n	8011c0e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011c32:	89b8      	ldrh	r0, [r7, #12]
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	33f0      	adds	r3, #240	; 0xf0
 8011c38:	697a      	ldr	r2, [r7, #20]
 8011c3a:	4619      	mov	r1, r3
 8011c3c:	f000 fe42 	bl	80128c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011c40:	4b20      	ldr	r3, [pc, #128]	; (8011cc4 <dhcp_reboot+0x160>)
 8011c42:	6818      	ldr	r0, [r3, #0]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	2343      	movs	r3, #67	; 0x43
 8011c4a:	4a1f      	ldr	r2, [pc, #124]	; (8011cc8 <dhcp_reboot+0x164>)
 8011c4c:	6979      	ldr	r1, [r7, #20]
 8011c4e:	f00a fb73 	bl	801c338 <udp_sendto_if>
 8011c52:	4603      	mov	r3, r0
 8011c54:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011c56:	6978      	ldr	r0, [r7, #20]
 8011c58:	f004 fcac 	bl	80165b4 <pbuf_free>
 8011c5c:	e001      	b.n	8011c62 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011c5e:	23ff      	movs	r3, #255	; 0xff
 8011c60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	799b      	ldrb	r3, [r3, #6]
 8011c66:	2bff      	cmp	r3, #255	; 0xff
 8011c68:	d005      	beq.n	8011c76 <dhcp_reboot+0x112>
    dhcp->tries++;
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	799b      	ldrb	r3, [r3, #6]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	799b      	ldrb	r3, [r3, #6]
 8011c7a:	2b09      	cmp	r3, #9
 8011c7c:	d80a      	bhi.n	8011c94 <dhcp_reboot+0x130>
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	799b      	ldrb	r3, [r3, #6]
 8011c82:	b29b      	uxth	r3, r3
 8011c84:	461a      	mov	r2, r3
 8011c86:	0152      	lsls	r2, r2, #5
 8011c88:	1ad2      	subs	r2, r2, r3
 8011c8a:	0092      	lsls	r2, r2, #2
 8011c8c:	4413      	add	r3, r2
 8011c8e:	00db      	lsls	r3, r3, #3
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	e001      	b.n	8011c98 <dhcp_reboot+0x134>
 8011c94:	f242 7310 	movw	r3, #10000	; 0x2710
 8011c98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011c9a:	89fb      	ldrh	r3, [r7, #14]
 8011c9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011ca0:	4a0a      	ldr	r2, [pc, #40]	; (8011ccc <dhcp_reboot+0x168>)
 8011ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8011ca6:	1152      	asrs	r2, r2, #5
 8011ca8:	17db      	asrs	r3, r3, #31
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	b29a      	uxth	r2, r3
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011cb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3720      	adds	r7, #32
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8011cbe:	bf00      	nop
 8011cc0:	24000010 	.word	0x24000010
 8011cc4:	240000e8 	.word	0x240000e8
 8011cc8:	08020d28 	.word	0x08020d28
 8011ccc:	10624dd3 	.word	0x10624dd3

08011cd0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011cd0:	b5b0      	push	{r4, r5, r7, lr}
 8011cd2:	b08a      	sub	sp, #40	; 0x28
 8011cd4:	af02      	add	r7, sp, #8
 8011cd6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cdc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f000 8084 	beq.w	8011dee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	795b      	ldrb	r3, [r3, #5]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f000 8081 	beq.w	8011df2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	699b      	ldr	r3, [r3, #24]
 8011cf4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011d02:	69fb      	ldr	r3, [r7, #28]
 8011d04:	2200      	movs	r2, #0
 8011d06:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011d08:	69fb      	ldr	r3, [r7, #28]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	2200      	movs	r2, #0
 8011d12:	631a      	str	r2, [r3, #48]	; 0x30
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d18:	69fb      	ldr	r3, [r7, #28]
 8011d1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d20:	69fb      	ldr	r3, [r7, #28]
 8011d22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011d24:	69fb      	ldr	r3, [r7, #28]
 8011d26:	2200      	movs	r2, #0
 8011d28:	829a      	strh	r2, [r3, #20]
 8011d2a:	69fb      	ldr	r3, [r7, #28]
 8011d2c:	8a9a      	ldrh	r2, [r3, #20]
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	825a      	strh	r2, [r3, #18]
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	8a5a      	ldrh	r2, [r3, #18]
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	821a      	strh	r2, [r3, #16]
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	8a1a      	ldrh	r2, [r3, #16]
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 fdec 	bl	8012920 <dhcp_supplied_address>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d03b      	beq.n	8011dc6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011d4e:	f107 030e 	add.w	r3, r7, #14
 8011d52:	2207      	movs	r2, #7
 8011d54:	69f9      	ldr	r1, [r7, #28]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f000 fcde 	bl	8012718 <dhcp_create_msg>
 8011d5c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011d5e:	69bb      	ldr	r3, [r7, #24]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d030      	beq.n	8011dc6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011d6a:	89f8      	ldrh	r0, [r7, #14]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011d72:	2304      	movs	r3, #4
 8011d74:	2236      	movs	r2, #54	; 0x36
 8011d76:	f000 f85f 	bl	8011e38 <dhcp_option>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011d7e:	89fc      	ldrh	r4, [r7, #14]
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7fe ff7f 	bl	8010c8c <lwip_htonl>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	461a      	mov	r2, r3
 8011d92:	4629      	mov	r1, r5
 8011d94:	4620      	mov	r0, r4
 8011d96:	f000 f8db 	bl	8011f50 <dhcp_option_long>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011d9e:	89f8      	ldrh	r0, [r7, #14]
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	33f0      	adds	r3, #240	; 0xf0
 8011da4:	69ba      	ldr	r2, [r7, #24]
 8011da6:	4619      	mov	r1, r3
 8011da8:	f000 fd8c 	bl	80128c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011dac:	4b13      	ldr	r3, [pc, #76]	; (8011dfc <dhcp_release_and_stop+0x12c>)
 8011dae:	6818      	ldr	r0, [r3, #0]
 8011db0:	f107 0210 	add.w	r2, r7, #16
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	2343      	movs	r3, #67	; 0x43
 8011dba:	69b9      	ldr	r1, [r7, #24]
 8011dbc:	f00a fabc 	bl	801c338 <udp_sendto_if>
      pbuf_free(p_out);
 8011dc0:	69b8      	ldr	r0, [r7, #24]
 8011dc2:	f004 fbf7 	bl	80165b4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011dc6:	4b0e      	ldr	r3, [pc, #56]	; (8011e00 <dhcp_release_and_stop+0x130>)
 8011dc8:	4a0d      	ldr	r2, [pc, #52]	; (8011e00 <dhcp_release_and_stop+0x130>)
 8011dca:	490d      	ldr	r1, [pc, #52]	; (8011e00 <dhcp_release_and_stop+0x130>)
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f003 ff9d 	bl	8015d0c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	69f8      	ldr	r0, [r7, #28]
 8011dd6:	f000 f815 	bl	8011e04 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011dda:	69fb      	ldr	r3, [r7, #28]
 8011ddc:	791b      	ldrb	r3, [r3, #4]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d008      	beq.n	8011df4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011de2:	f7fe ffbf 	bl	8010d64 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011de6:	69fb      	ldr	r3, [r7, #28]
 8011de8:	2200      	movs	r2, #0
 8011dea:	711a      	strb	r2, [r3, #4]
 8011dec:	e002      	b.n	8011df4 <dhcp_release_and_stop+0x124>
    return;
 8011dee:	bf00      	nop
 8011df0:	e000      	b.n	8011df4 <dhcp_release_and_stop+0x124>
    return;
 8011df2:	bf00      	nop
  }
}
 8011df4:	3720      	adds	r7, #32
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bdb0      	pop	{r4, r5, r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	240000e8 	.word	0x240000e8
 8011e00:	08020d24 	.word	0x08020d24

08011e04 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	795b      	ldrb	r3, [r3, #5]
 8011e14:	78fa      	ldrb	r2, [r7, #3]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d008      	beq.n	8011e2c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	78fa      	ldrb	r2, [r7, #3]
 8011e1e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2200      	movs	r2, #0
 8011e24:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2200      	movs	r2, #0
 8011e2a:	811a      	strh	r2, [r3, #8]
  }
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr

08011e38 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6039      	str	r1, [r7, #0]
 8011e40:	4611      	mov	r1, r2
 8011e42:	461a      	mov	r2, r3
 8011e44:	4603      	mov	r3, r0
 8011e46:	80fb      	strh	r3, [r7, #6]
 8011e48:	460b      	mov	r3, r1
 8011e4a:	717b      	strb	r3, [r7, #5]
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011e50:	88fa      	ldrh	r2, [r7, #6]
 8011e52:	793b      	ldrb	r3, [r7, #4]
 8011e54:	4413      	add	r3, r2
 8011e56:	3302      	adds	r3, #2
 8011e58:	2b44      	cmp	r3, #68	; 0x44
 8011e5a:	d906      	bls.n	8011e6a <dhcp_option+0x32>
 8011e5c:	4b0d      	ldr	r3, [pc, #52]	; (8011e94 <dhcp_option+0x5c>)
 8011e5e:	f240 529a 	movw	r2, #1434	; 0x59a
 8011e62:	490d      	ldr	r1, [pc, #52]	; (8011e98 <dhcp_option+0x60>)
 8011e64:	480d      	ldr	r0, [pc, #52]	; (8011e9c <dhcp_option+0x64>)
 8011e66:	f00a fda7 	bl	801c9b8 <iprintf>
  options[options_out_len++] = option_type;
 8011e6a:	88fb      	ldrh	r3, [r7, #6]
 8011e6c:	1c5a      	adds	r2, r3, #1
 8011e6e:	80fa      	strh	r2, [r7, #6]
 8011e70:	461a      	mov	r2, r3
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	4413      	add	r3, r2
 8011e76:	797a      	ldrb	r2, [r7, #5]
 8011e78:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011e7a:	88fb      	ldrh	r3, [r7, #6]
 8011e7c:	1c5a      	adds	r2, r3, #1
 8011e7e:	80fa      	strh	r2, [r7, #6]
 8011e80:	461a      	mov	r2, r3
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	4413      	add	r3, r2
 8011e86:	793a      	ldrb	r2, [r7, #4]
 8011e88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011e8a:	88fb      	ldrh	r3, [r7, #6]
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3708      	adds	r7, #8
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	0801d900 	.word	0x0801d900
 8011e98:	0801dabc 	.word	0x0801dabc
 8011e9c:	0801d988 	.word	0x0801d988

08011ea0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	6039      	str	r1, [r7, #0]
 8011eaa:	80fb      	strh	r3, [r7, #6]
 8011eac:	4613      	mov	r3, r2
 8011eae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011eb0:	88fb      	ldrh	r3, [r7, #6]
 8011eb2:	2b43      	cmp	r3, #67	; 0x43
 8011eb4:	d906      	bls.n	8011ec4 <dhcp_option_byte+0x24>
 8011eb6:	4b0a      	ldr	r3, [pc, #40]	; (8011ee0 <dhcp_option_byte+0x40>)
 8011eb8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011ebc:	4909      	ldr	r1, [pc, #36]	; (8011ee4 <dhcp_option_byte+0x44>)
 8011ebe:	480a      	ldr	r0, [pc, #40]	; (8011ee8 <dhcp_option_byte+0x48>)
 8011ec0:	f00a fd7a 	bl	801c9b8 <iprintf>
  options[options_out_len++] = value;
 8011ec4:	88fb      	ldrh	r3, [r7, #6]
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	80fa      	strh	r2, [r7, #6]
 8011eca:	461a      	mov	r2, r3
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	4413      	add	r3, r2
 8011ed0:	797a      	ldrb	r2, [r7, #5]
 8011ed2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011ed4:	88fb      	ldrh	r3, [r7, #6]
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	0801d900 	.word	0x0801d900
 8011ee4:	0801db00 	.word	0x0801db00
 8011ee8:	0801d988 	.word	0x0801d988

08011eec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	6039      	str	r1, [r7, #0]
 8011ef6:	80fb      	strh	r3, [r7, #6]
 8011ef8:	4613      	mov	r3, r2
 8011efa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011efc:	88fb      	ldrh	r3, [r7, #6]
 8011efe:	3302      	adds	r3, #2
 8011f00:	2b44      	cmp	r3, #68	; 0x44
 8011f02:	d906      	bls.n	8011f12 <dhcp_option_short+0x26>
 8011f04:	4b0f      	ldr	r3, [pc, #60]	; (8011f44 <dhcp_option_short+0x58>)
 8011f06:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011f0a:	490f      	ldr	r1, [pc, #60]	; (8011f48 <dhcp_option_short+0x5c>)
 8011f0c:	480f      	ldr	r0, [pc, #60]	; (8011f4c <dhcp_option_short+0x60>)
 8011f0e:	f00a fd53 	bl	801c9b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011f12:	88bb      	ldrh	r3, [r7, #4]
 8011f14:	0a1b      	lsrs	r3, r3, #8
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	88fb      	ldrh	r3, [r7, #6]
 8011f1a:	1c59      	adds	r1, r3, #1
 8011f1c:	80f9      	strh	r1, [r7, #6]
 8011f1e:	4619      	mov	r1, r3
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	440b      	add	r3, r1
 8011f24:	b2d2      	uxtb	r2, r2
 8011f26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	1c5a      	adds	r2, r3, #1
 8011f2c:	80fa      	strh	r2, [r7, #6]
 8011f2e:	461a      	mov	r2, r3
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	4413      	add	r3, r2
 8011f34:	88ba      	ldrh	r2, [r7, #4]
 8011f36:	b2d2      	uxtb	r2, r2
 8011f38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011f3a:	88fb      	ldrh	r3, [r7, #6]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3708      	adds	r7, #8
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	0801d900 	.word	0x0801d900
 8011f48:	0801db38 	.word	0x0801db38
 8011f4c:	0801d988 	.word	0x0801d988

08011f50 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	4603      	mov	r3, r0
 8011f58:	60b9      	str	r1, [r7, #8]
 8011f5a:	607a      	str	r2, [r7, #4]
 8011f5c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011f5e:	89fb      	ldrh	r3, [r7, #14]
 8011f60:	3304      	adds	r3, #4
 8011f62:	2b44      	cmp	r3, #68	; 0x44
 8011f64:	d906      	bls.n	8011f74 <dhcp_option_long+0x24>
 8011f66:	4b19      	ldr	r3, [pc, #100]	; (8011fcc <dhcp_option_long+0x7c>)
 8011f68:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011f6c:	4918      	ldr	r1, [pc, #96]	; (8011fd0 <dhcp_option_long+0x80>)
 8011f6e:	4819      	ldr	r0, [pc, #100]	; (8011fd4 <dhcp_option_long+0x84>)
 8011f70:	f00a fd22 	bl	801c9b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	0e1a      	lsrs	r2, r3, #24
 8011f78:	89fb      	ldrh	r3, [r7, #14]
 8011f7a:	1c59      	adds	r1, r3, #1
 8011f7c:	81f9      	strh	r1, [r7, #14]
 8011f7e:	4619      	mov	r1, r3
 8011f80:	68bb      	ldr	r3, [r7, #8]
 8011f82:	440b      	add	r3, r1
 8011f84:	b2d2      	uxtb	r2, r2
 8011f86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	0c1a      	lsrs	r2, r3, #16
 8011f8c:	89fb      	ldrh	r3, [r7, #14]
 8011f8e:	1c59      	adds	r1, r3, #1
 8011f90:	81f9      	strh	r1, [r7, #14]
 8011f92:	4619      	mov	r1, r3
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	440b      	add	r3, r1
 8011f98:	b2d2      	uxtb	r2, r2
 8011f9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	0a1a      	lsrs	r2, r3, #8
 8011fa0:	89fb      	ldrh	r3, [r7, #14]
 8011fa2:	1c59      	adds	r1, r3, #1
 8011fa4:	81f9      	strh	r1, [r7, #14]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	440b      	add	r3, r1
 8011fac:	b2d2      	uxtb	r2, r2
 8011fae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011fb0:	89fb      	ldrh	r3, [r7, #14]
 8011fb2:	1c5a      	adds	r2, r3, #1
 8011fb4:	81fa      	strh	r2, [r7, #14]
 8011fb6:	461a      	mov	r2, r3
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	4413      	add	r3, r2
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	b2d2      	uxtb	r2, r2
 8011fc0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011fc2:	89fb      	ldrh	r3, [r7, #14]
}
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	3710      	adds	r7, #16
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	bd80      	pop	{r7, pc}
 8011fcc:	0801d900 	.word	0x0801d900
 8011fd0:	0801db74 	.word	0x0801db74
 8011fd4:	0801d988 	.word	0x0801d988

08011fd8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b090      	sub	sp, #64	; 0x40
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
 8011fe0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011fea:	2208      	movs	r2, #8
 8011fec:	2100      	movs	r1, #0
 8011fee:	48be      	ldr	r0, [pc, #760]	; (80122e8 <dhcp_parse_reply+0x310>)
 8011ff0:	f00a fcda 	bl	801c9a8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	895b      	ldrh	r3, [r3, #10]
 8011ff8:	2b2b      	cmp	r3, #43	; 0x2b
 8011ffa:	d802      	bhi.n	8012002 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011ffc:	f06f 0301 	mvn.w	r3, #1
 8012000:	e2a8      	b.n	8012554 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012008:	23f0      	movs	r3, #240	; 0xf0
 801200a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	891b      	ldrh	r3, [r3, #8]
 8012010:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012016:	e00c      	b.n	8012032 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801201a:	895b      	ldrh	r3, [r3, #10]
 801201c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8012022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012024:	895b      	ldrh	r3, [r3, #10]
 8012026:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	2b00      	cmp	r3, #0
 8012036:	d004      	beq.n	8012042 <dhcp_parse_reply+0x6a>
 8012038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203a:	895b      	ldrh	r3, [r3, #10]
 801203c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801203e:	429a      	cmp	r2, r3
 8012040:	d2ea      	bcs.n	8012018 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8012042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012044:	2b00      	cmp	r3, #0
 8012046:	d102      	bne.n	801204e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012048:	f06f 0301 	mvn.w	r3, #1
 801204c:	e282      	b.n	8012554 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801204e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012050:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8012052:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012054:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801205c:	e23a      	b.n	80124d4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801205e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012062:	4413      	add	r3, r2
 8012064:	781b      	ldrb	r3, [r3, #0]
 8012066:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801206e:	f04f 33ff 	mov.w	r3, #4294967295
 8012072:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012074:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012076:	3302      	adds	r3, #2
 8012078:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801207a:	8bfa      	ldrh	r2, [r7, #30]
 801207c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801207e:	429a      	cmp	r2, r3
 8012080:	d202      	bcs.n	8012088 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8012082:	f06f 0301 	mvn.w	r3, #1
 8012086:	e265      	b.n	8012554 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012088:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801208a:	3301      	adds	r3, #1
 801208c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801208e:	8952      	ldrh	r2, [r2, #10]
 8012090:	4293      	cmp	r3, r2
 8012092:	da07      	bge.n	80120a4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012094:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012096:	3301      	adds	r3, #1
 8012098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801209a:	4413      	add	r3, r2
 801209c:	781b      	ldrb	r3, [r3, #0]
 801209e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120a2:	e00b      	b.n	80120bc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80120a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d004      	beq.n	80120b6 <dhcp_parse_reply+0xde>
 80120ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	e000      	b.n	80120b8 <dhcp_parse_reply+0xe0>
 80120b6:	2300      	movs	r3, #0
 80120b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80120bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80120c4:	7dfb      	ldrb	r3, [r7, #23]
 80120c6:	2b3b      	cmp	r3, #59	; 0x3b
 80120c8:	f200 812d 	bhi.w	8012326 <dhcp_parse_reply+0x34e>
 80120cc:	a201      	add	r2, pc, #4	; (adr r2, 80120d4 <dhcp_parse_reply+0xfc>)
 80120ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120d2:	bf00      	nop
 80120d4:	080121c5 	.word	0x080121c5
 80120d8:	080121d5 	.word	0x080121d5
 80120dc:	08012327 	.word	0x08012327
 80120e0:	080121f7 	.word	0x080121f7
 80120e4:	08012327 	.word	0x08012327
 80120e8:	08012327 	.word	0x08012327
 80120ec:	08012327 	.word	0x08012327
 80120f0:	08012327 	.word	0x08012327
 80120f4:	08012327 	.word	0x08012327
 80120f8:	08012327 	.word	0x08012327
 80120fc:	08012327 	.word	0x08012327
 8012100:	08012327 	.word	0x08012327
 8012104:	08012327 	.word	0x08012327
 8012108:	08012327 	.word	0x08012327
 801210c:	08012327 	.word	0x08012327
 8012110:	08012327 	.word	0x08012327
 8012114:	08012327 	.word	0x08012327
 8012118:	08012327 	.word	0x08012327
 801211c:	08012327 	.word	0x08012327
 8012120:	08012327 	.word	0x08012327
 8012124:	08012327 	.word	0x08012327
 8012128:	08012327 	.word	0x08012327
 801212c:	08012327 	.word	0x08012327
 8012130:	08012327 	.word	0x08012327
 8012134:	08012327 	.word	0x08012327
 8012138:	08012327 	.word	0x08012327
 801213c:	08012327 	.word	0x08012327
 8012140:	08012327 	.word	0x08012327
 8012144:	08012327 	.word	0x08012327
 8012148:	08012327 	.word	0x08012327
 801214c:	08012327 	.word	0x08012327
 8012150:	08012327 	.word	0x08012327
 8012154:	08012327 	.word	0x08012327
 8012158:	08012327 	.word	0x08012327
 801215c:	08012327 	.word	0x08012327
 8012160:	08012327 	.word	0x08012327
 8012164:	08012327 	.word	0x08012327
 8012168:	08012327 	.word	0x08012327
 801216c:	08012327 	.word	0x08012327
 8012170:	08012327 	.word	0x08012327
 8012174:	08012327 	.word	0x08012327
 8012178:	08012327 	.word	0x08012327
 801217c:	08012327 	.word	0x08012327
 8012180:	08012327 	.word	0x08012327
 8012184:	08012327 	.word	0x08012327
 8012188:	08012327 	.word	0x08012327
 801218c:	08012327 	.word	0x08012327
 8012190:	08012327 	.word	0x08012327
 8012194:	08012327 	.word	0x08012327
 8012198:	08012327 	.word	0x08012327
 801219c:	08012327 	.word	0x08012327
 80121a0:	08012223 	.word	0x08012223
 80121a4:	08012245 	.word	0x08012245
 80121a8:	08012281 	.word	0x08012281
 80121ac:	080122a3 	.word	0x080122a3
 80121b0:	08012327 	.word	0x08012327
 80121b4:	08012327 	.word	0x08012327
 80121b8:	08012327 	.word	0x08012327
 80121bc:	080122c5 	.word	0x080122c5
 80121c0:	08012305 	.word	0x08012305
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80121ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80121d2:	e0ac      	b.n	801232e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80121d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121d8:	2b04      	cmp	r3, #4
 80121da:	d009      	beq.n	80121f0 <dhcp_parse_reply+0x218>
 80121dc:	4b43      	ldr	r3, [pc, #268]	; (80122ec <dhcp_parse_reply+0x314>)
 80121de:	f240 622e 	movw	r2, #1582	; 0x62e
 80121e2:	4943      	ldr	r1, [pc, #268]	; (80122f0 <dhcp_parse_reply+0x318>)
 80121e4:	4843      	ldr	r0, [pc, #268]	; (80122f4 <dhcp_parse_reply+0x31c>)
 80121e6:	f00a fbe7 	bl	801c9b8 <iprintf>
 80121ea:	f06f 0305 	mvn.w	r3, #5
 80121ee:	e1b1      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80121f0:	2306      	movs	r3, #6
 80121f2:	623b      	str	r3, [r7, #32]
        break;
 80121f4:	e09b      	b.n	801232e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80121f6:	2304      	movs	r3, #4
 80121f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80121fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012204:	429a      	cmp	r2, r3
 8012206:	d209      	bcs.n	801221c <dhcp_parse_reply+0x244>
 8012208:	4b38      	ldr	r3, [pc, #224]	; (80122ec <dhcp_parse_reply+0x314>)
 801220a:	f240 6233 	movw	r2, #1587	; 0x633
 801220e:	493a      	ldr	r1, [pc, #232]	; (80122f8 <dhcp_parse_reply+0x320>)
 8012210:	4838      	ldr	r0, [pc, #224]	; (80122f4 <dhcp_parse_reply+0x31c>)
 8012212:	f00a fbd1 	bl	801c9b8 <iprintf>
 8012216:	f06f 0305 	mvn.w	r3, #5
 801221a:	e19b      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801221c:	2307      	movs	r3, #7
 801221e:	623b      	str	r3, [r7, #32]
        break;
 8012220:	e085      	b.n	801232e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012226:	2b04      	cmp	r3, #4
 8012228:	d009      	beq.n	801223e <dhcp_parse_reply+0x266>
 801222a:	4b30      	ldr	r3, [pc, #192]	; (80122ec <dhcp_parse_reply+0x314>)
 801222c:	f240 6241 	movw	r2, #1601	; 0x641
 8012230:	492f      	ldr	r1, [pc, #188]	; (80122f0 <dhcp_parse_reply+0x318>)
 8012232:	4830      	ldr	r0, [pc, #192]	; (80122f4 <dhcp_parse_reply+0x31c>)
 8012234:	f00a fbc0 	bl	801c9b8 <iprintf>
 8012238:	f06f 0305 	mvn.w	r3, #5
 801223c:	e18a      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801223e:	2303      	movs	r3, #3
 8012240:	623b      	str	r3, [r7, #32]
        break;
 8012242:	e074      	b.n	801232e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012248:	2b01      	cmp	r3, #1
 801224a:	d009      	beq.n	8012260 <dhcp_parse_reply+0x288>
 801224c:	4b27      	ldr	r3, [pc, #156]	; (80122ec <dhcp_parse_reply+0x314>)
 801224e:	f240 624f 	movw	r2, #1615	; 0x64f
 8012252:	492a      	ldr	r1, [pc, #168]	; (80122fc <dhcp_parse_reply+0x324>)
 8012254:	4827      	ldr	r0, [pc, #156]	; (80122f4 <dhcp_parse_reply+0x31c>)
 8012256:	f00a fbaf 	bl	801c9b8 <iprintf>
 801225a:	f06f 0305 	mvn.w	r3, #5
 801225e:	e179      	b.n	8012554 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012260:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012262:	2bf0      	cmp	r3, #240	; 0xf0
 8012264:	d009      	beq.n	801227a <dhcp_parse_reply+0x2a2>
 8012266:	4b21      	ldr	r3, [pc, #132]	; (80122ec <dhcp_parse_reply+0x314>)
 8012268:	f240 6251 	movw	r2, #1617	; 0x651
 801226c:	4924      	ldr	r1, [pc, #144]	; (8012300 <dhcp_parse_reply+0x328>)
 801226e:	4821      	ldr	r0, [pc, #132]	; (80122f4 <dhcp_parse_reply+0x31c>)
 8012270:	f00a fba2 	bl	801c9b8 <iprintf>
 8012274:	f06f 0305 	mvn.w	r3, #5
 8012278:	e16c      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801227a:	2300      	movs	r3, #0
 801227c:	623b      	str	r3, [r7, #32]
        break;
 801227e:	e056      	b.n	801232e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012284:	2b01      	cmp	r3, #1
 8012286:	d009      	beq.n	801229c <dhcp_parse_reply+0x2c4>
 8012288:	4b18      	ldr	r3, [pc, #96]	; (80122ec <dhcp_parse_reply+0x314>)
 801228a:	f240 6255 	movw	r2, #1621	; 0x655
 801228e:	491b      	ldr	r1, [pc, #108]	; (80122fc <dhcp_parse_reply+0x324>)
 8012290:	4818      	ldr	r0, [pc, #96]	; (80122f4 <dhcp_parse_reply+0x31c>)
 8012292:	f00a fb91 	bl	801c9b8 <iprintf>
 8012296:	f06f 0305 	mvn.w	r3, #5
 801229a:	e15b      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801229c:	2301      	movs	r3, #1
 801229e:	623b      	str	r3, [r7, #32]
        break;
 80122a0:	e045      	b.n	801232e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80122a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d009      	beq.n	80122be <dhcp_parse_reply+0x2e6>
 80122aa:	4b10      	ldr	r3, [pc, #64]	; (80122ec <dhcp_parse_reply+0x314>)
 80122ac:	f240 6259 	movw	r2, #1625	; 0x659
 80122b0:	490f      	ldr	r1, [pc, #60]	; (80122f0 <dhcp_parse_reply+0x318>)
 80122b2:	4810      	ldr	r0, [pc, #64]	; (80122f4 <dhcp_parse_reply+0x31c>)
 80122b4:	f00a fb80 	bl	801c9b8 <iprintf>
 80122b8:	f06f 0305 	mvn.w	r3, #5
 80122bc:	e14a      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80122be:	2302      	movs	r3, #2
 80122c0:	623b      	str	r3, [r7, #32]
        break;
 80122c2:	e034      	b.n	801232e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80122c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122c8:	2b04      	cmp	r3, #4
 80122ca:	d009      	beq.n	80122e0 <dhcp_parse_reply+0x308>
 80122cc:	4b07      	ldr	r3, [pc, #28]	; (80122ec <dhcp_parse_reply+0x314>)
 80122ce:	f240 625d 	movw	r2, #1629	; 0x65d
 80122d2:	4907      	ldr	r1, [pc, #28]	; (80122f0 <dhcp_parse_reply+0x318>)
 80122d4:	4807      	ldr	r0, [pc, #28]	; (80122f4 <dhcp_parse_reply+0x31c>)
 80122d6:	f00a fb6f 	bl	801c9b8 <iprintf>
 80122da:	f06f 0305 	mvn.w	r3, #5
 80122de:	e139      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80122e0:	2304      	movs	r3, #4
 80122e2:	623b      	str	r3, [r7, #32]
        break;
 80122e4:	e023      	b.n	801232e <dhcp_parse_reply+0x356>
 80122e6:	bf00      	nop
 80122e8:	2400474c 	.word	0x2400474c
 80122ec:	0801d900 	.word	0x0801d900
 80122f0:	0801dbb0 	.word	0x0801dbb0
 80122f4:	0801d988 	.word	0x0801d988
 80122f8:	0801dbbc 	.word	0x0801dbbc
 80122fc:	0801dbd0 	.word	0x0801dbd0
 8012300:	0801dbdc 	.word	0x0801dbdc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012308:	2b04      	cmp	r3, #4
 801230a:	d009      	beq.n	8012320 <dhcp_parse_reply+0x348>
 801230c:	4b93      	ldr	r3, [pc, #588]	; (801255c <dhcp_parse_reply+0x584>)
 801230e:	f240 6261 	movw	r2, #1633	; 0x661
 8012312:	4993      	ldr	r1, [pc, #588]	; (8012560 <dhcp_parse_reply+0x588>)
 8012314:	4893      	ldr	r0, [pc, #588]	; (8012564 <dhcp_parse_reply+0x58c>)
 8012316:	f00a fb4f 	bl	801c9b8 <iprintf>
 801231a:	f06f 0305 	mvn.w	r3, #5
 801231e:	e119      	b.n	8012554 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012320:	2305      	movs	r3, #5
 8012322:	623b      	str	r3, [r7, #32]
        break;
 8012324:	e003      	b.n	801232e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8012326:	2300      	movs	r3, #0
 8012328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801232c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801232e:	7dfb      	ldrb	r3, [r7, #23]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d103      	bne.n	801233c <dhcp_parse_reply+0x364>
      offset++;
 8012334:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012336:	3301      	adds	r3, #1
 8012338:	877b      	strh	r3, [r7, #58]	; 0x3a
 801233a:	e0a1      	b.n	8012480 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801233c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801233e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012342:	4413      	add	r3, r2
 8012344:	3302      	adds	r3, #2
 8012346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801234a:	db02      	blt.n	8012352 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 801234c:	f06f 0301 	mvn.w	r3, #1
 8012350:	e100      	b.n	8012554 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8012352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012356:	b29a      	uxth	r2, r3
 8012358:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801235a:	4413      	add	r3, r2
 801235c:	b29b      	uxth	r3, r3
 801235e:	3302      	adds	r3, #2
 8012360:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012366:	2b00      	cmp	r3, #0
 8012368:	f000 808a 	beq.w	8012480 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 801236c:	2300      	movs	r3, #0
 801236e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012370:	6a3b      	ldr	r3, [r7, #32]
 8012372:	2b00      	cmp	r3, #0
 8012374:	db02      	blt.n	801237c <dhcp_parse_reply+0x3a4>
 8012376:	6a3b      	ldr	r3, [r7, #32]
 8012378:	2b07      	cmp	r3, #7
 801237a:	dd06      	ble.n	801238a <dhcp_parse_reply+0x3b2>
 801237c:	4b77      	ldr	r3, [pc, #476]	; (801255c <dhcp_parse_reply+0x584>)
 801237e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012382:	4979      	ldr	r1, [pc, #484]	; (8012568 <dhcp_parse_reply+0x590>)
 8012384:	4877      	ldr	r0, [pc, #476]	; (8012564 <dhcp_parse_reply+0x58c>)
 8012386:	f00a fb17 	bl	801c9b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801238a:	4a78      	ldr	r2, [pc, #480]	; (801256c <dhcp_parse_reply+0x594>)
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	4413      	add	r3, r2
 8012390:	781b      	ldrb	r3, [r3, #0]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d174      	bne.n	8012480 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8012396:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801239a:	2b04      	cmp	r3, #4
 801239c:	bf28      	it	cs
 801239e:	2304      	movcs	r3, #4
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80123a4:	8bfb      	ldrh	r3, [r7, #30]
 80123a6:	8aba      	ldrh	r2, [r7, #20]
 80123a8:	f107 0108 	add.w	r1, r7, #8
 80123ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ae:	f004 fafb 	bl	80169a8 <pbuf_copy_partial>
 80123b2:	4603      	mov	r3, r0
 80123b4:	461a      	mov	r2, r3
 80123b6:	8abb      	ldrh	r3, [r7, #20]
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d002      	beq.n	80123c2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80123bc:	f06f 0301 	mvn.w	r3, #1
 80123c0:	e0c8      	b.n	8012554 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80123c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123c6:	2b04      	cmp	r3, #4
 80123c8:	d933      	bls.n	8012432 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80123ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80123ce:	f003 0303 	and.w	r3, r3, #3
 80123d2:	b2db      	uxtb	r3, r3
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d009      	beq.n	80123ec <dhcp_parse_reply+0x414>
 80123d8:	4b60      	ldr	r3, [pc, #384]	; (801255c <dhcp_parse_reply+0x584>)
 80123da:	f240 6281 	movw	r2, #1665	; 0x681
 80123de:	4964      	ldr	r1, [pc, #400]	; (8012570 <dhcp_parse_reply+0x598>)
 80123e0:	4860      	ldr	r0, [pc, #384]	; (8012564 <dhcp_parse_reply+0x58c>)
 80123e2:	f00a fae9 	bl	801c9b8 <iprintf>
 80123e6:	f06f 0305 	mvn.w	r3, #5
 80123ea:	e0b3      	b.n	8012554 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80123ec:	4a5f      	ldr	r2, [pc, #380]	; (801256c <dhcp_parse_reply+0x594>)
 80123ee:	6a3b      	ldr	r3, [r7, #32]
 80123f0:	4413      	add	r3, r2
 80123f2:	2201      	movs	r2, #1
 80123f4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7fe fc47 	bl	8010c8c <lwip_htonl>
 80123fe:	4601      	mov	r1, r0
 8012400:	4a5c      	ldr	r2, [pc, #368]	; (8012574 <dhcp_parse_reply+0x59c>)
 8012402:	6a3b      	ldr	r3, [r7, #32]
 8012404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012408:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801240c:	3b04      	subs	r3, #4
 801240e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012412:	8bfb      	ldrh	r3, [r7, #30]
 8012414:	3304      	adds	r3, #4
 8012416:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012418:	8a7a      	ldrh	r2, [r7, #18]
 801241a:	8bfb      	ldrh	r3, [r7, #30]
 801241c:	429a      	cmp	r2, r3
 801241e:	d202      	bcs.n	8012426 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8012420:	f06f 0301 	mvn.w	r3, #1
 8012424:	e096      	b.n	8012554 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8012426:	8a7b      	ldrh	r3, [r7, #18]
 8012428:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801242a:	6a3b      	ldr	r3, [r7, #32]
 801242c:	3301      	adds	r3, #1
 801242e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012430:	e79e      	b.n	8012370 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8012432:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012436:	2b04      	cmp	r3, #4
 8012438:	d106      	bne.n	8012448 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	4618      	mov	r0, r3
 801243e:	f7fe fc25 	bl	8010c8c <lwip_htonl>
 8012442:	4603      	mov	r3, r0
 8012444:	60bb      	str	r3, [r7, #8]
 8012446:	e011      	b.n	801246c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012448:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801244c:	2b01      	cmp	r3, #1
 801244e:	d009      	beq.n	8012464 <dhcp_parse_reply+0x48c>
 8012450:	4b42      	ldr	r3, [pc, #264]	; (801255c <dhcp_parse_reply+0x584>)
 8012452:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012456:	4948      	ldr	r1, [pc, #288]	; (8012578 <dhcp_parse_reply+0x5a0>)
 8012458:	4842      	ldr	r0, [pc, #264]	; (8012564 <dhcp_parse_reply+0x58c>)
 801245a:	f00a faad 	bl	801c9b8 <iprintf>
 801245e:	f06f 0305 	mvn.w	r3, #5
 8012462:	e077      	b.n	8012554 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8012464:	f107 0308 	add.w	r3, r7, #8
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801246c:	4a3f      	ldr	r2, [pc, #252]	; (801256c <dhcp_parse_reply+0x594>)
 801246e:	6a3b      	ldr	r3, [r7, #32]
 8012470:	4413      	add	r3, r2
 8012472:	2201      	movs	r2, #1
 8012474:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	493e      	ldr	r1, [pc, #248]	; (8012574 <dhcp_parse_reply+0x59c>)
 801247a:	6a3b      	ldr	r3, [r7, #32]
 801247c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012482:	895b      	ldrh	r3, [r3, #10]
 8012484:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012486:	429a      	cmp	r2, r3
 8012488:	d324      	bcc.n	80124d4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 801248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248c:	895b      	ldrh	r3, [r3, #10]
 801248e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012496:	895b      	ldrh	r3, [r3, #10]
 8012498:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801249a:	1ad3      	subs	r3, r2, r3
 801249c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801249e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d213      	bcs.n	80124ce <dhcp_parse_reply+0x4f6>
        q = q->next;
 80124a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80124ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d109      	bne.n	80124c6 <dhcp_parse_reply+0x4ee>
 80124b2:	4b2a      	ldr	r3, [pc, #168]	; (801255c <dhcp_parse_reply+0x584>)
 80124b4:	f240 629d 	movw	r2, #1693	; 0x69d
 80124b8:	4930      	ldr	r1, [pc, #192]	; (801257c <dhcp_parse_reply+0x5a4>)
 80124ba:	482a      	ldr	r0, [pc, #168]	; (8012564 <dhcp_parse_reply+0x58c>)
 80124bc:	f00a fa7c 	bl	801c9b8 <iprintf>
 80124c0:	f06f 0305 	mvn.w	r3, #5
 80124c4:	e046      	b.n	8012554 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80124c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80124cc:	e002      	b.n	80124d4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80124ce:	f06f 0301 	mvn.w	r3, #1
 80124d2:	e03f      	b.n	8012554 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80124d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d00a      	beq.n	80124f0 <dhcp_parse_reply+0x518>
 80124da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80124dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80124de:	429a      	cmp	r2, r3
 80124e0:	d206      	bcs.n	80124f0 <dhcp_parse_reply+0x518>
 80124e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80124e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80124e6:	4413      	add	r3, r2
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	2bff      	cmp	r3, #255	; 0xff
 80124ec:	f47f adb7 	bne.w	801205e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80124f0:	4b1e      	ldr	r3, [pc, #120]	; (801256c <dhcp_parse_reply+0x594>)
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d018      	beq.n	801252a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80124f8:	4b1e      	ldr	r3, [pc, #120]	; (8012574 <dhcp_parse_reply+0x59c>)
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80124fe:	4b1b      	ldr	r3, [pc, #108]	; (801256c <dhcp_parse_reply+0x594>)
 8012500:	2200      	movs	r2, #0
 8012502:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2b01      	cmp	r3, #1
 8012508:	d102      	bne.n	8012510 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801250a:	2301      	movs	r3, #1
 801250c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801250e:	e00c      	b.n	801252a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b02      	cmp	r3, #2
 8012514:	d102      	bne.n	801251c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8012516:	2301      	movs	r3, #1
 8012518:	62bb      	str	r3, [r7, #40]	; 0x28
 801251a:	e006      	b.n	801252a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	2b03      	cmp	r3, #3
 8012520:	d103      	bne.n	801252a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8012522:	2301      	movs	r3, #1
 8012524:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012526:	2301      	movs	r3, #1
 8012528:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801252c:	2b00      	cmp	r3, #0
 801252e:	d006      	beq.n	801253e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012534:	236c      	movs	r3, #108	; 0x6c
 8012536:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012538:	23ec      	movs	r3, #236	; 0xec
 801253a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801253c:	e569      	b.n	8012012 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012540:	2b00      	cmp	r3, #0
 8012542:	d006      	beq.n	8012552 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8012544:	2300      	movs	r3, #0
 8012546:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012548:	232c      	movs	r3, #44	; 0x2c
 801254a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801254c:	236c      	movs	r3, #108	; 0x6c
 801254e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8012550:	e55f      	b.n	8012012 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8012552:	2300      	movs	r3, #0
}
 8012554:	4618      	mov	r0, r3
 8012556:	3740      	adds	r7, #64	; 0x40
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	0801d900 	.word	0x0801d900
 8012560:	0801dbb0 	.word	0x0801dbb0
 8012564:	0801d988 	.word	0x0801d988
 8012568:	0801dbf4 	.word	0x0801dbf4
 801256c:	2400474c 	.word	0x2400474c
 8012570:	0801dc08 	.word	0x0801dc08
 8012574:	24004754 	.word	0x24004754
 8012578:	0801dc20 	.word	0x0801dc20
 801257c:	0801dc34 	.word	0x0801dc34

08012580 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	b08a      	sub	sp, #40	; 0x28
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
 801258c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801258e:	4b5f      	ldr	r3, [pc, #380]	; (801270c <dhcp_recv+0x18c>)
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012594:	6a3b      	ldr	r3, [r7, #32]
 8012596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012598:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	685b      	ldr	r3, [r3, #4]
 801259e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	f000 809d 	beq.w	80126e2 <dhcp_recv+0x162>
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	791b      	ldrb	r3, [r3, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 8098 	beq.w	80126e2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	895b      	ldrh	r3, [r3, #10]
 80125b6:	2b2b      	cmp	r3, #43	; 0x2b
 80125b8:	f240 8095 	bls.w	80126e6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	2b02      	cmp	r3, #2
 80125c2:	f040 8092 	bne.w	80126ea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80125c6:	2300      	movs	r3, #0
 80125c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125cc:	e012      	b.n	80125f4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80125ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125d2:	6a3a      	ldr	r2, [r7, #32]
 80125d4:	4413      	add	r3, r2
 80125d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80125da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125de:	69b9      	ldr	r1, [r7, #24]
 80125e0:	440b      	add	r3, r1
 80125e2:	7f1b      	ldrb	r3, [r3, #28]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	f040 8082 	bne.w	80126ee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80125ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ee:	3301      	adds	r3, #1
 80125f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80125fe:	429a      	cmp	r2, r3
 8012600:	d203      	bcs.n	801260a <dhcp_recv+0x8a>
 8012602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012606:	2b05      	cmp	r3, #5
 8012608:	d9e1      	bls.n	80125ce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	4618      	mov	r0, r3
 8012610:	f7fe fb3c 	bl	8010c8c <lwip_htonl>
 8012614:	4602      	mov	r2, r0
 8012616:	69fb      	ldr	r3, [r7, #28]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	429a      	cmp	r2, r3
 801261c:	d169      	bne.n	80126f2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801261e:	69f9      	ldr	r1, [r7, #28]
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f7ff fcd9 	bl	8011fd8 <dhcp_parse_reply>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d164      	bne.n	80126f6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801262c:	4b38      	ldr	r3, [pc, #224]	; (8012710 <dhcp_recv+0x190>)
 801262e:	785b      	ldrb	r3, [r3, #1]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d062      	beq.n	80126fa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	685b      	ldr	r3, [r3, #4]
 8012638:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801263a:	4b36      	ldr	r3, [pc, #216]	; (8012714 <dhcp_recv+0x194>)
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8012640:	7cfb      	ldrb	r3, [r7, #19]
 8012642:	2b05      	cmp	r3, #5
 8012644:	d12a      	bne.n	801269c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	795b      	ldrb	r3, [r3, #5]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d112      	bne.n	8012674 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801264e:	6979      	ldr	r1, [r7, #20]
 8012650:	6a38      	ldr	r0, [r7, #32]
 8012652:	f7fe fe53 	bl	80112fc <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012656:	6a3b      	ldr	r3, [r7, #32]
 8012658:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801265c:	f003 0308 	and.w	r3, r3, #8
 8012660:	2b00      	cmp	r3, #0
 8012662:	d003      	beq.n	801266c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012664:	6a38      	ldr	r0, [r7, #32]
 8012666:	f7fe fbc1 	bl	8010dec <dhcp_check>
 801266a:	e047      	b.n	80126fc <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801266c:	6a38      	ldr	r0, [r7, #32]
 801266e:	f7ff f867 	bl	8011740 <dhcp_bind>
 8012672:	e043      	b.n	80126fc <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	795b      	ldrb	r3, [r3, #5]
 8012678:	2b03      	cmp	r3, #3
 801267a:	d007      	beq.n	801268c <dhcp_recv+0x10c>
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	795b      	ldrb	r3, [r3, #5]
 8012680:	2b04      	cmp	r3, #4
 8012682:	d003      	beq.n	801268c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012684:	69fb      	ldr	r3, [r7, #28]
 8012686:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012688:	2b05      	cmp	r3, #5
 801268a:	d137      	bne.n	80126fc <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801268c:	6979      	ldr	r1, [r7, #20]
 801268e:	6a38      	ldr	r0, [r7, #32]
 8012690:	f7fe fe34 	bl	80112fc <dhcp_handle_ack>
      dhcp_bind(netif);
 8012694:	6a38      	ldr	r0, [r7, #32]
 8012696:	f7ff f853 	bl	8011740 <dhcp_bind>
 801269a:	e02f      	b.n	80126fc <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801269c:	7cfb      	ldrb	r3, [r7, #19]
 801269e:	2b06      	cmp	r3, #6
 80126a0:	d113      	bne.n	80126ca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80126a6:	2b03      	cmp	r3, #3
 80126a8:	d00b      	beq.n	80126c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80126aa:	69fb      	ldr	r3, [r7, #28]
 80126ac:	795b      	ldrb	r3, [r3, #5]
 80126ae:	2b01      	cmp	r3, #1
 80126b0:	d007      	beq.n	80126c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80126b6:	2b04      	cmp	r3, #4
 80126b8:	d003      	beq.n	80126c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	795b      	ldrb	r3, [r3, #5]
 80126be:	2b05      	cmp	r3, #5
 80126c0:	d103      	bne.n	80126ca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80126c2:	6a38      	ldr	r0, [r7, #32]
 80126c4:	f7fe fb78 	bl	8010db8 <dhcp_handle_nak>
 80126c8:	e018      	b.n	80126fc <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80126ca:	7cfb      	ldrb	r3, [r7, #19]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d108      	bne.n	80126e2 <dhcp_recv+0x162>
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	795b      	ldrb	r3, [r3, #5]
 80126d4:	2b06      	cmp	r3, #6
 80126d6:	d104      	bne.n	80126e2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80126d8:	6979      	ldr	r1, [r7, #20]
 80126da:	6a38      	ldr	r0, [r7, #32]
 80126dc:	f7fe fbba 	bl	8010e54 <dhcp_handle_offer>
 80126e0:	e00c      	b.n	80126fc <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80126e2:	bf00      	nop
 80126e4:	e00a      	b.n	80126fc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80126e6:	bf00      	nop
 80126e8:	e008      	b.n	80126fc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80126ea:	bf00      	nop
 80126ec:	e006      	b.n	80126fc <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80126ee:	bf00      	nop
 80126f0:	e004      	b.n	80126fc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80126f2:	bf00      	nop
 80126f4:	e002      	b.n	80126fc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80126f6:	bf00      	nop
 80126f8:	e000      	b.n	80126fc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80126fa:	bf00      	nop
  pbuf_free(p);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f003 ff59 	bl	80165b4 <pbuf_free>
}
 8012702:	bf00      	nop
 8012704:	3728      	adds	r7, #40	; 0x28
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}
 801270a:	bf00      	nop
 801270c:	24004774 	.word	0x24004774
 8012710:	2400474c 	.word	0x2400474c
 8012714:	24004754 	.word	0x24004754

08012718 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b088      	sub	sp, #32
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	603b      	str	r3, [r7, #0]
 8012724:	4613      	mov	r3, r2
 8012726:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d108      	bne.n	8012740 <dhcp_create_msg+0x28>
 801272e:	4b5f      	ldr	r3, [pc, #380]	; (80128ac <dhcp_create_msg+0x194>)
 8012730:	f240 7269 	movw	r2, #1897	; 0x769
 8012734:	495e      	ldr	r1, [pc, #376]	; (80128b0 <dhcp_create_msg+0x198>)
 8012736:	485f      	ldr	r0, [pc, #380]	; (80128b4 <dhcp_create_msg+0x19c>)
 8012738:	f00a f93e 	bl	801c9b8 <iprintf>
 801273c:	2300      	movs	r3, #0
 801273e:	e0b1      	b.n	80128a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d108      	bne.n	8012758 <dhcp_create_msg+0x40>
 8012746:	4b59      	ldr	r3, [pc, #356]	; (80128ac <dhcp_create_msg+0x194>)
 8012748:	f240 726a 	movw	r2, #1898	; 0x76a
 801274c:	495a      	ldr	r1, [pc, #360]	; (80128b8 <dhcp_create_msg+0x1a0>)
 801274e:	4859      	ldr	r0, [pc, #356]	; (80128b4 <dhcp_create_msg+0x19c>)
 8012750:	f00a f932 	bl	801c9b8 <iprintf>
 8012754:	2300      	movs	r3, #0
 8012756:	e0a5      	b.n	80128a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012758:	f44f 7220 	mov.w	r2, #640	; 0x280
 801275c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8012760:	2036      	movs	r0, #54	; 0x36
 8012762:	f003 fc47 	bl	8015ff4 <pbuf_alloc>
 8012766:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012768:	69bb      	ldr	r3, [r7, #24]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801276e:	2300      	movs	r3, #0
 8012770:	e098      	b.n	80128a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8012772:	69bb      	ldr	r3, [r7, #24]
 8012774:	895b      	ldrh	r3, [r3, #10]
 8012776:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801277a:	d206      	bcs.n	801278a <dhcp_create_msg+0x72>
 801277c:	4b4b      	ldr	r3, [pc, #300]	; (80128ac <dhcp_create_msg+0x194>)
 801277e:	f240 7272 	movw	r2, #1906	; 0x772
 8012782:	494e      	ldr	r1, [pc, #312]	; (80128bc <dhcp_create_msg+0x1a4>)
 8012784:	484b      	ldr	r0, [pc, #300]	; (80128b4 <dhcp_create_msg+0x19c>)
 8012786:	f00a f917 	bl	801c9b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801278a:	79fb      	ldrb	r3, [r7, #7]
 801278c:	2b03      	cmp	r3, #3
 801278e:	d103      	bne.n	8012798 <dhcp_create_msg+0x80>
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	795b      	ldrb	r3, [r3, #5]
 8012794:	2b03      	cmp	r3, #3
 8012796:	d10d      	bne.n	80127b4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012798:	68bb      	ldr	r3, [r7, #8]
 801279a:	799b      	ldrb	r3, [r3, #6]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d105      	bne.n	80127ac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80127a0:	f00a f922 	bl	801c9e8 <rand>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	4b45      	ldr	r3, [pc, #276]	; (80128c0 <dhcp_create_msg+0x1a8>)
 80127aa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80127ac:	4b44      	ldr	r3, [pc, #272]	; (80128c0 <dhcp_create_msg+0x1a8>)
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80127ba:	f44f 729a 	mov.w	r2, #308	; 0x134
 80127be:	2100      	movs	r1, #0
 80127c0:	6978      	ldr	r0, [r7, #20]
 80127c2:	f00a f8f1 	bl	801c9a8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	2201      	movs	r2, #1
 80127ca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	2201      	movs	r2, #1
 80127d0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7fe fa53 	bl	8010c8c <lwip_htonl>
 80127e6:	4602      	mov	r2, r0
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80127ec:	79fb      	ldrb	r3, [r7, #7]
 80127ee:	2b08      	cmp	r3, #8
 80127f0:	d010      	beq.n	8012814 <dhcp_create_msg+0xfc>
 80127f2:	79fb      	ldrb	r3, [r7, #7]
 80127f4:	2b04      	cmp	r3, #4
 80127f6:	d00d      	beq.n	8012814 <dhcp_create_msg+0xfc>
 80127f8:	79fb      	ldrb	r3, [r7, #7]
 80127fa:	2b07      	cmp	r3, #7
 80127fc:	d00a      	beq.n	8012814 <dhcp_create_msg+0xfc>
 80127fe:	79fb      	ldrb	r3, [r7, #7]
 8012800:	2b03      	cmp	r3, #3
 8012802:	d10c      	bne.n	801281e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012808:	2b05      	cmp	r3, #5
 801280a:	d003      	beq.n	8012814 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	795b      	ldrb	r3, [r3, #5]
 8012810:	2b04      	cmp	r3, #4
 8012812:	d104      	bne.n	801281e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	3304      	adds	r3, #4
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	697b      	ldr	r3, [r7, #20]
 801281c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801281e:	2300      	movs	r3, #0
 8012820:	83fb      	strh	r3, [r7, #30]
 8012822:	e00c      	b.n	801283e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012824:	8bfa      	ldrh	r2, [r7, #30]
 8012826:	8bfb      	ldrh	r3, [r7, #30]
 8012828:	68f9      	ldr	r1, [r7, #12]
 801282a:	440a      	add	r2, r1
 801282c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8012830:	697a      	ldr	r2, [r7, #20]
 8012832:	4413      	add	r3, r2
 8012834:	460a      	mov	r2, r1
 8012836:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012838:	8bfb      	ldrh	r3, [r7, #30]
 801283a:	3301      	adds	r3, #1
 801283c:	83fb      	strh	r3, [r7, #30]
 801283e:	8bfb      	ldrh	r3, [r7, #30]
 8012840:	2b05      	cmp	r3, #5
 8012842:	d9ef      	bls.n	8012824 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2200      	movs	r2, #0
 8012848:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801284c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8012850:	2200      	movs	r2, #0
 8012852:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012856:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801285a:	2200      	movs	r2, #0
 801285c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8012860:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012864:	2200      	movs	r2, #0
 8012866:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801286a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012874:	2301      	movs	r3, #1
 8012876:	2235      	movs	r2, #53	; 0x35
 8012878:	2000      	movs	r0, #0
 801287a:	f7ff fadd 	bl	8011e38 <dhcp_option>
 801287e:	4603      	mov	r3, r0
 8012880:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012888:	79fa      	ldrb	r2, [r7, #7]
 801288a:	8a7b      	ldrh	r3, [r7, #18]
 801288c:	4618      	mov	r0, r3
 801288e:	f7ff fb07 	bl	8011ea0 <dhcp_option_byte>
 8012892:	4603      	mov	r3, r0
 8012894:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012896:	683b      	ldr	r3, [r7, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d002      	beq.n	80128a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801289c:	683b      	ldr	r3, [r7, #0]
 801289e:	8a7a      	ldrh	r2, [r7, #18]
 80128a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80128a2:	69bb      	ldr	r3, [r7, #24]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3720      	adds	r7, #32
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	0801d900 	.word	0x0801d900
 80128b0:	0801dc48 	.word	0x0801dc48
 80128b4:	0801d988 	.word	0x0801d988
 80128b8:	0801dc68 	.word	0x0801dc68
 80128bc:	0801dc88 	.word	0x0801dc88
 80128c0:	240000f0 	.word	0x240000f0

080128c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b084      	sub	sp, #16
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	4603      	mov	r3, r0
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80128d2:	89fb      	ldrh	r3, [r7, #14]
 80128d4:	1c5a      	adds	r2, r3, #1
 80128d6:	81fa      	strh	r2, [r7, #14]
 80128d8:	461a      	mov	r2, r3
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	4413      	add	r3, r2
 80128de:	22ff      	movs	r2, #255	; 0xff
 80128e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80128e2:	e007      	b.n	80128f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80128e4:	89fb      	ldrh	r3, [r7, #14]
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	81fa      	strh	r2, [r7, #14]
 80128ea:	461a      	mov	r2, r3
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	4413      	add	r3, r2
 80128f0:	2200      	movs	r2, #0
 80128f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80128f4:	89fb      	ldrh	r3, [r7, #14]
 80128f6:	2b43      	cmp	r3, #67	; 0x43
 80128f8:	d904      	bls.n	8012904 <dhcp_option_trailer+0x40>
 80128fa:	89fb      	ldrh	r3, [r7, #14]
 80128fc:	f003 0303 	and.w	r3, r3, #3
 8012900:	2b00      	cmp	r3, #0
 8012902:	d002      	beq.n	801290a <dhcp_option_trailer+0x46>
 8012904:	89fb      	ldrh	r3, [r7, #14]
 8012906:	2b43      	cmp	r3, #67	; 0x43
 8012908:	d9ec      	bls.n	80128e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801290a:	89fb      	ldrh	r3, [r7, #14]
 801290c:	33f0      	adds	r3, #240	; 0xf0
 801290e:	b29b      	uxth	r3, r3
 8012910:	4619      	mov	r1, r3
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f003 fcc8 	bl	80162a8 <pbuf_realloc>
}
 8012918:	bf00      	nop
 801291a:	3710      	adds	r7, #16
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8012920:	b480      	push	{r7}
 8012922:	b085      	sub	sp, #20
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d017      	beq.n	801295e <dhcp_supplied_address+0x3e>
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012932:	2b00      	cmp	r3, #0
 8012934:	d013      	beq.n	801295e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801293a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	795b      	ldrb	r3, [r3, #5]
 8012940:	2b0a      	cmp	r3, #10
 8012942:	d007      	beq.n	8012954 <dhcp_supplied_address+0x34>
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	795b      	ldrb	r3, [r3, #5]
 8012948:	2b05      	cmp	r3, #5
 801294a:	d003      	beq.n	8012954 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012950:	2b04      	cmp	r3, #4
 8012952:	d101      	bne.n	8012958 <dhcp_supplied_address+0x38>
 8012954:	2301      	movs	r3, #1
 8012956:	e000      	b.n	801295a <dhcp_supplied_address+0x3a>
 8012958:	2300      	movs	r3, #0
 801295a:	b2db      	uxtb	r3, r3
 801295c:	e000      	b.n	8012960 <dhcp_supplied_address+0x40>
  }
  return 0;
 801295e:	2300      	movs	r3, #0
}
 8012960:	4618      	mov	r0, r3
 8012962:	3714      	adds	r7, #20
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012974:	4915      	ldr	r1, [pc, #84]	; (80129cc <etharp_free_entry+0x60>)
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	4613      	mov	r3, r2
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	4413      	add	r3, r2
 801297e:	00db      	lsls	r3, r3, #3
 8012980:	440b      	add	r3, r1
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d013      	beq.n	80129b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012988:	4910      	ldr	r1, [pc, #64]	; (80129cc <etharp_free_entry+0x60>)
 801298a:	687a      	ldr	r2, [r7, #4]
 801298c:	4613      	mov	r3, r2
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	4413      	add	r3, r2
 8012992:	00db      	lsls	r3, r3, #3
 8012994:	440b      	add	r3, r1
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4618      	mov	r0, r3
 801299a:	f003 fe0b 	bl	80165b4 <pbuf_free>
    arp_table[i].q = NULL;
 801299e:	490b      	ldr	r1, [pc, #44]	; (80129cc <etharp_free_entry+0x60>)
 80129a0:	687a      	ldr	r2, [r7, #4]
 80129a2:	4613      	mov	r3, r2
 80129a4:	005b      	lsls	r3, r3, #1
 80129a6:	4413      	add	r3, r2
 80129a8:	00db      	lsls	r3, r3, #3
 80129aa:	440b      	add	r3, r1
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80129b0:	4906      	ldr	r1, [pc, #24]	; (80129cc <etharp_free_entry+0x60>)
 80129b2:	687a      	ldr	r2, [r7, #4]
 80129b4:	4613      	mov	r3, r2
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	4413      	add	r3, r2
 80129ba:	00db      	lsls	r3, r3, #3
 80129bc:	440b      	add	r3, r1
 80129be:	3314      	adds	r3, #20
 80129c0:	2200      	movs	r2, #0
 80129c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80129c4:	bf00      	nop
 80129c6:	3708      	adds	r7, #8
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	240000f4 	.word	0x240000f4

080129d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80129d6:	2300      	movs	r3, #0
 80129d8:	607b      	str	r3, [r7, #4]
 80129da:	e096      	b.n	8012b0a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80129dc:	494f      	ldr	r1, [pc, #316]	; (8012b1c <etharp_tmr+0x14c>)
 80129de:	687a      	ldr	r2, [r7, #4]
 80129e0:	4613      	mov	r3, r2
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	4413      	add	r3, r2
 80129e6:	00db      	lsls	r3, r3, #3
 80129e8:	440b      	add	r3, r1
 80129ea:	3314      	adds	r3, #20
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80129f0:	78fb      	ldrb	r3, [r7, #3]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	f000 8086 	beq.w	8012b04 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80129f8:	4948      	ldr	r1, [pc, #288]	; (8012b1c <etharp_tmr+0x14c>)
 80129fa:	687a      	ldr	r2, [r7, #4]
 80129fc:	4613      	mov	r3, r2
 80129fe:	005b      	lsls	r3, r3, #1
 8012a00:	4413      	add	r3, r2
 8012a02:	00db      	lsls	r3, r3, #3
 8012a04:	440b      	add	r3, r1
 8012a06:	3312      	adds	r3, #18
 8012a08:	881b      	ldrh	r3, [r3, #0]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	b298      	uxth	r0, r3
 8012a0e:	4943      	ldr	r1, [pc, #268]	; (8012b1c <etharp_tmr+0x14c>)
 8012a10:	687a      	ldr	r2, [r7, #4]
 8012a12:	4613      	mov	r3, r2
 8012a14:	005b      	lsls	r3, r3, #1
 8012a16:	4413      	add	r3, r2
 8012a18:	00db      	lsls	r3, r3, #3
 8012a1a:	440b      	add	r3, r1
 8012a1c:	3312      	adds	r3, #18
 8012a1e:	4602      	mov	r2, r0
 8012a20:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012a22:	493e      	ldr	r1, [pc, #248]	; (8012b1c <etharp_tmr+0x14c>)
 8012a24:	687a      	ldr	r2, [r7, #4]
 8012a26:	4613      	mov	r3, r2
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	4413      	add	r3, r2
 8012a2c:	00db      	lsls	r3, r3, #3
 8012a2e:	440b      	add	r3, r1
 8012a30:	3312      	adds	r3, #18
 8012a32:	881b      	ldrh	r3, [r3, #0]
 8012a34:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012a38:	d215      	bcs.n	8012a66 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012a3a:	4938      	ldr	r1, [pc, #224]	; (8012b1c <etharp_tmr+0x14c>)
 8012a3c:	687a      	ldr	r2, [r7, #4]
 8012a3e:	4613      	mov	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4413      	add	r3, r2
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	440b      	add	r3, r1
 8012a48:	3314      	adds	r3, #20
 8012a4a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012a4c:	2b01      	cmp	r3, #1
 8012a4e:	d10e      	bne.n	8012a6e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012a50:	4932      	ldr	r1, [pc, #200]	; (8012b1c <etharp_tmr+0x14c>)
 8012a52:	687a      	ldr	r2, [r7, #4]
 8012a54:	4613      	mov	r3, r2
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	4413      	add	r3, r2
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	440b      	add	r3, r1
 8012a5e:	3312      	adds	r3, #18
 8012a60:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012a62:	2b04      	cmp	r3, #4
 8012a64:	d903      	bls.n	8012a6e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff ff80 	bl	801296c <etharp_free_entry>
 8012a6c:	e04a      	b.n	8012b04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012a6e:	492b      	ldr	r1, [pc, #172]	; (8012b1c <etharp_tmr+0x14c>)
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	4613      	mov	r3, r2
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	4413      	add	r3, r2
 8012a78:	00db      	lsls	r3, r3, #3
 8012a7a:	440b      	add	r3, r1
 8012a7c:	3314      	adds	r3, #20
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	2b03      	cmp	r3, #3
 8012a82:	d10a      	bne.n	8012a9a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012a84:	4925      	ldr	r1, [pc, #148]	; (8012b1c <etharp_tmr+0x14c>)
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	440b      	add	r3, r1
 8012a92:	3314      	adds	r3, #20
 8012a94:	2204      	movs	r2, #4
 8012a96:	701a      	strb	r2, [r3, #0]
 8012a98:	e034      	b.n	8012b04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012a9a:	4920      	ldr	r1, [pc, #128]	; (8012b1c <etharp_tmr+0x14c>)
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	005b      	lsls	r3, r3, #1
 8012aa2:	4413      	add	r3, r2
 8012aa4:	00db      	lsls	r3, r3, #3
 8012aa6:	440b      	add	r3, r1
 8012aa8:	3314      	adds	r3, #20
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2b04      	cmp	r3, #4
 8012aae:	d10a      	bne.n	8012ac6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012ab0:	491a      	ldr	r1, [pc, #104]	; (8012b1c <etharp_tmr+0x14c>)
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	4613      	mov	r3, r2
 8012ab6:	005b      	lsls	r3, r3, #1
 8012ab8:	4413      	add	r3, r2
 8012aba:	00db      	lsls	r3, r3, #3
 8012abc:	440b      	add	r3, r1
 8012abe:	3314      	adds	r3, #20
 8012ac0:	2202      	movs	r2, #2
 8012ac2:	701a      	strb	r2, [r3, #0]
 8012ac4:	e01e      	b.n	8012b04 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012ac6:	4915      	ldr	r1, [pc, #84]	; (8012b1c <etharp_tmr+0x14c>)
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	440b      	add	r3, r1
 8012ad4:	3314      	adds	r3, #20
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d113      	bne.n	8012b04 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012adc:	490f      	ldr	r1, [pc, #60]	; (8012b1c <etharp_tmr+0x14c>)
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	440b      	add	r3, r1
 8012aea:	3308      	adds	r3, #8
 8012aec:	6818      	ldr	r0, [r3, #0]
 8012aee:	687a      	ldr	r2, [r7, #4]
 8012af0:	4613      	mov	r3, r2
 8012af2:	005b      	lsls	r3, r3, #1
 8012af4:	4413      	add	r3, r2
 8012af6:	00db      	lsls	r3, r3, #3
 8012af8:	4a08      	ldr	r2, [pc, #32]	; (8012b1c <etharp_tmr+0x14c>)
 8012afa:	4413      	add	r3, r2
 8012afc:	3304      	adds	r3, #4
 8012afe:	4619      	mov	r1, r3
 8012b00:	f000 fe72 	bl	80137e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	3301      	adds	r3, #1
 8012b08:	607b      	str	r3, [r7, #4]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	2b09      	cmp	r3, #9
 8012b0e:	f77f af65 	ble.w	80129dc <etharp_tmr+0xc>
      }
    }
  }
}
 8012b12:	bf00      	nop
 8012b14:	3708      	adds	r7, #8
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	240000f4 	.word	0x240000f4

08012b20 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08a      	sub	sp, #40	; 0x28
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	460b      	mov	r3, r1
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012b2e:	230a      	movs	r3, #10
 8012b30:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012b32:	230a      	movs	r3, #10
 8012b34:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012b36:	230a      	movs	r3, #10
 8012b38:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012b3e:	230a      	movs	r3, #10
 8012b40:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	83bb      	strh	r3, [r7, #28]
 8012b46:	2300      	movs	r3, #0
 8012b48:	837b      	strh	r3, [r7, #26]
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b4e:	2300      	movs	r3, #0
 8012b50:	843b      	strh	r3, [r7, #32]
 8012b52:	e0ae      	b.n	8012cb2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012b54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b58:	49a6      	ldr	r1, [pc, #664]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012b5a:	4613      	mov	r3, r2
 8012b5c:	005b      	lsls	r3, r3, #1
 8012b5e:	4413      	add	r3, r2
 8012b60:	00db      	lsls	r3, r3, #3
 8012b62:	440b      	add	r3, r1
 8012b64:	3314      	adds	r3, #20
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012b6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b6e:	2b0a      	cmp	r3, #10
 8012b70:	d105      	bne.n	8012b7e <etharp_find_entry+0x5e>
 8012b72:	7dfb      	ldrb	r3, [r7, #23]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d102      	bne.n	8012b7e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012b78:	8c3b      	ldrh	r3, [r7, #32]
 8012b7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8012b7c:	e095      	b.n	8012caa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012b7e:	7dfb      	ldrb	r3, [r7, #23]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	f000 8092 	beq.w	8012caa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012b86:	7dfb      	ldrb	r3, [r7, #23]
 8012b88:	2b01      	cmp	r3, #1
 8012b8a:	d009      	beq.n	8012ba0 <etharp_find_entry+0x80>
 8012b8c:	7dfb      	ldrb	r3, [r7, #23]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d806      	bhi.n	8012ba0 <etharp_find_entry+0x80>
 8012b92:	4b99      	ldr	r3, [pc, #612]	; (8012df8 <etharp_find_entry+0x2d8>)
 8012b94:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012b98:	4998      	ldr	r1, [pc, #608]	; (8012dfc <etharp_find_entry+0x2dc>)
 8012b9a:	4899      	ldr	r0, [pc, #612]	; (8012e00 <etharp_find_entry+0x2e0>)
 8012b9c:	f009 ff0c 	bl	801c9b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d020      	beq.n	8012be8 <etharp_find_entry+0xc8>
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	6819      	ldr	r1, [r3, #0]
 8012baa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bae:	4891      	ldr	r0, [pc, #580]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	4413      	add	r3, r2
 8012bb6:	00db      	lsls	r3, r3, #3
 8012bb8:	4403      	add	r3, r0
 8012bba:	3304      	adds	r3, #4
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	4299      	cmp	r1, r3
 8012bc0:	d112      	bne.n	8012be8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00c      	beq.n	8012be2 <etharp_find_entry+0xc2>
 8012bc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bcc:	4989      	ldr	r1, [pc, #548]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012bce:	4613      	mov	r3, r2
 8012bd0:	005b      	lsls	r3, r3, #1
 8012bd2:	4413      	add	r3, r2
 8012bd4:	00db      	lsls	r3, r3, #3
 8012bd6:	440b      	add	r3, r1
 8012bd8:	3308      	adds	r3, #8
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	687a      	ldr	r2, [r7, #4]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d102      	bne.n	8012be8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012be6:	e100      	b.n	8012dea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012be8:	7dfb      	ldrb	r3, [r7, #23]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d140      	bne.n	8012c70 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012bee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bf2:	4980      	ldr	r1, [pc, #512]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012bf4:	4613      	mov	r3, r2
 8012bf6:	005b      	lsls	r3, r3, #1
 8012bf8:	4413      	add	r3, r2
 8012bfa:	00db      	lsls	r3, r3, #3
 8012bfc:	440b      	add	r3, r1
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d01a      	beq.n	8012c3a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c08:	497a      	ldr	r1, [pc, #488]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c0a:	4613      	mov	r3, r2
 8012c0c:	005b      	lsls	r3, r3, #1
 8012c0e:	4413      	add	r3, r2
 8012c10:	00db      	lsls	r3, r3, #3
 8012c12:	440b      	add	r3, r1
 8012c14:	3312      	adds	r3, #18
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	8bba      	ldrh	r2, [r7, #28]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d845      	bhi.n	8012caa <etharp_find_entry+0x18a>
            old_queue = i;
 8012c1e:	8c3b      	ldrh	r3, [r7, #32]
 8012c20:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012c22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c26:	4973      	ldr	r1, [pc, #460]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c28:	4613      	mov	r3, r2
 8012c2a:	005b      	lsls	r3, r3, #1
 8012c2c:	4413      	add	r3, r2
 8012c2e:	00db      	lsls	r3, r3, #3
 8012c30:	440b      	add	r3, r1
 8012c32:	3312      	adds	r3, #18
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	83bb      	strh	r3, [r7, #28]
 8012c38:	e037      	b.n	8012caa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012c3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c3e:	496d      	ldr	r1, [pc, #436]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c40:	4613      	mov	r3, r2
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	4413      	add	r3, r2
 8012c46:	00db      	lsls	r3, r3, #3
 8012c48:	440b      	add	r3, r1
 8012c4a:	3312      	adds	r3, #18
 8012c4c:	881b      	ldrh	r3, [r3, #0]
 8012c4e:	8b7a      	ldrh	r2, [r7, #26]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d82a      	bhi.n	8012caa <etharp_find_entry+0x18a>
            old_pending = i;
 8012c54:	8c3b      	ldrh	r3, [r7, #32]
 8012c56:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012c58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c5c:	4965      	ldr	r1, [pc, #404]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c5e:	4613      	mov	r3, r2
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	4413      	add	r3, r2
 8012c64:	00db      	lsls	r3, r3, #3
 8012c66:	440b      	add	r3, r1
 8012c68:	3312      	adds	r3, #18
 8012c6a:	881b      	ldrh	r3, [r3, #0]
 8012c6c:	837b      	strh	r3, [r7, #26]
 8012c6e:	e01c      	b.n	8012caa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012c70:	7dfb      	ldrb	r3, [r7, #23]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d919      	bls.n	8012caa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012c76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c7a:	495e      	ldr	r1, [pc, #376]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	005b      	lsls	r3, r3, #1
 8012c80:	4413      	add	r3, r2
 8012c82:	00db      	lsls	r3, r3, #3
 8012c84:	440b      	add	r3, r1
 8012c86:	3312      	adds	r3, #18
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	8b3a      	ldrh	r2, [r7, #24]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d80c      	bhi.n	8012caa <etharp_find_entry+0x18a>
            old_stable = i;
 8012c90:	8c3b      	ldrh	r3, [r7, #32]
 8012c92:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c98:	4956      	ldr	r1, [pc, #344]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012c9a:	4613      	mov	r3, r2
 8012c9c:	005b      	lsls	r3, r3, #1
 8012c9e:	4413      	add	r3, r2
 8012ca0:	00db      	lsls	r3, r3, #3
 8012ca2:	440b      	add	r3, r1
 8012ca4:	3312      	adds	r3, #18
 8012ca6:	881b      	ldrh	r3, [r3, #0]
 8012ca8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012caa:	8c3b      	ldrh	r3, [r7, #32]
 8012cac:	3301      	adds	r3, #1
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	843b      	strh	r3, [r7, #32]
 8012cb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012cb6:	2b09      	cmp	r3, #9
 8012cb8:	f77f af4c 	ble.w	8012b54 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012cbc:	7afb      	ldrb	r3, [r7, #11]
 8012cbe:	f003 0302 	and.w	r3, r3, #2
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d108      	bne.n	8012cd8 <etharp_find_entry+0x1b8>
 8012cc6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012cca:	2b0a      	cmp	r3, #10
 8012ccc:	d107      	bne.n	8012cde <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012cce:	7afb      	ldrb	r3, [r7, #11]
 8012cd0:	f003 0301 	and.w	r3, r3, #1
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d102      	bne.n	8012cde <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cdc:	e085      	b.n	8012dea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012cde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012ce2:	2b09      	cmp	r3, #9
 8012ce4:	dc02      	bgt.n	8012cec <etharp_find_entry+0x1cc>
    i = empty;
 8012ce6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ce8:	843b      	strh	r3, [r7, #32]
 8012cea:	e039      	b.n	8012d60 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012cec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012cf0:	2b09      	cmp	r3, #9
 8012cf2:	dc14      	bgt.n	8012d1e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012cf6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012cf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cfc:	493d      	ldr	r1, [pc, #244]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	440b      	add	r3, r1
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d018      	beq.n	8012d40 <etharp_find_entry+0x220>
 8012d0e:	4b3a      	ldr	r3, [pc, #232]	; (8012df8 <etharp_find_entry+0x2d8>)
 8012d10:	f240 126d 	movw	r2, #365	; 0x16d
 8012d14:	493b      	ldr	r1, [pc, #236]	; (8012e04 <etharp_find_entry+0x2e4>)
 8012d16:	483a      	ldr	r0, [pc, #232]	; (8012e00 <etharp_find_entry+0x2e0>)
 8012d18:	f009 fe4e 	bl	801c9b8 <iprintf>
 8012d1c:	e010      	b.n	8012d40 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012d1e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012d22:	2b09      	cmp	r3, #9
 8012d24:	dc02      	bgt.n	8012d2c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012d26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012d28:	843b      	strh	r3, [r7, #32]
 8012d2a:	e009      	b.n	8012d40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012d2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012d30:	2b09      	cmp	r3, #9
 8012d32:	dc02      	bgt.n	8012d3a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012d34:	8bfb      	ldrh	r3, [r7, #30]
 8012d36:	843b      	strh	r3, [r7, #32]
 8012d38:	e002      	b.n	8012d40 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d3e:	e054      	b.n	8012dea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012d40:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d44:	2b09      	cmp	r3, #9
 8012d46:	dd06      	ble.n	8012d56 <etharp_find_entry+0x236>
 8012d48:	4b2b      	ldr	r3, [pc, #172]	; (8012df8 <etharp_find_entry+0x2d8>)
 8012d4a:	f240 127f 	movw	r2, #383	; 0x17f
 8012d4e:	492e      	ldr	r1, [pc, #184]	; (8012e08 <etharp_find_entry+0x2e8>)
 8012d50:	482b      	ldr	r0, [pc, #172]	; (8012e00 <etharp_find_entry+0x2e0>)
 8012d52:	f009 fe31 	bl	801c9b8 <iprintf>
    etharp_free_entry(i);
 8012d56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7ff fe06 	bl	801296c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012d60:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d64:	2b09      	cmp	r3, #9
 8012d66:	dd06      	ble.n	8012d76 <etharp_find_entry+0x256>
 8012d68:	4b23      	ldr	r3, [pc, #140]	; (8012df8 <etharp_find_entry+0x2d8>)
 8012d6a:	f240 1283 	movw	r2, #387	; 0x183
 8012d6e:	4926      	ldr	r1, [pc, #152]	; (8012e08 <etharp_find_entry+0x2e8>)
 8012d70:	4823      	ldr	r0, [pc, #140]	; (8012e00 <etharp_find_entry+0x2e0>)
 8012d72:	f009 fe21 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012d76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d7a:	491e      	ldr	r1, [pc, #120]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	005b      	lsls	r3, r3, #1
 8012d80:	4413      	add	r3, r2
 8012d82:	00db      	lsls	r3, r3, #3
 8012d84:	440b      	add	r3, r1
 8012d86:	3314      	adds	r3, #20
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d006      	beq.n	8012d9c <etharp_find_entry+0x27c>
 8012d8e:	4b1a      	ldr	r3, [pc, #104]	; (8012df8 <etharp_find_entry+0x2d8>)
 8012d90:	f240 1285 	movw	r2, #389	; 0x185
 8012d94:	491d      	ldr	r1, [pc, #116]	; (8012e0c <etharp_find_entry+0x2ec>)
 8012d96:	481a      	ldr	r0, [pc, #104]	; (8012e00 <etharp_find_entry+0x2e0>)
 8012d98:	f009 fe0e 	bl	801c9b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00b      	beq.n	8012dba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012da2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	6819      	ldr	r1, [r3, #0]
 8012daa:	4812      	ldr	r0, [pc, #72]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012dac:	4613      	mov	r3, r2
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	4413      	add	r3, r2
 8012db2:	00db      	lsls	r3, r3, #3
 8012db4:	4403      	add	r3, r0
 8012db6:	3304      	adds	r3, #4
 8012db8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012dba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dbe:	490d      	ldr	r1, [pc, #52]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	005b      	lsls	r3, r3, #1
 8012dc4:	4413      	add	r3, r2
 8012dc6:	00db      	lsls	r3, r3, #3
 8012dc8:	440b      	add	r3, r1
 8012dca:	3312      	adds	r3, #18
 8012dcc:	2200      	movs	r2, #0
 8012dce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012dd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012dd4:	4907      	ldr	r1, [pc, #28]	; (8012df4 <etharp_find_entry+0x2d4>)
 8012dd6:	4613      	mov	r3, r2
 8012dd8:	005b      	lsls	r3, r3, #1
 8012dda:	4413      	add	r3, r2
 8012ddc:	00db      	lsls	r3, r3, #3
 8012dde:	440b      	add	r3, r1
 8012de0:	3308      	adds	r3, #8
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012de6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3728      	adds	r7, #40	; 0x28
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	240000f4 	.word	0x240000f4
 8012df8:	0801dcc8 	.word	0x0801dcc8
 8012dfc:	0801dd28 	.word	0x0801dd28
 8012e00:	0801dd68 	.word	0x0801dd68
 8012e04:	0801dd90 	.word	0x0801dd90
 8012e08:	0801dda8 	.word	0x0801dda8
 8012e0c:	0801ddbc 	.word	0x0801ddbc

08012e10 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012e10:	b580      	push	{r7, lr}
 8012e12:	b088      	sub	sp, #32
 8012e14:	af02      	add	r7, sp, #8
 8012e16:	60f8      	str	r0, [r7, #12]
 8012e18:	60b9      	str	r1, [r7, #8]
 8012e1a:	607a      	str	r2, [r7, #4]
 8012e1c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012e24:	2b06      	cmp	r3, #6
 8012e26:	d006      	beq.n	8012e36 <etharp_update_arp_entry+0x26>
 8012e28:	4b48      	ldr	r3, [pc, #288]	; (8012f4c <etharp_update_arp_entry+0x13c>)
 8012e2a:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012e2e:	4948      	ldr	r1, [pc, #288]	; (8012f50 <etharp_update_arp_entry+0x140>)
 8012e30:	4848      	ldr	r0, [pc, #288]	; (8012f54 <etharp_update_arp_entry+0x144>)
 8012e32:	f009 fdc1 	bl	801c9b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d012      	beq.n	8012e62 <etharp_update_arp_entry+0x52>
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d00e      	beq.n	8012e62 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	68f9      	ldr	r1, [r7, #12]
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f001 faec 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8012e50:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d105      	bne.n	8012e62 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012e5e:	2be0      	cmp	r3, #224	; 0xe0
 8012e60:	d102      	bne.n	8012e68 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012e62:	f06f 030f 	mvn.w	r3, #15
 8012e66:	e06c      	b.n	8012f42 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012e68:	78fb      	ldrb	r3, [r7, #3]
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	68b8      	ldr	r0, [r7, #8]
 8012e70:	f7ff fe56 	bl	8012b20 <etharp_find_entry>
 8012e74:	4603      	mov	r3, r0
 8012e76:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012e78:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	da02      	bge.n	8012e86 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012e80:	8afb      	ldrh	r3, [r7, #22]
 8012e82:	b25b      	sxtb	r3, r3
 8012e84:	e05d      	b.n	8012f42 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012e86:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012e8a:	4933      	ldr	r1, [pc, #204]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	440b      	add	r3, r1
 8012e96:	3314      	adds	r3, #20
 8012e98:	2202      	movs	r2, #2
 8012e9a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012e9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ea0:	492d      	ldr	r1, [pc, #180]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	005b      	lsls	r3, r3, #1
 8012ea6:	4413      	add	r3, r2
 8012ea8:	00db      	lsls	r3, r3, #3
 8012eaa:	440b      	add	r3, r1
 8012eac:	3308      	adds	r3, #8
 8012eae:	68fa      	ldr	r2, [r7, #12]
 8012eb0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012eb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012eb6:	4613      	mov	r3, r2
 8012eb8:	005b      	lsls	r3, r3, #1
 8012eba:	4413      	add	r3, r2
 8012ebc:	00db      	lsls	r3, r3, #3
 8012ebe:	3308      	adds	r3, #8
 8012ec0:	4a25      	ldr	r2, [pc, #148]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012ec2:	4413      	add	r3, r2
 8012ec4:	3304      	adds	r3, #4
 8012ec6:	2206      	movs	r2, #6
 8012ec8:	6879      	ldr	r1, [r7, #4]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f009 fd61 	bl	801c992 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012ed0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ed4:	4920      	ldr	r1, [pc, #128]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	4413      	add	r3, r2
 8012edc:	00db      	lsls	r3, r3, #3
 8012ede:	440b      	add	r3, r1
 8012ee0:	3312      	adds	r3, #18
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012ee6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012eea:	491b      	ldr	r1, [pc, #108]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012eec:	4613      	mov	r3, r2
 8012eee:	005b      	lsls	r3, r3, #1
 8012ef0:	4413      	add	r3, r2
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	440b      	add	r3, r1
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d021      	beq.n	8012f40 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012efc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f00:	4915      	ldr	r1, [pc, #84]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012f02:	4613      	mov	r3, r2
 8012f04:	005b      	lsls	r3, r3, #1
 8012f06:	4413      	add	r3, r2
 8012f08:	00db      	lsls	r3, r3, #3
 8012f0a:	440b      	add	r3, r1
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012f10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f14:	4910      	ldr	r1, [pc, #64]	; (8012f58 <etharp_update_arp_entry+0x148>)
 8012f16:	4613      	mov	r3, r2
 8012f18:	005b      	lsls	r3, r3, #1
 8012f1a:	4413      	add	r3, r2
 8012f1c:	00db      	lsls	r3, r3, #3
 8012f1e:	440b      	add	r3, r1
 8012f20:	2200      	movs	r2, #0
 8012f22:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012f2e:	9300      	str	r3, [sp, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6939      	ldr	r1, [r7, #16]
 8012f34:	68f8      	ldr	r0, [r7, #12]
 8012f36:	f000 fcf7 	bl	8013928 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012f3a:	6938      	ldr	r0, [r7, #16]
 8012f3c:	f003 fb3a 	bl	80165b4 <pbuf_free>
  }
  return ERR_OK;
 8012f40:	2300      	movs	r3, #0
}
 8012f42:	4618      	mov	r0, r3
 8012f44:	3718      	adds	r7, #24
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}
 8012f4a:	bf00      	nop
 8012f4c:	0801dcc8 	.word	0x0801dcc8
 8012f50:	0801dde8 	.word	0x0801dde8
 8012f54:	0801dd68 	.word	0x0801dd68
 8012f58:	240000f4 	.word	0x240000f4

08012f5c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012f64:	2300      	movs	r3, #0
 8012f66:	60fb      	str	r3, [r7, #12]
 8012f68:	e01e      	b.n	8012fa8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012f6a:	4913      	ldr	r1, [pc, #76]	; (8012fb8 <etharp_cleanup_netif+0x5c>)
 8012f6c:	68fa      	ldr	r2, [r7, #12]
 8012f6e:	4613      	mov	r3, r2
 8012f70:	005b      	lsls	r3, r3, #1
 8012f72:	4413      	add	r3, r2
 8012f74:	00db      	lsls	r3, r3, #3
 8012f76:	440b      	add	r3, r1
 8012f78:	3314      	adds	r3, #20
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012f7e:	7afb      	ldrb	r3, [r7, #11]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d00e      	beq.n	8012fa2 <etharp_cleanup_netif+0x46>
 8012f84:	490c      	ldr	r1, [pc, #48]	; (8012fb8 <etharp_cleanup_netif+0x5c>)
 8012f86:	68fa      	ldr	r2, [r7, #12]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	4413      	add	r3, r2
 8012f8e:	00db      	lsls	r3, r3, #3
 8012f90:	440b      	add	r3, r1
 8012f92:	3308      	adds	r3, #8
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	687a      	ldr	r2, [r7, #4]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d102      	bne.n	8012fa2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f7ff fce5 	bl	801296c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	60fb      	str	r3, [r7, #12]
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	2b09      	cmp	r3, #9
 8012fac:	dddd      	ble.n	8012f6a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012fae:	bf00      	nop
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	240000f4 	.word	0x240000f4

08012fbc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012fbc:	b5b0      	push	{r4, r5, r7, lr}
 8012fbe:	b08a      	sub	sp, #40	; 0x28
 8012fc0:	af04      	add	r7, sp, #16
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d107      	bne.n	8012fdc <etharp_input+0x20>
 8012fcc:	4b3f      	ldr	r3, [pc, #252]	; (80130cc <etharp_input+0x110>)
 8012fce:	f240 228a 	movw	r2, #650	; 0x28a
 8012fd2:	493f      	ldr	r1, [pc, #252]	; (80130d0 <etharp_input+0x114>)
 8012fd4:	483f      	ldr	r0, [pc, #252]	; (80130d4 <etharp_input+0x118>)
 8012fd6:	f009 fcef 	bl	801c9b8 <iprintf>
 8012fda:	e074      	b.n	80130c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	881b      	ldrh	r3, [r3, #0]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fec:	d10c      	bne.n	8013008 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012fee:	693b      	ldr	r3, [r7, #16]
 8012ff0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012ff2:	2b06      	cmp	r3, #6
 8012ff4:	d108      	bne.n	8013008 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012ffa:	2b04      	cmp	r3, #4
 8012ffc:	d104      	bne.n	8013008 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	885b      	ldrh	r3, [r3, #2]
 8013002:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013004:	2b08      	cmp	r3, #8
 8013006:	d003      	beq.n	8013010 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f003 fad3 	bl	80165b4 <pbuf_free>
    return;
 801300e:	e05a      	b.n	80130c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	330e      	adds	r3, #14
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	3318      	adds	r3, #24
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	3304      	adds	r3, #4
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d102      	bne.n	8013030 <etharp_input+0x74>
    for_us = 0;
 801302a:	2300      	movs	r3, #0
 801302c:	75fb      	strb	r3, [r7, #23]
 801302e:	e009      	b.n	8013044 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013030:	68ba      	ldr	r2, [r7, #8]
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	3304      	adds	r3, #4
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	429a      	cmp	r2, r3
 801303a:	bf0c      	ite	eq
 801303c:	2301      	moveq	r3, #1
 801303e:	2300      	movne	r3, #0
 8013040:	b2db      	uxtb	r3, r3
 8013042:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	f103 0208 	add.w	r2, r3, #8
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d001      	beq.n	8013054 <etharp_input+0x98>
 8013050:	2301      	movs	r3, #1
 8013052:	e000      	b.n	8013056 <etharp_input+0x9a>
 8013054:	2302      	movs	r3, #2
 8013056:	f107 010c 	add.w	r1, r7, #12
 801305a:	6838      	ldr	r0, [r7, #0]
 801305c:	f7ff fed8 	bl	8012e10 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	88db      	ldrh	r3, [r3, #6]
 8013064:	b29b      	uxth	r3, r3
 8013066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801306a:	d003      	beq.n	8013074 <etharp_input+0xb8>
 801306c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013070:	d01e      	beq.n	80130b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013072:	e025      	b.n	80130c0 <etharp_input+0x104>
      if (for_us) {
 8013074:	7dfb      	ldrb	r3, [r7, #23]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d021      	beq.n	80130be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013090:	693a      	ldr	r2, [r7, #16]
 8013092:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013094:	2102      	movs	r1, #2
 8013096:	9103      	str	r1, [sp, #12]
 8013098:	f107 010c 	add.w	r1, r7, #12
 801309c:	9102      	str	r1, [sp, #8]
 801309e:	9201      	str	r2, [sp, #4]
 80130a0:	9300      	str	r3, [sp, #0]
 80130a2:	462b      	mov	r3, r5
 80130a4:	4622      	mov	r2, r4
 80130a6:	4601      	mov	r1, r0
 80130a8:	6838      	ldr	r0, [r7, #0]
 80130aa:	f000 faef 	bl	801368c <etharp_raw>
      break;
 80130ae:	e006      	b.n	80130be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80130b0:	f107 030c 	add.w	r3, r7, #12
 80130b4:	4619      	mov	r1, r3
 80130b6:	6838      	ldr	r0, [r7, #0]
 80130b8:	f7fe f9fe 	bl	80114b8 <dhcp_arp_reply>
      break;
 80130bc:	e000      	b.n	80130c0 <etharp_input+0x104>
      break;
 80130be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f003 fa77 	bl	80165b4 <pbuf_free>
}
 80130c6:	3718      	adds	r7, #24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bdb0      	pop	{r4, r5, r7, pc}
 80130cc:	0801dcc8 	.word	0x0801dcc8
 80130d0:	0801de40 	.word	0x0801de40
 80130d4:	0801dd68 	.word	0x0801dd68

080130d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b086      	sub	sp, #24
 80130dc:	af02      	add	r7, sp, #8
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4613      	mov	r3, r2
 80130e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80130e6:	79fa      	ldrb	r2, [r7, #7]
 80130e8:	4944      	ldr	r1, [pc, #272]	; (80131fc <etharp_output_to_arp_index+0x124>)
 80130ea:	4613      	mov	r3, r2
 80130ec:	005b      	lsls	r3, r3, #1
 80130ee:	4413      	add	r3, r2
 80130f0:	00db      	lsls	r3, r3, #3
 80130f2:	440b      	add	r3, r1
 80130f4:	3314      	adds	r3, #20
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d806      	bhi.n	801310a <etharp_output_to_arp_index+0x32>
 80130fc:	4b40      	ldr	r3, [pc, #256]	; (8013200 <etharp_output_to_arp_index+0x128>)
 80130fe:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013102:	4940      	ldr	r1, [pc, #256]	; (8013204 <etharp_output_to_arp_index+0x12c>)
 8013104:	4840      	ldr	r0, [pc, #256]	; (8013208 <etharp_output_to_arp_index+0x130>)
 8013106:	f009 fc57 	bl	801c9b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801310a:	79fa      	ldrb	r2, [r7, #7]
 801310c:	493b      	ldr	r1, [pc, #236]	; (80131fc <etharp_output_to_arp_index+0x124>)
 801310e:	4613      	mov	r3, r2
 8013110:	005b      	lsls	r3, r3, #1
 8013112:	4413      	add	r3, r2
 8013114:	00db      	lsls	r3, r3, #3
 8013116:	440b      	add	r3, r1
 8013118:	3314      	adds	r3, #20
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	2b02      	cmp	r3, #2
 801311e:	d153      	bne.n	80131c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013120:	79fa      	ldrb	r2, [r7, #7]
 8013122:	4936      	ldr	r1, [pc, #216]	; (80131fc <etharp_output_to_arp_index+0x124>)
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	3312      	adds	r3, #18
 8013130:	881b      	ldrh	r3, [r3, #0]
 8013132:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013136:	d919      	bls.n	801316c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013138:	79fa      	ldrb	r2, [r7, #7]
 801313a:	4613      	mov	r3, r2
 801313c:	005b      	lsls	r3, r3, #1
 801313e:	4413      	add	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	4a2e      	ldr	r2, [pc, #184]	; (80131fc <etharp_output_to_arp_index+0x124>)
 8013144:	4413      	add	r3, r2
 8013146:	3304      	adds	r3, #4
 8013148:	4619      	mov	r1, r3
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f000 fb4c 	bl	80137e8 <etharp_request>
 8013150:	4603      	mov	r3, r0
 8013152:	2b00      	cmp	r3, #0
 8013154:	d138      	bne.n	80131c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013156:	79fa      	ldrb	r2, [r7, #7]
 8013158:	4928      	ldr	r1, [pc, #160]	; (80131fc <etharp_output_to_arp_index+0x124>)
 801315a:	4613      	mov	r3, r2
 801315c:	005b      	lsls	r3, r3, #1
 801315e:	4413      	add	r3, r2
 8013160:	00db      	lsls	r3, r3, #3
 8013162:	440b      	add	r3, r1
 8013164:	3314      	adds	r3, #20
 8013166:	2203      	movs	r2, #3
 8013168:	701a      	strb	r2, [r3, #0]
 801316a:	e02d      	b.n	80131c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801316c:	79fa      	ldrb	r2, [r7, #7]
 801316e:	4923      	ldr	r1, [pc, #140]	; (80131fc <etharp_output_to_arp_index+0x124>)
 8013170:	4613      	mov	r3, r2
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	4413      	add	r3, r2
 8013176:	00db      	lsls	r3, r3, #3
 8013178:	440b      	add	r3, r1
 801317a:	3312      	adds	r3, #18
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013182:	d321      	bcc.n	80131c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013184:	79fa      	ldrb	r2, [r7, #7]
 8013186:	4613      	mov	r3, r2
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	4413      	add	r3, r2
 801318c:	00db      	lsls	r3, r3, #3
 801318e:	4a1b      	ldr	r2, [pc, #108]	; (80131fc <etharp_output_to_arp_index+0x124>)
 8013190:	4413      	add	r3, r2
 8013192:	1d19      	adds	r1, r3, #4
 8013194:	79fa      	ldrb	r2, [r7, #7]
 8013196:	4613      	mov	r3, r2
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	3308      	adds	r3, #8
 80131a0:	4a16      	ldr	r2, [pc, #88]	; (80131fc <etharp_output_to_arp_index+0x124>)
 80131a2:	4413      	add	r3, r2
 80131a4:	3304      	adds	r3, #4
 80131a6:	461a      	mov	r2, r3
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f000 fafb 	bl	80137a4 <etharp_request_dst>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d109      	bne.n	80131c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80131b4:	79fa      	ldrb	r2, [r7, #7]
 80131b6:	4911      	ldr	r1, [pc, #68]	; (80131fc <etharp_output_to_arp_index+0x124>)
 80131b8:	4613      	mov	r3, r2
 80131ba:	005b      	lsls	r3, r3, #1
 80131bc:	4413      	add	r3, r2
 80131be:	00db      	lsls	r3, r3, #3
 80131c0:	440b      	add	r3, r1
 80131c2:	3314      	adds	r3, #20
 80131c4:	2203      	movs	r2, #3
 80131c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80131ce:	79fa      	ldrb	r2, [r7, #7]
 80131d0:	4613      	mov	r3, r2
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	4413      	add	r3, r2
 80131d6:	00db      	lsls	r3, r3, #3
 80131d8:	3308      	adds	r3, #8
 80131da:	4a08      	ldr	r2, [pc, #32]	; (80131fc <etharp_output_to_arp_index+0x124>)
 80131dc:	4413      	add	r3, r2
 80131de:	1d1a      	adds	r2, r3, #4
 80131e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131e4:	9300      	str	r3, [sp, #0]
 80131e6:	4613      	mov	r3, r2
 80131e8:	460a      	mov	r2, r1
 80131ea:	68b9      	ldr	r1, [r7, #8]
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f000 fb9b 	bl	8013928 <ethernet_output>
 80131f2:	4603      	mov	r3, r0
}
 80131f4:	4618      	mov	r0, r3
 80131f6:	3710      	adds	r7, #16
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	240000f4 	.word	0x240000f4
 8013200:	0801dcc8 	.word	0x0801dcc8
 8013204:	0801de60 	.word	0x0801de60
 8013208:	0801dd68 	.word	0x0801dd68

0801320c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08a      	sub	sp, #40	; 0x28
 8013210:	af02      	add	r7, sp, #8
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d106      	bne.n	8013230 <etharp_output+0x24>
 8013222:	4b73      	ldr	r3, [pc, #460]	; (80133f0 <etharp_output+0x1e4>)
 8013224:	f240 321e 	movw	r2, #798	; 0x31e
 8013228:	4972      	ldr	r1, [pc, #456]	; (80133f4 <etharp_output+0x1e8>)
 801322a:	4873      	ldr	r0, [pc, #460]	; (80133f8 <etharp_output+0x1ec>)
 801322c:	f009 fbc4 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013230:	68bb      	ldr	r3, [r7, #8]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d106      	bne.n	8013244 <etharp_output+0x38>
 8013236:	4b6e      	ldr	r3, [pc, #440]	; (80133f0 <etharp_output+0x1e4>)
 8013238:	f240 321f 	movw	r2, #799	; 0x31f
 801323c:	496f      	ldr	r1, [pc, #444]	; (80133fc <etharp_output+0x1f0>)
 801323e:	486e      	ldr	r0, [pc, #440]	; (80133f8 <etharp_output+0x1ec>)
 8013240:	f009 fbba 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d106      	bne.n	8013258 <etharp_output+0x4c>
 801324a:	4b69      	ldr	r3, [pc, #420]	; (80133f0 <etharp_output+0x1e4>)
 801324c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013250:	496b      	ldr	r1, [pc, #428]	; (8013400 <etharp_output+0x1f4>)
 8013252:	4869      	ldr	r0, [pc, #420]	; (80133f8 <etharp_output+0x1ec>)
 8013254:	f009 fbb0 	bl	801c9b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	68f9      	ldr	r1, [r7, #12]
 801325e:	4618      	mov	r0, r3
 8013260:	f001 f8e2 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801326a:	4b66      	ldr	r3, [pc, #408]	; (8013404 <etharp_output+0x1f8>)
 801326c:	61fb      	str	r3, [r7, #28]
 801326e:	e0af      	b.n	80133d0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013278:	2be0      	cmp	r3, #224	; 0xe0
 801327a:	d118      	bne.n	80132ae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801327c:	2301      	movs	r3, #1
 801327e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013280:	2300      	movs	r3, #0
 8013282:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013284:	235e      	movs	r3, #94	; 0x5e
 8013286:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	3301      	adds	r3, #1
 801328c:	781b      	ldrb	r3, [r3, #0]
 801328e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013292:	b2db      	uxtb	r3, r3
 8013294:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	3302      	adds	r3, #2
 801329a:	781b      	ldrb	r3, [r3, #0]
 801329c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	3303      	adds	r3, #3
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80132a6:	f107 0310 	add.w	r3, r7, #16
 80132aa:	61fb      	str	r3, [r7, #28]
 80132ac:	e090      	b.n	80133d0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	3304      	adds	r3, #4
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	405a      	eors	r2, r3
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	3308      	adds	r3, #8
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	4013      	ands	r3, r2
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d012      	beq.n	80132ec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80132cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d00b      	beq.n	80132ec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	330c      	adds	r3, #12
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d003      	beq.n	80132e6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	330c      	adds	r3, #12
 80132e2:	61bb      	str	r3, [r7, #24]
 80132e4:	e002      	b.n	80132ec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80132e6:	f06f 0303 	mvn.w	r3, #3
 80132ea:	e07d      	b.n	80133e8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80132ec:	4b46      	ldr	r3, [pc, #280]	; (8013408 <etharp_output+0x1fc>)
 80132ee:	781b      	ldrb	r3, [r3, #0]
 80132f0:	4619      	mov	r1, r3
 80132f2:	4a46      	ldr	r2, [pc, #280]	; (801340c <etharp_output+0x200>)
 80132f4:	460b      	mov	r3, r1
 80132f6:	005b      	lsls	r3, r3, #1
 80132f8:	440b      	add	r3, r1
 80132fa:	00db      	lsls	r3, r3, #3
 80132fc:	4413      	add	r3, r2
 80132fe:	3314      	adds	r3, #20
 8013300:	781b      	ldrb	r3, [r3, #0]
 8013302:	2b01      	cmp	r3, #1
 8013304:	d925      	bls.n	8013352 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013306:	4b40      	ldr	r3, [pc, #256]	; (8013408 <etharp_output+0x1fc>)
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	4619      	mov	r1, r3
 801330c:	4a3f      	ldr	r2, [pc, #252]	; (801340c <etharp_output+0x200>)
 801330e:	460b      	mov	r3, r1
 8013310:	005b      	lsls	r3, r3, #1
 8013312:	440b      	add	r3, r1
 8013314:	00db      	lsls	r3, r3, #3
 8013316:	4413      	add	r3, r2
 8013318:	3308      	adds	r3, #8
 801331a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801331c:	68fa      	ldr	r2, [r7, #12]
 801331e:	429a      	cmp	r2, r3
 8013320:	d117      	bne.n	8013352 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	681a      	ldr	r2, [r3, #0]
 8013326:	4b38      	ldr	r3, [pc, #224]	; (8013408 <etharp_output+0x1fc>)
 8013328:	781b      	ldrb	r3, [r3, #0]
 801332a:	4618      	mov	r0, r3
 801332c:	4937      	ldr	r1, [pc, #220]	; (801340c <etharp_output+0x200>)
 801332e:	4603      	mov	r3, r0
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	4403      	add	r3, r0
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	440b      	add	r3, r1
 8013338:	3304      	adds	r3, #4
 801333a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801333c:	429a      	cmp	r2, r3
 801333e:	d108      	bne.n	8013352 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013340:	4b31      	ldr	r3, [pc, #196]	; (8013408 <etharp_output+0x1fc>)
 8013342:	781b      	ldrb	r3, [r3, #0]
 8013344:	461a      	mov	r2, r3
 8013346:	68b9      	ldr	r1, [r7, #8]
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f7ff fec5 	bl	80130d8 <etharp_output_to_arp_index>
 801334e:	4603      	mov	r3, r0
 8013350:	e04a      	b.n	80133e8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013352:	2300      	movs	r3, #0
 8013354:	75fb      	strb	r3, [r7, #23]
 8013356:	e031      	b.n	80133bc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013358:	7dfa      	ldrb	r2, [r7, #23]
 801335a:	492c      	ldr	r1, [pc, #176]	; (801340c <etharp_output+0x200>)
 801335c:	4613      	mov	r3, r2
 801335e:	005b      	lsls	r3, r3, #1
 8013360:	4413      	add	r3, r2
 8013362:	00db      	lsls	r3, r3, #3
 8013364:	440b      	add	r3, r1
 8013366:	3314      	adds	r3, #20
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d923      	bls.n	80133b6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801336e:	7dfa      	ldrb	r2, [r7, #23]
 8013370:	4926      	ldr	r1, [pc, #152]	; (801340c <etharp_output+0x200>)
 8013372:	4613      	mov	r3, r2
 8013374:	005b      	lsls	r3, r3, #1
 8013376:	4413      	add	r3, r2
 8013378:	00db      	lsls	r3, r3, #3
 801337a:	440b      	add	r3, r1
 801337c:	3308      	adds	r3, #8
 801337e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013380:	68fa      	ldr	r2, [r7, #12]
 8013382:	429a      	cmp	r2, r3
 8013384:	d117      	bne.n	80133b6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	6819      	ldr	r1, [r3, #0]
 801338a:	7dfa      	ldrb	r2, [r7, #23]
 801338c:	481f      	ldr	r0, [pc, #124]	; (801340c <etharp_output+0x200>)
 801338e:	4613      	mov	r3, r2
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	4403      	add	r3, r0
 8013398:	3304      	adds	r3, #4
 801339a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801339c:	4299      	cmp	r1, r3
 801339e:	d10a      	bne.n	80133b6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80133a0:	4a19      	ldr	r2, [pc, #100]	; (8013408 <etharp_output+0x1fc>)
 80133a2:	7dfb      	ldrb	r3, [r7, #23]
 80133a4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80133a6:	7dfb      	ldrb	r3, [r7, #23]
 80133a8:	461a      	mov	r2, r3
 80133aa:	68b9      	ldr	r1, [r7, #8]
 80133ac:	68f8      	ldr	r0, [r7, #12]
 80133ae:	f7ff fe93 	bl	80130d8 <etharp_output_to_arp_index>
 80133b2:	4603      	mov	r3, r0
 80133b4:	e018      	b.n	80133e8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80133b6:	7dfb      	ldrb	r3, [r7, #23]
 80133b8:	3301      	adds	r3, #1
 80133ba:	75fb      	strb	r3, [r7, #23]
 80133bc:	7dfb      	ldrb	r3, [r7, #23]
 80133be:	2b09      	cmp	r3, #9
 80133c0:	d9ca      	bls.n	8013358 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80133c2:	68ba      	ldr	r2, [r7, #8]
 80133c4:	69b9      	ldr	r1, [r7, #24]
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	f000 f822 	bl	8013410 <etharp_query>
 80133cc:	4603      	mov	r3, r0
 80133ce:	e00b      	b.n	80133e8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80133d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	68b9      	ldr	r1, [r7, #8]
 80133e0:	68f8      	ldr	r0, [r7, #12]
 80133e2:	f000 faa1 	bl	8013928 <ethernet_output>
 80133e6:	4603      	mov	r3, r0
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	3720      	adds	r7, #32
 80133ec:	46bd      	mov	sp, r7
 80133ee:	bd80      	pop	{r7, pc}
 80133f0:	0801dcc8 	.word	0x0801dcc8
 80133f4:	0801de40 	.word	0x0801de40
 80133f8:	0801dd68 	.word	0x0801dd68
 80133fc:	0801de90 	.word	0x0801de90
 8013400:	0801de30 	.word	0x0801de30
 8013404:	08020d14 	.word	0x08020d14
 8013408:	240001e4 	.word	0x240001e4
 801340c:	240000f4 	.word	0x240000f4

08013410 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b08c      	sub	sp, #48	; 0x30
 8013414:	af02      	add	r7, sp, #8
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	332a      	adds	r3, #42	; 0x2a
 8013420:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013422:	23ff      	movs	r3, #255	; 0xff
 8013424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801342c:	68bb      	ldr	r3, [r7, #8]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	68f9      	ldr	r1, [r7, #12]
 8013432:	4618      	mov	r0, r3
 8013434:	f000 fff8 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8013438:	4603      	mov	r3, r0
 801343a:	2b00      	cmp	r3, #0
 801343c:	d10c      	bne.n	8013458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013446:	2be0      	cmp	r3, #224	; 0xe0
 8013448:	d006      	beq.n	8013458 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d003      	beq.n	8013458 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d102      	bne.n	801345e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013458:	f06f 030f 	mvn.w	r3, #15
 801345c:	e102      	b.n	8013664 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801345e:	68fa      	ldr	r2, [r7, #12]
 8013460:	2101      	movs	r1, #1
 8013462:	68b8      	ldr	r0, [r7, #8]
 8013464:	f7ff fb5c 	bl	8012b20 <etharp_find_entry>
 8013468:	4603      	mov	r3, r0
 801346a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801346c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013470:	2b00      	cmp	r3, #0
 8013472:	da02      	bge.n	801347a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013474:	8a7b      	ldrh	r3, [r7, #18]
 8013476:	b25b      	sxtb	r3, r3
 8013478:	e0f4      	b.n	8013664 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801347a:	8a7b      	ldrh	r3, [r7, #18]
 801347c:	2b7e      	cmp	r3, #126	; 0x7e
 801347e:	d906      	bls.n	801348e <etharp_query+0x7e>
 8013480:	4b7a      	ldr	r3, [pc, #488]	; (801366c <etharp_query+0x25c>)
 8013482:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013486:	497a      	ldr	r1, [pc, #488]	; (8013670 <etharp_query+0x260>)
 8013488:	487a      	ldr	r0, [pc, #488]	; (8013674 <etharp_query+0x264>)
 801348a:	f009 fa95 	bl	801c9b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801348e:	8a7b      	ldrh	r3, [r7, #18]
 8013490:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013492:	7c7a      	ldrb	r2, [r7, #17]
 8013494:	4978      	ldr	r1, [pc, #480]	; (8013678 <etharp_query+0x268>)
 8013496:	4613      	mov	r3, r2
 8013498:	005b      	lsls	r3, r3, #1
 801349a:	4413      	add	r3, r2
 801349c:	00db      	lsls	r3, r3, #3
 801349e:	440b      	add	r3, r1
 80134a0:	3314      	adds	r3, #20
 80134a2:	781b      	ldrb	r3, [r3, #0]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d115      	bne.n	80134d4 <etharp_query+0xc4>
    is_new_entry = 1;
 80134a8:	2301      	movs	r3, #1
 80134aa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80134ac:	7c7a      	ldrb	r2, [r7, #17]
 80134ae:	4972      	ldr	r1, [pc, #456]	; (8013678 <etharp_query+0x268>)
 80134b0:	4613      	mov	r3, r2
 80134b2:	005b      	lsls	r3, r3, #1
 80134b4:	4413      	add	r3, r2
 80134b6:	00db      	lsls	r3, r3, #3
 80134b8:	440b      	add	r3, r1
 80134ba:	3314      	adds	r3, #20
 80134bc:	2201      	movs	r2, #1
 80134be:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80134c0:	7c7a      	ldrb	r2, [r7, #17]
 80134c2:	496d      	ldr	r1, [pc, #436]	; (8013678 <etharp_query+0x268>)
 80134c4:	4613      	mov	r3, r2
 80134c6:	005b      	lsls	r3, r3, #1
 80134c8:	4413      	add	r3, r2
 80134ca:	00db      	lsls	r3, r3, #3
 80134cc:	440b      	add	r3, r1
 80134ce:	3308      	adds	r3, #8
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80134d4:	7c7a      	ldrb	r2, [r7, #17]
 80134d6:	4968      	ldr	r1, [pc, #416]	; (8013678 <etharp_query+0x268>)
 80134d8:	4613      	mov	r3, r2
 80134da:	005b      	lsls	r3, r3, #1
 80134dc:	4413      	add	r3, r2
 80134de:	00db      	lsls	r3, r3, #3
 80134e0:	440b      	add	r3, r1
 80134e2:	3314      	adds	r3, #20
 80134e4:	781b      	ldrb	r3, [r3, #0]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	d011      	beq.n	801350e <etharp_query+0xfe>
 80134ea:	7c7a      	ldrb	r2, [r7, #17]
 80134ec:	4962      	ldr	r1, [pc, #392]	; (8013678 <etharp_query+0x268>)
 80134ee:	4613      	mov	r3, r2
 80134f0:	005b      	lsls	r3, r3, #1
 80134f2:	4413      	add	r3, r2
 80134f4:	00db      	lsls	r3, r3, #3
 80134f6:	440b      	add	r3, r1
 80134f8:	3314      	adds	r3, #20
 80134fa:	781b      	ldrb	r3, [r3, #0]
 80134fc:	2b01      	cmp	r3, #1
 80134fe:	d806      	bhi.n	801350e <etharp_query+0xfe>
 8013500:	4b5a      	ldr	r3, [pc, #360]	; (801366c <etharp_query+0x25c>)
 8013502:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013506:	495d      	ldr	r1, [pc, #372]	; (801367c <etharp_query+0x26c>)
 8013508:	485a      	ldr	r0, [pc, #360]	; (8013674 <etharp_query+0x264>)
 801350a:	f009 fa55 	bl	801c9b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801350e:	6a3b      	ldr	r3, [r7, #32]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d102      	bne.n	801351a <etharp_query+0x10a>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d10c      	bne.n	8013534 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801351a:	68b9      	ldr	r1, [r7, #8]
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 f963 	bl	80137e8 <etharp_request>
 8013522:	4603      	mov	r3, r0
 8013524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d102      	bne.n	8013534 <etharp_query+0x124>
      return result;
 801352e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013532:	e097      	b.n	8013664 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d106      	bne.n	8013548 <etharp_query+0x138>
 801353a:	4b4c      	ldr	r3, [pc, #304]	; (801366c <etharp_query+0x25c>)
 801353c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013540:	494f      	ldr	r1, [pc, #316]	; (8013680 <etharp_query+0x270>)
 8013542:	484c      	ldr	r0, [pc, #304]	; (8013674 <etharp_query+0x264>)
 8013544:	f009 fa38 	bl	801c9b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013548:	7c7a      	ldrb	r2, [r7, #17]
 801354a:	494b      	ldr	r1, [pc, #300]	; (8013678 <etharp_query+0x268>)
 801354c:	4613      	mov	r3, r2
 801354e:	005b      	lsls	r3, r3, #1
 8013550:	4413      	add	r3, r2
 8013552:	00db      	lsls	r3, r3, #3
 8013554:	440b      	add	r3, r1
 8013556:	3314      	adds	r3, #20
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	2b01      	cmp	r3, #1
 801355c:	d918      	bls.n	8013590 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801355e:	4a49      	ldr	r2, [pc, #292]	; (8013684 <etharp_query+0x274>)
 8013560:	7c7b      	ldrb	r3, [r7, #17]
 8013562:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013564:	7c7a      	ldrb	r2, [r7, #17]
 8013566:	4613      	mov	r3, r2
 8013568:	005b      	lsls	r3, r3, #1
 801356a:	4413      	add	r3, r2
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	3308      	adds	r3, #8
 8013570:	4a41      	ldr	r2, [pc, #260]	; (8013678 <etharp_query+0x268>)
 8013572:	4413      	add	r3, r2
 8013574:	1d1a      	adds	r2, r3, #4
 8013576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801357a:	9300      	str	r3, [sp, #0]
 801357c:	4613      	mov	r3, r2
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	6879      	ldr	r1, [r7, #4]
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f000 f9d0 	bl	8013928 <ethernet_output>
 8013588:	4603      	mov	r3, r0
 801358a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801358e:	e067      	b.n	8013660 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013590:	7c7a      	ldrb	r2, [r7, #17]
 8013592:	4939      	ldr	r1, [pc, #228]	; (8013678 <etharp_query+0x268>)
 8013594:	4613      	mov	r3, r2
 8013596:	005b      	lsls	r3, r3, #1
 8013598:	4413      	add	r3, r2
 801359a:	00db      	lsls	r3, r3, #3
 801359c:	440b      	add	r3, r1
 801359e:	3314      	adds	r3, #20
 80135a0:	781b      	ldrb	r3, [r3, #0]
 80135a2:	2b01      	cmp	r3, #1
 80135a4:	d15c      	bne.n	8013660 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 80135ae:	e01c      	b.n	80135ea <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	895a      	ldrh	r2, [r3, #10]
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	891b      	ldrh	r3, [r3, #8]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d10a      	bne.n	80135d2 <etharp_query+0x1c2>
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d006      	beq.n	80135d2 <etharp_query+0x1c2>
 80135c4:	4b29      	ldr	r3, [pc, #164]	; (801366c <etharp_query+0x25c>)
 80135c6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80135ca:	492f      	ldr	r1, [pc, #188]	; (8013688 <etharp_query+0x278>)
 80135cc:	4829      	ldr	r0, [pc, #164]	; (8013674 <etharp_query+0x264>)
 80135ce:	f009 f9f3 	bl	801c9b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	7b1b      	ldrb	r3, [r3, #12]
 80135d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d002      	beq.n	80135e4 <etharp_query+0x1d4>
        copy_needed = 1;
 80135de:	2301      	movs	r3, #1
 80135e0:	61bb      	str	r3, [r7, #24]
        break;
 80135e2:	e005      	b.n	80135f0 <etharp_query+0x1e0>
      }
      p = p->next;
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d1df      	bne.n	80135b0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80135f0:	69bb      	ldr	r3, [r7, #24]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d007      	beq.n	8013606 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	f44f 7120 	mov.w	r1, #640	; 0x280
 80135fc:	200e      	movs	r0, #14
 80135fe:	f003 fa45 	bl	8016a8c <pbuf_clone>
 8013602:	61f8      	str	r0, [r7, #28]
 8013604:	e004      	b.n	8013610 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801360a:	69f8      	ldr	r0, [r7, #28]
 801360c:	f003 f872 	bl	80166f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d021      	beq.n	801365a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013616:	7c7a      	ldrb	r2, [r7, #17]
 8013618:	4917      	ldr	r1, [pc, #92]	; (8013678 <etharp_query+0x268>)
 801361a:	4613      	mov	r3, r2
 801361c:	005b      	lsls	r3, r3, #1
 801361e:	4413      	add	r3, r2
 8013620:	00db      	lsls	r3, r3, #3
 8013622:	440b      	add	r3, r1
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d00a      	beq.n	8013640 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801362a:	7c7a      	ldrb	r2, [r7, #17]
 801362c:	4912      	ldr	r1, [pc, #72]	; (8013678 <etharp_query+0x268>)
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	440b      	add	r3, r1
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	4618      	mov	r0, r3
 801363c:	f002 ffba 	bl	80165b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8013640:	7c7a      	ldrb	r2, [r7, #17]
 8013642:	490d      	ldr	r1, [pc, #52]	; (8013678 <etharp_query+0x268>)
 8013644:	4613      	mov	r3, r2
 8013646:	005b      	lsls	r3, r3, #1
 8013648:	4413      	add	r3, r2
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	440b      	add	r3, r1
 801364e:	69fa      	ldr	r2, [r7, #28]
 8013650:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013658:	e002      	b.n	8013660 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801365a:	23ff      	movs	r3, #255	; 0xff
 801365c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013664:	4618      	mov	r0, r3
 8013666:	3728      	adds	r7, #40	; 0x28
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	0801dcc8 	.word	0x0801dcc8
 8013670:	0801de9c 	.word	0x0801de9c
 8013674:	0801dd68 	.word	0x0801dd68
 8013678:	240000f4 	.word	0x240000f4
 801367c:	0801deac 	.word	0x0801deac
 8013680:	0801de90 	.word	0x0801de90
 8013684:	240001e4 	.word	0x240001e4
 8013688:	0801ded4 	.word	0x0801ded4

0801368c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b08a      	sub	sp, #40	; 0x28
 8013690:	af02      	add	r7, sp, #8
 8013692:	60f8      	str	r0, [r7, #12]
 8013694:	60b9      	str	r1, [r7, #8]
 8013696:	607a      	str	r2, [r7, #4]
 8013698:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801369a:	2300      	movs	r3, #0
 801369c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d106      	bne.n	80136b2 <etharp_raw+0x26>
 80136a4:	4b3a      	ldr	r3, [pc, #232]	; (8013790 <etharp_raw+0x104>)
 80136a6:	f240 4257 	movw	r2, #1111	; 0x457
 80136aa:	493a      	ldr	r1, [pc, #232]	; (8013794 <etharp_raw+0x108>)
 80136ac:	483a      	ldr	r0, [pc, #232]	; (8013798 <etharp_raw+0x10c>)
 80136ae:	f009 f983 	bl	801c9b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80136b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b6:	211c      	movs	r1, #28
 80136b8:	200e      	movs	r0, #14
 80136ba:	f002 fc9b 	bl	8015ff4 <pbuf_alloc>
 80136be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d102      	bne.n	80136cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80136c6:	f04f 33ff 	mov.w	r3, #4294967295
 80136ca:	e05d      	b.n	8013788 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	895b      	ldrh	r3, [r3, #10]
 80136d0:	2b1b      	cmp	r3, #27
 80136d2:	d806      	bhi.n	80136e2 <etharp_raw+0x56>
 80136d4:	4b2e      	ldr	r3, [pc, #184]	; (8013790 <etharp_raw+0x104>)
 80136d6:	f240 4263 	movw	r2, #1123	; 0x463
 80136da:	4930      	ldr	r1, [pc, #192]	; (801379c <etharp_raw+0x110>)
 80136dc:	482e      	ldr	r0, [pc, #184]	; (8013798 <etharp_raw+0x10c>)
 80136de:	f009 f96b 	bl	801c9b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80136e2:	69bb      	ldr	r3, [r7, #24]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80136e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fd fab9 	bl	8010c62 <lwip_htons>
 80136f0:	4603      	mov	r3, r0
 80136f2:	461a      	mov	r2, r3
 80136f4:	697b      	ldr	r3, [r7, #20]
 80136f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80136fe:	2b06      	cmp	r3, #6
 8013700:	d006      	beq.n	8013710 <etharp_raw+0x84>
 8013702:	4b23      	ldr	r3, [pc, #140]	; (8013790 <etharp_raw+0x104>)
 8013704:	f240 426a 	movw	r2, #1130	; 0x46a
 8013708:	4925      	ldr	r1, [pc, #148]	; (80137a0 <etharp_raw+0x114>)
 801370a:	4823      	ldr	r0, [pc, #140]	; (8013798 <etharp_raw+0x10c>)
 801370c:	f009 f954 	bl	801c9b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	3308      	adds	r3, #8
 8013714:	2206      	movs	r2, #6
 8013716:	6839      	ldr	r1, [r7, #0]
 8013718:	4618      	mov	r0, r3
 801371a:	f009 f93a 	bl	801c992 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	3312      	adds	r3, #18
 8013722:	2206      	movs	r2, #6
 8013724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013726:	4618      	mov	r0, r3
 8013728:	f009 f933 	bl	801c992 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	330e      	adds	r3, #14
 8013730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013732:	6812      	ldr	r2, [r2, #0]
 8013734:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	3318      	adds	r3, #24
 801373a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801373c:	6812      	ldr	r2, [r2, #0]
 801373e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	2200      	movs	r2, #0
 8013744:	701a      	strb	r2, [r3, #0]
 8013746:	2200      	movs	r2, #0
 8013748:	f042 0201 	orr.w	r2, r2, #1
 801374c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	2200      	movs	r2, #0
 8013752:	f042 0208 	orr.w	r2, r2, #8
 8013756:	709a      	strb	r2, [r3, #2]
 8013758:	2200      	movs	r2, #0
 801375a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	2206      	movs	r2, #6
 8013760:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	2204      	movs	r2, #4
 8013766:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013768:	f640 0306 	movw	r3, #2054	; 0x806
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	68ba      	ldr	r2, [r7, #8]
 8013772:	69b9      	ldr	r1, [r7, #24]
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f000 f8d7 	bl	8013928 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801377a:	69b8      	ldr	r0, [r7, #24]
 801377c:	f002 ff1a 	bl	80165b4 <pbuf_free>
  p = NULL;
 8013780:	2300      	movs	r3, #0
 8013782:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013784:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013788:	4618      	mov	r0, r3
 801378a:	3720      	adds	r7, #32
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	0801dcc8 	.word	0x0801dcc8
 8013794:	0801de40 	.word	0x0801de40
 8013798:	0801dd68 	.word	0x0801dd68
 801379c:	0801def0 	.word	0x0801def0
 80137a0:	0801df24 	.word	0x0801df24

080137a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b088      	sub	sp, #32
 80137a8:	af04      	add	r7, sp, #16
 80137aa:	60f8      	str	r0, [r7, #12]
 80137ac:	60b9      	str	r1, [r7, #8]
 80137ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80137c0:	2201      	movs	r2, #1
 80137c2:	9203      	str	r2, [sp, #12]
 80137c4:	68ba      	ldr	r2, [r7, #8]
 80137c6:	9202      	str	r2, [sp, #8]
 80137c8:	4a06      	ldr	r2, [pc, #24]	; (80137e4 <etharp_request_dst+0x40>)
 80137ca:	9201      	str	r2, [sp, #4]
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	4603      	mov	r3, r0
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	68f8      	ldr	r0, [r7, #12]
 80137d4:	f7ff ff5a 	bl	801368c <etharp_raw>
 80137d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80137da:	4618      	mov	r0, r3
 80137dc:	3710      	adds	r7, #16
 80137de:	46bd      	mov	sp, r7
 80137e0:	bd80      	pop	{r7, pc}
 80137e2:	bf00      	nop
 80137e4:	08020d1c 	.word	0x08020d1c

080137e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
 80137f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80137f2:	4a05      	ldr	r2, [pc, #20]	; (8013808 <etharp_request+0x20>)
 80137f4:	6839      	ldr	r1, [r7, #0]
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7ff ffd4 	bl	80137a4 <etharp_request_dst>
 80137fc:	4603      	mov	r3, r0
}
 80137fe:	4618      	mov	r0, r3
 8013800:	3708      	adds	r7, #8
 8013802:	46bd      	mov	sp, r7
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	08020d14 	.word	0x08020d14

0801380c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b086      	sub	sp, #24
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
 8013814:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013816:	230e      	movs	r3, #14
 8013818:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	895b      	ldrh	r3, [r3, #10]
 801381e:	2b0e      	cmp	r3, #14
 8013820:	d96e      	bls.n	8013900 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	7bdb      	ldrb	r3, [r3, #15]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d106      	bne.n	8013838 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013830:	3301      	adds	r3, #1
 8013832:	b2da      	uxtb	r2, r3
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	685b      	ldr	r3, [r3, #4]
 801383c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	7b1a      	ldrb	r2, [r3, #12]
 8013842:	7b5b      	ldrb	r3, [r3, #13]
 8013844:	021b      	lsls	r3, r3, #8
 8013846:	4313      	orrs	r3, r2
 8013848:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	781b      	ldrb	r3, [r3, #0]
 801384e:	f003 0301 	and.w	r3, r3, #1
 8013852:	2b00      	cmp	r3, #0
 8013854:	d023      	beq.n	801389e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b01      	cmp	r3, #1
 801385c:	d10f      	bne.n	801387e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	785b      	ldrb	r3, [r3, #1]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d11b      	bne.n	801389e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013866:	693b      	ldr	r3, [r7, #16]
 8013868:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801386a:	2b5e      	cmp	r3, #94	; 0x5e
 801386c:	d117      	bne.n	801389e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	7b5b      	ldrb	r3, [r3, #13]
 8013872:	f043 0310 	orr.w	r3, r3, #16
 8013876:	b2da      	uxtb	r2, r3
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	735a      	strb	r2, [r3, #13]
 801387c:	e00f      	b.n	801389e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	2206      	movs	r2, #6
 8013882:	4928      	ldr	r1, [pc, #160]	; (8013924 <ethernet_input+0x118>)
 8013884:	4618      	mov	r0, r3
 8013886:	f009 f875 	bl	801c974 <memcmp>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d106      	bne.n	801389e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7b5b      	ldrb	r3, [r3, #13]
 8013894:	f043 0308 	orr.w	r3, r3, #8
 8013898:	b2da      	uxtb	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801389e:	89fb      	ldrh	r3, [r7, #14]
 80138a0:	2b08      	cmp	r3, #8
 80138a2:	d003      	beq.n	80138ac <ethernet_input+0xa0>
 80138a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80138a8:	d014      	beq.n	80138d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80138aa:	e032      	b.n	8013912 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138b2:	f003 0308 	and.w	r3, r3, #8
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d024      	beq.n	8013904 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80138ba:	8afb      	ldrh	r3, [r7, #22]
 80138bc:	4619      	mov	r1, r3
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f002 fdf2 	bl	80164a8 <pbuf_remove_header>
 80138c4:	4603      	mov	r3, r0
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d11e      	bne.n	8013908 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80138ca:	6839      	ldr	r1, [r7, #0]
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 fb93 	bl	8013ff8 <ip4_input>
      break;
 80138d2:	e013      	b.n	80138fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138da:	f003 0308 	and.w	r3, r3, #8
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d014      	beq.n	801390c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80138e2:	8afb      	ldrh	r3, [r7, #22]
 80138e4:	4619      	mov	r1, r3
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f002 fdde 	bl	80164a8 <pbuf_remove_header>
 80138ec:	4603      	mov	r3, r0
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d10e      	bne.n	8013910 <ethernet_input+0x104>
        etharp_input(p, netif);
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f7ff fb61 	bl	8012fbc <etharp_input>
      break;
 80138fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	e00c      	b.n	801391a <ethernet_input+0x10e>
    goto free_and_return;
 8013900:	bf00      	nop
 8013902:	e006      	b.n	8013912 <ethernet_input+0x106>
        goto free_and_return;
 8013904:	bf00      	nop
 8013906:	e004      	b.n	8013912 <ethernet_input+0x106>
        goto free_and_return;
 8013908:	bf00      	nop
 801390a:	e002      	b.n	8013912 <ethernet_input+0x106>
        goto free_and_return;
 801390c:	bf00      	nop
 801390e:	e000      	b.n	8013912 <ethernet_input+0x106>
        goto free_and_return;
 8013910:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f002 fe4e 	bl	80165b4 <pbuf_free>
  return ERR_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3718      	adds	r7, #24
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	08020d14 	.word	0x08020d14

08013928 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013928:	b580      	push	{r7, lr}
 801392a:	b086      	sub	sp, #24
 801392c:	af00      	add	r7, sp, #0
 801392e:	60f8      	str	r0, [r7, #12]
 8013930:	60b9      	str	r1, [r7, #8]
 8013932:	607a      	str	r2, [r7, #4]
 8013934:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013936:	8c3b      	ldrh	r3, [r7, #32]
 8013938:	4618      	mov	r0, r3
 801393a:	f7fd f992 	bl	8010c62 <lwip_htons>
 801393e:	4603      	mov	r3, r0
 8013940:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013942:	210e      	movs	r1, #14
 8013944:	68b8      	ldr	r0, [r7, #8]
 8013946:	f002 fd9f 	bl	8016488 <pbuf_add_header>
 801394a:	4603      	mov	r3, r0
 801394c:	2b00      	cmp	r3, #0
 801394e:	d125      	bne.n	801399c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	8afa      	ldrh	r2, [r7, #22]
 801395a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	2206      	movs	r2, #6
 8013960:	6839      	ldr	r1, [r7, #0]
 8013962:	4618      	mov	r0, r3
 8013964:	f009 f815 	bl	801c992 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	3306      	adds	r3, #6
 801396c:	2206      	movs	r2, #6
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	4618      	mov	r0, r3
 8013972:	f009 f80e 	bl	801c992 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801397c:	2b06      	cmp	r3, #6
 801397e:	d006      	beq.n	801398e <ethernet_output+0x66>
 8013980:	4b0a      	ldr	r3, [pc, #40]	; (80139ac <ethernet_output+0x84>)
 8013982:	f240 1233 	movw	r2, #307	; 0x133
 8013986:	490a      	ldr	r1, [pc, #40]	; (80139b0 <ethernet_output+0x88>)
 8013988:	480a      	ldr	r0, [pc, #40]	; (80139b4 <ethernet_output+0x8c>)
 801398a:	f009 f815 	bl	801c9b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	699b      	ldr	r3, [r3, #24]
 8013992:	68b9      	ldr	r1, [r7, #8]
 8013994:	68f8      	ldr	r0, [r7, #12]
 8013996:	4798      	blx	r3
 8013998:	4603      	mov	r3, r0
 801399a:	e002      	b.n	80139a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801399c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801399e:	f06f 0301 	mvn.w	r3, #1
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	3718      	adds	r7, #24
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd80      	pop	{r7, pc}
 80139aa:	bf00      	nop
 80139ac:	0801df68 	.word	0x0801df68
 80139b0:	0801dfc8 	.word	0x0801dfc8
 80139b4:	0801dffc 	.word	0x0801dffc

080139b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b08e      	sub	sp, #56	; 0x38
 80139bc:	af04      	add	r7, sp, #16
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80139c2:	4b87      	ldr	r3, [pc, #540]	; (8013be0 <icmp_input+0x228>)
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80139c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ca:	781b      	ldrb	r3, [r3, #0]
 80139cc:	f003 030f 	and.w	r3, r3, #15
 80139d0:	b2db      	uxtb	r3, r3
 80139d2:	009b      	lsls	r3, r3, #2
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80139d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139da:	2b13      	cmp	r3, #19
 80139dc:	f240 80e8 	bls.w	8013bb0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	895b      	ldrh	r3, [r3, #10]
 80139e4:	2b03      	cmp	r3, #3
 80139e6:	f240 80e5 	bls.w	8013bb4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80139f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f000 80d2 	beq.w	8013ba2 <icmp_input+0x1ea>
 80139fe:	2b08      	cmp	r3, #8
 8013a00:	f040 80d2 	bne.w	8013ba8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013a04:	4b77      	ldr	r3, [pc, #476]	; (8013be4 <icmp_input+0x22c>)
 8013a06:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013a08:	4b75      	ldr	r3, [pc, #468]	; (8013be0 <icmp_input+0x228>)
 8013a0a:	695b      	ldr	r3, [r3, #20]
 8013a0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013a10:	2be0      	cmp	r3, #224	; 0xe0
 8013a12:	f000 80d6 	beq.w	8013bc2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013a16:	4b72      	ldr	r3, [pc, #456]	; (8013be0 <icmp_input+0x228>)
 8013a18:	695a      	ldr	r2, [r3, #20]
 8013a1a:	4b71      	ldr	r3, [pc, #452]	; (8013be0 <icmp_input+0x228>)
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	4619      	mov	r1, r3
 8013a20:	4610      	mov	r0, r2
 8013a22:	f000 fd01 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f040 80cc 	bne.w	8013bc6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	891b      	ldrh	r3, [r3, #8]
 8013a32:	2b07      	cmp	r3, #7
 8013a34:	f240 80c0 	bls.w	8013bb8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 f9e0 	bl	8013dfe <inet_chksum_pbuf>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d003      	beq.n	8013a4c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f002 fdb5 	bl	80165b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8013a4a:	e0c5      	b.n	8013bd8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013a4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a4e:	330e      	adds	r3, #14
 8013a50:	4619      	mov	r1, r3
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f002 fd18 	bl	8016488 <pbuf_add_header>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d04b      	beq.n	8013af6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	891a      	ldrh	r2, [r3, #8]
 8013a62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a64:	4413      	add	r3, r2
 8013a66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	891b      	ldrh	r3, [r3, #8]
 8013a6c:	8b7a      	ldrh	r2, [r7, #26]
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	f0c0 80ab 	bcc.w	8013bca <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013a74:	8b7b      	ldrh	r3, [r7, #26]
 8013a76:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	200e      	movs	r0, #14
 8013a7e:	f002 fab9 	bl	8015ff4 <pbuf_alloc>
 8013a82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	f000 80a1 	beq.w	8013bce <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013a8c:	697b      	ldr	r3, [r7, #20]
 8013a8e:	895b      	ldrh	r3, [r3, #10]
 8013a90:	461a      	mov	r2, r3
 8013a92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a94:	3308      	adds	r3, #8
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d203      	bcs.n	8013aa2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013a9a:	6978      	ldr	r0, [r7, #20]
 8013a9c:	f002 fd8a 	bl	80165b4 <pbuf_free>
          goto icmperr;
 8013aa0:	e096      	b.n	8013bd0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f008 ff71 	bl	801c992 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ab2:	4619      	mov	r1, r3
 8013ab4:	6978      	ldr	r0, [r7, #20]
 8013ab6:	f002 fcf7 	bl	80164a8 <pbuf_remove_header>
 8013aba:	4603      	mov	r3, r0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d009      	beq.n	8013ad4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013ac0:	4b49      	ldr	r3, [pc, #292]	; (8013be8 <icmp_input+0x230>)
 8013ac2:	22b6      	movs	r2, #182	; 0xb6
 8013ac4:	4949      	ldr	r1, [pc, #292]	; (8013bec <icmp_input+0x234>)
 8013ac6:	484a      	ldr	r0, [pc, #296]	; (8013bf0 <icmp_input+0x238>)
 8013ac8:	f008 ff76 	bl	801c9b8 <iprintf>
          pbuf_free(r);
 8013acc:	6978      	ldr	r0, [r7, #20]
 8013ace:	f002 fd71 	bl	80165b4 <pbuf_free>
          goto icmperr;
 8013ad2:	e07d      	b.n	8013bd0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013ad4:	6879      	ldr	r1, [r7, #4]
 8013ad6:	6978      	ldr	r0, [r7, #20]
 8013ad8:	f002 fe94 	bl	8016804 <pbuf_copy>
 8013adc:	4603      	mov	r3, r0
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d003      	beq.n	8013aea <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013ae2:	6978      	ldr	r0, [r7, #20]
 8013ae4:	f002 fd66 	bl	80165b4 <pbuf_free>
          goto icmperr;
 8013ae8:	e072      	b.n	8013bd0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f002 fd62 	bl	80165b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	607b      	str	r3, [r7, #4]
 8013af4:	e00f      	b.n	8013b16 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013af6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013af8:	330e      	adds	r3, #14
 8013afa:	4619      	mov	r1, r3
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f002 fcd3 	bl	80164a8 <pbuf_remove_header>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d006      	beq.n	8013b16 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013b08:	4b37      	ldr	r3, [pc, #220]	; (8013be8 <icmp_input+0x230>)
 8013b0a:	22c7      	movs	r2, #199	; 0xc7
 8013b0c:	4939      	ldr	r1, [pc, #228]	; (8013bf4 <icmp_input+0x23c>)
 8013b0e:	4838      	ldr	r0, [pc, #224]	; (8013bf0 <icmp_input+0x238>)
 8013b10:	f008 ff52 	bl	801c9b8 <iprintf>
          goto icmperr;
 8013b14:	e05c      	b.n	8013bd0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013b1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b1e:	4619      	mov	r1, r3
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f002 fcb1 	bl	8016488 <pbuf_add_header>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d13c      	bne.n	8013ba6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	685b      	ldr	r3, [r3, #4]
 8013b30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013b3a:	4b29      	ldr	r3, [pc, #164]	; (8013be0 <icmp_input+0x228>)
 8013b3c:	691a      	ldr	r2, [r3, #16]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013b42:	693b      	ldr	r3, [r7, #16]
 8013b44:	2200      	movs	r2, #0
 8013b46:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8013b48:	693b      	ldr	r3, [r7, #16]
 8013b4a:	885b      	ldrh	r3, [r3, #2]
 8013b4c:	b29b      	uxth	r3, r3
 8013b4e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013b52:	4293      	cmp	r3, r2
 8013b54:	d907      	bls.n	8013b66 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8013b56:	693b      	ldr	r3, [r7, #16]
 8013b58:	885b      	ldrh	r3, [r3, #2]
 8013b5a:	b29b      	uxth	r3, r3
 8013b5c:	3309      	adds	r3, #9
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	693b      	ldr	r3, [r7, #16]
 8013b62:	805a      	strh	r2, [r3, #2]
 8013b64:	e006      	b.n	8013b74 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8013b66:	693b      	ldr	r3, [r7, #16]
 8013b68:	885b      	ldrh	r3, [r3, #2]
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	3308      	adds	r3, #8
 8013b6e:	b29a      	uxth	r2, r3
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	22ff      	movs	r2, #255	; 0xff
 8013b78:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	729a      	strb	r2, [r3, #10]
 8013b80:	2200      	movs	r2, #0
 8013b82:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	9302      	str	r3, [sp, #8]
 8013b88:	2301      	movs	r3, #1
 8013b8a:	9301      	str	r3, [sp, #4]
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	23ff      	movs	r3, #255	; 0xff
 8013b92:	2200      	movs	r2, #0
 8013b94:	69f9      	ldr	r1, [r7, #28]
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f000 fb6e 	bl	8014278 <ip4_output_if>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013ba0:	e001      	b.n	8013ba6 <icmp_input+0x1ee>
      break;
 8013ba2:	bf00      	nop
 8013ba4:	e000      	b.n	8013ba8 <icmp_input+0x1f0>
      break;
 8013ba6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f002 fd03 	bl	80165b4 <pbuf_free>
  return;
 8013bae:	e013      	b.n	8013bd8 <icmp_input+0x220>
    goto lenerr;
 8013bb0:	bf00      	nop
 8013bb2:	e002      	b.n	8013bba <icmp_input+0x202>
    goto lenerr;
 8013bb4:	bf00      	nop
 8013bb6:	e000      	b.n	8013bba <icmp_input+0x202>
        goto lenerr;
 8013bb8:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f002 fcfa 	bl	80165b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013bc0:	e00a      	b.n	8013bd8 <icmp_input+0x220>
        goto icmperr;
 8013bc2:	bf00      	nop
 8013bc4:	e004      	b.n	8013bd0 <icmp_input+0x218>
        goto icmperr;
 8013bc6:	bf00      	nop
 8013bc8:	e002      	b.n	8013bd0 <icmp_input+0x218>
          goto icmperr;
 8013bca:	bf00      	nop
 8013bcc:	e000      	b.n	8013bd0 <icmp_input+0x218>
          goto icmperr;
 8013bce:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f002 fcef 	bl	80165b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013bd6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013bd8:	3728      	adds	r7, #40	; 0x28
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	24004774 	.word	0x24004774
 8013be4:	24004788 	.word	0x24004788
 8013be8:	0801e024 	.word	0x0801e024
 8013bec:	0801e084 	.word	0x0801e084
 8013bf0:	0801e0bc 	.word	0x0801e0bc
 8013bf4:	0801e0e4 	.word	0x0801e0e4

08013bf8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b082      	sub	sp, #8
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	460b      	mov	r3, r1
 8013c02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013c04:	78fb      	ldrb	r3, [r7, #3]
 8013c06:	461a      	mov	r2, r3
 8013c08:	2103      	movs	r1, #3
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f000 f814 	bl	8013c38 <icmp_send_response>
}
 8013c10:	bf00      	nop
 8013c12:	3708      	adds	r7, #8
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	460b      	mov	r3, r1
 8013c22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013c24:	78fb      	ldrb	r3, [r7, #3]
 8013c26:	461a      	mov	r2, r3
 8013c28:	210b      	movs	r1, #11
 8013c2a:	6878      	ldr	r0, [r7, #4]
 8013c2c:	f000 f804 	bl	8013c38 <icmp_send_response>
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b08c      	sub	sp, #48	; 0x30
 8013c3c:	af04      	add	r7, sp, #16
 8013c3e:	6078      	str	r0, [r7, #4]
 8013c40:	460b      	mov	r3, r1
 8013c42:	70fb      	strb	r3, [r7, #3]
 8013c44:	4613      	mov	r3, r2
 8013c46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013c48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c4c:	2124      	movs	r1, #36	; 0x24
 8013c4e:	2022      	movs	r0, #34	; 0x22
 8013c50:	f002 f9d0 	bl	8015ff4 <pbuf_alloc>
 8013c54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013c56:	69fb      	ldr	r3, [r7, #28]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d056      	beq.n	8013d0a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	895b      	ldrh	r3, [r3, #10]
 8013c60:	2b23      	cmp	r3, #35	; 0x23
 8013c62:	d806      	bhi.n	8013c72 <icmp_send_response+0x3a>
 8013c64:	4b2b      	ldr	r3, [pc, #172]	; (8013d14 <icmp_send_response+0xdc>)
 8013c66:	f240 1269 	movw	r2, #361	; 0x169
 8013c6a:	492b      	ldr	r1, [pc, #172]	; (8013d18 <icmp_send_response+0xe0>)
 8013c6c:	482b      	ldr	r0, [pc, #172]	; (8013d1c <icmp_send_response+0xe4>)
 8013c6e:	f008 fea3 	bl	801c9b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	78fa      	ldrb	r2, [r7, #3]
 8013c82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	78ba      	ldrb	r2, [r7, #2]
 8013c88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	711a      	strb	r2, [r3, #4]
 8013c90:	2200      	movs	r2, #0
 8013c92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	2200      	movs	r2, #0
 8013c98:	719a      	strb	r2, [r3, #6]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013c9e:	69fb      	ldr	r3, [r7, #28]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	f103 0008 	add.w	r0, r3, #8
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	685b      	ldr	r3, [r3, #4]
 8013caa:	221c      	movs	r2, #28
 8013cac:	4619      	mov	r1, r3
 8013cae:	f008 fe70 	bl	801c992 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013cb2:	69bb      	ldr	r3, [r7, #24]
 8013cb4:	68db      	ldr	r3, [r3, #12]
 8013cb6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013cb8:	f107 030c 	add.w	r3, r7, #12
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f000 f901 	bl	8013ec4 <ip4_route>
 8013cc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013cc4:	693b      	ldr	r3, [r7, #16]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d01b      	beq.n	8013d02 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	2200      	movs	r2, #0
 8013cce:	709a      	strb	r2, [r3, #2]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	895b      	ldrh	r3, [r3, #10]
 8013cd8:	4619      	mov	r1, r3
 8013cda:	6978      	ldr	r0, [r7, #20]
 8013cdc:	f000 f87d 	bl	8013dda <inet_chksum>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013ce8:	f107 020c 	add.w	r2, r7, #12
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	9302      	str	r3, [sp, #8]
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	9301      	str	r3, [sp, #4]
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	23ff      	movs	r3, #255	; 0xff
 8013cfa:	2100      	movs	r1, #0
 8013cfc:	69f8      	ldr	r0, [r7, #28]
 8013cfe:	f000 fabb 	bl	8014278 <ip4_output_if>
  }
  pbuf_free(q);
 8013d02:	69f8      	ldr	r0, [r7, #28]
 8013d04:	f002 fc56 	bl	80165b4 <pbuf_free>
 8013d08:	e000      	b.n	8013d0c <icmp_send_response+0xd4>
    return;
 8013d0a:	bf00      	nop
}
 8013d0c:	3720      	adds	r7, #32
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}
 8013d12:	bf00      	nop
 8013d14:	0801e024 	.word	0x0801e024
 8013d18:	0801e118 	.word	0x0801e118
 8013d1c:	0801e0bc 	.word	0x0801e0bc

08013d20 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b089      	sub	sp, #36	; 0x24
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
 8013d28:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	f003 0301 	and.w	r3, r3, #1
 8013d3c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8013d3e:	693b      	ldr	r3, [r7, #16]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d00d      	beq.n	8013d60 <lwip_standard_chksum+0x40>
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	dd0a      	ble.n	8013d60 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8013d4a:	69fa      	ldr	r2, [r7, #28]
 8013d4c:	1c53      	adds	r3, r2, #1
 8013d4e:	61fb      	str	r3, [r7, #28]
 8013d50:	f107 030e 	add.w	r3, r7, #14
 8013d54:	3301      	adds	r3, #1
 8013d56:	7812      	ldrb	r2, [r2, #0]
 8013d58:	701a      	strb	r2, [r3, #0]
    len--;
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	3b01      	subs	r3, #1
 8013d5e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8013d64:	e00a      	b.n	8013d7c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	1c9a      	adds	r2, r3, #2
 8013d6a:	61ba      	str	r2, [r7, #24]
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	461a      	mov	r2, r3
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	4413      	add	r3, r2
 8013d74:	617b      	str	r3, [r7, #20]
    len -= 2;
 8013d76:	683b      	ldr	r3, [r7, #0]
 8013d78:	3b02      	subs	r3, #2
 8013d7a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8013d7c:	683b      	ldr	r3, [r7, #0]
 8013d7e:	2b01      	cmp	r3, #1
 8013d80:	dcf1      	bgt.n	8013d66 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	dd04      	ble.n	8013d92 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8013d88:	f107 030e 	add.w	r3, r7, #14
 8013d8c:	69ba      	ldr	r2, [r7, #24]
 8013d8e:	7812      	ldrb	r2, [r2, #0]
 8013d90:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8013d92:	89fb      	ldrh	r3, [r7, #14]
 8013d94:	461a      	mov	r2, r3
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	4413      	add	r3, r2
 8013d9a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	0c1a      	lsrs	r2, r3, #16
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	b29b      	uxth	r3, r3
 8013da4:	4413      	add	r3, r2
 8013da6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	0c1a      	lsrs	r2, r3, #16
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	b29b      	uxth	r3, r3
 8013db0:	4413      	add	r3, r2
 8013db2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d007      	beq.n	8013dca <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8013dba:	697b      	ldr	r3, [r7, #20]
 8013dbc:	021b      	lsls	r3, r3, #8
 8013dbe:	b29a      	uxth	r2, r3
 8013dc0:	697b      	ldr	r3, [r7, #20]
 8013dc2:	0a1b      	lsrs	r3, r3, #8
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	4313      	orrs	r3, r2
 8013dc8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	b29b      	uxth	r3, r3
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3724      	adds	r7, #36	; 0x24
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8013dda:	b580      	push	{r7, lr}
 8013ddc:	b082      	sub	sp, #8
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
 8013de2:	460b      	mov	r3, r1
 8013de4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8013de6:	887b      	ldrh	r3, [r7, #2]
 8013de8:	4619      	mov	r1, r3
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7ff ff98 	bl	8013d20 <lwip_standard_chksum>
 8013df0:	4603      	mov	r3, r0
 8013df2:	43db      	mvns	r3, r3
 8013df4:	b29b      	uxth	r3, r3
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3708      	adds	r7, #8
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b086      	sub	sp, #24
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	613b      	str	r3, [r7, #16]
 8013e12:	e02b      	b.n	8013e6c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	685a      	ldr	r2, [r3, #4]
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	895b      	ldrh	r3, [r3, #10]
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	4610      	mov	r0, r2
 8013e20:	f7ff ff7e 	bl	8013d20 <lwip_standard_chksum>
 8013e24:	4603      	mov	r3, r0
 8013e26:	461a      	mov	r2, r3
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	4413      	add	r3, r2
 8013e2c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8013e2e:	697b      	ldr	r3, [r7, #20]
 8013e30:	0c1a      	lsrs	r2, r3, #16
 8013e32:	697b      	ldr	r3, [r7, #20]
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	4413      	add	r3, r2
 8013e38:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	895b      	ldrh	r3, [r3, #10]
 8013e3e:	f003 0301 	and.w	r3, r3, #1
 8013e42:	b29b      	uxth	r3, r3
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d00e      	beq.n	8013e66 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	bf0c      	ite	eq
 8013e4e:	2301      	moveq	r3, #1
 8013e50:	2300      	movne	r3, #0
 8013e52:	b2db      	uxtb	r3, r3
 8013e54:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	021b      	lsls	r3, r3, #8
 8013e5a:	b29a      	uxth	r2, r3
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	0a1b      	lsrs	r3, r3, #8
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	4313      	orrs	r3, r2
 8013e64:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	613b      	str	r3, [r7, #16]
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d1d0      	bne.n	8013e14 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d007      	beq.n	8013e88 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	021b      	lsls	r3, r3, #8
 8013e7c:	b29a      	uxth	r2, r3
 8013e7e:	697b      	ldr	r3, [r7, #20]
 8013e80:	0a1b      	lsrs	r3, r3, #8
 8013e82:	b2db      	uxtb	r3, r3
 8013e84:	4313      	orrs	r3, r2
 8013e86:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	b29b      	uxth	r3, r3
 8013e8c:	43db      	mvns	r3, r3
 8013e8e:	b29b      	uxth	r3, r3
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3718      	adds	r7, #24
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8013ea2:	f001 f9fd 	bl	80152a0 <mem_init>
  memp_init();
 8013ea6:	f001 fcff 	bl	80158a8 <memp_init>
  pbuf_init();
  netif_init();
 8013eaa:	f001 fdb7 	bl	8015a1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013eae:	f008 f881 	bl	801bfb4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013eb2:	f002 fe1d 	bl	8016af0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013eb6:	f008 f837 	bl	801bf28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013eba:	bf00      	nop
 8013ebc:	3708      	adds	r7, #8
 8013ebe:	46bd      	mov	sp, r7
 8013ec0:	bd80      	pop	{r7, pc}
	...

08013ec4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013ecc:	4b33      	ldr	r3, [pc, #204]	; (8013f9c <ip4_route+0xd8>)
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	60fb      	str	r3, [r7, #12]
 8013ed2:	e036      	b.n	8013f42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013eda:	f003 0301 	and.w	r3, r3, #1
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d02b      	beq.n	8013f3c <ip4_route+0x78>
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013eea:	089b      	lsrs	r3, r3, #2
 8013eec:	f003 0301 	and.w	r3, r3, #1
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d022      	beq.n	8013f3c <ip4_route+0x78>
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	3304      	adds	r3, #4
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d01d      	beq.n	8013f3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	3304      	adds	r3, #4
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	405a      	eors	r2, r3
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	3308      	adds	r3, #8
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4013      	ands	r3, r2
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d101      	bne.n	8013f1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	e038      	b.n	8013f8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f22:	f003 0302 	and.w	r3, r3, #2
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d108      	bne.n	8013f3c <ip4_route+0x78>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	330c      	adds	r3, #12
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d101      	bne.n	8013f3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	e028      	b.n	8013f8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	60fb      	str	r3, [r7, #12]
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d1c5      	bne.n	8013ed4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013f48:	4b15      	ldr	r3, [pc, #84]	; (8013fa0 <ip4_route+0xdc>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d01a      	beq.n	8013f86 <ip4_route+0xc2>
 8013f50:	4b13      	ldr	r3, [pc, #76]	; (8013fa0 <ip4_route+0xdc>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d012      	beq.n	8013f86 <ip4_route+0xc2>
 8013f60:	4b0f      	ldr	r3, [pc, #60]	; (8013fa0 <ip4_route+0xdc>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f68:	f003 0304 	and.w	r3, r3, #4
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d00a      	beq.n	8013f86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013f70:	4b0b      	ldr	r3, [pc, #44]	; (8013fa0 <ip4_route+0xdc>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	3304      	adds	r3, #4
 8013f76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d004      	beq.n	8013f86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	b2db      	uxtb	r3, r3
 8013f82:	2b7f      	cmp	r3, #127	; 0x7f
 8013f84:	d101      	bne.n	8013f8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013f86:	2300      	movs	r3, #0
 8013f88:	e001      	b.n	8013f8e <ip4_route+0xca>
  }

  return netif_default;
 8013f8a:	4b05      	ldr	r3, [pc, #20]	; (8013fa0 <ip4_route+0xdc>)
 8013f8c:	681b      	ldr	r3, [r3, #0]
}
 8013f8e:	4618      	mov	r0, r3
 8013f90:	3714      	adds	r7, #20
 8013f92:	46bd      	mov	sp, r7
 8013f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f98:	4770      	bx	lr
 8013f9a:	bf00      	nop
 8013f9c:	24007674 	.word	0x24007674
 8013fa0:	24007678 	.word	0x24007678

08013fa4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013fb2:	f003 0301 	and.w	r3, r3, #1
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d016      	beq.n	8013fea <ip4_input_accept+0x46>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	3304      	adds	r3, #4
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d011      	beq.n	8013fea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013fc6:	4b0b      	ldr	r3, [pc, #44]	; (8013ff4 <ip4_input_accept+0x50>)
 8013fc8:	695a      	ldr	r2, [r3, #20]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	3304      	adds	r3, #4
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	429a      	cmp	r2, r3
 8013fd2:	d008      	beq.n	8013fe6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013fd4:	4b07      	ldr	r3, [pc, #28]	; (8013ff4 <ip4_input_accept+0x50>)
 8013fd6:	695b      	ldr	r3, [r3, #20]
 8013fd8:	6879      	ldr	r1, [r7, #4]
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f000 fa24 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8013fe0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d001      	beq.n	8013fea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e000      	b.n	8013fec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013fea:	2300      	movs	r3, #0
}
 8013fec:	4618      	mov	r0, r3
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	24004774 	.word	0x24004774

08013ff8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b088      	sub	sp, #32
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014002:	2301      	movs	r3, #1
 8014004:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	091b      	lsrs	r3, r3, #4
 8014012:	b2db      	uxtb	r3, r3
 8014014:	2b04      	cmp	r3, #4
 8014016:	d004      	beq.n	8014022 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014018:	6878      	ldr	r0, [r7, #4]
 801401a:	f002 facb 	bl	80165b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801401e:	2300      	movs	r3, #0
 8014020:	e121      	b.n	8014266 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014022:	69fb      	ldr	r3, [r7, #28]
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	f003 030f 	and.w	r3, r3, #15
 801402a:	b2db      	uxtb	r3, r3
 801402c:	009b      	lsls	r3, r3, #2
 801402e:	b2db      	uxtb	r3, r3
 8014030:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	885b      	ldrh	r3, [r3, #2]
 8014036:	b29b      	uxth	r3, r3
 8014038:	4618      	mov	r0, r3
 801403a:	f7fc fe12 	bl	8010c62 <lwip_htons>
 801403e:	4603      	mov	r3, r0
 8014040:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	891b      	ldrh	r3, [r3, #8]
 8014046:	8a3a      	ldrh	r2, [r7, #16]
 8014048:	429a      	cmp	r2, r3
 801404a:	d204      	bcs.n	8014056 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801404c:	8a3b      	ldrh	r3, [r7, #16]
 801404e:	4619      	mov	r1, r3
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f002 f929 	bl	80162a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	895b      	ldrh	r3, [r3, #10]
 801405a:	8a7a      	ldrh	r2, [r7, #18]
 801405c:	429a      	cmp	r2, r3
 801405e:	d807      	bhi.n	8014070 <ip4_input+0x78>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	891b      	ldrh	r3, [r3, #8]
 8014064:	8a3a      	ldrh	r2, [r7, #16]
 8014066:	429a      	cmp	r2, r3
 8014068:	d802      	bhi.n	8014070 <ip4_input+0x78>
 801406a:	8a7b      	ldrh	r3, [r7, #18]
 801406c:	2b13      	cmp	r3, #19
 801406e:	d804      	bhi.n	801407a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f002 fa9f 	bl	80165b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014076:	2300      	movs	r3, #0
 8014078:	e0f5      	b.n	8014266 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801407a:	69fb      	ldr	r3, [r7, #28]
 801407c:	691b      	ldr	r3, [r3, #16]
 801407e:	4a7c      	ldr	r2, [pc, #496]	; (8014270 <ip4_input+0x278>)
 8014080:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014082:	69fb      	ldr	r3, [r7, #28]
 8014084:	68db      	ldr	r3, [r3, #12]
 8014086:	4a7a      	ldr	r2, [pc, #488]	; (8014270 <ip4_input+0x278>)
 8014088:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801408a:	4b79      	ldr	r3, [pc, #484]	; (8014270 <ip4_input+0x278>)
 801408c:	695b      	ldr	r3, [r3, #20]
 801408e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014092:	2be0      	cmp	r3, #224	; 0xe0
 8014094:	d112      	bne.n	80140bc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801409c:	f003 0301 	and.w	r3, r3, #1
 80140a0:	b2db      	uxtb	r3, r3
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d007      	beq.n	80140b6 <ip4_input+0xbe>
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	3304      	adds	r3, #4
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <ip4_input+0xbe>
      netif = inp;
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	61bb      	str	r3, [r7, #24]
 80140b4:	e02a      	b.n	801410c <ip4_input+0x114>
    } else {
      netif = NULL;
 80140b6:	2300      	movs	r3, #0
 80140b8:	61bb      	str	r3, [r7, #24]
 80140ba:	e027      	b.n	801410c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80140bc:	6838      	ldr	r0, [r7, #0]
 80140be:	f7ff ff71 	bl	8013fa4 <ip4_input_accept>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d002      	beq.n	80140ce <ip4_input+0xd6>
      netif = inp;
 80140c8:	683b      	ldr	r3, [r7, #0]
 80140ca:	61bb      	str	r3, [r7, #24]
 80140cc:	e01e      	b.n	801410c <ip4_input+0x114>
    } else {
      netif = NULL;
 80140ce:	2300      	movs	r3, #0
 80140d0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80140d2:	4b67      	ldr	r3, [pc, #412]	; (8014270 <ip4_input+0x278>)
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	2b7f      	cmp	r3, #127	; 0x7f
 80140da:	d017      	beq.n	801410c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80140dc:	4b65      	ldr	r3, [pc, #404]	; (8014274 <ip4_input+0x27c>)
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	61bb      	str	r3, [r7, #24]
 80140e2:	e00e      	b.n	8014102 <ip4_input+0x10a>
          if (netif == inp) {
 80140e4:	69ba      	ldr	r2, [r7, #24]
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d006      	beq.n	80140fa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80140ec:	69b8      	ldr	r0, [r7, #24]
 80140ee:	f7ff ff59 	bl	8013fa4 <ip4_input_accept>
 80140f2:	4603      	mov	r3, r0
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d108      	bne.n	801410a <ip4_input+0x112>
 80140f8:	e000      	b.n	80140fc <ip4_input+0x104>
            continue;
 80140fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	61bb      	str	r3, [r7, #24]
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d1ed      	bne.n	80140e4 <ip4_input+0xec>
 8014108:	e000      	b.n	801410c <ip4_input+0x114>
            break;
 801410a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d111      	bne.n	8014136 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	7a5b      	ldrb	r3, [r3, #9]
 8014116:	2b11      	cmp	r3, #17
 8014118:	d10d      	bne.n	8014136 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801411a:	8a7b      	ldrh	r3, [r7, #18]
 801411c:	69fa      	ldr	r2, [r7, #28]
 801411e:	4413      	add	r3, r2
 8014120:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	885b      	ldrh	r3, [r3, #2]
 8014126:	b29b      	uxth	r3, r3
 8014128:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801412c:	d103      	bne.n	8014136 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8014132:	2300      	movs	r3, #0
 8014134:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d017      	beq.n	801416c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801413c:	4b4c      	ldr	r3, [pc, #304]	; (8014270 <ip4_input+0x278>)
 801413e:	691b      	ldr	r3, [r3, #16]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d013      	beq.n	801416c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014144:	4b4a      	ldr	r3, [pc, #296]	; (8014270 <ip4_input+0x278>)
 8014146:	691b      	ldr	r3, [r3, #16]
 8014148:	6839      	ldr	r1, [r7, #0]
 801414a:	4618      	mov	r0, r3
 801414c:	f000 f96c 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8014150:	4603      	mov	r3, r0
 8014152:	2b00      	cmp	r3, #0
 8014154:	d105      	bne.n	8014162 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014156:	4b46      	ldr	r3, [pc, #280]	; (8014270 <ip4_input+0x278>)
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801415e:	2be0      	cmp	r3, #224	; 0xe0
 8014160:	d104      	bne.n	801416c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f002 fa26 	bl	80165b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014168:	2300      	movs	r3, #0
 801416a:	e07c      	b.n	8014266 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d104      	bne.n	801417c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f002 fa1e 	bl	80165b4 <pbuf_free>
    return ERR_OK;
 8014178:	2300      	movs	r3, #0
 801417a:	e074      	b.n	8014266 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	88db      	ldrh	r3, [r3, #6]
 8014180:	b29b      	uxth	r3, r3
 8014182:	461a      	mov	r2, r3
 8014184:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014188:	4013      	ands	r3, r2
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00b      	beq.n	80141a6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801418e:	6878      	ldr	r0, [r7, #4]
 8014190:	f000 fc90 	bl	8014ab4 <ip4_reass>
 8014194:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <ip4_input+0x1a8>
      return ERR_OK;
 801419c:	2300      	movs	r3, #0
 801419e:	e062      	b.n	8014266 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80141a6:	4a32      	ldr	r2, [pc, #200]	; (8014270 <ip4_input+0x278>)
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80141ac:	4a30      	ldr	r2, [pc, #192]	; (8014270 <ip4_input+0x278>)
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80141b2:	4a2f      	ldr	r2, [pc, #188]	; (8014270 <ip4_input+0x278>)
 80141b4:	69fb      	ldr	r3, [r7, #28]
 80141b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	781b      	ldrb	r3, [r3, #0]
 80141bc:	f003 030f 	and.w	r3, r3, #15
 80141c0:	b2db      	uxtb	r3, r3
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	b29a      	uxth	r2, r3
 80141c8:	4b29      	ldr	r3, [pc, #164]	; (8014270 <ip4_input+0x278>)
 80141ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80141cc:	8a7b      	ldrh	r3, [r7, #18]
 80141ce:	4619      	mov	r1, r3
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f002 f969 	bl	80164a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	7a5b      	ldrb	r3, [r3, #9]
 80141da:	2b06      	cmp	r3, #6
 80141dc:	d009      	beq.n	80141f2 <ip4_input+0x1fa>
 80141de:	2b11      	cmp	r3, #17
 80141e0:	d002      	beq.n	80141e8 <ip4_input+0x1f0>
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d00a      	beq.n	80141fc <ip4_input+0x204>
 80141e6:	e00e      	b.n	8014206 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80141e8:	6839      	ldr	r1, [r7, #0]
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f007 ff90 	bl	801c110 <udp_input>
        break;
 80141f0:	e026      	b.n	8014240 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80141f2:	6839      	ldr	r1, [r7, #0]
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f004 f809 	bl	801820c <tcp_input>
        break;
 80141fa:	e021      	b.n	8014240 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80141fc:	6839      	ldr	r1, [r7, #0]
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7ff fbda 	bl	80139b8 <icmp_input>
        break;
 8014204:	e01c      	b.n	8014240 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014206:	4b1a      	ldr	r3, [pc, #104]	; (8014270 <ip4_input+0x278>)
 8014208:	695b      	ldr	r3, [r3, #20]
 801420a:	69b9      	ldr	r1, [r7, #24]
 801420c:	4618      	mov	r0, r3
 801420e:	f000 f90b 	bl	8014428 <ip4_addr_isbroadcast_u32>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d10f      	bne.n	8014238 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014218:	4b15      	ldr	r3, [pc, #84]	; (8014270 <ip4_input+0x278>)
 801421a:	695b      	ldr	r3, [r3, #20]
 801421c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014220:	2be0      	cmp	r3, #224	; 0xe0
 8014222:	d009      	beq.n	8014238 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014224:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f002 f9af 	bl	801658e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014230:	2102      	movs	r1, #2
 8014232:	6878      	ldr	r0, [r7, #4]
 8014234:	f7ff fce0 	bl	8013bf8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f002 f9bb 	bl	80165b4 <pbuf_free>
        break;
 801423e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014240:	4b0b      	ldr	r3, [pc, #44]	; (8014270 <ip4_input+0x278>)
 8014242:	2200      	movs	r2, #0
 8014244:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014246:	4b0a      	ldr	r3, [pc, #40]	; (8014270 <ip4_input+0x278>)
 8014248:	2200      	movs	r2, #0
 801424a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801424c:	4b08      	ldr	r3, [pc, #32]	; (8014270 <ip4_input+0x278>)
 801424e:	2200      	movs	r2, #0
 8014250:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014252:	4b07      	ldr	r3, [pc, #28]	; (8014270 <ip4_input+0x278>)
 8014254:	2200      	movs	r2, #0
 8014256:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014258:	4b05      	ldr	r3, [pc, #20]	; (8014270 <ip4_input+0x278>)
 801425a:	2200      	movs	r2, #0
 801425c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801425e:	4b04      	ldr	r3, [pc, #16]	; (8014270 <ip4_input+0x278>)
 8014260:	2200      	movs	r2, #0
 8014262:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3720      	adds	r7, #32
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	24004774 	.word	0x24004774
 8014274:	24007674 	.word	0x24007674

08014278 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b08a      	sub	sp, #40	; 0x28
 801427c:	af04      	add	r7, sp, #16
 801427e:	60f8      	str	r0, [r7, #12]
 8014280:	60b9      	str	r1, [r7, #8]
 8014282:	607a      	str	r2, [r7, #4]
 8014284:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d009      	beq.n	80142a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d003      	beq.n	801429e <ip4_output_if+0x26>
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d102      	bne.n	80142a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	3304      	adds	r3, #4
 80142a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80142a4:	78fa      	ldrb	r2, [r7, #3]
 80142a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a8:	9302      	str	r3, [sp, #8]
 80142aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80142ae:	9301      	str	r3, [sp, #4]
 80142b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80142b4:	9300      	str	r3, [sp, #0]
 80142b6:	4613      	mov	r3, r2
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	6979      	ldr	r1, [r7, #20]
 80142bc:	68f8      	ldr	r0, [r7, #12]
 80142be:	f000 f805 	bl	80142cc <ip4_output_if_src>
 80142c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80142c4:	4618      	mov	r0, r3
 80142c6:	3718      	adds	r7, #24
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b088      	sub	sp, #32
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
 80142d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	7b9b      	ldrb	r3, [r3, #14]
 80142de:	2b01      	cmp	r3, #1
 80142e0:	d006      	beq.n	80142f0 <ip4_output_if_src+0x24>
 80142e2:	4b4b      	ldr	r3, [pc, #300]	; (8014410 <ip4_output_if_src+0x144>)
 80142e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80142e8:	494a      	ldr	r1, [pc, #296]	; (8014414 <ip4_output_if_src+0x148>)
 80142ea:	484b      	ldr	r0, [pc, #300]	; (8014418 <ip4_output_if_src+0x14c>)
 80142ec:	f008 fb64 	bl	801c9b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d060      	beq.n	80143b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80142f6:	2314      	movs	r3, #20
 80142f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80142fa:	2114      	movs	r1, #20
 80142fc:	68f8      	ldr	r0, [r7, #12]
 80142fe:	f002 f8c3 	bl	8016488 <pbuf_add_header>
 8014302:	4603      	mov	r3, r0
 8014304:	2b00      	cmp	r3, #0
 8014306:	d002      	beq.n	801430e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014308:	f06f 0301 	mvn.w	r3, #1
 801430c:	e07c      	b.n	8014408 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	895b      	ldrh	r3, [r3, #10]
 8014318:	2b13      	cmp	r3, #19
 801431a:	d806      	bhi.n	801432a <ip4_output_if_src+0x5e>
 801431c:	4b3c      	ldr	r3, [pc, #240]	; (8014410 <ip4_output_if_src+0x144>)
 801431e:	f240 3289 	movw	r2, #905	; 0x389
 8014322:	493e      	ldr	r1, [pc, #248]	; (801441c <ip4_output_if_src+0x150>)
 8014324:	483c      	ldr	r0, [pc, #240]	; (8014418 <ip4_output_if_src+0x14c>)
 8014326:	f008 fb47 	bl	801c9b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	78fa      	ldrb	r2, [r7, #3]
 801432e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014336:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681a      	ldr	r2, [r3, #0]
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014340:	8b7b      	ldrh	r3, [r7, #26]
 8014342:	089b      	lsrs	r3, r3, #2
 8014344:	b29b      	uxth	r3, r3
 8014346:	b2db      	uxtb	r3, r3
 8014348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801434c:	b2da      	uxtb	r2, r3
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014358:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	891b      	ldrh	r3, [r3, #8]
 801435e:	4618      	mov	r0, r3
 8014360:	f7fc fc7f 	bl	8010c62 <lwip_htons>
 8014364:	4603      	mov	r3, r0
 8014366:	461a      	mov	r2, r3
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	2200      	movs	r2, #0
 8014370:	719a      	strb	r2, [r3, #6]
 8014372:	2200      	movs	r2, #0
 8014374:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014376:	4b2a      	ldr	r3, [pc, #168]	; (8014420 <ip4_output_if_src+0x154>)
 8014378:	881b      	ldrh	r3, [r3, #0]
 801437a:	4618      	mov	r0, r3
 801437c:	f7fc fc71 	bl	8010c62 <lwip_htons>
 8014380:	4603      	mov	r3, r0
 8014382:	461a      	mov	r2, r3
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014388:	4b25      	ldr	r3, [pc, #148]	; (8014420 <ip4_output_if_src+0x154>)
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	3301      	adds	r3, #1
 801438e:	b29a      	uxth	r2, r3
 8014390:	4b23      	ldr	r3, [pc, #140]	; (8014420 <ip4_output_if_src+0x154>)
 8014392:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d104      	bne.n	80143a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801439a:	4b22      	ldr	r3, [pc, #136]	; (8014424 <ip4_output_if_src+0x158>)
 801439c:	681a      	ldr	r2, [r3, #0]
 801439e:	69fb      	ldr	r3, [r7, #28]
 80143a0:	60da      	str	r2, [r3, #12]
 80143a2:	e003      	b.n	80143ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	69fb      	ldr	r3, [r7, #28]
 80143aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	2200      	movs	r2, #0
 80143b0:	729a      	strb	r2, [r3, #10]
 80143b2:	2200      	movs	r2, #0
 80143b4:	72da      	strb	r2, [r3, #11]
 80143b6:	e00f      	b.n	80143d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	895b      	ldrh	r3, [r3, #10]
 80143bc:	2b13      	cmp	r3, #19
 80143be:	d802      	bhi.n	80143c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80143c0:	f06f 0301 	mvn.w	r3, #1
 80143c4:	e020      	b.n	8014408 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	691b      	ldr	r3, [r3, #16]
 80143d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80143d2:	f107 0314 	add.w	r3, r7, #20
 80143d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80143d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d00c      	beq.n	80143fa <ip4_output_if_src+0x12e>
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	891a      	ldrh	r2, [r3, #8]
 80143e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d906      	bls.n	80143fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 fd4b 	bl	8014e8c <ip4_frag>
 80143f6:	4603      	mov	r3, r0
 80143f8:	e006      	b.n	8014408 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80143fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143fc:	695b      	ldr	r3, [r3, #20]
 80143fe:	687a      	ldr	r2, [r7, #4]
 8014400:	68f9      	ldr	r1, [r7, #12]
 8014402:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014404:	4798      	blx	r3
 8014406:	4603      	mov	r3, r0
}
 8014408:	4618      	mov	r0, r3
 801440a:	3720      	adds	r7, #32
 801440c:	46bd      	mov	sp, r7
 801440e:	bd80      	pop	{r7, pc}
 8014410:	0801e144 	.word	0x0801e144
 8014414:	0801e1a0 	.word	0x0801e1a0
 8014418:	0801e1ac 	.word	0x0801e1ac
 801441c:	0801e1d4 	.word	0x0801e1d4
 8014420:	240001e6 	.word	0x240001e6
 8014424:	08020d24 	.word	0x08020d24

08014428 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801443c:	d002      	beq.n	8014444 <ip4_addr_isbroadcast_u32+0x1c>
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d101      	bne.n	8014448 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014444:	2301      	movs	r3, #1
 8014446:	e02a      	b.n	801449e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014448:	683b      	ldr	r3, [r7, #0]
 801444a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801444e:	f003 0302 	and.w	r3, r3, #2
 8014452:	2b00      	cmp	r3, #0
 8014454:	d101      	bne.n	801445a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014456:	2300      	movs	r3, #0
 8014458:	e021      	b.n	801449e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801445a:	683b      	ldr	r3, [r7, #0]
 801445c:	3304      	adds	r3, #4
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	429a      	cmp	r2, r3
 8014464:	d101      	bne.n	801446a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014466:	2300      	movs	r3, #0
 8014468:	e019      	b.n	801449e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801446a:	68fa      	ldr	r2, [r7, #12]
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	3304      	adds	r3, #4
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	405a      	eors	r2, r3
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	3308      	adds	r3, #8
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4013      	ands	r3, r2
 801447c:	2b00      	cmp	r3, #0
 801447e:	d10d      	bne.n	801449c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	3308      	adds	r3, #8
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	43da      	mvns	r2, r3
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	3308      	adds	r3, #8
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014494:	429a      	cmp	r2, r3
 8014496:	d101      	bne.n	801449c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014498:	2301      	movs	r3, #1
 801449a:	e000      	b.n	801449e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801449c:	2300      	movs	r3, #0
  }
}
 801449e:	4618      	mov	r0, r3
 80144a0:	3714      	adds	r7, #20
 80144a2:	46bd      	mov	sp, r7
 80144a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a8:	4770      	bx	lr
	...

080144ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80144b2:	2300      	movs	r3, #0
 80144b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80144b6:	4b12      	ldr	r3, [pc, #72]	; (8014500 <ip_reass_tmr+0x54>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80144bc:	e018      	b.n	80144f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	7fdb      	ldrb	r3, [r3, #31]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d00b      	beq.n	80144de <ip_reass_tmr+0x32>
      r->timer--;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	7fdb      	ldrb	r3, [r3, #31]
 80144ca:	3b01      	subs	r3, #1
 80144cc:	b2da      	uxtb	r2, r3
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	60fb      	str	r3, [r7, #12]
 80144dc:	e008      	b.n	80144f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80144e8:	68b9      	ldr	r1, [r7, #8]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 f80a 	bl	8014504 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d1e3      	bne.n	80144be <ip_reass_tmr+0x12>
    }
  }
}
 80144f6:	bf00      	nop
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	240001e8 	.word	0x240001e8

08014504 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b088      	sub	sp, #32
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
 801450c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801450e:	2300      	movs	r3, #0
 8014510:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014512:	683a      	ldr	r2, [r7, #0]
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	429a      	cmp	r2, r3
 8014518:	d105      	bne.n	8014526 <ip_reass_free_complete_datagram+0x22>
 801451a:	4b45      	ldr	r3, [pc, #276]	; (8014630 <ip_reass_free_complete_datagram+0x12c>)
 801451c:	22ab      	movs	r2, #171	; 0xab
 801451e:	4945      	ldr	r1, [pc, #276]	; (8014634 <ip_reass_free_complete_datagram+0x130>)
 8014520:	4845      	ldr	r0, [pc, #276]	; (8014638 <ip_reass_free_complete_datagram+0x134>)
 8014522:	f008 fa49 	bl	801c9b8 <iprintf>
  if (prev != NULL) {
 8014526:	683b      	ldr	r3, [r7, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d00a      	beq.n	8014542 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	429a      	cmp	r2, r3
 8014534:	d005      	beq.n	8014542 <ip_reass_free_complete_datagram+0x3e>
 8014536:	4b3e      	ldr	r3, [pc, #248]	; (8014630 <ip_reass_free_complete_datagram+0x12c>)
 8014538:	22ad      	movs	r2, #173	; 0xad
 801453a:	4940      	ldr	r1, [pc, #256]	; (801463c <ip_reass_free_complete_datagram+0x138>)
 801453c:	483e      	ldr	r0, [pc, #248]	; (8014638 <ip_reass_free_complete_datagram+0x134>)
 801453e:	f008 fa3b 	bl	801c9b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	685b      	ldr	r3, [r3, #4]
 8014548:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	889b      	ldrh	r3, [r3, #4]
 801454e:	b29b      	uxth	r3, r3
 8014550:	2b00      	cmp	r3, #0
 8014552:	d12a      	bne.n	80145aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	685b      	ldr	r3, [r3, #4]
 8014558:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014562:	69bb      	ldr	r3, [r7, #24]
 8014564:	6858      	ldr	r0, [r3, #4]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	3308      	adds	r3, #8
 801456a:	2214      	movs	r2, #20
 801456c:	4619      	mov	r1, r3
 801456e:	f008 fa10 	bl	801c992 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014572:	2101      	movs	r1, #1
 8014574:	69b8      	ldr	r0, [r7, #24]
 8014576:	f7ff fb4f 	bl	8013c18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801457a:	69b8      	ldr	r0, [r7, #24]
 801457c:	f002 f8a2 	bl	80166c4 <pbuf_clen>
 8014580:	4603      	mov	r3, r0
 8014582:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014584:	8bfa      	ldrh	r2, [r7, #30]
 8014586:	8a7b      	ldrh	r3, [r7, #18]
 8014588:	4413      	add	r3, r2
 801458a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801458e:	db05      	blt.n	801459c <ip_reass_free_complete_datagram+0x98>
 8014590:	4b27      	ldr	r3, [pc, #156]	; (8014630 <ip_reass_free_complete_datagram+0x12c>)
 8014592:	22bc      	movs	r2, #188	; 0xbc
 8014594:	492a      	ldr	r1, [pc, #168]	; (8014640 <ip_reass_free_complete_datagram+0x13c>)
 8014596:	4828      	ldr	r0, [pc, #160]	; (8014638 <ip_reass_free_complete_datagram+0x134>)
 8014598:	f008 fa0e 	bl	801c9b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801459c:	8bfa      	ldrh	r2, [r7, #30]
 801459e:	8a7b      	ldrh	r3, [r7, #18]
 80145a0:	4413      	add	r3, r2
 80145a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80145a4:	69b8      	ldr	r0, [r7, #24]
 80145a6:	f002 f805 	bl	80165b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	685b      	ldr	r3, [r3, #4]
 80145ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80145b0:	e01f      	b.n	80145f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80145b2:	69bb      	ldr	r3, [r7, #24]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80145bc:	697b      	ldr	r3, [r7, #20]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80145c2:	68f8      	ldr	r0, [r7, #12]
 80145c4:	f002 f87e 	bl	80166c4 <pbuf_clen>
 80145c8:	4603      	mov	r3, r0
 80145ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80145cc:	8bfa      	ldrh	r2, [r7, #30]
 80145ce:	8a7b      	ldrh	r3, [r7, #18]
 80145d0:	4413      	add	r3, r2
 80145d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80145d6:	db05      	blt.n	80145e4 <ip_reass_free_complete_datagram+0xe0>
 80145d8:	4b15      	ldr	r3, [pc, #84]	; (8014630 <ip_reass_free_complete_datagram+0x12c>)
 80145da:	22cc      	movs	r2, #204	; 0xcc
 80145dc:	4918      	ldr	r1, [pc, #96]	; (8014640 <ip_reass_free_complete_datagram+0x13c>)
 80145de:	4816      	ldr	r0, [pc, #88]	; (8014638 <ip_reass_free_complete_datagram+0x134>)
 80145e0:	f008 f9ea 	bl	801c9b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80145e4:	8bfa      	ldrh	r2, [r7, #30]
 80145e6:	8a7b      	ldrh	r3, [r7, #18]
 80145e8:	4413      	add	r3, r2
 80145ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80145ec:	68f8      	ldr	r0, [r7, #12]
 80145ee:	f001 ffe1 	bl	80165b4 <pbuf_free>
  while (p != NULL) {
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1dc      	bne.n	80145b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80145f8:	6839      	ldr	r1, [r7, #0]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 f8c2 	bl	8014784 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014600:	4b10      	ldr	r3, [pc, #64]	; (8014644 <ip_reass_free_complete_datagram+0x140>)
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	8bfa      	ldrh	r2, [r7, #30]
 8014606:	429a      	cmp	r2, r3
 8014608:	d905      	bls.n	8014616 <ip_reass_free_complete_datagram+0x112>
 801460a:	4b09      	ldr	r3, [pc, #36]	; (8014630 <ip_reass_free_complete_datagram+0x12c>)
 801460c:	22d2      	movs	r2, #210	; 0xd2
 801460e:	490e      	ldr	r1, [pc, #56]	; (8014648 <ip_reass_free_complete_datagram+0x144>)
 8014610:	4809      	ldr	r0, [pc, #36]	; (8014638 <ip_reass_free_complete_datagram+0x134>)
 8014612:	f008 f9d1 	bl	801c9b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014616:	4b0b      	ldr	r3, [pc, #44]	; (8014644 <ip_reass_free_complete_datagram+0x140>)
 8014618:	881a      	ldrh	r2, [r3, #0]
 801461a:	8bfb      	ldrh	r3, [r7, #30]
 801461c:	1ad3      	subs	r3, r2, r3
 801461e:	b29a      	uxth	r2, r3
 8014620:	4b08      	ldr	r3, [pc, #32]	; (8014644 <ip_reass_free_complete_datagram+0x140>)
 8014622:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014624:	8bfb      	ldrh	r3, [r7, #30]
}
 8014626:	4618      	mov	r0, r3
 8014628:	3720      	adds	r7, #32
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	0801e204 	.word	0x0801e204
 8014634:	0801e268 	.word	0x0801e268
 8014638:	0801e274 	.word	0x0801e274
 801463c:	0801e29c 	.word	0x0801e29c
 8014640:	0801e2b0 	.word	0x0801e2b0
 8014644:	240001ec 	.word	0x240001ec
 8014648:	0801e2d0 	.word	0x0801e2d0

0801464c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014656:	2300      	movs	r3, #0
 8014658:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801465a:	2300      	movs	r3, #0
 801465c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801465e:	2300      	movs	r3, #0
 8014660:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014662:	2300      	movs	r3, #0
 8014664:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014666:	2300      	movs	r3, #0
 8014668:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801466a:	4b28      	ldr	r3, [pc, #160]	; (801470c <ip_reass_remove_oldest_datagram+0xc0>)
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014670:	e030      	b.n	80146d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014674:	695a      	ldr	r2, [r3, #20]
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	68db      	ldr	r3, [r3, #12]
 801467a:	429a      	cmp	r2, r3
 801467c:	d10c      	bne.n	8014698 <ip_reass_remove_oldest_datagram+0x4c>
 801467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014680:	699a      	ldr	r2, [r3, #24]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	691b      	ldr	r3, [r3, #16]
 8014686:	429a      	cmp	r2, r3
 8014688:	d106      	bne.n	8014698 <ip_reass_remove_oldest_datagram+0x4c>
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	899a      	ldrh	r2, [r3, #12]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	889b      	ldrh	r3, [r3, #4]
 8014692:	b29b      	uxth	r3, r3
 8014694:	429a      	cmp	r2, r3
 8014696:	d014      	beq.n	80146c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014698:	693b      	ldr	r3, [r7, #16]
 801469a:	3301      	adds	r3, #1
 801469c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801469e:	6a3b      	ldr	r3, [r7, #32]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d104      	bne.n	80146ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	61bb      	str	r3, [r7, #24]
 80146ac:	e009      	b.n	80146c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	7fda      	ldrb	r2, [r3, #31]
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	7fdb      	ldrb	r3, [r3, #31]
 80146b6:	429a      	cmp	r2, r3
 80146b8:	d803      	bhi.n	80146c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80146ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d001      	beq.n	80146ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80146ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d1cb      	bne.n	8014672 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80146da:	6a3b      	ldr	r3, [r7, #32]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d008      	beq.n	80146f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80146e0:	69b9      	ldr	r1, [r7, #24]
 80146e2:	6a38      	ldr	r0, [r7, #32]
 80146e4:	f7ff ff0e 	bl	8014504 <ip_reass_free_complete_datagram>
 80146e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80146ea:	697a      	ldr	r2, [r7, #20]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	4413      	add	r3, r2
 80146f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80146f2:	697a      	ldr	r2, [r7, #20]
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	429a      	cmp	r2, r3
 80146f8:	da02      	bge.n	8014700 <ip_reass_remove_oldest_datagram+0xb4>
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	dcac      	bgt.n	801465a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014700:	697b      	ldr	r3, [r7, #20]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3728      	adds	r7, #40	; 0x28
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	240001e8 	.word	0x240001e8

08014710 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
 8014718:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801471a:	2004      	movs	r0, #4
 801471c:	f001 f908 	bl	8015930 <memp_malloc>
 8014720:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d110      	bne.n	801474a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014728:	6839      	ldr	r1, [r7, #0]
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f7ff ff8e 	bl	801464c <ip_reass_remove_oldest_datagram>
 8014730:	4602      	mov	r2, r0
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	4293      	cmp	r3, r2
 8014736:	dc03      	bgt.n	8014740 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014738:	2004      	movs	r0, #4
 801473a:	f001 f8f9 	bl	8015930 <memp_malloc>
 801473e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d101      	bne.n	801474a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014746:	2300      	movs	r3, #0
 8014748:	e016      	b.n	8014778 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801474a:	2220      	movs	r2, #32
 801474c:	2100      	movs	r1, #0
 801474e:	68f8      	ldr	r0, [r7, #12]
 8014750:	f008 f92a 	bl	801c9a8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	220f      	movs	r2, #15
 8014758:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801475a:	4b09      	ldr	r3, [pc, #36]	; (8014780 <ip_reass_enqueue_new_datagram+0x70>)
 801475c:	681a      	ldr	r2, [r3, #0]
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014762:	4a07      	ldr	r2, [pc, #28]	; (8014780 <ip_reass_enqueue_new_datagram+0x70>)
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	3308      	adds	r3, #8
 801476c:	2214      	movs	r2, #20
 801476e:	6879      	ldr	r1, [r7, #4]
 8014770:	4618      	mov	r0, r3
 8014772:	f008 f90e 	bl	801c992 <memcpy>
  return ipr;
 8014776:	68fb      	ldr	r3, [r7, #12]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	240001e8 	.word	0x240001e8

08014784 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
 801478c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801478e:	4b10      	ldr	r3, [pc, #64]	; (80147d0 <ip_reass_dequeue_datagram+0x4c>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	429a      	cmp	r2, r3
 8014796:	d104      	bne.n	80147a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	4a0c      	ldr	r2, [pc, #48]	; (80147d0 <ip_reass_dequeue_datagram+0x4c>)
 801479e:	6013      	str	r3, [r2, #0]
 80147a0:	e00d      	b.n	80147be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80147a2:	683b      	ldr	r3, [r7, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d106      	bne.n	80147b6 <ip_reass_dequeue_datagram+0x32>
 80147a8:	4b0a      	ldr	r3, [pc, #40]	; (80147d4 <ip_reass_dequeue_datagram+0x50>)
 80147aa:	f240 1245 	movw	r2, #325	; 0x145
 80147ae:	490a      	ldr	r1, [pc, #40]	; (80147d8 <ip_reass_dequeue_datagram+0x54>)
 80147b0:	480a      	ldr	r0, [pc, #40]	; (80147dc <ip_reass_dequeue_datagram+0x58>)
 80147b2:	f008 f901 	bl	801c9b8 <iprintf>
    prev->next = ipr->next;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681a      	ldr	r2, [r3, #0]
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80147be:	6879      	ldr	r1, [r7, #4]
 80147c0:	2004      	movs	r0, #4
 80147c2:	f001 f901 	bl	80159c8 <memp_free>
}
 80147c6:	bf00      	nop
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	240001e8 	.word	0x240001e8
 80147d4:	0801e204 	.word	0x0801e204
 80147d8:	0801e2f4 	.word	0x0801e2f4
 80147dc:	0801e274 	.word	0x0801e274

080147e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08c      	sub	sp, #48	; 0x30
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80147ec:	2300      	movs	r3, #0
 80147ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80147f0:	2301      	movs	r3, #1
 80147f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	885b      	ldrh	r3, [r3, #2]
 80147fe:	b29b      	uxth	r3, r3
 8014800:	4618      	mov	r0, r3
 8014802:	f7fc fa2e 	bl	8010c62 <lwip_htons>
 8014806:	4603      	mov	r3, r0
 8014808:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801480a:	69fb      	ldr	r3, [r7, #28]
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	f003 030f 	and.w	r3, r3, #15
 8014812:	b2db      	uxtb	r3, r3
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014818:	7e7b      	ldrb	r3, [r7, #25]
 801481a:	b29b      	uxth	r3, r3
 801481c:	8b7a      	ldrh	r2, [r7, #26]
 801481e:	429a      	cmp	r2, r3
 8014820:	d202      	bcs.n	8014828 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014822:	f04f 33ff 	mov.w	r3, #4294967295
 8014826:	e135      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014828:	7e7b      	ldrb	r3, [r7, #25]
 801482a:	b29b      	uxth	r3, r3
 801482c:	8b7a      	ldrh	r2, [r7, #26]
 801482e:	1ad3      	subs	r3, r2, r3
 8014830:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014832:	69fb      	ldr	r3, [r7, #28]
 8014834:	88db      	ldrh	r3, [r3, #6]
 8014836:	b29b      	uxth	r3, r3
 8014838:	4618      	mov	r0, r3
 801483a:	f7fc fa12 	bl	8010c62 <lwip_htons>
 801483e:	4603      	mov	r3, r0
 8014840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014844:	b29b      	uxth	r3, r3
 8014846:	00db      	lsls	r3, r3, #3
 8014848:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	685b      	ldr	r3, [r3, #4]
 801484e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014852:	2200      	movs	r2, #0
 8014854:	701a      	strb	r2, [r3, #0]
 8014856:	2200      	movs	r2, #0
 8014858:	705a      	strb	r2, [r3, #1]
 801485a:	2200      	movs	r2, #0
 801485c:	709a      	strb	r2, [r3, #2]
 801485e:	2200      	movs	r2, #0
 8014860:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014864:	8afa      	ldrh	r2, [r7, #22]
 8014866:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014868:	8afa      	ldrh	r2, [r7, #22]
 801486a:	8b7b      	ldrh	r3, [r7, #26]
 801486c:	4413      	add	r3, r2
 801486e:	b29a      	uxth	r2, r3
 8014870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014872:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014876:	88db      	ldrh	r3, [r3, #6]
 8014878:	b29b      	uxth	r3, r3
 801487a:	8afa      	ldrh	r2, [r7, #22]
 801487c:	429a      	cmp	r2, r3
 801487e:	d902      	bls.n	8014886 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014880:	f04f 33ff 	mov.w	r3, #4294967295
 8014884:	e106      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	627b      	str	r3, [r7, #36]	; 0x24
 801488c:	e068      	b.n	8014960 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014896:	889b      	ldrh	r3, [r3, #4]
 8014898:	b29a      	uxth	r2, r3
 801489a:	693b      	ldr	r3, [r7, #16]
 801489c:	889b      	ldrh	r3, [r3, #4]
 801489e:	b29b      	uxth	r3, r3
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d235      	bcs.n	8014910 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80148a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80148aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d020      	beq.n	80148f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80148b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148b2:	889b      	ldrh	r3, [r3, #4]
 80148b4:	b29a      	uxth	r2, r3
 80148b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b8:	88db      	ldrh	r3, [r3, #6]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	429a      	cmp	r2, r3
 80148be:	d307      	bcc.n	80148d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80148c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148c2:	88db      	ldrh	r3, [r3, #6]
 80148c4:	b29a      	uxth	r2, r3
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	889b      	ldrh	r3, [r3, #4]
 80148ca:	b29b      	uxth	r3, r3
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d902      	bls.n	80148d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80148d0:	f04f 33ff 	mov.w	r3, #4294967295
 80148d4:	e0de      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80148d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148d8:	68ba      	ldr	r2, [r7, #8]
 80148da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80148dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148de:	88db      	ldrh	r3, [r3, #6]
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148e4:	889b      	ldrh	r3, [r3, #4]
 80148e6:	b29b      	uxth	r3, r3
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d03d      	beq.n	8014968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80148ec:	2300      	movs	r3, #0
 80148ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80148f0:	e03a      	b.n	8014968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80148f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148f4:	88db      	ldrh	r3, [r3, #6]
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	693b      	ldr	r3, [r7, #16]
 80148fa:	889b      	ldrh	r3, [r3, #4]
 80148fc:	b29b      	uxth	r3, r3
 80148fe:	429a      	cmp	r2, r3
 8014900:	d902      	bls.n	8014908 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014902:	f04f 33ff 	mov.w	r3, #4294967295
 8014906:	e0c5      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	68ba      	ldr	r2, [r7, #8]
 801490c:	605a      	str	r2, [r3, #4]
      break;
 801490e:	e02b      	b.n	8014968 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014912:	889b      	ldrh	r3, [r3, #4]
 8014914:	b29a      	uxth	r2, r3
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	889b      	ldrh	r3, [r3, #4]
 801491a:	b29b      	uxth	r3, r3
 801491c:	429a      	cmp	r2, r3
 801491e:	d102      	bne.n	8014926 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014920:	f04f 33ff 	mov.w	r3, #4294967295
 8014924:	e0b6      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014928:	889b      	ldrh	r3, [r3, #4]
 801492a:	b29a      	uxth	r2, r3
 801492c:	693b      	ldr	r3, [r7, #16]
 801492e:	88db      	ldrh	r3, [r3, #6]
 8014930:	b29b      	uxth	r3, r3
 8014932:	429a      	cmp	r2, r3
 8014934:	d202      	bcs.n	801493c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014936:	f04f 33ff 	mov.w	r3, #4294967295
 801493a:	e0ab      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	2b00      	cmp	r3, #0
 8014940:	d009      	beq.n	8014956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014944:	88db      	ldrh	r3, [r3, #6]
 8014946:	b29a      	uxth	r2, r3
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	889b      	ldrh	r3, [r3, #4]
 801494c:	b29b      	uxth	r3, r3
 801494e:	429a      	cmp	r2, r3
 8014950:	d001      	beq.n	8014956 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014952:	2300      	movs	r3, #0
 8014954:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014962:	2b00      	cmp	r3, #0
 8014964:	d193      	bne.n	801488e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014966:	e000      	b.n	801496a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014968:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496c:	2b00      	cmp	r3, #0
 801496e:	d12d      	bne.n	80149cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014972:	2b00      	cmp	r3, #0
 8014974:	d01c      	beq.n	80149b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014978:	88db      	ldrh	r3, [r3, #6]
 801497a:	b29a      	uxth	r2, r3
 801497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801497e:	889b      	ldrh	r3, [r3, #4]
 8014980:	b29b      	uxth	r3, r3
 8014982:	429a      	cmp	r2, r3
 8014984:	d906      	bls.n	8014994 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014986:	4b45      	ldr	r3, [pc, #276]	; (8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014988:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801498c:	4944      	ldr	r1, [pc, #272]	; (8014aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801498e:	4845      	ldr	r0, [pc, #276]	; (8014aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014990:	f008 f812 	bl	801c9b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801499c:	88db      	ldrh	r3, [r3, #6]
 801499e:	b29a      	uxth	r2, r3
 80149a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a2:	889b      	ldrh	r3, [r3, #4]
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d010      	beq.n	80149cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80149aa:	2300      	movs	r3, #0
 80149ac:	623b      	str	r3, [r7, #32]
 80149ae:	e00d      	b.n	80149cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d006      	beq.n	80149c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80149b8:	4b38      	ldr	r3, [pc, #224]	; (8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80149ba:	f240 12bf 	movw	r2, #447	; 0x1bf
 80149be:	493a      	ldr	r1, [pc, #232]	; (8014aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80149c0:	4838      	ldr	r0, [pc, #224]	; (8014aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80149c2:	f007 fff9 	bl	801c9b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	68ba      	ldr	r2, [r7, #8]
 80149ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d105      	bne.n	80149de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	7f9b      	ldrb	r3, [r3, #30]
 80149d6:	f003 0301 	and.w	r3, r3, #1
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d059      	beq.n	8014a92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80149de:	6a3b      	ldr	r3, [r7, #32]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d04f      	beq.n	8014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d006      	beq.n	80149fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	685b      	ldr	r3, [r3, #4]
 80149f0:	685b      	ldr	r3, [r3, #4]
 80149f2:	889b      	ldrh	r3, [r3, #4]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d002      	beq.n	8014a00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	623b      	str	r3, [r7, #32]
 80149fe:	e041      	b.n	8014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014a0a:	e012      	b.n	8014a32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0e:	685b      	ldr	r3, [r3, #4]
 8014a10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a14:	88db      	ldrh	r3, [r3, #6]
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	889b      	ldrh	r3, [r3, #4]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d002      	beq.n	8014a28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	623b      	str	r3, [r7, #32]
            break;
 8014a26:	e007      	b.n	8014a38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d1e9      	bne.n	8014a0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014a38:	6a3b      	ldr	r3, [r7, #32]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d022      	beq.n	8014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014a46:	4b15      	ldr	r3, [pc, #84]	; (8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a48:	f240 12df 	movw	r2, #479	; 0x1df
 8014a4c:	4917      	ldr	r1, [pc, #92]	; (8014aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a4e:	4815      	ldr	r0, [pc, #84]	; (8014aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a50:	f007 ffb2 	bl	801c9b8 <iprintf>
          LWIP_ASSERT("sanity check",
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	685b      	ldr	r3, [r3, #4]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d106      	bne.n	8014a6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014a60:	4b0e      	ldr	r3, [pc, #56]	; (8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a62:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014a66:	4911      	ldr	r1, [pc, #68]	; (8014aac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014a68:	480e      	ldr	r0, [pc, #56]	; (8014aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a6a:	f007 ffa5 	bl	801c9b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d006      	beq.n	8014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014a76:	4b09      	ldr	r3, [pc, #36]	; (8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a78:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014a7c:	490c      	ldr	r1, [pc, #48]	; (8014ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014a7e:	4809      	ldr	r0, [pc, #36]	; (8014aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a80:	f007 ff9a 	bl	801c9b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014a84:	6a3b      	ldr	r3, [r7, #32]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	bf14      	ite	ne
 8014a8a:	2301      	movne	r3, #1
 8014a8c:	2300      	moveq	r3, #0
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	e000      	b.n	8014a94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014a92:	2300      	movs	r3, #0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	3730      	adds	r7, #48	; 0x30
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	0801e204 	.word	0x0801e204
 8014aa0:	0801e310 	.word	0x0801e310
 8014aa4:	0801e274 	.word	0x0801e274
 8014aa8:	0801e330 	.word	0x0801e330
 8014aac:	0801e368 	.word	0x0801e368
 8014ab0:	0801e378 	.word	0x0801e378

08014ab4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b08e      	sub	sp, #56	; 0x38
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ac4:	781b      	ldrb	r3, [r3, #0]
 8014ac6:	f003 030f 	and.w	r3, r3, #15
 8014aca:	b2db      	uxtb	r3, r3
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	2b14      	cmp	r3, #20
 8014ad2:	f040 8167 	bne.w	8014da4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ad8:	88db      	ldrh	r3, [r3, #6]
 8014ada:	b29b      	uxth	r3, r3
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7fc f8c0 	bl	8010c62 <lwip_htons>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	00db      	lsls	r3, r3, #3
 8014aec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af0:	885b      	ldrh	r3, [r3, #2]
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fc f8b4 	bl	8010c62 <lwip_htons>
 8014afa:	4603      	mov	r3, r0
 8014afc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b00:	781b      	ldrb	r3, [r3, #0]
 8014b02:	f003 030f 	and.w	r3, r3, #15
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	009b      	lsls	r3, r3, #2
 8014b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014b0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b16:	429a      	cmp	r2, r3
 8014b18:	f0c0 8146 	bcc.w	8014da8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014b24:	1ad3      	subs	r3, r2, r3
 8014b26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f001 fdcb 	bl	80166c4 <pbuf_clen>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014b32:	4ba3      	ldr	r3, [pc, #652]	; (8014dc0 <ip4_reass+0x30c>)
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	461a      	mov	r2, r3
 8014b38:	8c3b      	ldrh	r3, [r7, #32]
 8014b3a:	4413      	add	r3, r2
 8014b3c:	2b0a      	cmp	r3, #10
 8014b3e:	dd10      	ble.n	8014b62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b40:	8c3b      	ldrh	r3, [r7, #32]
 8014b42:	4619      	mov	r1, r3
 8014b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b46:	f7ff fd81 	bl	801464c <ip_reass_remove_oldest_datagram>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f000 812d 	beq.w	8014dac <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014b52:	4b9b      	ldr	r3, [pc, #620]	; (8014dc0 <ip4_reass+0x30c>)
 8014b54:	881b      	ldrh	r3, [r3, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	8c3b      	ldrh	r3, [r7, #32]
 8014b5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014b5c:	2b0a      	cmp	r3, #10
 8014b5e:	f300 8125 	bgt.w	8014dac <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014b62:	4b98      	ldr	r3, [pc, #608]	; (8014dc4 <ip4_reass+0x310>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	633b      	str	r3, [r7, #48]	; 0x30
 8014b68:	e015      	b.n	8014b96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6c:	695a      	ldr	r2, [r3, #20]
 8014b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d10c      	bne.n	8014b90 <ip4_reass+0xdc>
 8014b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b78:	699a      	ldr	r2, [r3, #24]
 8014b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b7c:	691b      	ldr	r3, [r3, #16]
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d106      	bne.n	8014b90 <ip4_reass+0xdc>
 8014b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b84:	899a      	ldrh	r2, [r3, #12]
 8014b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b88:	889b      	ldrh	r3, [r3, #4]
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d006      	beq.n	8014b9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	633b      	str	r3, [r7, #48]	; 0x30
 8014b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1e6      	bne.n	8014b6a <ip4_reass+0xb6>
 8014b9c:	e000      	b.n	8014ba0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014b9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d109      	bne.n	8014bba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014ba6:	8c3b      	ldrh	r3, [r7, #32]
 8014ba8:	4619      	mov	r1, r3
 8014baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014bac:	f7ff fdb0 	bl	8014710 <ip_reass_enqueue_new_datagram>
 8014bb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d11c      	bne.n	8014bf2 <ip4_reass+0x13e>
      goto nullreturn;
 8014bb8:	e0f9      	b.n	8014dae <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bbc:	88db      	ldrh	r3, [r3, #6]
 8014bbe:	b29b      	uxth	r3, r3
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	f7fc f84e 	bl	8010c62 <lwip_htons>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d110      	bne.n	8014bf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd2:	89db      	ldrh	r3, [r3, #14]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	f7fc f844 	bl	8010c62 <lwip_htons>
 8014bda:	4603      	mov	r3, r0
 8014bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d006      	beq.n	8014bf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014be6:	3308      	adds	r3, #8
 8014be8:	2214      	movs	r2, #20
 8014bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014bec:	4618      	mov	r0, r3
 8014bee:	f007 fed0 	bl	801c992 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	b29b      	uxth	r3, r3
 8014bf8:	f003 0320 	and.w	r3, r3, #32
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	bf0c      	ite	eq
 8014c00:	2301      	moveq	r3, #1
 8014c02:	2300      	movne	r3, #0
 8014c04:	b2db      	uxtb	r3, r3
 8014c06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014c08:	69fb      	ldr	r3, [r7, #28]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d00e      	beq.n	8014c2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c12:	4413      	add	r3, r2
 8014c14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014c16:	8b7a      	ldrh	r2, [r7, #26]
 8014c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014c1a:	429a      	cmp	r2, r3
 8014c1c:	f0c0 80a0 	bcc.w	8014d60 <ip4_reass+0x2ac>
 8014c20:	8b7b      	ldrh	r3, [r7, #26]
 8014c22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014c26:	4293      	cmp	r3, r2
 8014c28:	f200 809a 	bhi.w	8014d60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014c2c:	69fa      	ldr	r2, [r7, #28]
 8014c2e:	6879      	ldr	r1, [r7, #4]
 8014c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c32:	f7ff fdd5 	bl	80147e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014c36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014c38:	697b      	ldr	r3, [r7, #20]
 8014c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c3e:	f000 8091 	beq.w	8014d64 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014c42:	4b5f      	ldr	r3, [pc, #380]	; (8014dc0 <ip4_reass+0x30c>)
 8014c44:	881a      	ldrh	r2, [r3, #0]
 8014c46:	8c3b      	ldrh	r3, [r7, #32]
 8014c48:	4413      	add	r3, r2
 8014c4a:	b29a      	uxth	r2, r3
 8014c4c:	4b5c      	ldr	r3, [pc, #368]	; (8014dc0 <ip4_reass+0x30c>)
 8014c4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d00d      	beq.n	8014c72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014c56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014c58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014c5a:	4413      	add	r3, r2
 8014c5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	8a7a      	ldrh	r2, [r7, #18]
 8014c62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c66:	7f9b      	ldrb	r3, [r3, #30]
 8014c68:	f043 0301 	orr.w	r3, r3, #1
 8014c6c:	b2da      	uxtb	r2, r3
 8014c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014c72:	697b      	ldr	r3, [r7, #20]
 8014c74:	2b01      	cmp	r3, #1
 8014c76:	d171      	bne.n	8014d5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7a:	8b9b      	ldrh	r3, [r3, #28]
 8014c7c:	3314      	adds	r3, #20
 8014c7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c8c:	685b      	ldr	r3, [r3, #4]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c94:	3308      	adds	r3, #8
 8014c96:	2214      	movs	r2, #20
 8014c98:	4619      	mov	r1, r3
 8014c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c9c:	f007 fe79 	bl	801c992 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014ca0:	8a3b      	ldrh	r3, [r7, #16]
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f7fb ffdd 	bl	8010c62 <lwip_htons>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	461a      	mov	r2, r3
 8014cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	719a      	strb	r2, [r3, #6]
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cbc:	2200      	movs	r2, #0
 8014cbe:	729a      	strb	r2, [r3, #10]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014cca:	e00d      	b.n	8014ce8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014cd2:	2114      	movs	r1, #20
 8014cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014cd6:	f001 fbe7 	bl	80164a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8014cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f001 fd2b 	bl	8016738 <pbuf_cat>
      r = iprh->next_pbuf;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d1ee      	bne.n	8014ccc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014cee:	4b35      	ldr	r3, [pc, #212]	; (8014dc4 <ip4_reass+0x310>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	d102      	bne.n	8014cfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014cfc:	e010      	b.n	8014d20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014cfe:	4b31      	ldr	r3, [pc, #196]	; (8014dc4 <ip4_reass+0x310>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d04:	e007      	b.n	8014d16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d0c:	429a      	cmp	r2, r3
 8014d0e:	d006      	beq.n	8014d1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d1f4      	bne.n	8014d06 <ip4_reass+0x252>
 8014d1c:	e000      	b.n	8014d20 <ip4_reass+0x26c>
          break;
 8014d1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d24:	f7ff fd2e 	bl	8014784 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014d28:	6878      	ldr	r0, [r7, #4]
 8014d2a:	f001 fccb 	bl	80166c4 <pbuf_clen>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014d32:	4b23      	ldr	r3, [pc, #140]	; (8014dc0 <ip4_reass+0x30c>)
 8014d34:	881b      	ldrh	r3, [r3, #0]
 8014d36:	8c3a      	ldrh	r2, [r7, #32]
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d906      	bls.n	8014d4a <ip4_reass+0x296>
 8014d3c:	4b22      	ldr	r3, [pc, #136]	; (8014dc8 <ip4_reass+0x314>)
 8014d3e:	f240 229b 	movw	r2, #667	; 0x29b
 8014d42:	4922      	ldr	r1, [pc, #136]	; (8014dcc <ip4_reass+0x318>)
 8014d44:	4822      	ldr	r0, [pc, #136]	; (8014dd0 <ip4_reass+0x31c>)
 8014d46:	f007 fe37 	bl	801c9b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014d4a:	4b1d      	ldr	r3, [pc, #116]	; (8014dc0 <ip4_reass+0x30c>)
 8014d4c:	881a      	ldrh	r2, [r3, #0]
 8014d4e:	8c3b      	ldrh	r3, [r7, #32]
 8014d50:	1ad3      	subs	r3, r2, r3
 8014d52:	b29a      	uxth	r2, r3
 8014d54:	4b1a      	ldr	r3, [pc, #104]	; (8014dc0 <ip4_reass+0x30c>)
 8014d56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	e02c      	b.n	8014db6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	e02a      	b.n	8014db6 <ip4_reass+0x302>

nullreturn_ipr:
 8014d60:	bf00      	nop
 8014d62:	e000      	b.n	8014d66 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014d64:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d106      	bne.n	8014d7a <ip4_reass+0x2c6>
 8014d6c:	4b16      	ldr	r3, [pc, #88]	; (8014dc8 <ip4_reass+0x314>)
 8014d6e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014d72:	4918      	ldr	r1, [pc, #96]	; (8014dd4 <ip4_reass+0x320>)
 8014d74:	4816      	ldr	r0, [pc, #88]	; (8014dd0 <ip4_reass+0x31c>)
 8014d76:	f007 fe1f 	bl	801c9b8 <iprintf>
  if (ipr->p == NULL) {
 8014d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d114      	bne.n	8014dac <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014d82:	4b10      	ldr	r3, [pc, #64]	; (8014dc4 <ip4_reass+0x310>)
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d006      	beq.n	8014d9a <ip4_reass+0x2e6>
 8014d8c:	4b0e      	ldr	r3, [pc, #56]	; (8014dc8 <ip4_reass+0x314>)
 8014d8e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014d92:	4911      	ldr	r1, [pc, #68]	; (8014dd8 <ip4_reass+0x324>)
 8014d94:	480e      	ldr	r0, [pc, #56]	; (8014dd0 <ip4_reass+0x31c>)
 8014d96:	f007 fe0f 	bl	801c9b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d9e:	f7ff fcf1 	bl	8014784 <ip_reass_dequeue_datagram>
 8014da2:	e004      	b.n	8014dae <ip4_reass+0x2fa>
    goto nullreturn;
 8014da4:	bf00      	nop
 8014da6:	e002      	b.n	8014dae <ip4_reass+0x2fa>
    goto nullreturn;
 8014da8:	bf00      	nop
 8014daa:	e000      	b.n	8014dae <ip4_reass+0x2fa>
  }

nullreturn:
 8014dac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f001 fc00 	bl	80165b4 <pbuf_free>
  return NULL;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3738      	adds	r7, #56	; 0x38
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	240001ec 	.word	0x240001ec
 8014dc4:	240001e8 	.word	0x240001e8
 8014dc8:	0801e204 	.word	0x0801e204
 8014dcc:	0801e39c 	.word	0x0801e39c
 8014dd0:	0801e274 	.word	0x0801e274
 8014dd4:	0801e3b8 	.word	0x0801e3b8
 8014dd8:	0801e3c4 	.word	0x0801e3c4

08014ddc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014de0:	2005      	movs	r0, #5
 8014de2:	f000 fda5 	bl	8015930 <memp_malloc>
 8014de6:	4603      	mov	r3, r0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	bd80      	pop	{r7, pc}

08014dec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d106      	bne.n	8014e08 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014dfa:	4b07      	ldr	r3, [pc, #28]	; (8014e18 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014dfc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014e00:	4906      	ldr	r1, [pc, #24]	; (8014e1c <ip_frag_free_pbuf_custom_ref+0x30>)
 8014e02:	4807      	ldr	r0, [pc, #28]	; (8014e20 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014e04:	f007 fdd8 	bl	801c9b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014e08:	6879      	ldr	r1, [r7, #4]
 8014e0a:	2005      	movs	r0, #5
 8014e0c:	f000 fddc 	bl	80159c8 <memp_free>
}
 8014e10:	bf00      	nop
 8014e12:	3708      	adds	r7, #8
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	0801e204 	.word	0x0801e204
 8014e1c:	0801e3e4 	.word	0x0801e3e4
 8014e20:	0801e274 	.word	0x0801e274

08014e24 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b084      	sub	sp, #16
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d106      	bne.n	8014e44 <ipfrag_free_pbuf_custom+0x20>
 8014e36:	4b11      	ldr	r3, [pc, #68]	; (8014e7c <ipfrag_free_pbuf_custom+0x58>)
 8014e38:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014e3c:	4910      	ldr	r1, [pc, #64]	; (8014e80 <ipfrag_free_pbuf_custom+0x5c>)
 8014e3e:	4811      	ldr	r0, [pc, #68]	; (8014e84 <ipfrag_free_pbuf_custom+0x60>)
 8014e40:	f007 fdba 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014e44:	68fa      	ldr	r2, [r7, #12]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	d006      	beq.n	8014e5a <ipfrag_free_pbuf_custom+0x36>
 8014e4c:	4b0b      	ldr	r3, [pc, #44]	; (8014e7c <ipfrag_free_pbuf_custom+0x58>)
 8014e4e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014e52:	490d      	ldr	r1, [pc, #52]	; (8014e88 <ipfrag_free_pbuf_custom+0x64>)
 8014e54:	480b      	ldr	r0, [pc, #44]	; (8014e84 <ipfrag_free_pbuf_custom+0x60>)
 8014e56:	f007 fdaf 	bl	801c9b8 <iprintf>
  if (pcr->original != NULL) {
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	695b      	ldr	r3, [r3, #20]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d004      	beq.n	8014e6c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	695b      	ldr	r3, [r3, #20]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f001 fba4 	bl	80165b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014e6c:	68f8      	ldr	r0, [r7, #12]
 8014e6e:	f7ff ffbd 	bl	8014dec <ip_frag_free_pbuf_custom_ref>
}
 8014e72:	bf00      	nop
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	0801e204 	.word	0x0801e204
 8014e80:	0801e3f0 	.word	0x0801e3f0
 8014e84:	0801e274 	.word	0x0801e274
 8014e88:	0801e3fc 	.word	0x0801e3fc

08014e8c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b094      	sub	sp, #80	; 0x50
 8014e90:	af02      	add	r7, sp, #8
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ea2:	3b14      	subs	r3, #20
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	da00      	bge.n	8014eaa <ip4_frag+0x1e>
 8014ea8:	3307      	adds	r3, #7
 8014eaa:	10db      	asrs	r3, r3, #3
 8014eac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014eae:	2314      	movs	r3, #20
 8014eb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ebe:	781b      	ldrb	r3, [r3, #0]
 8014ec0:	f003 030f 	and.w	r3, r3, #15
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	009b      	lsls	r3, r3, #2
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	2b14      	cmp	r3, #20
 8014ecc:	d002      	beq.n	8014ed4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014ece:	f06f 0305 	mvn.w	r3, #5
 8014ed2:	e10f      	b.n	80150f4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	895b      	ldrh	r3, [r3, #10]
 8014ed8:	2b13      	cmp	r3, #19
 8014eda:	d809      	bhi.n	8014ef0 <ip4_frag+0x64>
 8014edc:	4b87      	ldr	r3, [pc, #540]	; (80150fc <ip4_frag+0x270>)
 8014ede:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014ee2:	4987      	ldr	r1, [pc, #540]	; (8015100 <ip4_frag+0x274>)
 8014ee4:	4887      	ldr	r0, [pc, #540]	; (8015104 <ip4_frag+0x278>)
 8014ee6:	f007 fd67 	bl	801c9b8 <iprintf>
 8014eea:	f06f 0305 	mvn.w	r3, #5
 8014eee:	e101      	b.n	80150f4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ef2:	88db      	ldrh	r3, [r3, #6]
 8014ef4:	b29b      	uxth	r3, r3
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7fb feb3 	bl	8010c62 <lwip_htons>
 8014efc:	4603      	mov	r3, r0
 8014efe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014f00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014f0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014f10:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	891b      	ldrh	r3, [r3, #8]
 8014f16:	3b14      	subs	r3, #20
 8014f18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014f1c:	e0e0      	b.n	80150e0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014f1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014f20:	00db      	lsls	r3, r3, #3
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014f28:	4293      	cmp	r3, r2
 8014f2a:	bf28      	it	cs
 8014f2c:	4613      	movcs	r3, r2
 8014f2e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014f30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f34:	2114      	movs	r1, #20
 8014f36:	200e      	movs	r0, #14
 8014f38:	f001 f85c 	bl	8015ff4 <pbuf_alloc>
 8014f3c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	f000 80d4 	beq.w	80150ee <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f48:	895b      	ldrh	r3, [r3, #10]
 8014f4a:	2b13      	cmp	r3, #19
 8014f4c:	d806      	bhi.n	8014f5c <ip4_frag+0xd0>
 8014f4e:	4b6b      	ldr	r3, [pc, #428]	; (80150fc <ip4_frag+0x270>)
 8014f50:	f240 3225 	movw	r2, #805	; 0x325
 8014f54:	496c      	ldr	r1, [pc, #432]	; (8015108 <ip4_frag+0x27c>)
 8014f56:	486b      	ldr	r0, [pc, #428]	; (8015104 <ip4_frag+0x278>)
 8014f58:	f007 fd2e 	bl	801c9b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5e:	685b      	ldr	r3, [r3, #4]
 8014f60:	2214      	movs	r2, #20
 8014f62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014f64:	4618      	mov	r0, r3
 8014f66:	f007 fd14 	bl	801c992 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014f70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014f76:	e064      	b.n	8015042 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	895a      	ldrh	r2, [r3, #10]
 8014f7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	895b      	ldrh	r3, [r3, #10]
 8014f86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d906      	bls.n	8014f9a <ip4_frag+0x10e>
 8014f8c:	4b5b      	ldr	r3, [pc, #364]	; (80150fc <ip4_frag+0x270>)
 8014f8e:	f240 322d 	movw	r2, #813	; 0x32d
 8014f92:	495e      	ldr	r1, [pc, #376]	; (801510c <ip4_frag+0x280>)
 8014f94:	485b      	ldr	r0, [pc, #364]	; (8015104 <ip4_frag+0x278>)
 8014f96:	f007 fd0f 	bl	801c9b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014f9a:	8bfa      	ldrh	r2, [r7, #30]
 8014f9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	bf28      	it	cs
 8014fa4:	4613      	movcs	r3, r2
 8014fa6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014faa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d105      	bne.n	8014fbe <ip4_frag+0x132>
        poff = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	60fb      	str	r3, [r7, #12]
        continue;
 8014fbc:	e041      	b.n	8015042 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014fbe:	f7ff ff0d 	bl	8014ddc <ip_frag_alloc_pbuf_custom_ref>
 8014fc2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d103      	bne.n	8014fd2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014fca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014fcc:	f001 faf2 	bl	80165b4 <pbuf_free>
        goto memerr;
 8014fd0:	e08e      	b.n	80150f0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014fd2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014fd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014fda:	4413      	add	r3, r2
 8014fdc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014fe0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014fe4:	9201      	str	r2, [sp, #4]
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	4603      	mov	r3, r0
 8014fea:	2241      	movs	r2, #65	; 0x41
 8014fec:	2000      	movs	r0, #0
 8014fee:	f001 f927 	bl	8016240 <pbuf_alloced_custom>
 8014ff2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d106      	bne.n	8015008 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014ffa:	69b8      	ldr	r0, [r7, #24]
 8014ffc:	f7ff fef6 	bl	8014dec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015002:	f001 fad7 	bl	80165b4 <pbuf_free>
        goto memerr;
 8015006:	e073      	b.n	80150f0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f001 fb73 	bl	80166f4 <pbuf_ref>
      pcr->original = p;
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	68fa      	ldr	r2, [r7, #12]
 8015012:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015014:	69bb      	ldr	r3, [r7, #24]
 8015016:	4a3e      	ldr	r2, [pc, #248]	; (8015110 <ip4_frag+0x284>)
 8015018:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801501a:	6979      	ldr	r1, [r7, #20]
 801501c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801501e:	f001 fb8b 	bl	8016738 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015022:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015026:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801502a:	1ad3      	subs	r3, r2, r3
 801502c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015030:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015034:	2b00      	cmp	r3, #0
 8015036:	d004      	beq.n	8015042 <ip4_frag+0x1b6>
        poff = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015042:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015046:	2b00      	cmp	r3, #0
 8015048:	d196      	bne.n	8014f78 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801504a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801504c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015050:	4413      	add	r3, r2
 8015052:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015054:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801505c:	3b14      	subs	r3, #20
 801505e:	429a      	cmp	r2, r3
 8015060:	bfd4      	ite	le
 8015062:	2301      	movle	r3, #1
 8015064:	2300      	movgt	r3, #0
 8015066:	b2db      	uxtb	r3, r3
 8015068:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801506a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801506e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015072:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015074:	6a3b      	ldr	r3, [r7, #32]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <ip4_frag+0x1f4>
 801507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507c:	2b00      	cmp	r3, #0
 801507e:	d003      	beq.n	8015088 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015080:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015082:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015086:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015088:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801508a:	4618      	mov	r0, r3
 801508c:	f7fb fde9 	bl	8010c62 <lwip_htons>
 8015090:	4603      	mov	r3, r0
 8015092:	461a      	mov	r2, r3
 8015094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015096:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015098:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801509a:	3314      	adds	r3, #20
 801509c:	b29b      	uxth	r3, r3
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fb fddf 	bl	8010c62 <lwip_htons>
 80150a4:	4603      	mov	r3, r0
 80150a6:	461a      	mov	r2, r3
 80150a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150aa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80150ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150ae:	2200      	movs	r2, #0
 80150b0:	729a      	strb	r2, [r3, #10]
 80150b2:	2200      	movs	r2, #0
 80150b4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80150be:	68b8      	ldr	r0, [r7, #8]
 80150c0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80150c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150c4:	f001 fa76 	bl	80165b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80150c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80150cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80150ce:	1ad3      	subs	r3, r2, r3
 80150d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80150d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80150d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80150da:	4413      	add	r3, r2
 80150dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80150e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	f47f af1a 	bne.w	8014f1e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80150ea:	2300      	movs	r3, #0
 80150ec:	e002      	b.n	80150f4 <ip4_frag+0x268>
      goto memerr;
 80150ee:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80150f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3748      	adds	r7, #72	; 0x48
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	0801e204 	.word	0x0801e204
 8015100:	0801e408 	.word	0x0801e408
 8015104:	0801e274 	.word	0x0801e274
 8015108:	0801e424 	.word	0x0801e424
 801510c:	0801e444 	.word	0x0801e444
 8015110:	08014e25 	.word	0x08014e25

08015114 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015114:	b480      	push	{r7}
 8015116:	b083      	sub	sp, #12
 8015118:	af00      	add	r7, sp, #0
 801511a:	4603      	mov	r3, r0
 801511c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801511e:	4b05      	ldr	r3, [pc, #20]	; (8015134 <ptr_to_mem+0x20>)
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	88fb      	ldrh	r3, [r7, #6]
 8015124:	4413      	add	r3, r2
}
 8015126:	4618      	mov	r0, r3
 8015128:	370c      	adds	r7, #12
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
 8015134:	240001f0 	.word	0x240001f0

08015138 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015138:	b480      	push	{r7}
 801513a:	b083      	sub	sp, #12
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	4a05      	ldr	r2, [pc, #20]	; (8015158 <mem_to_ptr+0x20>)
 8015144:	6812      	ldr	r2, [r2, #0]
 8015146:	1a9b      	subs	r3, r3, r2
 8015148:	b29b      	uxth	r3, r3
}
 801514a:	4618      	mov	r0, r3
 801514c:	370c      	adds	r7, #12
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop
 8015158:	240001f0 	.word	0x240001f0

0801515c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801515c:	b590      	push	{r4, r7, lr}
 801515e:	b085      	sub	sp, #20
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015164:	4b45      	ldr	r3, [pc, #276]	; (801527c <plug_holes+0x120>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	687a      	ldr	r2, [r7, #4]
 801516a:	429a      	cmp	r2, r3
 801516c:	d206      	bcs.n	801517c <plug_holes+0x20>
 801516e:	4b44      	ldr	r3, [pc, #272]	; (8015280 <plug_holes+0x124>)
 8015170:	f240 12df 	movw	r2, #479	; 0x1df
 8015174:	4943      	ldr	r1, [pc, #268]	; (8015284 <plug_holes+0x128>)
 8015176:	4844      	ldr	r0, [pc, #272]	; (8015288 <plug_holes+0x12c>)
 8015178:	f007 fc1e 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801517c:	4b43      	ldr	r3, [pc, #268]	; (801528c <plug_holes+0x130>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	429a      	cmp	r2, r3
 8015184:	d306      	bcc.n	8015194 <plug_holes+0x38>
 8015186:	4b3e      	ldr	r3, [pc, #248]	; (8015280 <plug_holes+0x124>)
 8015188:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801518c:	4940      	ldr	r1, [pc, #256]	; (8015290 <plug_holes+0x134>)
 801518e:	483e      	ldr	r0, [pc, #248]	; (8015288 <plug_holes+0x12c>)
 8015190:	f007 fc12 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	791b      	ldrb	r3, [r3, #4]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d006      	beq.n	80151aa <plug_holes+0x4e>
 801519c:	4b38      	ldr	r3, [pc, #224]	; (8015280 <plug_holes+0x124>)
 801519e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80151a2:	493c      	ldr	r1, [pc, #240]	; (8015294 <plug_holes+0x138>)
 80151a4:	4838      	ldr	r0, [pc, #224]	; (8015288 <plug_holes+0x12c>)
 80151a6:	f007 fc07 	bl	801c9b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	881b      	ldrh	r3, [r3, #0]
 80151ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80151b2:	d906      	bls.n	80151c2 <plug_holes+0x66>
 80151b4:	4b32      	ldr	r3, [pc, #200]	; (8015280 <plug_holes+0x124>)
 80151b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80151ba:	4937      	ldr	r1, [pc, #220]	; (8015298 <plug_holes+0x13c>)
 80151bc:	4832      	ldr	r0, [pc, #200]	; (8015288 <plug_holes+0x12c>)
 80151be:	f007 fbfb 	bl	801c9b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	881b      	ldrh	r3, [r3, #0]
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7ff ffa4 	bl	8015114 <ptr_to_mem>
 80151cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d024      	beq.n	8015220 <plug_holes+0xc4>
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	791b      	ldrb	r3, [r3, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d120      	bne.n	8015220 <plug_holes+0xc4>
 80151de:	4b2b      	ldr	r3, [pc, #172]	; (801528c <plug_holes+0x130>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	429a      	cmp	r2, r3
 80151e6:	d01b      	beq.n	8015220 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80151e8:	4b2c      	ldr	r3, [pc, #176]	; (801529c <plug_holes+0x140>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d102      	bne.n	80151f8 <plug_holes+0x9c>
      lfree = mem;
 80151f2:	4a2a      	ldr	r2, [pc, #168]	; (801529c <plug_holes+0x140>)
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	881a      	ldrh	r2, [r3, #0]
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	881b      	ldrh	r3, [r3, #0]
 8015204:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015208:	d00a      	beq.n	8015220 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	881b      	ldrh	r3, [r3, #0]
 801520e:	4618      	mov	r0, r3
 8015210:	f7ff ff80 	bl	8015114 <ptr_to_mem>
 8015214:	4604      	mov	r4, r0
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff ff8e 	bl	8015138 <mem_to_ptr>
 801521c:	4603      	mov	r3, r0
 801521e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	885b      	ldrh	r3, [r3, #2]
 8015224:	4618      	mov	r0, r3
 8015226:	f7ff ff75 	bl	8015114 <ptr_to_mem>
 801522a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801522c:	68ba      	ldr	r2, [r7, #8]
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	429a      	cmp	r2, r3
 8015232:	d01f      	beq.n	8015274 <plug_holes+0x118>
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	791b      	ldrb	r3, [r3, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d11b      	bne.n	8015274 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801523c:	4b17      	ldr	r3, [pc, #92]	; (801529c <plug_holes+0x140>)
 801523e:	681b      	ldr	r3, [r3, #0]
 8015240:	687a      	ldr	r2, [r7, #4]
 8015242:	429a      	cmp	r2, r3
 8015244:	d102      	bne.n	801524c <plug_holes+0xf0>
      lfree = pmem;
 8015246:	4a15      	ldr	r2, [pc, #84]	; (801529c <plug_holes+0x140>)
 8015248:	68bb      	ldr	r3, [r7, #8]
 801524a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	881a      	ldrh	r2, [r3, #0]
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	881b      	ldrh	r3, [r3, #0]
 8015258:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801525c:	d00a      	beq.n	8015274 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	4618      	mov	r0, r3
 8015264:	f7ff ff56 	bl	8015114 <ptr_to_mem>
 8015268:	4604      	mov	r4, r0
 801526a:	68b8      	ldr	r0, [r7, #8]
 801526c:	f7ff ff64 	bl	8015138 <mem_to_ptr>
 8015270:	4603      	mov	r3, r0
 8015272:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8015274:	bf00      	nop
 8015276:	3714      	adds	r7, #20
 8015278:	46bd      	mov	sp, r7
 801527a:	bd90      	pop	{r4, r7, pc}
 801527c:	240001f0 	.word	0x240001f0
 8015280:	0801e454 	.word	0x0801e454
 8015284:	0801e4ac 	.word	0x0801e4ac
 8015288:	0801e4c4 	.word	0x0801e4c4
 801528c:	240001f4 	.word	0x240001f4
 8015290:	0801e4ec 	.word	0x0801e4ec
 8015294:	0801e508 	.word	0x0801e508
 8015298:	0801e524 	.word	0x0801e524
 801529c:	240001f8 	.word	0x240001f8

080152a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80152a6:	4b16      	ldr	r3, [pc, #88]	; (8015300 <mem_init+0x60>)
 80152a8:	4a16      	ldr	r2, [pc, #88]	; (8015304 <mem_init+0x64>)
 80152aa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80152ac:	4b14      	ldr	r3, [pc, #80]	; (8015300 <mem_init+0x60>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80152b8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	2200      	movs	r2, #0
 80152be:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80152c6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80152ca:	f7ff ff23 	bl	8015114 <ptr_to_mem>
 80152ce:	4602      	mov	r2, r0
 80152d0:	4b0d      	ldr	r3, [pc, #52]	; (8015308 <mem_init+0x68>)
 80152d2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80152d4:	4b0c      	ldr	r3, [pc, #48]	; (8015308 <mem_init+0x68>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2201      	movs	r2, #1
 80152da:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80152dc:	4b0a      	ldr	r3, [pc, #40]	; (8015308 <mem_init+0x68>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80152e4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80152e6:	4b08      	ldr	r3, [pc, #32]	; (8015308 <mem_init+0x68>)
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80152ee:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80152f0:	4b03      	ldr	r3, [pc, #12]	; (8015300 <mem_init+0x60>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	4a05      	ldr	r2, [pc, #20]	; (801530c <mem_init+0x6c>)
 80152f6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80152f8:	bf00      	nop
 80152fa:	3708      	adds	r7, #8
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	240001f0 	.word	0x240001f0
 8015304:	30044000 	.word	0x30044000
 8015308:	240001f4 	.word	0x240001f4
 801530c:	240001f8 	.word	0x240001f8

08015310 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7ff ff0d 	bl	8015138 <mem_to_ptr>
 801531e:	4603      	mov	r3, r0
 8015320:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	881b      	ldrh	r3, [r3, #0]
 8015326:	4618      	mov	r0, r3
 8015328:	f7ff fef4 	bl	8015114 <ptr_to_mem>
 801532c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	885b      	ldrh	r3, [r3, #2]
 8015332:	4618      	mov	r0, r3
 8015334:	f7ff feee 	bl	8015114 <ptr_to_mem>
 8015338:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	881b      	ldrh	r3, [r3, #0]
 801533e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015342:	d818      	bhi.n	8015376 <mem_link_valid+0x66>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	885b      	ldrh	r3, [r3, #2]
 8015348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801534c:	d813      	bhi.n	8015376 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8015352:	8afa      	ldrh	r2, [r7, #22]
 8015354:	429a      	cmp	r2, r3
 8015356:	d004      	beq.n	8015362 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	881b      	ldrh	r3, [r3, #0]
 801535c:	8afa      	ldrh	r2, [r7, #22]
 801535e:	429a      	cmp	r2, r3
 8015360:	d109      	bne.n	8015376 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8015362:	4b08      	ldr	r3, [pc, #32]	; (8015384 <mem_link_valid+0x74>)
 8015364:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8015366:	693a      	ldr	r2, [r7, #16]
 8015368:	429a      	cmp	r2, r3
 801536a:	d006      	beq.n	801537a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	885b      	ldrh	r3, [r3, #2]
 8015370:	8afa      	ldrh	r2, [r7, #22]
 8015372:	429a      	cmp	r2, r3
 8015374:	d001      	beq.n	801537a <mem_link_valid+0x6a>
    return 0;
 8015376:	2300      	movs	r3, #0
 8015378:	e000      	b.n	801537c <mem_link_valid+0x6c>
  }
  return 1;
 801537a:	2301      	movs	r3, #1
}
 801537c:	4618      	mov	r0, r3
 801537e:	3718      	adds	r7, #24
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	240001f4 	.word	0x240001f4

08015388 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b084      	sub	sp, #16
 801538c:	af00      	add	r7, sp, #0
 801538e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	2b00      	cmp	r3, #0
 8015394:	d04c      	beq.n	8015430 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f003 0303 	and.w	r3, r3, #3
 801539c:	2b00      	cmp	r3, #0
 801539e:	d007      	beq.n	80153b0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80153a0:	4b25      	ldr	r3, [pc, #148]	; (8015438 <mem_free+0xb0>)
 80153a2:	f240 2273 	movw	r2, #627	; 0x273
 80153a6:	4925      	ldr	r1, [pc, #148]	; (801543c <mem_free+0xb4>)
 80153a8:	4825      	ldr	r0, [pc, #148]	; (8015440 <mem_free+0xb8>)
 80153aa:	f007 fb05 	bl	801c9b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80153ae:	e040      	b.n	8015432 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	3b08      	subs	r3, #8
 80153b4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80153b6:	4b23      	ldr	r3, [pc, #140]	; (8015444 <mem_free+0xbc>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	68fa      	ldr	r2, [r7, #12]
 80153bc:	429a      	cmp	r2, r3
 80153be:	d306      	bcc.n	80153ce <mem_free+0x46>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	f103 020c 	add.w	r2, r3, #12
 80153c6:	4b20      	ldr	r3, [pc, #128]	; (8015448 <mem_free+0xc0>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d907      	bls.n	80153de <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80153ce:	4b1a      	ldr	r3, [pc, #104]	; (8015438 <mem_free+0xb0>)
 80153d0:	f240 227f 	movw	r2, #639	; 0x27f
 80153d4:	491d      	ldr	r1, [pc, #116]	; (801544c <mem_free+0xc4>)
 80153d6:	481a      	ldr	r0, [pc, #104]	; (8015440 <mem_free+0xb8>)
 80153d8:	f007 faee 	bl	801c9b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80153dc:	e029      	b.n	8015432 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	791b      	ldrb	r3, [r3, #4]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d107      	bne.n	80153f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80153e6:	4b14      	ldr	r3, [pc, #80]	; (8015438 <mem_free+0xb0>)
 80153e8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80153ec:	4918      	ldr	r1, [pc, #96]	; (8015450 <mem_free+0xc8>)
 80153ee:	4814      	ldr	r0, [pc, #80]	; (8015440 <mem_free+0xb8>)
 80153f0:	f007 fae2 	bl	801c9b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80153f4:	e01d      	b.n	8015432 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7ff ff8a 	bl	8015310 <mem_link_valid>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d107      	bne.n	8015412 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8015402:	4b0d      	ldr	r3, [pc, #52]	; (8015438 <mem_free+0xb0>)
 8015404:	f240 2295 	movw	r2, #661	; 0x295
 8015408:	4912      	ldr	r1, [pc, #72]	; (8015454 <mem_free+0xcc>)
 801540a:	480d      	ldr	r0, [pc, #52]	; (8015440 <mem_free+0xb8>)
 801540c:	f007 fad4 	bl	801c9b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8015410:	e00f      	b.n	8015432 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	2200      	movs	r2, #0
 8015416:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8015418:	4b0f      	ldr	r3, [pc, #60]	; (8015458 <mem_free+0xd0>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	68fa      	ldr	r2, [r7, #12]
 801541e:	429a      	cmp	r2, r3
 8015420:	d202      	bcs.n	8015428 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8015422:	4a0d      	ldr	r2, [pc, #52]	; (8015458 <mem_free+0xd0>)
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f7ff fe97 	bl	801515c <plug_holes>
 801542e:	e000      	b.n	8015432 <mem_free+0xaa>
    return;
 8015430:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8015432:	3710      	adds	r7, #16
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	0801e454 	.word	0x0801e454
 801543c:	0801e550 	.word	0x0801e550
 8015440:	0801e4c4 	.word	0x0801e4c4
 8015444:	240001f0 	.word	0x240001f0
 8015448:	240001f4 	.word	0x240001f4
 801544c:	0801e574 	.word	0x0801e574
 8015450:	0801e590 	.word	0x0801e590
 8015454:	0801e5b8 	.word	0x0801e5b8
 8015458:	240001f8 	.word	0x240001f8

0801545c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b088      	sub	sp, #32
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
 8015464:	460b      	mov	r3, r1
 8015466:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8015468:	887b      	ldrh	r3, [r7, #2]
 801546a:	3303      	adds	r3, #3
 801546c:	b29b      	uxth	r3, r3
 801546e:	f023 0303 	bic.w	r3, r3, #3
 8015472:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8015474:	8bfb      	ldrh	r3, [r7, #30]
 8015476:	2b0b      	cmp	r3, #11
 8015478:	d801      	bhi.n	801547e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801547a:	230c      	movs	r3, #12
 801547c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801547e:	8bfb      	ldrh	r3, [r7, #30]
 8015480:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015484:	d803      	bhi.n	801548e <mem_trim+0x32>
 8015486:	8bfa      	ldrh	r2, [r7, #30]
 8015488:	887b      	ldrh	r3, [r7, #2]
 801548a:	429a      	cmp	r2, r3
 801548c:	d201      	bcs.n	8015492 <mem_trim+0x36>
    return NULL;
 801548e:	2300      	movs	r3, #0
 8015490:	e0cc      	b.n	801562c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8015492:	4b68      	ldr	r3, [pc, #416]	; (8015634 <mem_trim+0x1d8>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	429a      	cmp	r2, r3
 801549a:	d304      	bcc.n	80154a6 <mem_trim+0x4a>
 801549c:	4b66      	ldr	r3, [pc, #408]	; (8015638 <mem_trim+0x1dc>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	687a      	ldr	r2, [r7, #4]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	d306      	bcc.n	80154b4 <mem_trim+0x58>
 80154a6:	4b65      	ldr	r3, [pc, #404]	; (801563c <mem_trim+0x1e0>)
 80154a8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80154ac:	4964      	ldr	r1, [pc, #400]	; (8015640 <mem_trim+0x1e4>)
 80154ae:	4865      	ldr	r0, [pc, #404]	; (8015644 <mem_trim+0x1e8>)
 80154b0:	f007 fa82 	bl	801c9b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80154b4:	4b5f      	ldr	r3, [pc, #380]	; (8015634 <mem_trim+0x1d8>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	687a      	ldr	r2, [r7, #4]
 80154ba:	429a      	cmp	r2, r3
 80154bc:	d304      	bcc.n	80154c8 <mem_trim+0x6c>
 80154be:	4b5e      	ldr	r3, [pc, #376]	; (8015638 <mem_trim+0x1dc>)
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	687a      	ldr	r2, [r7, #4]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d301      	bcc.n	80154cc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	e0af      	b.n	801562c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	3b08      	subs	r3, #8
 80154d0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80154d2:	69b8      	ldr	r0, [r7, #24]
 80154d4:	f7ff fe30 	bl	8015138 <mem_to_ptr>
 80154d8:	4603      	mov	r3, r0
 80154da:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80154dc:	69bb      	ldr	r3, [r7, #24]
 80154de:	881a      	ldrh	r2, [r3, #0]
 80154e0:	8afb      	ldrh	r3, [r7, #22]
 80154e2:	1ad3      	subs	r3, r2, r3
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	3b08      	subs	r3, #8
 80154e8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80154ea:	8bfa      	ldrh	r2, [r7, #30]
 80154ec:	8abb      	ldrh	r3, [r7, #20]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d906      	bls.n	8015500 <mem_trim+0xa4>
 80154f2:	4b52      	ldr	r3, [pc, #328]	; (801563c <mem_trim+0x1e0>)
 80154f4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80154f8:	4953      	ldr	r1, [pc, #332]	; (8015648 <mem_trim+0x1ec>)
 80154fa:	4852      	ldr	r0, [pc, #328]	; (8015644 <mem_trim+0x1e8>)
 80154fc:	f007 fa5c 	bl	801c9b8 <iprintf>
  if (newsize > size) {
 8015500:	8bfa      	ldrh	r2, [r7, #30]
 8015502:	8abb      	ldrh	r3, [r7, #20]
 8015504:	429a      	cmp	r2, r3
 8015506:	d901      	bls.n	801550c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8015508:	2300      	movs	r3, #0
 801550a:	e08f      	b.n	801562c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801550c:	8bfa      	ldrh	r2, [r7, #30]
 801550e:	8abb      	ldrh	r3, [r7, #20]
 8015510:	429a      	cmp	r2, r3
 8015512:	d101      	bne.n	8015518 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	e089      	b.n	801562c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8015518:	69bb      	ldr	r3, [r7, #24]
 801551a:	881b      	ldrh	r3, [r3, #0]
 801551c:	4618      	mov	r0, r3
 801551e:	f7ff fdf9 	bl	8015114 <ptr_to_mem>
 8015522:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8015524:	693b      	ldr	r3, [r7, #16]
 8015526:	791b      	ldrb	r3, [r3, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d13f      	bne.n	80155ac <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	881b      	ldrh	r3, [r3, #0]
 8015530:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015534:	d106      	bne.n	8015544 <mem_trim+0xe8>
 8015536:	4b41      	ldr	r3, [pc, #260]	; (801563c <mem_trim+0x1e0>)
 8015538:	f240 22f5 	movw	r2, #757	; 0x2f5
 801553c:	4943      	ldr	r1, [pc, #268]	; (801564c <mem_trim+0x1f0>)
 801553e:	4841      	ldr	r0, [pc, #260]	; (8015644 <mem_trim+0x1e8>)
 8015540:	f007 fa3a 	bl	801c9b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	881b      	ldrh	r3, [r3, #0]
 8015548:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801554a:	8afa      	ldrh	r2, [r7, #22]
 801554c:	8bfb      	ldrh	r3, [r7, #30]
 801554e:	4413      	add	r3, r2
 8015550:	b29b      	uxth	r3, r3
 8015552:	3308      	adds	r3, #8
 8015554:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8015556:	4b3e      	ldr	r3, [pc, #248]	; (8015650 <mem_trim+0x1f4>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	693a      	ldr	r2, [r7, #16]
 801555c:	429a      	cmp	r2, r3
 801555e:	d106      	bne.n	801556e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8015560:	89fb      	ldrh	r3, [r7, #14]
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff fdd6 	bl	8015114 <ptr_to_mem>
 8015568:	4602      	mov	r2, r0
 801556a:	4b39      	ldr	r3, [pc, #228]	; (8015650 <mem_trim+0x1f4>)
 801556c:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801556e:	89fb      	ldrh	r3, [r7, #14]
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff fdcf 	bl	8015114 <ptr_to_mem>
 8015576:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	2200      	movs	r2, #0
 801557c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	89ba      	ldrh	r2, [r7, #12]
 8015582:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	8afa      	ldrh	r2, [r7, #22]
 8015588:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	89fa      	ldrh	r2, [r7, #14]
 801558e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	881b      	ldrh	r3, [r3, #0]
 8015594:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015598:	d047      	beq.n	801562a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801559a:	693b      	ldr	r3, [r7, #16]
 801559c:	881b      	ldrh	r3, [r3, #0]
 801559e:	4618      	mov	r0, r3
 80155a0:	f7ff fdb8 	bl	8015114 <ptr_to_mem>
 80155a4:	4602      	mov	r2, r0
 80155a6:	89fb      	ldrh	r3, [r7, #14]
 80155a8:	8053      	strh	r3, [r2, #2]
 80155aa:	e03e      	b.n	801562a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80155ac:	8bfb      	ldrh	r3, [r7, #30]
 80155ae:	f103 0214 	add.w	r2, r3, #20
 80155b2:	8abb      	ldrh	r3, [r7, #20]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d838      	bhi.n	801562a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80155b8:	8afa      	ldrh	r2, [r7, #22]
 80155ba:	8bfb      	ldrh	r3, [r7, #30]
 80155bc:	4413      	add	r3, r2
 80155be:	b29b      	uxth	r3, r3
 80155c0:	3308      	adds	r3, #8
 80155c2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80155c4:	69bb      	ldr	r3, [r7, #24]
 80155c6:	881b      	ldrh	r3, [r3, #0]
 80155c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80155cc:	d106      	bne.n	80155dc <mem_trim+0x180>
 80155ce:	4b1b      	ldr	r3, [pc, #108]	; (801563c <mem_trim+0x1e0>)
 80155d0:	f240 3216 	movw	r2, #790	; 0x316
 80155d4:	491d      	ldr	r1, [pc, #116]	; (801564c <mem_trim+0x1f0>)
 80155d6:	481b      	ldr	r0, [pc, #108]	; (8015644 <mem_trim+0x1e8>)
 80155d8:	f007 f9ee 	bl	801c9b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80155dc:	89fb      	ldrh	r3, [r7, #14]
 80155de:	4618      	mov	r0, r3
 80155e0:	f7ff fd98 	bl	8015114 <ptr_to_mem>
 80155e4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80155e6:	4b1a      	ldr	r3, [pc, #104]	; (8015650 <mem_trim+0x1f4>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	693a      	ldr	r2, [r7, #16]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d202      	bcs.n	80155f6 <mem_trim+0x19a>
      lfree = mem2;
 80155f0:	4a17      	ldr	r2, [pc, #92]	; (8015650 <mem_trim+0x1f4>)
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	2200      	movs	r2, #0
 80155fa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80155fc:	69bb      	ldr	r3, [r7, #24]
 80155fe:	881a      	ldrh	r2, [r3, #0]
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	8afa      	ldrh	r2, [r7, #22]
 8015608:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	89fa      	ldrh	r2, [r7, #14]
 801560e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	881b      	ldrh	r3, [r3, #0]
 8015614:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015618:	d007      	beq.n	801562a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	4618      	mov	r0, r3
 8015620:	f7ff fd78 	bl	8015114 <ptr_to_mem>
 8015624:	4602      	mov	r2, r0
 8015626:	89fb      	ldrh	r3, [r7, #14]
 8015628:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801562a:	687b      	ldr	r3, [r7, #4]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3720      	adds	r7, #32
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}
 8015634:	240001f0 	.word	0x240001f0
 8015638:	240001f4 	.word	0x240001f4
 801563c:	0801e454 	.word	0x0801e454
 8015640:	0801e5ec 	.word	0x0801e5ec
 8015644:	0801e4c4 	.word	0x0801e4c4
 8015648:	0801e604 	.word	0x0801e604
 801564c:	0801e624 	.word	0x0801e624
 8015650:	240001f8 	.word	0x240001f8

08015654 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b088      	sub	sp, #32
 8015658:	af00      	add	r7, sp, #0
 801565a:	4603      	mov	r3, r0
 801565c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801565e:	88fb      	ldrh	r3, [r7, #6]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d101      	bne.n	8015668 <mem_malloc+0x14>
    return NULL;
 8015664:	2300      	movs	r3, #0
 8015666:	e0d9      	b.n	801581c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8015668:	88fb      	ldrh	r3, [r7, #6]
 801566a:	3303      	adds	r3, #3
 801566c:	b29b      	uxth	r3, r3
 801566e:	f023 0303 	bic.w	r3, r3, #3
 8015672:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8015674:	8bbb      	ldrh	r3, [r7, #28]
 8015676:	2b0b      	cmp	r3, #11
 8015678:	d801      	bhi.n	801567e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801567a:	230c      	movs	r3, #12
 801567c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801567e:	8bbb      	ldrh	r3, [r7, #28]
 8015680:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015684:	d803      	bhi.n	801568e <mem_malloc+0x3a>
 8015686:	8bba      	ldrh	r2, [r7, #28]
 8015688:	88fb      	ldrh	r3, [r7, #6]
 801568a:	429a      	cmp	r2, r3
 801568c:	d201      	bcs.n	8015692 <mem_malloc+0x3e>
    return NULL;
 801568e:	2300      	movs	r3, #0
 8015690:	e0c4      	b.n	801581c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8015692:	4b64      	ldr	r3, [pc, #400]	; (8015824 <mem_malloc+0x1d0>)
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	4618      	mov	r0, r3
 8015698:	f7ff fd4e 	bl	8015138 <mem_to_ptr>
 801569c:	4603      	mov	r3, r0
 801569e:	83fb      	strh	r3, [r7, #30]
 80156a0:	e0b4      	b.n	801580c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80156a2:	8bfb      	ldrh	r3, [r7, #30]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7ff fd35 	bl	8015114 <ptr_to_mem>
 80156aa:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80156ac:	697b      	ldr	r3, [r7, #20]
 80156ae:	791b      	ldrb	r3, [r3, #4]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	f040 80a4 	bne.w	80157fe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80156b6:	697b      	ldr	r3, [r7, #20]
 80156b8:	881b      	ldrh	r3, [r3, #0]
 80156ba:	461a      	mov	r2, r3
 80156bc:	8bfb      	ldrh	r3, [r7, #30]
 80156be:	1ad3      	subs	r3, r2, r3
 80156c0:	f1a3 0208 	sub.w	r2, r3, #8
 80156c4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80156c6:	429a      	cmp	r2, r3
 80156c8:	f0c0 8099 	bcc.w	80157fe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	881b      	ldrh	r3, [r3, #0]
 80156d0:	461a      	mov	r2, r3
 80156d2:	8bfb      	ldrh	r3, [r7, #30]
 80156d4:	1ad3      	subs	r3, r2, r3
 80156d6:	f1a3 0208 	sub.w	r2, r3, #8
 80156da:	8bbb      	ldrh	r3, [r7, #28]
 80156dc:	3314      	adds	r3, #20
 80156de:	429a      	cmp	r2, r3
 80156e0:	d333      	bcc.n	801574a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80156e2:	8bfa      	ldrh	r2, [r7, #30]
 80156e4:	8bbb      	ldrh	r3, [r7, #28]
 80156e6:	4413      	add	r3, r2
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	3308      	adds	r3, #8
 80156ec:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80156ee:	8a7b      	ldrh	r3, [r7, #18]
 80156f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80156f4:	d106      	bne.n	8015704 <mem_malloc+0xb0>
 80156f6:	4b4c      	ldr	r3, [pc, #304]	; (8015828 <mem_malloc+0x1d4>)
 80156f8:	f240 3287 	movw	r2, #903	; 0x387
 80156fc:	494b      	ldr	r1, [pc, #300]	; (801582c <mem_malloc+0x1d8>)
 80156fe:	484c      	ldr	r0, [pc, #304]	; (8015830 <mem_malloc+0x1dc>)
 8015700:	f007 f95a 	bl	801c9b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8015704:	8a7b      	ldrh	r3, [r7, #18]
 8015706:	4618      	mov	r0, r3
 8015708:	f7ff fd04 	bl	8015114 <ptr_to_mem>
 801570c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	2200      	movs	r2, #0
 8015712:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	881a      	ldrh	r2, [r3, #0]
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	8bfa      	ldrh	r2, [r7, #30]
 8015720:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	8a7a      	ldrh	r2, [r7, #18]
 8015726:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	2201      	movs	r2, #1
 801572c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	881b      	ldrh	r3, [r3, #0]
 8015732:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8015736:	d00b      	beq.n	8015750 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	881b      	ldrh	r3, [r3, #0]
 801573c:	4618      	mov	r0, r3
 801573e:	f7ff fce9 	bl	8015114 <ptr_to_mem>
 8015742:	4602      	mov	r2, r0
 8015744:	8a7b      	ldrh	r3, [r7, #18]
 8015746:	8053      	strh	r3, [r2, #2]
 8015748:	e002      	b.n	8015750 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	2201      	movs	r2, #1
 801574e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8015750:	4b34      	ldr	r3, [pc, #208]	; (8015824 <mem_malloc+0x1d0>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	697a      	ldr	r2, [r7, #20]
 8015756:	429a      	cmp	r2, r3
 8015758:	d127      	bne.n	80157aa <mem_malloc+0x156>
          struct mem *cur = lfree;
 801575a:	4b32      	ldr	r3, [pc, #200]	; (8015824 <mem_malloc+0x1d0>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8015760:	e005      	b.n	801576e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	881b      	ldrh	r3, [r3, #0]
 8015766:	4618      	mov	r0, r3
 8015768:	f7ff fcd4 	bl	8015114 <ptr_to_mem>
 801576c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	791b      	ldrb	r3, [r3, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d004      	beq.n	8015780 <mem_malloc+0x12c>
 8015776:	4b2f      	ldr	r3, [pc, #188]	; (8015834 <mem_malloc+0x1e0>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	69ba      	ldr	r2, [r7, #24]
 801577c:	429a      	cmp	r2, r3
 801577e:	d1f0      	bne.n	8015762 <mem_malloc+0x10e>
          }
          lfree = cur;
 8015780:	4a28      	ldr	r2, [pc, #160]	; (8015824 <mem_malloc+0x1d0>)
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8015786:	4b27      	ldr	r3, [pc, #156]	; (8015824 <mem_malloc+0x1d0>)
 8015788:	681a      	ldr	r2, [r3, #0]
 801578a:	4b2a      	ldr	r3, [pc, #168]	; (8015834 <mem_malloc+0x1e0>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	429a      	cmp	r2, r3
 8015790:	d00b      	beq.n	80157aa <mem_malloc+0x156>
 8015792:	4b24      	ldr	r3, [pc, #144]	; (8015824 <mem_malloc+0x1d0>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	791b      	ldrb	r3, [r3, #4]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d006      	beq.n	80157aa <mem_malloc+0x156>
 801579c:	4b22      	ldr	r3, [pc, #136]	; (8015828 <mem_malloc+0x1d4>)
 801579e:	f240 32b5 	movw	r2, #949	; 0x3b5
 80157a2:	4925      	ldr	r1, [pc, #148]	; (8015838 <mem_malloc+0x1e4>)
 80157a4:	4822      	ldr	r0, [pc, #136]	; (8015830 <mem_malloc+0x1dc>)
 80157a6:	f007 f907 	bl	801c9b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80157aa:	8bba      	ldrh	r2, [r7, #28]
 80157ac:	697b      	ldr	r3, [r7, #20]
 80157ae:	4413      	add	r3, r2
 80157b0:	3308      	adds	r3, #8
 80157b2:	4a20      	ldr	r2, [pc, #128]	; (8015834 <mem_malloc+0x1e0>)
 80157b4:	6812      	ldr	r2, [r2, #0]
 80157b6:	4293      	cmp	r3, r2
 80157b8:	d906      	bls.n	80157c8 <mem_malloc+0x174>
 80157ba:	4b1b      	ldr	r3, [pc, #108]	; (8015828 <mem_malloc+0x1d4>)
 80157bc:	f240 32ba 	movw	r2, #954	; 0x3ba
 80157c0:	491e      	ldr	r1, [pc, #120]	; (801583c <mem_malloc+0x1e8>)
 80157c2:	481b      	ldr	r0, [pc, #108]	; (8015830 <mem_malloc+0x1dc>)
 80157c4:	f007 f8f8 	bl	801c9b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	f003 0303 	and.w	r3, r3, #3
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d006      	beq.n	80157e0 <mem_malloc+0x18c>
 80157d2:	4b15      	ldr	r3, [pc, #84]	; (8015828 <mem_malloc+0x1d4>)
 80157d4:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80157d8:	4919      	ldr	r1, [pc, #100]	; (8015840 <mem_malloc+0x1ec>)
 80157da:	4815      	ldr	r0, [pc, #84]	; (8015830 <mem_malloc+0x1dc>)
 80157dc:	f007 f8ec 	bl	801c9b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	f003 0303 	and.w	r3, r3, #3
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d006      	beq.n	80157f8 <mem_malloc+0x1a4>
 80157ea:	4b0f      	ldr	r3, [pc, #60]	; (8015828 <mem_malloc+0x1d4>)
 80157ec:	f240 32be 	movw	r2, #958	; 0x3be
 80157f0:	4914      	ldr	r1, [pc, #80]	; (8015844 <mem_malloc+0x1f0>)
 80157f2:	480f      	ldr	r0, [pc, #60]	; (8015830 <mem_malloc+0x1dc>)
 80157f4:	f007 f8e0 	bl	801c9b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	3308      	adds	r3, #8
 80157fc:	e00e      	b.n	801581c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80157fe:	8bfb      	ldrh	r3, [r7, #30]
 8015800:	4618      	mov	r0, r3
 8015802:	f7ff fc87 	bl	8015114 <ptr_to_mem>
 8015806:	4603      	mov	r3, r0
 8015808:	881b      	ldrh	r3, [r3, #0]
 801580a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801580c:	8bfa      	ldrh	r2, [r7, #30]
 801580e:	8bbb      	ldrh	r3, [r7, #28]
 8015810:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8015814:	429a      	cmp	r2, r3
 8015816:	f4ff af44 	bcc.w	80156a2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801581a:	2300      	movs	r3, #0
}
 801581c:	4618      	mov	r0, r3
 801581e:	3720      	adds	r7, #32
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}
 8015824:	240001f8 	.word	0x240001f8
 8015828:	0801e454 	.word	0x0801e454
 801582c:	0801e624 	.word	0x0801e624
 8015830:	0801e4c4 	.word	0x0801e4c4
 8015834:	240001f4 	.word	0x240001f4
 8015838:	0801e638 	.word	0x0801e638
 801583c:	0801e654 	.word	0x0801e654
 8015840:	0801e684 	.word	0x0801e684
 8015844:	0801e6b4 	.word	0x0801e6b4

08015848 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8015848:	b480      	push	{r7}
 801584a:	b085      	sub	sp, #20
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	689b      	ldr	r3, [r3, #8]
 8015854:	2200      	movs	r2, #0
 8015856:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	685b      	ldr	r3, [r3, #4]
 801585c:	3303      	adds	r3, #3
 801585e:	f023 0303 	bic.w	r3, r3, #3
 8015862:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8015864:	2300      	movs	r3, #0
 8015866:	60fb      	str	r3, [r7, #12]
 8015868:	e011      	b.n	801588e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	689b      	ldr	r3, [r3, #8]
 8015878:	68ba      	ldr	r2, [r7, #8]
 801587a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	881b      	ldrh	r3, [r3, #0]
 8015880:	461a      	mov	r2, r3
 8015882:	68bb      	ldr	r3, [r7, #8]
 8015884:	4413      	add	r3, r2
 8015886:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3301      	adds	r3, #1
 801588c:	60fb      	str	r3, [r7, #12]
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	885b      	ldrh	r3, [r3, #2]
 8015892:	461a      	mov	r2, r3
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	4293      	cmp	r3, r2
 8015898:	dbe7      	blt.n	801586a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801589a:	bf00      	nop
 801589c:	3714      	adds	r7, #20
 801589e:	46bd      	mov	sp, r7
 80158a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a4:	4770      	bx	lr
	...

080158a8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80158ae:	2300      	movs	r3, #0
 80158b0:	80fb      	strh	r3, [r7, #6]
 80158b2:	e009      	b.n	80158c8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80158b4:	88fb      	ldrh	r3, [r7, #6]
 80158b6:	4a08      	ldr	r2, [pc, #32]	; (80158d8 <memp_init+0x30>)
 80158b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158bc:	4618      	mov	r0, r3
 80158be:	f7ff ffc3 	bl	8015848 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80158c2:	88fb      	ldrh	r3, [r7, #6]
 80158c4:	3301      	adds	r3, #1
 80158c6:	80fb      	strh	r3, [r7, #6]
 80158c8:	88fb      	ldrh	r3, [r7, #6]
 80158ca:	2b08      	cmp	r3, #8
 80158cc:	d9f2      	bls.n	80158b4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80158ce:	bf00      	nop
 80158d0:	3708      	adds	r7, #8
 80158d2:	46bd      	mov	sp, r7
 80158d4:	bd80      	pop	{r7, pc}
 80158d6:	bf00      	nop
 80158d8:	08020d98 	.word	0x08020d98

080158dc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	689b      	ldr	r3, [r3, #8]
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d012      	beq.n	8015918 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	689b      	ldr	r3, [r3, #8]
 80158f6:	68fa      	ldr	r2, [r7, #12]
 80158f8:	6812      	ldr	r2, [r2, #0]
 80158fa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f003 0303 	and.w	r3, r3, #3
 8015902:	2b00      	cmp	r3, #0
 8015904:	d006      	beq.n	8015914 <do_memp_malloc_pool+0x38>
 8015906:	4b07      	ldr	r3, [pc, #28]	; (8015924 <do_memp_malloc_pool+0x48>)
 8015908:	f240 1219 	movw	r2, #281	; 0x119
 801590c:	4906      	ldr	r1, [pc, #24]	; (8015928 <do_memp_malloc_pool+0x4c>)
 801590e:	4807      	ldr	r0, [pc, #28]	; (801592c <do_memp_malloc_pool+0x50>)
 8015910:	f007 f852 	bl	801c9b8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	e000      	b.n	801591a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8015918:	2300      	movs	r3, #0
}
 801591a:	4618      	mov	r0, r3
 801591c:	3710      	adds	r7, #16
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	0801e6d8 	.word	0x0801e6d8
 8015928:	0801e730 	.word	0x0801e730
 801592c:	0801e754 	.word	0x0801e754

08015930 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
 8015936:	4603      	mov	r3, r0
 8015938:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801593a:	79fb      	ldrb	r3, [r7, #7]
 801593c:	2b08      	cmp	r3, #8
 801593e:	d908      	bls.n	8015952 <memp_malloc+0x22>
 8015940:	4b0a      	ldr	r3, [pc, #40]	; (801596c <memp_malloc+0x3c>)
 8015942:	f240 1257 	movw	r2, #343	; 0x157
 8015946:	490a      	ldr	r1, [pc, #40]	; (8015970 <memp_malloc+0x40>)
 8015948:	480a      	ldr	r0, [pc, #40]	; (8015974 <memp_malloc+0x44>)
 801594a:	f007 f835 	bl	801c9b8 <iprintf>
 801594e:	2300      	movs	r3, #0
 8015950:	e008      	b.n	8015964 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8015952:	79fb      	ldrb	r3, [r7, #7]
 8015954:	4a08      	ldr	r2, [pc, #32]	; (8015978 <memp_malloc+0x48>)
 8015956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801595a:	4618      	mov	r0, r3
 801595c:	f7ff ffbe 	bl	80158dc <do_memp_malloc_pool>
 8015960:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8015962:	68fb      	ldr	r3, [r7, #12]
}
 8015964:	4618      	mov	r0, r3
 8015966:	3710      	adds	r7, #16
 8015968:	46bd      	mov	sp, r7
 801596a:	bd80      	pop	{r7, pc}
 801596c:	0801e6d8 	.word	0x0801e6d8
 8015970:	0801e790 	.word	0x0801e790
 8015974:	0801e754 	.word	0x0801e754
 8015978:	08020d98 	.word	0x08020d98

0801597c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b084      	sub	sp, #16
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	f003 0303 	and.w	r3, r3, #3
 801598c:	2b00      	cmp	r3, #0
 801598e:	d006      	beq.n	801599e <do_memp_free_pool+0x22>
 8015990:	4b0a      	ldr	r3, [pc, #40]	; (80159bc <do_memp_free_pool+0x40>)
 8015992:	f240 126d 	movw	r2, #365	; 0x16d
 8015996:	490a      	ldr	r1, [pc, #40]	; (80159c0 <do_memp_free_pool+0x44>)
 8015998:	480a      	ldr	r0, [pc, #40]	; (80159c4 <do_memp_free_pool+0x48>)
 801599a:	f007 f80d 	bl	801c9b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	689b      	ldr	r3, [r3, #8]
 80159a6:	681a      	ldr	r2, [r3, #0]
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	689b      	ldr	r3, [r3, #8]
 80159b0:	68fa      	ldr	r2, [r7, #12]
 80159b2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80159b4:	bf00      	nop
 80159b6:	3710      	adds	r7, #16
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}
 80159bc:	0801e6d8 	.word	0x0801e6d8
 80159c0:	0801e7b0 	.word	0x0801e7b0
 80159c4:	0801e754 	.word	0x0801e754

080159c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	4603      	mov	r3, r0
 80159d0:	6039      	str	r1, [r7, #0]
 80159d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80159d4:	79fb      	ldrb	r3, [r7, #7]
 80159d6:	2b08      	cmp	r3, #8
 80159d8:	d907      	bls.n	80159ea <memp_free+0x22>
 80159da:	4b0c      	ldr	r3, [pc, #48]	; (8015a0c <memp_free+0x44>)
 80159dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80159e0:	490b      	ldr	r1, [pc, #44]	; (8015a10 <memp_free+0x48>)
 80159e2:	480c      	ldr	r0, [pc, #48]	; (8015a14 <memp_free+0x4c>)
 80159e4:	f006 ffe8 	bl	801c9b8 <iprintf>
 80159e8:	e00c      	b.n	8015a04 <memp_free+0x3c>

  if (mem == NULL) {
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d008      	beq.n	8015a02 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80159f0:	79fb      	ldrb	r3, [r7, #7]
 80159f2:	4a09      	ldr	r2, [pc, #36]	; (8015a18 <memp_free+0x50>)
 80159f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159f8:	6839      	ldr	r1, [r7, #0]
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7ff ffbe 	bl	801597c <do_memp_free_pool>
 8015a00:	e000      	b.n	8015a04 <memp_free+0x3c>
    return;
 8015a02:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	0801e6d8 	.word	0x0801e6d8
 8015a10:	0801e7d0 	.word	0x0801e7d0
 8015a14:	0801e754 	.word	0x0801e754
 8015a18:	08020d98 	.word	0x08020d98

08015a1c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8015a20:	bf00      	nop
 8015a22:	46bd      	mov	sp, r7
 8015a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a28:	4770      	bx	lr
	...

08015a2c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
 8015a38:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d108      	bne.n	8015a52 <netif_add+0x26>
 8015a40:	4b5b      	ldr	r3, [pc, #364]	; (8015bb0 <netif_add+0x184>)
 8015a42:	f240 1227 	movw	r2, #295	; 0x127
 8015a46:	495b      	ldr	r1, [pc, #364]	; (8015bb4 <netif_add+0x188>)
 8015a48:	485b      	ldr	r0, [pc, #364]	; (8015bb8 <netif_add+0x18c>)
 8015a4a:	f006 ffb5 	bl	801c9b8 <iprintf>
 8015a4e:	2300      	movs	r3, #0
 8015a50:	e0a9      	b.n	8015ba6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8015a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d108      	bne.n	8015a6a <netif_add+0x3e>
 8015a58:	4b55      	ldr	r3, [pc, #340]	; (8015bb0 <netif_add+0x184>)
 8015a5a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8015a5e:	4957      	ldr	r1, [pc, #348]	; (8015bbc <netif_add+0x190>)
 8015a60:	4855      	ldr	r0, [pc, #340]	; (8015bb8 <netif_add+0x18c>)
 8015a62:	f006 ffa9 	bl	801c9b8 <iprintf>
 8015a66:	2300      	movs	r3, #0
 8015a68:	e09d      	b.n	8015ba6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8015a6a:	68bb      	ldr	r3, [r7, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d101      	bne.n	8015a74 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8015a70:	4b53      	ldr	r3, [pc, #332]	; (8015bc0 <netif_add+0x194>)
 8015a72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d101      	bne.n	8015a7e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8015a7a:	4b51      	ldr	r3, [pc, #324]	; (8015bc0 <netif_add+0x194>)
 8015a7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d101      	bne.n	8015a88 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8015a84:	4b4e      	ldr	r3, [pc, #312]	; (8015bc0 <netif_add+0x194>)
 8015a86:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2200      	movs	r2, #0
 8015a92:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	2200      	movs	r2, #0
 8015a98:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	4a49      	ldr	r2, [pc, #292]	; (8015bc4 <netif_add+0x198>)
 8015a9e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	3324      	adds	r3, #36	; 0x24
 8015ab2:	2204      	movs	r2, #4
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	f006 ff76 	bl	801c9a8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	6a3a      	ldr	r2, [r7, #32]
 8015ac6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8015ac8:	4b3f      	ldr	r3, [pc, #252]	; (8015bc8 <netif_add+0x19c>)
 8015aca:	781a      	ldrb	r2, [r3, #0]
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ad6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	68b9      	ldr	r1, [r7, #8]
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f000 f914 	bl	8015d0c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8015ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae6:	68f8      	ldr	r0, [r7, #12]
 8015ae8:	4798      	blx	r3
 8015aea:	4603      	mov	r3, r0
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d001      	beq.n	8015af4 <netif_add+0xc8>
    return NULL;
 8015af0:	2300      	movs	r3, #0
 8015af2:	e058      	b.n	8015ba6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015afa:	2bff      	cmp	r3, #255	; 0xff
 8015afc:	d103      	bne.n	8015b06 <netif_add+0xda>
        netif->num = 0;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	2200      	movs	r2, #0
 8015b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8015b06:	2300      	movs	r3, #0
 8015b08:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015b0a:	4b30      	ldr	r3, [pc, #192]	; (8015bcc <netif_add+0x1a0>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	617b      	str	r3, [r7, #20]
 8015b10:	e02b      	b.n	8015b6a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8015b12:	697a      	ldr	r2, [r7, #20]
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	429a      	cmp	r2, r3
 8015b18:	d106      	bne.n	8015b28 <netif_add+0xfc>
 8015b1a:	4b25      	ldr	r3, [pc, #148]	; (8015bb0 <netif_add+0x184>)
 8015b1c:	f240 128b 	movw	r2, #395	; 0x18b
 8015b20:	492b      	ldr	r1, [pc, #172]	; (8015bd0 <netif_add+0x1a4>)
 8015b22:	4825      	ldr	r0, [pc, #148]	; (8015bb8 <netif_add+0x18c>)
 8015b24:	f006 ff48 	bl	801c9b8 <iprintf>
        num_netifs++;
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	3301      	adds	r3, #1
 8015b2c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	2bff      	cmp	r3, #255	; 0xff
 8015b32:	dd06      	ble.n	8015b42 <netif_add+0x116>
 8015b34:	4b1e      	ldr	r3, [pc, #120]	; (8015bb0 <netif_add+0x184>)
 8015b36:	f240 128d 	movw	r2, #397	; 0x18d
 8015b3a:	4926      	ldr	r1, [pc, #152]	; (8015bd4 <netif_add+0x1a8>)
 8015b3c:	481e      	ldr	r0, [pc, #120]	; (8015bb8 <netif_add+0x18c>)
 8015b3e:	f006 ff3b 	bl	801c9b8 <iprintf>
        if (netif2->num == netif->num) {
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d108      	bne.n	8015b64 <netif_add+0x138>
          netif->num++;
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b58:	3301      	adds	r3, #1
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8015b62:	e005      	b.n	8015b70 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	617b      	str	r3, [r7, #20]
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d1d0      	bne.n	8015b12 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d1be      	bne.n	8015af4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8015b7e:	d103      	bne.n	8015b88 <netif_add+0x15c>
    netif_num = 0;
 8015b80:	4b11      	ldr	r3, [pc, #68]	; (8015bc8 <netif_add+0x19c>)
 8015b82:	2200      	movs	r2, #0
 8015b84:	701a      	strb	r2, [r3, #0]
 8015b86:	e006      	b.n	8015b96 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015b8e:	3301      	adds	r3, #1
 8015b90:	b2da      	uxtb	r2, r3
 8015b92:	4b0d      	ldr	r3, [pc, #52]	; (8015bc8 <netif_add+0x19c>)
 8015b94:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8015b96:	4b0d      	ldr	r3, [pc, #52]	; (8015bcc <netif_add+0x1a0>)
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8015b9e:	4a0b      	ldr	r2, [pc, #44]	; (8015bcc <netif_add+0x1a0>)
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8015ba4:	68fb      	ldr	r3, [r7, #12]
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3718      	adds	r7, #24
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	0801e7ec 	.word	0x0801e7ec
 8015bb4:	0801e8a8 	.word	0x0801e8a8
 8015bb8:	0801e864 	.word	0x0801e864
 8015bbc:	0801e8c4 	.word	0x0801e8c4
 8015bc0:	08020d24 	.word	0x08020d24
 8015bc4:	08015f1f 	.word	0x08015f1f
 8015bc8:	24000220 	.word	0x24000220
 8015bcc:	24007674 	.word	0x24007674
 8015bd0:	0801e8e8 	.word	0x0801e8e8
 8015bd4:	0801e8fc 	.word	0x0801e8fc

08015bd8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b082      	sub	sp, #8
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
 8015be0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8015be2:	6839      	ldr	r1, [r7, #0]
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f002 fabf 	bl	8018168 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f006 fe6d 	bl	801c8cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8015bf2:	bf00      	nop
 8015bf4:	3708      	adds	r7, #8
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
	...

08015bfc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b086      	sub	sp, #24
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	60f8      	str	r0, [r7, #12]
 8015c04:	60b9      	str	r1, [r7, #8]
 8015c06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d106      	bne.n	8015c1c <netif_do_set_ipaddr+0x20>
 8015c0e:	4b1d      	ldr	r3, [pc, #116]	; (8015c84 <netif_do_set_ipaddr+0x88>)
 8015c10:	f240 12cb 	movw	r2, #459	; 0x1cb
 8015c14:	491c      	ldr	r1, [pc, #112]	; (8015c88 <netif_do_set_ipaddr+0x8c>)
 8015c16:	481d      	ldr	r0, [pc, #116]	; (8015c8c <netif_do_set_ipaddr+0x90>)
 8015c18:	f006 fece 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d106      	bne.n	8015c30 <netif_do_set_ipaddr+0x34>
 8015c22:	4b18      	ldr	r3, [pc, #96]	; (8015c84 <netif_do_set_ipaddr+0x88>)
 8015c24:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8015c28:	4917      	ldr	r1, [pc, #92]	; (8015c88 <netif_do_set_ipaddr+0x8c>)
 8015c2a:	4818      	ldr	r0, [pc, #96]	; (8015c8c <netif_do_set_ipaddr+0x90>)
 8015c2c:	f006 fec4 	bl	801c9b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	681a      	ldr	r2, [r3, #0]
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	3304      	adds	r3, #4
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	d01c      	beq.n	8015c78 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	3304      	adds	r3, #4
 8015c48:	681a      	ldr	r2, [r3, #0]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8015c4e:	f107 0314 	add.w	r3, r7, #20
 8015c52:	4619      	mov	r1, r3
 8015c54:	6878      	ldr	r0, [r7, #4]
 8015c56:	f7ff ffbf 	bl	8015bd8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8015c5a:	68bb      	ldr	r3, [r7, #8]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d002      	beq.n	8015c66 <netif_do_set_ipaddr+0x6a>
 8015c60:	68bb      	ldr	r3, [r7, #8]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	e000      	b.n	8015c68 <netif_do_set_ipaddr+0x6c>
 8015c66:	2300      	movs	r3, #0
 8015c68:	68fa      	ldr	r2, [r7, #12]
 8015c6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8015c6c:	2101      	movs	r1, #1
 8015c6e:	68f8      	ldr	r0, [r7, #12]
 8015c70:	f000 f8d2 	bl	8015e18 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8015c74:	2301      	movs	r3, #1
 8015c76:	e000      	b.n	8015c7a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8015c78:	2300      	movs	r3, #0
}
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	3718      	adds	r7, #24
 8015c7e:	46bd      	mov	sp, r7
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	0801e7ec 	.word	0x0801e7ec
 8015c88:	0801e92c 	.word	0x0801e92c
 8015c8c:	0801e864 	.word	0x0801e864

08015c90 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8015c90:	b480      	push	{r7}
 8015c92:	b085      	sub	sp, #20
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	60f8      	str	r0, [r7, #12]
 8015c98:	60b9      	str	r1, [r7, #8]
 8015c9a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	681a      	ldr	r2, [r3, #0]
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	3308      	adds	r3, #8
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d00a      	beq.n	8015cc0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d002      	beq.n	8015cb6 <netif_do_set_netmask+0x26>
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	681b      	ldr	r3, [r3, #0]
 8015cb4:	e000      	b.n	8015cb8 <netif_do_set_netmask+0x28>
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	68fa      	ldr	r2, [r7, #12]
 8015cba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	e000      	b.n	8015cc2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8015cc0:	2300      	movs	r3, #0
}
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	3714      	adds	r7, #20
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr

08015cce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8015cce:	b480      	push	{r7}
 8015cd0:	b085      	sub	sp, #20
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	60f8      	str	r0, [r7, #12]
 8015cd6:	60b9      	str	r1, [r7, #8]
 8015cd8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	681a      	ldr	r2, [r3, #0]
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	330c      	adds	r3, #12
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d00a      	beq.n	8015cfe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d002      	beq.n	8015cf4 <netif_do_set_gw+0x26>
 8015cee:	68bb      	ldr	r3, [r7, #8]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	e000      	b.n	8015cf6 <netif_do_set_gw+0x28>
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	68fa      	ldr	r2, [r7, #12]
 8015cf8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	e000      	b.n	8015d00 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8015cfe:	2300      	movs	r3, #0
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3714      	adds	r7, #20
 8015d04:	46bd      	mov	sp, r7
 8015d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0a:	4770      	bx	lr

08015d0c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b088      	sub	sp, #32
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	607a      	str	r2, [r7, #4]
 8015d18:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d22:	68bb      	ldr	r3, [r7, #8]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d101      	bne.n	8015d2c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8015d28:	4b1c      	ldr	r3, [pc, #112]	; (8015d9c <netif_set_addr+0x90>)
 8015d2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d101      	bne.n	8015d36 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8015d32:	4b1a      	ldr	r3, [pc, #104]	; (8015d9c <netif_set_addr+0x90>)
 8015d34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d101      	bne.n	8015d40 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8015d3c:	4b17      	ldr	r3, [pc, #92]	; (8015d9c <netif_set_addr+0x90>)
 8015d3e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d003      	beq.n	8015d4e <netif_set_addr+0x42>
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d101      	bne.n	8015d52 <netif_set_addr+0x46>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e000      	b.n	8015d54 <netif_set_addr+0x48>
 8015d52:	2300      	movs	r3, #0
 8015d54:	617b      	str	r3, [r7, #20]
  if (remove) {
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d006      	beq.n	8015d6a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015d5c:	f107 0310 	add.w	r3, r7, #16
 8015d60:	461a      	mov	r2, r3
 8015d62:	68b9      	ldr	r1, [r7, #8]
 8015d64:	68f8      	ldr	r0, [r7, #12]
 8015d66:	f7ff ff49 	bl	8015bfc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8015d6a:	69fa      	ldr	r2, [r7, #28]
 8015d6c:	6879      	ldr	r1, [r7, #4]
 8015d6e:	68f8      	ldr	r0, [r7, #12]
 8015d70:	f7ff ff8e 	bl	8015c90 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8015d74:	69ba      	ldr	r2, [r7, #24]
 8015d76:	6839      	ldr	r1, [r7, #0]
 8015d78:	68f8      	ldr	r0, [r7, #12]
 8015d7a:	f7ff ffa8 	bl	8015cce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8015d7e:	697b      	ldr	r3, [r7, #20]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d106      	bne.n	8015d92 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8015d84:	f107 0310 	add.w	r3, r7, #16
 8015d88:	461a      	mov	r2, r3
 8015d8a:	68b9      	ldr	r1, [r7, #8]
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	f7ff ff35 	bl	8015bfc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8015d92:	bf00      	nop
 8015d94:	3720      	adds	r7, #32
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	08020d24 	.word	0x08020d24

08015da0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8015da0:	b480      	push	{r7}
 8015da2:	b083      	sub	sp, #12
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8015da8:	4a04      	ldr	r2, [pc, #16]	; (8015dbc <netif_set_default+0x1c>)
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8015dae:	bf00      	nop
 8015db0:	370c      	adds	r7, #12
 8015db2:	46bd      	mov	sp, r7
 8015db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db8:	4770      	bx	lr
 8015dba:	bf00      	nop
 8015dbc:	24007678 	.word	0x24007678

08015dc0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b082      	sub	sp, #8
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d107      	bne.n	8015dde <netif_set_up+0x1e>
 8015dce:	4b0f      	ldr	r3, [pc, #60]	; (8015e0c <netif_set_up+0x4c>)
 8015dd0:	f44f 7254 	mov.w	r2, #848	; 0x350
 8015dd4:	490e      	ldr	r1, [pc, #56]	; (8015e10 <netif_set_up+0x50>)
 8015dd6:	480f      	ldr	r0, [pc, #60]	; (8015e14 <netif_set_up+0x54>)
 8015dd8:	f006 fdee 	bl	801c9b8 <iprintf>
 8015ddc:	e013      	b.n	8015e06 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015de4:	f003 0301 	and.w	r3, r3, #1
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10c      	bne.n	8015e06 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015df2:	f043 0301 	orr.w	r3, r3, #1
 8015df6:	b2da      	uxtb	r2, r3
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8015dfe:	2103      	movs	r1, #3
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 f809 	bl	8015e18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8015e06:	3708      	adds	r7, #8
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}
 8015e0c:	0801e7ec 	.word	0x0801e7ec
 8015e10:	0801e99c 	.word	0x0801e99c
 8015e14:	0801e864 	.word	0x0801e864

08015e18 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b082      	sub	sp, #8
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
 8015e20:	460b      	mov	r3, r1
 8015e22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d106      	bne.n	8015e38 <netif_issue_reports+0x20>
 8015e2a:	4b18      	ldr	r3, [pc, #96]	; (8015e8c <netif_issue_reports+0x74>)
 8015e2c:	f240 326d 	movw	r2, #877	; 0x36d
 8015e30:	4917      	ldr	r1, [pc, #92]	; (8015e90 <netif_issue_reports+0x78>)
 8015e32:	4818      	ldr	r0, [pc, #96]	; (8015e94 <netif_issue_reports+0x7c>)
 8015e34:	f006 fdc0 	bl	801c9b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e3e:	f003 0304 	and.w	r3, r3, #4
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d01e      	beq.n	8015e84 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e4c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d017      	beq.n	8015e84 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015e54:	78fb      	ldrb	r3, [r7, #3]
 8015e56:	f003 0301 	and.w	r3, r3, #1
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d013      	beq.n	8015e86 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	3304      	adds	r3, #4
 8015e62:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d00e      	beq.n	8015e86 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015e6e:	f003 0308 	and.w	r3, r3, #8
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d007      	beq.n	8015e86 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	3304      	adds	r3, #4
 8015e7a:	4619      	mov	r1, r3
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f7fd fcb3 	bl	80137e8 <etharp_request>
 8015e82:	e000      	b.n	8015e86 <netif_issue_reports+0x6e>
    return;
 8015e84:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8015e86:	3708      	adds	r7, #8
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	bd80      	pop	{r7, pc}
 8015e8c:	0801e7ec 	.word	0x0801e7ec
 8015e90:	0801e9b8 	.word	0x0801e9b8
 8015e94:	0801e864 	.word	0x0801e864

08015e98 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b082      	sub	sp, #8
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d107      	bne.n	8015eb6 <netif_set_down+0x1e>
 8015ea6:	4b12      	ldr	r3, [pc, #72]	; (8015ef0 <netif_set_down+0x58>)
 8015ea8:	f240 329b 	movw	r2, #923	; 0x39b
 8015eac:	4911      	ldr	r1, [pc, #68]	; (8015ef4 <netif_set_down+0x5c>)
 8015eae:	4812      	ldr	r0, [pc, #72]	; (8015ef8 <netif_set_down+0x60>)
 8015eb0:	f006 fd82 	bl	801c9b8 <iprintf>
 8015eb4:	e019      	b.n	8015eea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015ebc:	f003 0301 	and.w	r3, r3, #1
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d012      	beq.n	8015eea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015eca:	f023 0301 	bic.w	r3, r3, #1
 8015ece:	b2da      	uxtb	r2, r3
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015edc:	f003 0308 	and.w	r3, r3, #8
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d002      	beq.n	8015eea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f7fd f839 	bl	8012f5c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8015eea:	3708      	adds	r7, #8
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bd80      	pop	{r7, pc}
 8015ef0:	0801e7ec 	.word	0x0801e7ec
 8015ef4:	0801e9dc 	.word	0x0801e9dc
 8015ef8:	0801e864 	.word	0x0801e864

08015efc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8015efc:	b480      	push	{r7}
 8015efe:	b083      	sub	sp, #12
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d002      	beq.n	8015f12 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	683a      	ldr	r2, [r7, #0]
 8015f10:	61da      	str	r2, [r3, #28]
  }
}
 8015f12:	bf00      	nop
 8015f14:	370c      	adds	r7, #12
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr

08015f1e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8015f1e:	b480      	push	{r7}
 8015f20:	b085      	sub	sp, #20
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	60f8      	str	r0, [r7, #12]
 8015f26:	60b9      	str	r1, [r7, #8]
 8015f28:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8015f2a:	f06f 030b 	mvn.w	r3, #11
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3714      	adds	r7, #20
 8015f32:	46bd      	mov	sp, r7
 8015f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f38:	4770      	bx	lr
	...

08015f3c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	4603      	mov	r3, r0
 8015f44:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8015f46:	79fb      	ldrb	r3, [r7, #7]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d013      	beq.n	8015f74 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8015f4c:	4b0d      	ldr	r3, [pc, #52]	; (8015f84 <netif_get_by_index+0x48>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	60fb      	str	r3, [r7, #12]
 8015f52:	e00c      	b.n	8015f6e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	b2db      	uxtb	r3, r3
 8015f5e:	79fa      	ldrb	r2, [r7, #7]
 8015f60:	429a      	cmp	r2, r3
 8015f62:	d101      	bne.n	8015f68 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	e006      	b.n	8015f76 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	60fb      	str	r3, [r7, #12]
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d1ef      	bne.n	8015f54 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8015f74:	2300      	movs	r3, #0
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3714      	adds	r7, #20
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f80:	4770      	bx	lr
 8015f82:	bf00      	nop
 8015f84:	24007674 	.word	0x24007674

08015f88 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8015f8c:	4b03      	ldr	r3, [pc, #12]	; (8015f9c <pbuf_pool_is_empty+0x14>)
 8015f8e:	2201      	movs	r2, #1
 8015f90:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8015f92:	bf00      	nop
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr
 8015f9c:	2400767c 	.word	0x2400767c

08015fa0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b085      	sub	sp, #20
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	60f8      	str	r0, [r7, #12]
 8015fa8:	60b9      	str	r1, [r7, #8]
 8015faa:	4611      	mov	r1, r2
 8015fac:	461a      	mov	r2, r3
 8015fae:	460b      	mov	r3, r1
 8015fb0:	80fb      	strh	r3, [r7, #6]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2200      	movs	r2, #0
 8015fba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	68ba      	ldr	r2, [r7, #8]
 8015fc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	88fa      	ldrh	r2, [r7, #6]
 8015fc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	88ba      	ldrh	r2, [r7, #4]
 8015fcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8015fce:	8b3b      	ldrh	r3, [r7, #24]
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	7f3a      	ldrb	r2, [r7, #28]
 8015fda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	73da      	strb	r2, [r3, #15]
}
 8015fe8:	bf00      	nop
 8015fea:	3714      	adds	r7, #20
 8015fec:	46bd      	mov	sp, r7
 8015fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff2:	4770      	bx	lr

08015ff4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b08c      	sub	sp, #48	; 0x30
 8015ff8:	af02      	add	r7, sp, #8
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	71fb      	strb	r3, [r7, #7]
 8015ffe:	460b      	mov	r3, r1
 8016000:	80bb      	strh	r3, [r7, #4]
 8016002:	4613      	mov	r3, r2
 8016004:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8016006:	79fb      	ldrb	r3, [r7, #7]
 8016008:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801600a:	887b      	ldrh	r3, [r7, #2]
 801600c:	2b41      	cmp	r3, #65	; 0x41
 801600e:	d00b      	beq.n	8016028 <pbuf_alloc+0x34>
 8016010:	2b41      	cmp	r3, #65	; 0x41
 8016012:	dc02      	bgt.n	801601a <pbuf_alloc+0x26>
 8016014:	2b01      	cmp	r3, #1
 8016016:	d007      	beq.n	8016028 <pbuf_alloc+0x34>
 8016018:	e0c2      	b.n	80161a0 <pbuf_alloc+0x1ac>
 801601a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801601e:	d00b      	beq.n	8016038 <pbuf_alloc+0x44>
 8016020:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8016024:	d070      	beq.n	8016108 <pbuf_alloc+0x114>
 8016026:	e0bb      	b.n	80161a0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8016028:	887a      	ldrh	r2, [r7, #2]
 801602a:	88bb      	ldrh	r3, [r7, #4]
 801602c:	4619      	mov	r1, r3
 801602e:	2000      	movs	r0, #0
 8016030:	f000 f8d2 	bl	80161d8 <pbuf_alloc_reference>
 8016034:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8016036:	e0bd      	b.n	80161b4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8016038:	2300      	movs	r3, #0
 801603a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801603c:	2300      	movs	r3, #0
 801603e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8016040:	88bb      	ldrh	r3, [r7, #4]
 8016042:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8016044:	2008      	movs	r0, #8
 8016046:	f7ff fc73 	bl	8015930 <memp_malloc>
 801604a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d109      	bne.n	8016066 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8016052:	f7ff ff99 	bl	8015f88 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8016056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016058:	2b00      	cmp	r3, #0
 801605a:	d002      	beq.n	8016062 <pbuf_alloc+0x6e>
            pbuf_free(p);
 801605c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801605e:	f000 faa9 	bl	80165b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8016062:	2300      	movs	r3, #0
 8016064:	e0a7      	b.n	80161b6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8016066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016068:	3303      	adds	r3, #3
 801606a:	b29b      	uxth	r3, r3
 801606c:	f023 0303 	bic.w	r3, r3, #3
 8016070:	b29b      	uxth	r3, r3
 8016072:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8016076:	b29b      	uxth	r3, r3
 8016078:	8b7a      	ldrh	r2, [r7, #26]
 801607a:	4293      	cmp	r3, r2
 801607c:	bf28      	it	cs
 801607e:	4613      	movcs	r3, r2
 8016080:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8016082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016084:	3310      	adds	r3, #16
 8016086:	693a      	ldr	r2, [r7, #16]
 8016088:	4413      	add	r3, r2
 801608a:	3303      	adds	r3, #3
 801608c:	f023 0303 	bic.w	r3, r3, #3
 8016090:	4618      	mov	r0, r3
 8016092:	89f9      	ldrh	r1, [r7, #14]
 8016094:	8b7a      	ldrh	r2, [r7, #26]
 8016096:	2300      	movs	r3, #0
 8016098:	9301      	str	r3, [sp, #4]
 801609a:	887b      	ldrh	r3, [r7, #2]
 801609c:	9300      	str	r3, [sp, #0]
 801609e:	460b      	mov	r3, r1
 80160a0:	4601      	mov	r1, r0
 80160a2:	6938      	ldr	r0, [r7, #16]
 80160a4:	f7ff ff7c 	bl	8015fa0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	685b      	ldr	r3, [r3, #4]
 80160ac:	f003 0303 	and.w	r3, r3, #3
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d006      	beq.n	80160c2 <pbuf_alloc+0xce>
 80160b4:	4b42      	ldr	r3, [pc, #264]	; (80161c0 <pbuf_alloc+0x1cc>)
 80160b6:	f240 1201 	movw	r2, #257	; 0x101
 80160ba:	4942      	ldr	r1, [pc, #264]	; (80161c4 <pbuf_alloc+0x1d0>)
 80160bc:	4842      	ldr	r0, [pc, #264]	; (80161c8 <pbuf_alloc+0x1d4>)
 80160be:	f006 fc7b 	bl	801c9b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80160c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160c4:	3303      	adds	r3, #3
 80160c6:	f023 0303 	bic.w	r3, r3, #3
 80160ca:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80160ce:	d106      	bne.n	80160de <pbuf_alloc+0xea>
 80160d0:	4b3b      	ldr	r3, [pc, #236]	; (80161c0 <pbuf_alloc+0x1cc>)
 80160d2:	f240 1203 	movw	r2, #259	; 0x103
 80160d6:	493d      	ldr	r1, [pc, #244]	; (80161cc <pbuf_alloc+0x1d8>)
 80160d8:	483b      	ldr	r0, [pc, #236]	; (80161c8 <pbuf_alloc+0x1d4>)
 80160da:	f006 fc6d 	bl	801c9b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80160de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d102      	bne.n	80160ea <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80160e4:	693b      	ldr	r3, [r7, #16]
 80160e6:	627b      	str	r3, [r7, #36]	; 0x24
 80160e8:	e002      	b.n	80160f0 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80160ea:	69fb      	ldr	r3, [r7, #28]
 80160ec:	693a      	ldr	r2, [r7, #16]
 80160ee:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80160f4:	8b7a      	ldrh	r2, [r7, #26]
 80160f6:	89fb      	ldrh	r3, [r7, #14]
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80160fc:	2300      	movs	r3, #0
 80160fe:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8016100:	8b7b      	ldrh	r3, [r7, #26]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d19e      	bne.n	8016044 <pbuf_alloc+0x50>
      break;
 8016106:	e055      	b.n	80161b4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8016108:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801610a:	3303      	adds	r3, #3
 801610c:	b29b      	uxth	r3, r3
 801610e:	f023 0303 	bic.w	r3, r3, #3
 8016112:	b29a      	uxth	r2, r3
 8016114:	88bb      	ldrh	r3, [r7, #4]
 8016116:	3303      	adds	r3, #3
 8016118:	b29b      	uxth	r3, r3
 801611a:	f023 0303 	bic.w	r3, r3, #3
 801611e:	b29b      	uxth	r3, r3
 8016120:	4413      	add	r3, r2
 8016122:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8016124:	8b3b      	ldrh	r3, [r7, #24]
 8016126:	3310      	adds	r3, #16
 8016128:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801612a:	8b3a      	ldrh	r2, [r7, #24]
 801612c:	88bb      	ldrh	r3, [r7, #4]
 801612e:	3303      	adds	r3, #3
 8016130:	f023 0303 	bic.w	r3, r3, #3
 8016134:	429a      	cmp	r2, r3
 8016136:	d306      	bcc.n	8016146 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8016138:	8afa      	ldrh	r2, [r7, #22]
 801613a:	88bb      	ldrh	r3, [r7, #4]
 801613c:	3303      	adds	r3, #3
 801613e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8016142:	429a      	cmp	r2, r3
 8016144:	d201      	bcs.n	801614a <pbuf_alloc+0x156>
        return NULL;
 8016146:	2300      	movs	r3, #0
 8016148:	e035      	b.n	80161b6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801614a:	8afb      	ldrh	r3, [r7, #22]
 801614c:	4618      	mov	r0, r3
 801614e:	f7ff fa81 	bl	8015654 <mem_malloc>
 8016152:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8016154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <pbuf_alloc+0x16a>
        return NULL;
 801615a:	2300      	movs	r3, #0
 801615c:	e02b      	b.n	80161b6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801615e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016160:	3310      	adds	r3, #16
 8016162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016164:	4413      	add	r3, r2
 8016166:	3303      	adds	r3, #3
 8016168:	f023 0303 	bic.w	r3, r3, #3
 801616c:	4618      	mov	r0, r3
 801616e:	88b9      	ldrh	r1, [r7, #4]
 8016170:	88ba      	ldrh	r2, [r7, #4]
 8016172:	2300      	movs	r3, #0
 8016174:	9301      	str	r3, [sp, #4]
 8016176:	887b      	ldrh	r3, [r7, #2]
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	460b      	mov	r3, r1
 801617c:	4601      	mov	r1, r0
 801617e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016180:	f7ff ff0e 	bl	8015fa0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8016184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	f003 0303 	and.w	r3, r3, #3
 801618c:	2b00      	cmp	r3, #0
 801618e:	d010      	beq.n	80161b2 <pbuf_alloc+0x1be>
 8016190:	4b0b      	ldr	r3, [pc, #44]	; (80161c0 <pbuf_alloc+0x1cc>)
 8016192:	f240 1223 	movw	r2, #291	; 0x123
 8016196:	490e      	ldr	r1, [pc, #56]	; (80161d0 <pbuf_alloc+0x1dc>)
 8016198:	480b      	ldr	r0, [pc, #44]	; (80161c8 <pbuf_alloc+0x1d4>)
 801619a:	f006 fc0d 	bl	801c9b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801619e:	e008      	b.n	80161b2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80161a0:	4b07      	ldr	r3, [pc, #28]	; (80161c0 <pbuf_alloc+0x1cc>)
 80161a2:	f240 1227 	movw	r2, #295	; 0x127
 80161a6:	490b      	ldr	r1, [pc, #44]	; (80161d4 <pbuf_alloc+0x1e0>)
 80161a8:	4807      	ldr	r0, [pc, #28]	; (80161c8 <pbuf_alloc+0x1d4>)
 80161aa:	f006 fc05 	bl	801c9b8 <iprintf>
      return NULL;
 80161ae:	2300      	movs	r3, #0
 80161b0:	e001      	b.n	80161b6 <pbuf_alloc+0x1c2>
      break;
 80161b2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80161b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80161b6:	4618      	mov	r0, r3
 80161b8:	3728      	adds	r7, #40	; 0x28
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	0801ea44 	.word	0x0801ea44
 80161c4:	0801ea9c 	.word	0x0801ea9c
 80161c8:	0801eacc 	.word	0x0801eacc
 80161cc:	0801eaf4 	.word	0x0801eaf4
 80161d0:	0801eb28 	.word	0x0801eb28
 80161d4:	0801eb54 	.word	0x0801eb54

080161d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80161d8:	b580      	push	{r7, lr}
 80161da:	b086      	sub	sp, #24
 80161dc:	af02      	add	r7, sp, #8
 80161de:	6078      	str	r0, [r7, #4]
 80161e0:	460b      	mov	r3, r1
 80161e2:	807b      	strh	r3, [r7, #2]
 80161e4:	4613      	mov	r3, r2
 80161e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80161e8:	883b      	ldrh	r3, [r7, #0]
 80161ea:	2b41      	cmp	r3, #65	; 0x41
 80161ec:	d009      	beq.n	8016202 <pbuf_alloc_reference+0x2a>
 80161ee:	883b      	ldrh	r3, [r7, #0]
 80161f0:	2b01      	cmp	r3, #1
 80161f2:	d006      	beq.n	8016202 <pbuf_alloc_reference+0x2a>
 80161f4:	4b0f      	ldr	r3, [pc, #60]	; (8016234 <pbuf_alloc_reference+0x5c>)
 80161f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80161fa:	490f      	ldr	r1, [pc, #60]	; (8016238 <pbuf_alloc_reference+0x60>)
 80161fc:	480f      	ldr	r0, [pc, #60]	; (801623c <pbuf_alloc_reference+0x64>)
 80161fe:	f006 fbdb 	bl	801c9b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8016202:	2007      	movs	r0, #7
 8016204:	f7ff fb94 	bl	8015930 <memp_malloc>
 8016208:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d101      	bne.n	8016214 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8016210:	2300      	movs	r3, #0
 8016212:	e00b      	b.n	801622c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8016214:	8879      	ldrh	r1, [r7, #2]
 8016216:	887a      	ldrh	r2, [r7, #2]
 8016218:	2300      	movs	r3, #0
 801621a:	9301      	str	r3, [sp, #4]
 801621c:	883b      	ldrh	r3, [r7, #0]
 801621e:	9300      	str	r3, [sp, #0]
 8016220:	460b      	mov	r3, r1
 8016222:	6879      	ldr	r1, [r7, #4]
 8016224:	68f8      	ldr	r0, [r7, #12]
 8016226:	f7ff febb 	bl	8015fa0 <pbuf_init_alloced_pbuf>
  return p;
 801622a:	68fb      	ldr	r3, [r7, #12]
}
 801622c:	4618      	mov	r0, r3
 801622e:	3710      	adds	r7, #16
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	0801ea44 	.word	0x0801ea44
 8016238:	0801eb70 	.word	0x0801eb70
 801623c:	0801eacc 	.word	0x0801eacc

08016240 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b088      	sub	sp, #32
 8016244:	af02      	add	r7, sp, #8
 8016246:	607b      	str	r3, [r7, #4]
 8016248:	4603      	mov	r3, r0
 801624a:	73fb      	strb	r3, [r7, #15]
 801624c:	460b      	mov	r3, r1
 801624e:	81bb      	strh	r3, [r7, #12]
 8016250:	4613      	mov	r3, r2
 8016252:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8016254:	7bfb      	ldrb	r3, [r7, #15]
 8016256:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8016258:	8a7b      	ldrh	r3, [r7, #18]
 801625a:	3303      	adds	r3, #3
 801625c:	f023 0203 	bic.w	r2, r3, #3
 8016260:	89bb      	ldrh	r3, [r7, #12]
 8016262:	441a      	add	r2, r3
 8016264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016266:	429a      	cmp	r2, r3
 8016268:	d901      	bls.n	801626e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801626a:	2300      	movs	r3, #0
 801626c:	e018      	b.n	80162a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801626e:	6a3b      	ldr	r3, [r7, #32]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d007      	beq.n	8016284 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8016274:	8a7b      	ldrh	r3, [r7, #18]
 8016276:	3303      	adds	r3, #3
 8016278:	f023 0303 	bic.w	r3, r3, #3
 801627c:	6a3a      	ldr	r2, [r7, #32]
 801627e:	4413      	add	r3, r2
 8016280:	617b      	str	r3, [r7, #20]
 8016282:	e001      	b.n	8016288 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8016284:	2300      	movs	r3, #0
 8016286:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	89b9      	ldrh	r1, [r7, #12]
 801628c:	89ba      	ldrh	r2, [r7, #12]
 801628e:	2302      	movs	r3, #2
 8016290:	9301      	str	r3, [sp, #4]
 8016292:	897b      	ldrh	r3, [r7, #10]
 8016294:	9300      	str	r3, [sp, #0]
 8016296:	460b      	mov	r3, r1
 8016298:	6979      	ldr	r1, [r7, #20]
 801629a:	f7ff fe81 	bl	8015fa0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801629e:	687b      	ldr	r3, [r7, #4]
}
 80162a0:	4618      	mov	r0, r3
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b084      	sub	sp, #16
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
 80162b0:	460b      	mov	r3, r1
 80162b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d106      	bne.n	80162c8 <pbuf_realloc+0x20>
 80162ba:	4b3a      	ldr	r3, [pc, #232]	; (80163a4 <pbuf_realloc+0xfc>)
 80162bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80162c0:	4939      	ldr	r1, [pc, #228]	; (80163a8 <pbuf_realloc+0x100>)
 80162c2:	483a      	ldr	r0, [pc, #232]	; (80163ac <pbuf_realloc+0x104>)
 80162c4:	f006 fb78 	bl	801c9b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	891b      	ldrh	r3, [r3, #8]
 80162cc:	887a      	ldrh	r2, [r7, #2]
 80162ce:	429a      	cmp	r2, r3
 80162d0:	d264      	bcs.n	801639c <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	891a      	ldrh	r2, [r3, #8]
 80162d6:	887b      	ldrh	r3, [r7, #2]
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80162dc:	887b      	ldrh	r3, [r7, #2]
 80162de:	817b      	strh	r3, [r7, #10]
  q = p;
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80162e4:	e018      	b.n	8016318 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	895b      	ldrh	r3, [r3, #10]
 80162ea:	897a      	ldrh	r2, [r7, #10]
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	891a      	ldrh	r2, [r3, #8]
 80162f4:	893b      	ldrh	r3, [r7, #8]
 80162f6:	1ad3      	subs	r3, r2, r3
 80162f8:	b29a      	uxth	r2, r3
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d106      	bne.n	8016318 <pbuf_realloc+0x70>
 801630a:	4b26      	ldr	r3, [pc, #152]	; (80163a4 <pbuf_realloc+0xfc>)
 801630c:	f240 12af 	movw	r2, #431	; 0x1af
 8016310:	4927      	ldr	r1, [pc, #156]	; (80163b0 <pbuf_realloc+0x108>)
 8016312:	4826      	ldr	r0, [pc, #152]	; (80163ac <pbuf_realloc+0x104>)
 8016314:	f006 fb50 	bl	801c9b8 <iprintf>
  while (rem_len > q->len) {
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	895b      	ldrh	r3, [r3, #10]
 801631c:	897a      	ldrh	r2, [r7, #10]
 801631e:	429a      	cmp	r2, r3
 8016320:	d8e1      	bhi.n	80162e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	7b1b      	ldrb	r3, [r3, #12]
 8016326:	f003 030f 	and.w	r3, r3, #15
 801632a:	2b00      	cmp	r3, #0
 801632c:	d122      	bne.n	8016374 <pbuf_realloc+0xcc>
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	895b      	ldrh	r3, [r3, #10]
 8016332:	897a      	ldrh	r2, [r7, #10]
 8016334:	429a      	cmp	r2, r3
 8016336:	d01d      	beq.n	8016374 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	7b5b      	ldrb	r3, [r3, #13]
 801633c:	f003 0302 	and.w	r3, r3, #2
 8016340:	2b00      	cmp	r3, #0
 8016342:	d117      	bne.n	8016374 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	685b      	ldr	r3, [r3, #4]
 8016348:	461a      	mov	r2, r3
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	1ad3      	subs	r3, r2, r3
 801634e:	b29a      	uxth	r2, r3
 8016350:	897b      	ldrh	r3, [r7, #10]
 8016352:	4413      	add	r3, r2
 8016354:	b29b      	uxth	r3, r3
 8016356:	4619      	mov	r1, r3
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	f7ff f87f 	bl	801545c <mem_trim>
 801635e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d106      	bne.n	8016374 <pbuf_realloc+0xcc>
 8016366:	4b0f      	ldr	r3, [pc, #60]	; (80163a4 <pbuf_realloc+0xfc>)
 8016368:	f240 12bd 	movw	r2, #445	; 0x1bd
 801636c:	4911      	ldr	r1, [pc, #68]	; (80163b4 <pbuf_realloc+0x10c>)
 801636e:	480f      	ldr	r0, [pc, #60]	; (80163ac <pbuf_realloc+0x104>)
 8016370:	f006 fb22 	bl	801c9b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	897a      	ldrh	r2, [r7, #10]
 8016378:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	895a      	ldrh	r2, [r3, #10]
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	2b00      	cmp	r3, #0
 8016388:	d004      	beq.n	8016394 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	4618      	mov	r0, r3
 8016390:	f000 f910 	bl	80165b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	2200      	movs	r2, #0
 8016398:	601a      	str	r2, [r3, #0]
 801639a:	e000      	b.n	801639e <pbuf_realloc+0xf6>
    return;
 801639c:	bf00      	nop

}
 801639e:	3710      	adds	r7, #16
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}
 80163a4:	0801ea44 	.word	0x0801ea44
 80163a8:	0801eb84 	.word	0x0801eb84
 80163ac:	0801eacc 	.word	0x0801eacc
 80163b0:	0801eb9c 	.word	0x0801eb9c
 80163b4:	0801ebb4 	.word	0x0801ebb4

080163b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	4613      	mov	r3, r2
 80163c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d106      	bne.n	80163da <pbuf_add_header_impl+0x22>
 80163cc:	4b2b      	ldr	r3, [pc, #172]	; (801647c <pbuf_add_header_impl+0xc4>)
 80163ce:	f240 12df 	movw	r2, #479	; 0x1df
 80163d2:	492b      	ldr	r1, [pc, #172]	; (8016480 <pbuf_add_header_impl+0xc8>)
 80163d4:	482b      	ldr	r0, [pc, #172]	; (8016484 <pbuf_add_header_impl+0xcc>)
 80163d6:	f006 faef 	bl	801c9b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d003      	beq.n	80163e8 <pbuf_add_header_impl+0x30>
 80163e0:	68bb      	ldr	r3, [r7, #8]
 80163e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163e6:	d301      	bcc.n	80163ec <pbuf_add_header_impl+0x34>
    return 1;
 80163e8:	2301      	movs	r3, #1
 80163ea:	e043      	b.n	8016474 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d101      	bne.n	80163f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	e03e      	b.n	8016474 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	891a      	ldrh	r2, [r3, #8]
 80163fe:	8a7b      	ldrh	r3, [r7, #18]
 8016400:	4413      	add	r3, r2
 8016402:	b29b      	uxth	r3, r3
 8016404:	8a7a      	ldrh	r2, [r7, #18]
 8016406:	429a      	cmp	r2, r3
 8016408:	d901      	bls.n	801640e <pbuf_add_header_impl+0x56>
    return 1;
 801640a:	2301      	movs	r3, #1
 801640c:	e032      	b.n	8016474 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	7b1b      	ldrb	r3, [r3, #12]
 8016412:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8016414:	8a3b      	ldrh	r3, [r7, #16]
 8016416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801641a:	2b00      	cmp	r3, #0
 801641c:	d00c      	beq.n	8016438 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	685a      	ldr	r2, [r3, #4]
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	425b      	negs	r3, r3
 8016426:	4413      	add	r3, r2
 8016428:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3310      	adds	r3, #16
 801642e:	697a      	ldr	r2, [r7, #20]
 8016430:	429a      	cmp	r2, r3
 8016432:	d20d      	bcs.n	8016450 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8016434:	2301      	movs	r3, #1
 8016436:	e01d      	b.n	8016474 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d006      	beq.n	801644c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	685a      	ldr	r2, [r3, #4]
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	425b      	negs	r3, r3
 8016446:	4413      	add	r3, r2
 8016448:	617b      	str	r3, [r7, #20]
 801644a:	e001      	b.n	8016450 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801644c:	2301      	movs	r3, #1
 801644e:	e011      	b.n	8016474 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	697a      	ldr	r2, [r7, #20]
 8016454:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	895a      	ldrh	r2, [r3, #10]
 801645a:	8a7b      	ldrh	r3, [r7, #18]
 801645c:	4413      	add	r3, r2
 801645e:	b29a      	uxth	r2, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	891a      	ldrh	r2, [r3, #8]
 8016468:	8a7b      	ldrh	r3, [r7, #18]
 801646a:	4413      	add	r3, r2
 801646c:	b29a      	uxth	r2, r3
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	811a      	strh	r2, [r3, #8]


  return 0;
 8016472:	2300      	movs	r3, #0
}
 8016474:	4618      	mov	r0, r3
 8016476:	3718      	adds	r7, #24
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}
 801647c:	0801ea44 	.word	0x0801ea44
 8016480:	0801ebd0 	.word	0x0801ebd0
 8016484:	0801eacc 	.word	0x0801eacc

08016488 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b082      	sub	sp, #8
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8016492:	2200      	movs	r2, #0
 8016494:	6839      	ldr	r1, [r7, #0]
 8016496:	6878      	ldr	r0, [r7, #4]
 8016498:	f7ff ff8e 	bl	80163b8 <pbuf_add_header_impl>
 801649c:	4603      	mov	r3, r0
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3708      	adds	r7, #8
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
	...

080164a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d106      	bne.n	80164c6 <pbuf_remove_header+0x1e>
 80164b8:	4b20      	ldr	r3, [pc, #128]	; (801653c <pbuf_remove_header+0x94>)
 80164ba:	f240 224b 	movw	r2, #587	; 0x24b
 80164be:	4920      	ldr	r1, [pc, #128]	; (8016540 <pbuf_remove_header+0x98>)
 80164c0:	4820      	ldr	r0, [pc, #128]	; (8016544 <pbuf_remove_header+0x9c>)
 80164c2:	f006 fa79 	bl	801c9b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d003      	beq.n	80164d4 <pbuf_remove_header+0x2c>
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80164d2:	d301      	bcc.n	80164d8 <pbuf_remove_header+0x30>
    return 1;
 80164d4:	2301      	movs	r3, #1
 80164d6:	e02c      	b.n	8016532 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d101      	bne.n	80164e2 <pbuf_remove_header+0x3a>
    return 0;
 80164de:	2300      	movs	r3, #0
 80164e0:	e027      	b.n	8016532 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	895b      	ldrh	r3, [r3, #10]
 80164ea:	89fa      	ldrh	r2, [r7, #14]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d908      	bls.n	8016502 <pbuf_remove_header+0x5a>
 80164f0:	4b12      	ldr	r3, [pc, #72]	; (801653c <pbuf_remove_header+0x94>)
 80164f2:	f240 2255 	movw	r2, #597	; 0x255
 80164f6:	4914      	ldr	r1, [pc, #80]	; (8016548 <pbuf_remove_header+0xa0>)
 80164f8:	4812      	ldr	r0, [pc, #72]	; (8016544 <pbuf_remove_header+0x9c>)
 80164fa:	f006 fa5d 	bl	801c9b8 <iprintf>
 80164fe:	2301      	movs	r3, #1
 8016500:	e017      	b.n	8016532 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	685a      	ldr	r2, [r3, #4]
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	441a      	add	r2, r3
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	895a      	ldrh	r2, [r3, #10]
 8016518:	89fb      	ldrh	r3, [r7, #14]
 801651a:	1ad3      	subs	r3, r2, r3
 801651c:	b29a      	uxth	r2, r3
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	891a      	ldrh	r2, [r3, #8]
 8016526:	89fb      	ldrh	r3, [r7, #14]
 8016528:	1ad3      	subs	r3, r2, r3
 801652a:	b29a      	uxth	r2, r3
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8016530:	2300      	movs	r3, #0
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	0801ea44 	.word	0x0801ea44
 8016540:	0801ebd0 	.word	0x0801ebd0
 8016544:	0801eacc 	.word	0x0801eacc
 8016548:	0801ebdc 	.word	0x0801ebdc

0801654c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b082      	sub	sp, #8
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	460b      	mov	r3, r1
 8016556:	807b      	strh	r3, [r7, #2]
 8016558:	4613      	mov	r3, r2
 801655a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801655c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016560:	2b00      	cmp	r3, #0
 8016562:	da08      	bge.n	8016576 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8016564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8016568:	425b      	negs	r3, r3
 801656a:	4619      	mov	r1, r3
 801656c:	6878      	ldr	r0, [r7, #4]
 801656e:	f7ff ff9b 	bl	80164a8 <pbuf_remove_header>
 8016572:	4603      	mov	r3, r0
 8016574:	e007      	b.n	8016586 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8016576:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801657a:	787a      	ldrb	r2, [r7, #1]
 801657c:	4619      	mov	r1, r3
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7ff ff1a 	bl	80163b8 <pbuf_add_header_impl>
 8016584:	4603      	mov	r3, r0
  }
}
 8016586:	4618      	mov	r0, r3
 8016588:	3708      	adds	r7, #8
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}

0801658e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801658e:	b580      	push	{r7, lr}
 8016590:	b082      	sub	sp, #8
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
 8016596:	460b      	mov	r3, r1
 8016598:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801659a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801659e:	2201      	movs	r2, #1
 80165a0:	4619      	mov	r1, r3
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f7ff ffd2 	bl	801654c <pbuf_header_impl>
 80165a8:	4603      	mov	r3, r0
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3708      	adds	r7, #8
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}
	...

080165b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d10b      	bne.n	80165da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d106      	bne.n	80165d6 <pbuf_free+0x22>
 80165c8:	4b38      	ldr	r3, [pc, #224]	; (80166ac <pbuf_free+0xf8>)
 80165ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80165ce:	4938      	ldr	r1, [pc, #224]	; (80166b0 <pbuf_free+0xfc>)
 80165d0:	4838      	ldr	r0, [pc, #224]	; (80166b4 <pbuf_free+0x100>)
 80165d2:	f006 f9f1 	bl	801c9b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80165d6:	2300      	movs	r3, #0
 80165d8:	e063      	b.n	80166a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80165da:	2300      	movs	r3, #0
 80165dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80165de:	e05c      	b.n	801669a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	7b9b      	ldrb	r3, [r3, #14]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d106      	bne.n	80165f6 <pbuf_free+0x42>
 80165e8:	4b30      	ldr	r3, [pc, #192]	; (80166ac <pbuf_free+0xf8>)
 80165ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 80165ee:	4932      	ldr	r1, [pc, #200]	; (80166b8 <pbuf_free+0x104>)
 80165f0:	4830      	ldr	r0, [pc, #192]	; (80166b4 <pbuf_free+0x100>)
 80165f2:	f006 f9e1 	bl	801c9b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	7b9b      	ldrb	r3, [r3, #14]
 80165fa:	3b01      	subs	r3, #1
 80165fc:	b2da      	uxtb	r2, r3
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	739a      	strb	r2, [r3, #14]
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	7b9b      	ldrb	r3, [r3, #14]
 8016606:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8016608:	7dbb      	ldrb	r3, [r7, #22]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d143      	bne.n	8016696 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	7b1b      	ldrb	r3, [r3, #12]
 8016618:	f003 030f 	and.w	r3, r3, #15
 801661c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	7b5b      	ldrb	r3, [r3, #13]
 8016622:	f003 0302 	and.w	r3, r3, #2
 8016626:	2b00      	cmp	r3, #0
 8016628:	d011      	beq.n	801664e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801662e:	68bb      	ldr	r3, [r7, #8]
 8016630:	691b      	ldr	r3, [r3, #16]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d106      	bne.n	8016644 <pbuf_free+0x90>
 8016636:	4b1d      	ldr	r3, [pc, #116]	; (80166ac <pbuf_free+0xf8>)
 8016638:	f240 22ff 	movw	r2, #767	; 0x2ff
 801663c:	491f      	ldr	r1, [pc, #124]	; (80166bc <pbuf_free+0x108>)
 801663e:	481d      	ldr	r0, [pc, #116]	; (80166b4 <pbuf_free+0x100>)
 8016640:	f006 f9ba 	bl	801c9b8 <iprintf>
        pc->custom_free_function(p);
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	691b      	ldr	r3, [r3, #16]
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	4798      	blx	r3
 801664c:	e01d      	b.n	801668a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801664e:	7bfb      	ldrb	r3, [r7, #15]
 8016650:	2b02      	cmp	r3, #2
 8016652:	d104      	bne.n	801665e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8016654:	6879      	ldr	r1, [r7, #4]
 8016656:	2008      	movs	r0, #8
 8016658:	f7ff f9b6 	bl	80159c8 <memp_free>
 801665c:	e015      	b.n	801668a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801665e:	7bfb      	ldrb	r3, [r7, #15]
 8016660:	2b01      	cmp	r3, #1
 8016662:	d104      	bne.n	801666e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8016664:	6879      	ldr	r1, [r7, #4]
 8016666:	2007      	movs	r0, #7
 8016668:	f7ff f9ae 	bl	80159c8 <memp_free>
 801666c:	e00d      	b.n	801668a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801666e:	7bfb      	ldrb	r3, [r7, #15]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d103      	bne.n	801667c <pbuf_free+0xc8>
          mem_free(p);
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7fe fe87 	bl	8015388 <mem_free>
 801667a:	e006      	b.n	801668a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801667c:	4b0b      	ldr	r3, [pc, #44]	; (80166ac <pbuf_free+0xf8>)
 801667e:	f240 320f 	movw	r2, #783	; 0x30f
 8016682:	490f      	ldr	r1, [pc, #60]	; (80166c0 <pbuf_free+0x10c>)
 8016684:	480b      	ldr	r0, [pc, #44]	; (80166b4 <pbuf_free+0x100>)
 8016686:	f006 f997 	bl	801c9b8 <iprintf>
        }
      }
      count++;
 801668a:	7dfb      	ldrb	r3, [r7, #23]
 801668c:	3301      	adds	r3, #1
 801668e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8016690:	693b      	ldr	r3, [r7, #16]
 8016692:	607b      	str	r3, [r7, #4]
 8016694:	e001      	b.n	801669a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8016696:	2300      	movs	r3, #0
 8016698:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d19f      	bne.n	80165e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80166a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80166a2:	4618      	mov	r0, r3
 80166a4:	3718      	adds	r7, #24
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
 80166aa:	bf00      	nop
 80166ac:	0801ea44 	.word	0x0801ea44
 80166b0:	0801ebd0 	.word	0x0801ebd0
 80166b4:	0801eacc 	.word	0x0801eacc
 80166b8:	0801ebfc 	.word	0x0801ebfc
 80166bc:	0801ec14 	.word	0x0801ec14
 80166c0:	0801ec38 	.word	0x0801ec38

080166c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b085      	sub	sp, #20
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80166cc:	2300      	movs	r3, #0
 80166ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80166d0:	e005      	b.n	80166de <pbuf_clen+0x1a>
    ++len;
 80166d2:	89fb      	ldrh	r3, [r7, #14]
 80166d4:	3301      	adds	r3, #1
 80166d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d1f6      	bne.n	80166d2 <pbuf_clen+0xe>
  }
  return len;
 80166e4:	89fb      	ldrh	r3, [r7, #14]
}
 80166e6:	4618      	mov	r0, r3
 80166e8:	3714      	adds	r7, #20
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr
	...

080166f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b082      	sub	sp, #8
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d010      	beq.n	8016724 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	7b9b      	ldrb	r3, [r3, #14]
 8016706:	3301      	adds	r3, #1
 8016708:	b2da      	uxtb	r2, r3
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	7b9b      	ldrb	r3, [r3, #14]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d106      	bne.n	8016724 <pbuf_ref+0x30>
 8016716:	4b05      	ldr	r3, [pc, #20]	; (801672c <pbuf_ref+0x38>)
 8016718:	f240 3242 	movw	r2, #834	; 0x342
 801671c:	4904      	ldr	r1, [pc, #16]	; (8016730 <pbuf_ref+0x3c>)
 801671e:	4805      	ldr	r0, [pc, #20]	; (8016734 <pbuf_ref+0x40>)
 8016720:	f006 f94a 	bl	801c9b8 <iprintf>
  }
}
 8016724:	bf00      	nop
 8016726:	3708      	adds	r7, #8
 8016728:	46bd      	mov	sp, r7
 801672a:	bd80      	pop	{r7, pc}
 801672c:	0801ea44 	.word	0x0801ea44
 8016730:	0801ec4c 	.word	0x0801ec4c
 8016734:	0801eacc 	.word	0x0801eacc

08016738 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b084      	sub	sp, #16
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d002      	beq.n	801674e <pbuf_cat+0x16>
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d107      	bne.n	801675e <pbuf_cat+0x26>
 801674e:	4b20      	ldr	r3, [pc, #128]	; (80167d0 <pbuf_cat+0x98>)
 8016750:	f240 325a 	movw	r2, #858	; 0x35a
 8016754:	491f      	ldr	r1, [pc, #124]	; (80167d4 <pbuf_cat+0x9c>)
 8016756:	4820      	ldr	r0, [pc, #128]	; (80167d8 <pbuf_cat+0xa0>)
 8016758:	f006 f92e 	bl	801c9b8 <iprintf>
 801675c:	e034      	b.n	80167c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	60fb      	str	r3, [r7, #12]
 8016762:	e00a      	b.n	801677a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	891a      	ldrh	r2, [r3, #8]
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	891b      	ldrh	r3, [r3, #8]
 801676c:	4413      	add	r3, r2
 801676e:	b29a      	uxth	r2, r3
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	60fb      	str	r3, [r7, #12]
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d1f0      	bne.n	8016764 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	891a      	ldrh	r2, [r3, #8]
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	895b      	ldrh	r3, [r3, #10]
 801678a:	429a      	cmp	r2, r3
 801678c:	d006      	beq.n	801679c <pbuf_cat+0x64>
 801678e:	4b10      	ldr	r3, [pc, #64]	; (80167d0 <pbuf_cat+0x98>)
 8016790:	f240 3262 	movw	r2, #866	; 0x362
 8016794:	4911      	ldr	r1, [pc, #68]	; (80167dc <pbuf_cat+0xa4>)
 8016796:	4810      	ldr	r0, [pc, #64]	; (80167d8 <pbuf_cat+0xa0>)
 8016798:	f006 f90e 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d006      	beq.n	80167b2 <pbuf_cat+0x7a>
 80167a4:	4b0a      	ldr	r3, [pc, #40]	; (80167d0 <pbuf_cat+0x98>)
 80167a6:	f240 3263 	movw	r2, #867	; 0x363
 80167aa:	490d      	ldr	r1, [pc, #52]	; (80167e0 <pbuf_cat+0xa8>)
 80167ac:	480a      	ldr	r0, [pc, #40]	; (80167d8 <pbuf_cat+0xa0>)
 80167ae:	f006 f903 	bl	801c9b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	891a      	ldrh	r2, [r3, #8]
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	891b      	ldrh	r3, [r3, #8]
 80167ba:	4413      	add	r3, r2
 80167bc:	b29a      	uxth	r2, r3
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	683a      	ldr	r2, [r7, #0]
 80167c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	0801ea44 	.word	0x0801ea44
 80167d4:	0801ec60 	.word	0x0801ec60
 80167d8:	0801eacc 	.word	0x0801eacc
 80167dc:	0801ec98 	.word	0x0801ec98
 80167e0:	0801ecc8 	.word	0x0801ecc8

080167e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80167ee:	6839      	ldr	r1, [r7, #0]
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f7ff ffa1 	bl	8016738 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80167f6:	6838      	ldr	r0, [r7, #0]
 80167f8:	f7ff ff7c 	bl	80166f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80167fc:	bf00      	nop
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b086      	sub	sp, #24
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801680e:	2300      	movs	r3, #0
 8016810:	617b      	str	r3, [r7, #20]
 8016812:	2300      	movs	r3, #0
 8016814:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d008      	beq.n	801682e <pbuf_copy+0x2a>
 801681c:	683b      	ldr	r3, [r7, #0]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d005      	beq.n	801682e <pbuf_copy+0x2a>
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	891a      	ldrh	r2, [r3, #8]
 8016826:	683b      	ldr	r3, [r7, #0]
 8016828:	891b      	ldrh	r3, [r3, #8]
 801682a:	429a      	cmp	r2, r3
 801682c:	d209      	bcs.n	8016842 <pbuf_copy+0x3e>
 801682e:	4b57      	ldr	r3, [pc, #348]	; (801698c <pbuf_copy+0x188>)
 8016830:	f240 32ca 	movw	r2, #970	; 0x3ca
 8016834:	4956      	ldr	r1, [pc, #344]	; (8016990 <pbuf_copy+0x18c>)
 8016836:	4857      	ldr	r0, [pc, #348]	; (8016994 <pbuf_copy+0x190>)
 8016838:	f006 f8be 	bl	801c9b8 <iprintf>
 801683c:	f06f 030f 	mvn.w	r3, #15
 8016840:	e09f      	b.n	8016982 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	895b      	ldrh	r3, [r3, #10]
 8016846:	461a      	mov	r2, r3
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	1ad2      	subs	r2, r2, r3
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	895b      	ldrh	r3, [r3, #10]
 8016850:	4619      	mov	r1, r3
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	1acb      	subs	r3, r1, r3
 8016856:	429a      	cmp	r2, r3
 8016858:	d306      	bcc.n	8016868 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	895b      	ldrh	r3, [r3, #10]
 801685e:	461a      	mov	r2, r3
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	1ad3      	subs	r3, r2, r3
 8016864:	60fb      	str	r3, [r7, #12]
 8016866:	e005      	b.n	8016874 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	895b      	ldrh	r3, [r3, #10]
 801686c:	461a      	mov	r2, r3
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	1ad3      	subs	r3, r2, r3
 8016872:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	685a      	ldr	r2, [r3, #4]
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	18d0      	adds	r0, r2, r3
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	685a      	ldr	r2, [r3, #4]
 8016880:	693b      	ldr	r3, [r7, #16]
 8016882:	4413      	add	r3, r2
 8016884:	68fa      	ldr	r2, [r7, #12]
 8016886:	4619      	mov	r1, r3
 8016888:	f006 f883 	bl	801c992 <memcpy>
    offset_to += len;
 801688c:	697a      	ldr	r2, [r7, #20]
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	4413      	add	r3, r2
 8016892:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8016894:	693a      	ldr	r2, [r7, #16]
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	4413      	add	r3, r2
 801689a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	895b      	ldrh	r3, [r3, #10]
 80168a0:	461a      	mov	r2, r3
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d906      	bls.n	80168b6 <pbuf_copy+0xb2>
 80168a8:	4b38      	ldr	r3, [pc, #224]	; (801698c <pbuf_copy+0x188>)
 80168aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80168ae:	493a      	ldr	r1, [pc, #232]	; (8016998 <pbuf_copy+0x194>)
 80168b0:	4838      	ldr	r0, [pc, #224]	; (8016994 <pbuf_copy+0x190>)
 80168b2:	f006 f881 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	895b      	ldrh	r3, [r3, #10]
 80168ba:	461a      	mov	r2, r3
 80168bc:	693b      	ldr	r3, [r7, #16]
 80168be:	4293      	cmp	r3, r2
 80168c0:	d906      	bls.n	80168d0 <pbuf_copy+0xcc>
 80168c2:	4b32      	ldr	r3, [pc, #200]	; (801698c <pbuf_copy+0x188>)
 80168c4:	f240 32da 	movw	r2, #986	; 0x3da
 80168c8:	4934      	ldr	r1, [pc, #208]	; (801699c <pbuf_copy+0x198>)
 80168ca:	4832      	ldr	r0, [pc, #200]	; (8016994 <pbuf_copy+0x190>)
 80168cc:	f006 f874 	bl	801c9b8 <iprintf>
    if (offset_from >= p_from->len) {
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	895b      	ldrh	r3, [r3, #10]
 80168d4:	461a      	mov	r2, r3
 80168d6:	693b      	ldr	r3, [r7, #16]
 80168d8:	4293      	cmp	r3, r2
 80168da:	d304      	bcc.n	80168e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80168dc:	2300      	movs	r3, #0
 80168de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	895b      	ldrh	r3, [r3, #10]
 80168ea:	461a      	mov	r2, r3
 80168ec:	697b      	ldr	r3, [r7, #20]
 80168ee:	4293      	cmp	r3, r2
 80168f0:	d114      	bne.n	801691c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80168f2:	2300      	movs	r3, #0
 80168f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d10c      	bne.n	801691c <pbuf_copy+0x118>
 8016902:	683b      	ldr	r3, [r7, #0]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d009      	beq.n	801691c <pbuf_copy+0x118>
 8016908:	4b20      	ldr	r3, [pc, #128]	; (801698c <pbuf_copy+0x188>)
 801690a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801690e:	4924      	ldr	r1, [pc, #144]	; (80169a0 <pbuf_copy+0x19c>)
 8016910:	4820      	ldr	r0, [pc, #128]	; (8016994 <pbuf_copy+0x190>)
 8016912:	f006 f851 	bl	801c9b8 <iprintf>
 8016916:	f06f 030f 	mvn.w	r3, #15
 801691a:	e032      	b.n	8016982 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d013      	beq.n	801694a <pbuf_copy+0x146>
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	895a      	ldrh	r2, [r3, #10]
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	891b      	ldrh	r3, [r3, #8]
 801692a:	429a      	cmp	r2, r3
 801692c:	d10d      	bne.n	801694a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801692e:	683b      	ldr	r3, [r7, #0]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	2b00      	cmp	r3, #0
 8016934:	d009      	beq.n	801694a <pbuf_copy+0x146>
 8016936:	4b15      	ldr	r3, [pc, #84]	; (801698c <pbuf_copy+0x188>)
 8016938:	f240 32ea 	movw	r2, #1002	; 0x3ea
 801693c:	4919      	ldr	r1, [pc, #100]	; (80169a4 <pbuf_copy+0x1a0>)
 801693e:	4815      	ldr	r0, [pc, #84]	; (8016994 <pbuf_copy+0x190>)
 8016940:	f006 f83a 	bl	801c9b8 <iprintf>
 8016944:	f06f 0305 	mvn.w	r3, #5
 8016948:	e01b      	b.n	8016982 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d013      	beq.n	8016978 <pbuf_copy+0x174>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	895a      	ldrh	r2, [r3, #10]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	891b      	ldrh	r3, [r3, #8]
 8016958:	429a      	cmp	r2, r3
 801695a:	d10d      	bne.n	8016978 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d009      	beq.n	8016978 <pbuf_copy+0x174>
 8016964:	4b09      	ldr	r3, [pc, #36]	; (801698c <pbuf_copy+0x188>)
 8016966:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801696a:	490e      	ldr	r1, [pc, #56]	; (80169a4 <pbuf_copy+0x1a0>)
 801696c:	4809      	ldr	r0, [pc, #36]	; (8016994 <pbuf_copy+0x190>)
 801696e:	f006 f823 	bl	801c9b8 <iprintf>
 8016972:	f06f 0305 	mvn.w	r3, #5
 8016976:	e004      	b.n	8016982 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	2b00      	cmp	r3, #0
 801697c:	f47f af61 	bne.w	8016842 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8016980:	2300      	movs	r3, #0
}
 8016982:	4618      	mov	r0, r3
 8016984:	3718      	adds	r7, #24
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}
 801698a:	bf00      	nop
 801698c:	0801ea44 	.word	0x0801ea44
 8016990:	0801ed14 	.word	0x0801ed14
 8016994:	0801eacc 	.word	0x0801eacc
 8016998:	0801ed44 	.word	0x0801ed44
 801699c:	0801ed5c 	.word	0x0801ed5c
 80169a0:	0801ed78 	.word	0x0801ed78
 80169a4:	0801ed88 	.word	0x0801ed88

080169a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b088      	sub	sp, #32
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	60b9      	str	r1, [r7, #8]
 80169b2:	4611      	mov	r1, r2
 80169b4:	461a      	mov	r2, r3
 80169b6:	460b      	mov	r3, r1
 80169b8:	80fb      	strh	r3, [r7, #6]
 80169ba:	4613      	mov	r3, r2
 80169bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80169be:	2300      	movs	r3, #0
 80169c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80169c2:	2300      	movs	r3, #0
 80169c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d108      	bne.n	80169de <pbuf_copy_partial+0x36>
 80169cc:	4b2b      	ldr	r3, [pc, #172]	; (8016a7c <pbuf_copy_partial+0xd4>)
 80169ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80169d2:	492b      	ldr	r1, [pc, #172]	; (8016a80 <pbuf_copy_partial+0xd8>)
 80169d4:	482b      	ldr	r0, [pc, #172]	; (8016a84 <pbuf_copy_partial+0xdc>)
 80169d6:	f005 ffef 	bl	801c9b8 <iprintf>
 80169da:	2300      	movs	r3, #0
 80169dc:	e04a      	b.n	8016a74 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80169de:	68bb      	ldr	r3, [r7, #8]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d108      	bne.n	80169f6 <pbuf_copy_partial+0x4e>
 80169e4:	4b25      	ldr	r3, [pc, #148]	; (8016a7c <pbuf_copy_partial+0xd4>)
 80169e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80169ea:	4927      	ldr	r1, [pc, #156]	; (8016a88 <pbuf_copy_partial+0xe0>)
 80169ec:	4825      	ldr	r0, [pc, #148]	; (8016a84 <pbuf_copy_partial+0xdc>)
 80169ee:	f005 ffe3 	bl	801c9b8 <iprintf>
 80169f2:	2300      	movs	r3, #0
 80169f4:	e03e      	b.n	8016a74 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	61fb      	str	r3, [r7, #28]
 80169fa:	e034      	b.n	8016a66 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80169fc:	88bb      	ldrh	r3, [r7, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d00a      	beq.n	8016a18 <pbuf_copy_partial+0x70>
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	895b      	ldrh	r3, [r3, #10]
 8016a06:	88ba      	ldrh	r2, [r7, #4]
 8016a08:	429a      	cmp	r2, r3
 8016a0a:	d305      	bcc.n	8016a18 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	895b      	ldrh	r3, [r3, #10]
 8016a10:	88ba      	ldrh	r2, [r7, #4]
 8016a12:	1ad3      	subs	r3, r2, r3
 8016a14:	80bb      	strh	r3, [r7, #4]
 8016a16:	e023      	b.n	8016a60 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8016a18:	69fb      	ldr	r3, [r7, #28]
 8016a1a:	895a      	ldrh	r2, [r3, #10]
 8016a1c:	88bb      	ldrh	r3, [r7, #4]
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8016a22:	8b3a      	ldrh	r2, [r7, #24]
 8016a24:	88fb      	ldrh	r3, [r7, #6]
 8016a26:	429a      	cmp	r2, r3
 8016a28:	d901      	bls.n	8016a2e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8016a2a:	88fb      	ldrh	r3, [r7, #6]
 8016a2c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8016a2e:	8b7b      	ldrh	r3, [r7, #26]
 8016a30:	68ba      	ldr	r2, [r7, #8]
 8016a32:	18d0      	adds	r0, r2, r3
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	685a      	ldr	r2, [r3, #4]
 8016a38:	88bb      	ldrh	r3, [r7, #4]
 8016a3a:	4413      	add	r3, r2
 8016a3c:	8b3a      	ldrh	r2, [r7, #24]
 8016a3e:	4619      	mov	r1, r3
 8016a40:	f005 ffa7 	bl	801c992 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8016a44:	8afa      	ldrh	r2, [r7, #22]
 8016a46:	8b3b      	ldrh	r3, [r7, #24]
 8016a48:	4413      	add	r3, r2
 8016a4a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8016a4c:	8b7a      	ldrh	r2, [r7, #26]
 8016a4e:	8b3b      	ldrh	r3, [r7, #24]
 8016a50:	4413      	add	r3, r2
 8016a52:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8016a54:	88fa      	ldrh	r2, [r7, #6]
 8016a56:	8b3b      	ldrh	r3, [r7, #24]
 8016a58:	1ad3      	subs	r3, r2, r3
 8016a5a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	61fb      	str	r3, [r7, #28]
 8016a66:	88fb      	ldrh	r3, [r7, #6]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d002      	beq.n	8016a72 <pbuf_copy_partial+0xca>
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d1c4      	bne.n	80169fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8016a72:	8afb      	ldrh	r3, [r7, #22]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3720      	adds	r7, #32
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	0801ea44 	.word	0x0801ea44
 8016a80:	0801edb4 	.word	0x0801edb4
 8016a84:	0801eacc 	.word	0x0801eacc
 8016a88:	0801edd4 	.word	0x0801edd4

08016a8c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b084      	sub	sp, #16
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	4603      	mov	r3, r0
 8016a94:	603a      	str	r2, [r7, #0]
 8016a96:	71fb      	strb	r3, [r7, #7]
 8016a98:	460b      	mov	r3, r1
 8016a9a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	8919      	ldrh	r1, [r3, #8]
 8016aa0:	88ba      	ldrh	r2, [r7, #4]
 8016aa2:	79fb      	ldrb	r3, [r7, #7]
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7ff faa5 	bl	8015ff4 <pbuf_alloc>
 8016aaa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d101      	bne.n	8016ab6 <pbuf_clone+0x2a>
    return NULL;
 8016ab2:	2300      	movs	r3, #0
 8016ab4:	e011      	b.n	8016ada <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8016ab6:	6839      	ldr	r1, [r7, #0]
 8016ab8:	68f8      	ldr	r0, [r7, #12]
 8016aba:	f7ff fea3 	bl	8016804 <pbuf_copy>
 8016abe:	4603      	mov	r3, r0
 8016ac0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8016ac2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d006      	beq.n	8016ad8 <pbuf_clone+0x4c>
 8016aca:	4b06      	ldr	r3, [pc, #24]	; (8016ae4 <pbuf_clone+0x58>)
 8016acc:	f240 5224 	movw	r2, #1316	; 0x524
 8016ad0:	4905      	ldr	r1, [pc, #20]	; (8016ae8 <pbuf_clone+0x5c>)
 8016ad2:	4806      	ldr	r0, [pc, #24]	; (8016aec <pbuf_clone+0x60>)
 8016ad4:	f005 ff70 	bl	801c9b8 <iprintf>
  return q;
 8016ad8:	68fb      	ldr	r3, [r7, #12]
}
 8016ada:	4618      	mov	r0, r3
 8016adc:	3710      	adds	r7, #16
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	0801ea44 	.word	0x0801ea44
 8016ae8:	0801eee0 	.word	0x0801eee0
 8016aec:	0801eacc 	.word	0x0801eacc

08016af0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016af4:	f005 ff78 	bl	801c9e8 <rand>
 8016af8:	4603      	mov	r3, r0
 8016afa:	b29b      	uxth	r3, r3
 8016afc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016b06:	b29a      	uxth	r2, r3
 8016b08:	4b01      	ldr	r3, [pc, #4]	; (8016b10 <tcp_init+0x20>)
 8016b0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016b0c:	bf00      	nop
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	24000014 	.word	0x24000014

08016b14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	7d1b      	ldrb	r3, [r3, #20]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d105      	bne.n	8016b30 <tcp_free+0x1c>
 8016b24:	4b06      	ldr	r3, [pc, #24]	; (8016b40 <tcp_free+0x2c>)
 8016b26:	22d4      	movs	r2, #212	; 0xd4
 8016b28:	4906      	ldr	r1, [pc, #24]	; (8016b44 <tcp_free+0x30>)
 8016b2a:	4807      	ldr	r0, [pc, #28]	; (8016b48 <tcp_free+0x34>)
 8016b2c:	f005 ff44 	bl	801c9b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8016b30:	6879      	ldr	r1, [r7, #4]
 8016b32:	2001      	movs	r0, #1
 8016b34:	f7fe ff48 	bl	80159c8 <memp_free>
}
 8016b38:	bf00      	nop
 8016b3a:	3708      	adds	r7, #8
 8016b3c:	46bd      	mov	sp, r7
 8016b3e:	bd80      	pop	{r7, pc}
 8016b40:	0801ef6c 	.word	0x0801ef6c
 8016b44:	0801efc4 	.word	0x0801efc4
 8016b48:	0801efd8 	.word	0x0801efd8

08016b4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	7d1b      	ldrb	r3, [r3, #20]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d105      	bne.n	8016b68 <tcp_free_listen+0x1c>
 8016b5c:	4b06      	ldr	r3, [pc, #24]	; (8016b78 <tcp_free_listen+0x2c>)
 8016b5e:	22df      	movs	r2, #223	; 0xdf
 8016b60:	4906      	ldr	r1, [pc, #24]	; (8016b7c <tcp_free_listen+0x30>)
 8016b62:	4807      	ldr	r0, [pc, #28]	; (8016b80 <tcp_free_listen+0x34>)
 8016b64:	f005 ff28 	bl	801c9b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8016b68:	6879      	ldr	r1, [r7, #4]
 8016b6a:	2002      	movs	r0, #2
 8016b6c:	f7fe ff2c 	bl	80159c8 <memp_free>
}
 8016b70:	bf00      	nop
 8016b72:	3708      	adds	r7, #8
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	0801ef6c 	.word	0x0801ef6c
 8016b7c:	0801f000 	.word	0x0801f000
 8016b80:	0801efd8 	.word	0x0801efd8

08016b84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8016b88:	f000 fe98 	bl	80178bc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8016b8c:	4b07      	ldr	r3, [pc, #28]	; (8016bac <tcp_tmr+0x28>)
 8016b8e:	781b      	ldrb	r3, [r3, #0]
 8016b90:	3301      	adds	r3, #1
 8016b92:	b2da      	uxtb	r2, r3
 8016b94:	4b05      	ldr	r3, [pc, #20]	; (8016bac <tcp_tmr+0x28>)
 8016b96:	701a      	strb	r2, [r3, #0]
 8016b98:	4b04      	ldr	r3, [pc, #16]	; (8016bac <tcp_tmr+0x28>)
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	f003 0301 	and.w	r3, r3, #1
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d001      	beq.n	8016ba8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8016ba4:	f000 fb4c 	bl	8017240 <tcp_slowtmr>
  }
}
 8016ba8:	bf00      	nop
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	24000221 	.word	0x24000221

08016bb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
 8016bb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8016bba:	683b      	ldr	r3, [r7, #0]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d105      	bne.n	8016bcc <tcp_remove_listener+0x1c>
 8016bc0:	4b0d      	ldr	r3, [pc, #52]	; (8016bf8 <tcp_remove_listener+0x48>)
 8016bc2:	22ff      	movs	r2, #255	; 0xff
 8016bc4:	490d      	ldr	r1, [pc, #52]	; (8016bfc <tcp_remove_listener+0x4c>)
 8016bc6:	480e      	ldr	r0, [pc, #56]	; (8016c00 <tcp_remove_listener+0x50>)
 8016bc8:	f005 fef6 	bl	801c9b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	60fb      	str	r3, [r7, #12]
 8016bd0:	e00a      	b.n	8016be8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016bd6:	683a      	ldr	r2, [r7, #0]
 8016bd8:	429a      	cmp	r2, r3
 8016bda:	d102      	bne.n	8016be2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	2200      	movs	r2, #0
 8016be0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	60fb      	str	r3, [r7, #12]
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d1f1      	bne.n	8016bd2 <tcp_remove_listener+0x22>
    }
  }
}
 8016bee:	bf00      	nop
 8016bf0:	3710      	adds	r7, #16
 8016bf2:	46bd      	mov	sp, r7
 8016bf4:	bd80      	pop	{r7, pc}
 8016bf6:	bf00      	nop
 8016bf8:	0801ef6c 	.word	0x0801ef6c
 8016bfc:	0801f01c 	.word	0x0801f01c
 8016c00:	0801efd8 	.word	0x0801efd8

08016c04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	b084      	sub	sp, #16
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d106      	bne.n	8016c20 <tcp_listen_closed+0x1c>
 8016c12:	4b14      	ldr	r3, [pc, #80]	; (8016c64 <tcp_listen_closed+0x60>)
 8016c14:	f240 1211 	movw	r2, #273	; 0x111
 8016c18:	4913      	ldr	r1, [pc, #76]	; (8016c68 <tcp_listen_closed+0x64>)
 8016c1a:	4814      	ldr	r0, [pc, #80]	; (8016c6c <tcp_listen_closed+0x68>)
 8016c1c:	f005 fecc 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7d1b      	ldrb	r3, [r3, #20]
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d006      	beq.n	8016c36 <tcp_listen_closed+0x32>
 8016c28:	4b0e      	ldr	r3, [pc, #56]	; (8016c64 <tcp_listen_closed+0x60>)
 8016c2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8016c2e:	4910      	ldr	r1, [pc, #64]	; (8016c70 <tcp_listen_closed+0x6c>)
 8016c30:	480e      	ldr	r0, [pc, #56]	; (8016c6c <tcp_listen_closed+0x68>)
 8016c32:	f005 fec1 	bl	801c9b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016c36:	2301      	movs	r3, #1
 8016c38:	60fb      	str	r3, [r7, #12]
 8016c3a:	e00b      	b.n	8016c54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8016c3c:	4a0d      	ldr	r2, [pc, #52]	; (8016c74 <tcp_listen_closed+0x70>)
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	6879      	ldr	r1, [r7, #4]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ff ffb1 	bl	8016bb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	3301      	adds	r3, #1
 8016c52:	60fb      	str	r3, [r7, #12]
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	2b03      	cmp	r3, #3
 8016c58:	d9f0      	bls.n	8016c3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8016c5a:	bf00      	nop
 8016c5c:	3710      	adds	r7, #16
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	0801ef6c 	.word	0x0801ef6c
 8016c68:	0801f044 	.word	0x0801f044
 8016c6c:	0801efd8 	.word	0x0801efd8
 8016c70:	0801f050 	.word	0x0801f050
 8016c74:	08020dd4 	.word	0x08020dd4

08016c78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8016c78:	b5b0      	push	{r4, r5, r7, lr}
 8016c7a:	b088      	sub	sp, #32
 8016c7c:	af04      	add	r7, sp, #16
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d106      	bne.n	8016c98 <tcp_close_shutdown+0x20>
 8016c8a:	4b61      	ldr	r3, [pc, #388]	; (8016e10 <tcp_close_shutdown+0x198>)
 8016c8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8016c90:	4960      	ldr	r1, [pc, #384]	; (8016e14 <tcp_close_shutdown+0x19c>)
 8016c92:	4861      	ldr	r0, [pc, #388]	; (8016e18 <tcp_close_shutdown+0x1a0>)
 8016c94:	f005 fe90 	bl	801c9b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8016c98:	78fb      	ldrb	r3, [r7, #3]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d066      	beq.n	8016d6c <tcp_close_shutdown+0xf4>
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	7d1b      	ldrb	r3, [r3, #20]
 8016ca2:	2b04      	cmp	r3, #4
 8016ca4:	d003      	beq.n	8016cae <tcp_close_shutdown+0x36>
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	7d1b      	ldrb	r3, [r3, #20]
 8016caa:	2b07      	cmp	r3, #7
 8016cac:	d15e      	bne.n	8016d6c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d104      	bne.n	8016cc0 <tcp_close_shutdown+0x48>
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016cbe:	d055      	beq.n	8016d6c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	8b5b      	ldrh	r3, [r3, #26]
 8016cc4:	f003 0310 	and.w	r3, r3, #16
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d106      	bne.n	8016cda <tcp_close_shutdown+0x62>
 8016ccc:	4b50      	ldr	r3, [pc, #320]	; (8016e10 <tcp_close_shutdown+0x198>)
 8016cce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8016cd2:	4952      	ldr	r1, [pc, #328]	; (8016e1c <tcp_close_shutdown+0x1a4>)
 8016cd4:	4850      	ldr	r0, [pc, #320]	; (8016e18 <tcp_close_shutdown+0x1a0>)
 8016cd6:	f005 fe6f 	bl	801c9b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016ce2:	687d      	ldr	r5, [r7, #4]
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	3304      	adds	r3, #4
 8016ce8:	687a      	ldr	r2, [r7, #4]
 8016cea:	8ad2      	ldrh	r2, [r2, #22]
 8016cec:	6879      	ldr	r1, [r7, #4]
 8016cee:	8b09      	ldrh	r1, [r1, #24]
 8016cf0:	9102      	str	r1, [sp, #8]
 8016cf2:	9201      	str	r2, [sp, #4]
 8016cf4:	9300      	str	r3, [sp, #0]
 8016cf6:	462b      	mov	r3, r5
 8016cf8:	4622      	mov	r2, r4
 8016cfa:	4601      	mov	r1, r0
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f004 fe91 	bl	801ba24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8016d02:	6878      	ldr	r0, [r7, #4]
 8016d04:	f001 f8ba 	bl	8017e7c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8016d08:	4b45      	ldr	r3, [pc, #276]	; (8016e20 <tcp_close_shutdown+0x1a8>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	687a      	ldr	r2, [r7, #4]
 8016d0e:	429a      	cmp	r2, r3
 8016d10:	d105      	bne.n	8016d1e <tcp_close_shutdown+0xa6>
 8016d12:	4b43      	ldr	r3, [pc, #268]	; (8016e20 <tcp_close_shutdown+0x1a8>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	4a41      	ldr	r2, [pc, #260]	; (8016e20 <tcp_close_shutdown+0x1a8>)
 8016d1a:	6013      	str	r3, [r2, #0]
 8016d1c:	e013      	b.n	8016d46 <tcp_close_shutdown+0xce>
 8016d1e:	4b40      	ldr	r3, [pc, #256]	; (8016e20 <tcp_close_shutdown+0x1a8>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	60fb      	str	r3, [r7, #12]
 8016d24:	e00c      	b.n	8016d40 <tcp_close_shutdown+0xc8>
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	687a      	ldr	r2, [r7, #4]
 8016d2c:	429a      	cmp	r2, r3
 8016d2e:	d104      	bne.n	8016d3a <tcp_close_shutdown+0xc2>
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	68da      	ldr	r2, [r3, #12]
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	60da      	str	r2, [r3, #12]
 8016d38:	e005      	b.n	8016d46 <tcp_close_shutdown+0xce>
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	68db      	ldr	r3, [r3, #12]
 8016d3e:	60fb      	str	r3, [r7, #12]
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d1ef      	bne.n	8016d26 <tcp_close_shutdown+0xae>
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	60da      	str	r2, [r3, #12]
 8016d4c:	4b35      	ldr	r3, [pc, #212]	; (8016e24 <tcp_close_shutdown+0x1ac>)
 8016d4e:	2201      	movs	r2, #1
 8016d50:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8016d52:	4b35      	ldr	r3, [pc, #212]	; (8016e28 <tcp_close_shutdown+0x1b0>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	687a      	ldr	r2, [r7, #4]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d102      	bne.n	8016d62 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8016d5c:	f003 fd4c 	bl	801a7f8 <tcp_trigger_input_pcb_close>
 8016d60:	e002      	b.n	8016d68 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8016d62:	6878      	ldr	r0, [r7, #4]
 8016d64:	f7ff fed6 	bl	8016b14 <tcp_free>
      }
      return ERR_OK;
 8016d68:	2300      	movs	r3, #0
 8016d6a:	e04d      	b.n	8016e08 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	7d1b      	ldrb	r3, [r3, #20]
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d02d      	beq.n	8016dd0 <tcp_close_shutdown+0x158>
 8016d74:	2b02      	cmp	r3, #2
 8016d76:	d036      	beq.n	8016de6 <tcp_close_shutdown+0x16e>
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d13f      	bne.n	8016dfc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	8adb      	ldrh	r3, [r3, #22]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d021      	beq.n	8016dc8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016d84:	4b29      	ldr	r3, [pc, #164]	; (8016e2c <tcp_close_shutdown+0x1b4>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	687a      	ldr	r2, [r7, #4]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d105      	bne.n	8016d9a <tcp_close_shutdown+0x122>
 8016d8e:	4b27      	ldr	r3, [pc, #156]	; (8016e2c <tcp_close_shutdown+0x1b4>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	68db      	ldr	r3, [r3, #12]
 8016d94:	4a25      	ldr	r2, [pc, #148]	; (8016e2c <tcp_close_shutdown+0x1b4>)
 8016d96:	6013      	str	r3, [r2, #0]
 8016d98:	e013      	b.n	8016dc2 <tcp_close_shutdown+0x14a>
 8016d9a:	4b24      	ldr	r3, [pc, #144]	; (8016e2c <tcp_close_shutdown+0x1b4>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	60bb      	str	r3, [r7, #8]
 8016da0:	e00c      	b.n	8016dbc <tcp_close_shutdown+0x144>
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	687a      	ldr	r2, [r7, #4]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d104      	bne.n	8016db6 <tcp_close_shutdown+0x13e>
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	68da      	ldr	r2, [r3, #12]
 8016db0:	68bb      	ldr	r3, [r7, #8]
 8016db2:	60da      	str	r2, [r3, #12]
 8016db4:	e005      	b.n	8016dc2 <tcp_close_shutdown+0x14a>
 8016db6:	68bb      	ldr	r3, [r7, #8]
 8016db8:	68db      	ldr	r3, [r3, #12]
 8016dba:	60bb      	str	r3, [r7, #8]
 8016dbc:	68bb      	ldr	r3, [r7, #8]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d1ef      	bne.n	8016da2 <tcp_close_shutdown+0x12a>
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	2200      	movs	r2, #0
 8016dc6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f7ff fea3 	bl	8016b14 <tcp_free>
      break;
 8016dce:	e01a      	b.n	8016e06 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f7ff ff17 	bl	8016c04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8016dd6:	6879      	ldr	r1, [r7, #4]
 8016dd8:	4815      	ldr	r0, [pc, #84]	; (8016e30 <tcp_close_shutdown+0x1b8>)
 8016dda:	f001 f89f 	bl	8017f1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f7ff feb4 	bl	8016b4c <tcp_free_listen>
      break;
 8016de4:	e00f      	b.n	8016e06 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8016de6:	6879      	ldr	r1, [r7, #4]
 8016de8:	480d      	ldr	r0, [pc, #52]	; (8016e20 <tcp_close_shutdown+0x1a8>)
 8016dea:	f001 f897 	bl	8017f1c <tcp_pcb_remove>
 8016dee:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <tcp_close_shutdown+0x1ac>)
 8016df0:	2201      	movs	r2, #1
 8016df2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8016df4:	6878      	ldr	r0, [r7, #4]
 8016df6:	f7ff fe8d 	bl	8016b14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8016dfa:	e004      	b.n	8016e06 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	f000 f819 	bl	8016e34 <tcp_close_shutdown_fin>
 8016e02:	4603      	mov	r3, r0
 8016e04:	e000      	b.n	8016e08 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8016e06:	2300      	movs	r3, #0
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3710      	adds	r7, #16
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e10:	0801ef6c 	.word	0x0801ef6c
 8016e14:	0801f068 	.word	0x0801f068
 8016e18:	0801efd8 	.word	0x0801efd8
 8016e1c:	0801f088 	.word	0x0801f088
 8016e20:	24007684 	.word	0x24007684
 8016e24:	24007680 	.word	0x24007680
 8016e28:	24007698 	.word	0x24007698
 8016e2c:	24007690 	.word	0x24007690
 8016e30:	2400768c 	.word	0x2400768c

08016e34 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d106      	bne.n	8016e50 <tcp_close_shutdown_fin+0x1c>
 8016e42:	4b2c      	ldr	r3, [pc, #176]	; (8016ef4 <tcp_close_shutdown_fin+0xc0>)
 8016e44:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8016e48:	492b      	ldr	r1, [pc, #172]	; (8016ef8 <tcp_close_shutdown_fin+0xc4>)
 8016e4a:	482c      	ldr	r0, [pc, #176]	; (8016efc <tcp_close_shutdown_fin+0xc8>)
 8016e4c:	f005 fdb4 	bl	801c9b8 <iprintf>

  switch (pcb->state) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	7d1b      	ldrb	r3, [r3, #20]
 8016e54:	2b04      	cmp	r3, #4
 8016e56:	d010      	beq.n	8016e7a <tcp_close_shutdown_fin+0x46>
 8016e58:	2b07      	cmp	r3, #7
 8016e5a:	d01b      	beq.n	8016e94 <tcp_close_shutdown_fin+0x60>
 8016e5c:	2b03      	cmp	r3, #3
 8016e5e:	d126      	bne.n	8016eae <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f003 fedb 	bl	801ac1c <tcp_send_fin>
 8016e66:	4603      	mov	r3, r0
 8016e68:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d11f      	bne.n	8016eb2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	2205      	movs	r2, #5
 8016e76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016e78:	e01b      	b.n	8016eb2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8016e7a:	6878      	ldr	r0, [r7, #4]
 8016e7c:	f003 fece 	bl	801ac1c <tcp_send_fin>
 8016e80:	4603      	mov	r3, r0
 8016e82:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d114      	bne.n	8016eb6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	2205      	movs	r2, #5
 8016e90:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016e92:	e010      	b.n	8016eb6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f003 fec1 	bl	801ac1c <tcp_send_fin>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8016e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d109      	bne.n	8016eba <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	2209      	movs	r2, #9
 8016eaa:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016eac:	e005      	b.n	8016eba <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8016eae:	2300      	movs	r3, #0
 8016eb0:	e01c      	b.n	8016eec <tcp_close_shutdown_fin+0xb8>
      break;
 8016eb2:	bf00      	nop
 8016eb4:	e002      	b.n	8016ebc <tcp_close_shutdown_fin+0x88>
      break;
 8016eb6:	bf00      	nop
 8016eb8:	e000      	b.n	8016ebc <tcp_close_shutdown_fin+0x88>
      break;
 8016eba:	bf00      	nop
  }

  if (err == ERR_OK) {
 8016ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d103      	bne.n	8016ecc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f003 ffe7 	bl	801ae98 <tcp_output>
 8016eca:	e00d      	b.n	8016ee8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8016ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ed4:	d108      	bne.n	8016ee8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8b5b      	ldrh	r3, [r3, #26]
 8016eda:	f043 0308 	orr.w	r3, r3, #8
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	e001      	b.n	8016eec <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8016ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016eec:	4618      	mov	r0, r3
 8016eee:	3710      	adds	r7, #16
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	bd80      	pop	{r7, pc}
 8016ef4:	0801ef6c 	.word	0x0801ef6c
 8016ef8:	0801f044 	.word	0x0801f044
 8016efc:	0801efd8 	.word	0x0801efd8

08016f00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b082      	sub	sp, #8
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d109      	bne.n	8016f22 <tcp_close+0x22>
 8016f0e:	4b0f      	ldr	r3, [pc, #60]	; (8016f4c <tcp_close+0x4c>)
 8016f10:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8016f14:	490e      	ldr	r1, [pc, #56]	; (8016f50 <tcp_close+0x50>)
 8016f16:	480f      	ldr	r0, [pc, #60]	; (8016f54 <tcp_close+0x54>)
 8016f18:	f005 fd4e 	bl	801c9b8 <iprintf>
 8016f1c:	f06f 030f 	mvn.w	r3, #15
 8016f20:	e00f      	b.n	8016f42 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	7d1b      	ldrb	r3, [r3, #20]
 8016f26:	2b01      	cmp	r3, #1
 8016f28:	d006      	beq.n	8016f38 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	8b5b      	ldrh	r3, [r3, #26]
 8016f2e:	f043 0310 	orr.w	r3, r3, #16
 8016f32:	b29a      	uxth	r2, r3
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8016f38:	2101      	movs	r1, #1
 8016f3a:	6878      	ldr	r0, [r7, #4]
 8016f3c:	f7ff fe9c 	bl	8016c78 <tcp_close_shutdown>
 8016f40:	4603      	mov	r3, r0
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3708      	adds	r7, #8
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	0801ef6c 	.word	0x0801ef6c
 8016f50:	0801f0a4 	.word	0x0801f0a4
 8016f54:	0801efd8 	.word	0x0801efd8

08016f58 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b08e      	sub	sp, #56	; 0x38
 8016f5c:	af04      	add	r7, sp, #16
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d107      	bne.n	8016f78 <tcp_abandon+0x20>
 8016f68:	4b52      	ldr	r3, [pc, #328]	; (80170b4 <tcp_abandon+0x15c>)
 8016f6a:	f240 223d 	movw	r2, #573	; 0x23d
 8016f6e:	4952      	ldr	r1, [pc, #328]	; (80170b8 <tcp_abandon+0x160>)
 8016f70:	4852      	ldr	r0, [pc, #328]	; (80170bc <tcp_abandon+0x164>)
 8016f72:	f005 fd21 	bl	801c9b8 <iprintf>
 8016f76:	e099      	b.n	80170ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	7d1b      	ldrb	r3, [r3, #20]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	d106      	bne.n	8016f8e <tcp_abandon+0x36>
 8016f80:	4b4c      	ldr	r3, [pc, #304]	; (80170b4 <tcp_abandon+0x15c>)
 8016f82:	f240 2241 	movw	r2, #577	; 0x241
 8016f86:	494e      	ldr	r1, [pc, #312]	; (80170c0 <tcp_abandon+0x168>)
 8016f88:	484c      	ldr	r0, [pc, #304]	; (80170bc <tcp_abandon+0x164>)
 8016f8a:	f005 fd15 	bl	801c9b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	7d1b      	ldrb	r3, [r3, #20]
 8016f92:	2b0a      	cmp	r3, #10
 8016f94:	d107      	bne.n	8016fa6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8016f96:	6879      	ldr	r1, [r7, #4]
 8016f98:	484a      	ldr	r0, [pc, #296]	; (80170c4 <tcp_abandon+0x16c>)
 8016f9a:	f000 ffbf 	bl	8017f1c <tcp_pcb_remove>
    tcp_free(pcb);
 8016f9e:	6878      	ldr	r0, [r7, #4]
 8016fa0:	f7ff fdb8 	bl	8016b14 <tcp_free>
 8016fa4:	e082      	b.n	80170ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8016faa:	2300      	movs	r3, #0
 8016fac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016fb2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fb8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016fc0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	691b      	ldr	r3, [r3, #16]
 8016fc6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	7d1b      	ldrb	r3, [r3, #20]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d126      	bne.n	801701e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	8adb      	ldrh	r3, [r3, #22]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d02e      	beq.n	8017036 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8016fd8:	4b3b      	ldr	r3, [pc, #236]	; (80170c8 <tcp_abandon+0x170>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d105      	bne.n	8016fee <tcp_abandon+0x96>
 8016fe2:	4b39      	ldr	r3, [pc, #228]	; (80170c8 <tcp_abandon+0x170>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	68db      	ldr	r3, [r3, #12]
 8016fe8:	4a37      	ldr	r2, [pc, #220]	; (80170c8 <tcp_abandon+0x170>)
 8016fea:	6013      	str	r3, [r2, #0]
 8016fec:	e013      	b.n	8017016 <tcp_abandon+0xbe>
 8016fee:	4b36      	ldr	r3, [pc, #216]	; (80170c8 <tcp_abandon+0x170>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	61fb      	str	r3, [r7, #28]
 8016ff4:	e00c      	b.n	8017010 <tcp_abandon+0xb8>
 8016ff6:	69fb      	ldr	r3, [r7, #28]
 8016ff8:	68db      	ldr	r3, [r3, #12]
 8016ffa:	687a      	ldr	r2, [r7, #4]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	d104      	bne.n	801700a <tcp_abandon+0xb2>
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	68da      	ldr	r2, [r3, #12]
 8017004:	69fb      	ldr	r3, [r7, #28]
 8017006:	60da      	str	r2, [r3, #12]
 8017008:	e005      	b.n	8017016 <tcp_abandon+0xbe>
 801700a:	69fb      	ldr	r3, [r7, #28]
 801700c:	68db      	ldr	r3, [r3, #12]
 801700e:	61fb      	str	r3, [r7, #28]
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d1ef      	bne.n	8016ff6 <tcp_abandon+0x9e>
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2200      	movs	r2, #0
 801701a:	60da      	str	r2, [r3, #12]
 801701c:	e00b      	b.n	8017036 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	8adb      	ldrh	r3, [r3, #22]
 8017026:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017028:	6879      	ldr	r1, [r7, #4]
 801702a:	4828      	ldr	r0, [pc, #160]	; (80170cc <tcp_abandon+0x174>)
 801702c:	f000 ff76 	bl	8017f1c <tcp_pcb_remove>
 8017030:	4b27      	ldr	r3, [pc, #156]	; (80170d0 <tcp_abandon+0x178>)
 8017032:	2201      	movs	r2, #1
 8017034:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801703a:	2b00      	cmp	r3, #0
 801703c:	d004      	beq.n	8017048 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017042:	4618      	mov	r0, r3
 8017044:	f000 fd1a 	bl	8017a7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801704c:	2b00      	cmp	r3, #0
 801704e:	d004      	beq.n	801705a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017054:	4618      	mov	r0, r3
 8017056:	f000 fd11 	bl	8017a7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801705e:	2b00      	cmp	r3, #0
 8017060:	d004      	beq.n	801706c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017066:	4618      	mov	r0, r3
 8017068:	f000 fd08 	bl	8017a7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801706e:	2b00      	cmp	r3, #0
 8017070:	d00e      	beq.n	8017090 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8017072:	6879      	ldr	r1, [r7, #4]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	3304      	adds	r3, #4
 8017078:	687a      	ldr	r2, [r7, #4]
 801707a:	8b12      	ldrh	r2, [r2, #24]
 801707c:	9202      	str	r2, [sp, #8]
 801707e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017080:	9201      	str	r2, [sp, #4]
 8017082:	9300      	str	r3, [sp, #0]
 8017084:	460b      	mov	r3, r1
 8017086:	697a      	ldr	r2, [r7, #20]
 8017088:	69b9      	ldr	r1, [r7, #24]
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f004 fcca 	bl	801ba24 <tcp_rst>
    }
    last_state = pcb->state;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	7d1b      	ldrb	r3, [r3, #20]
 8017094:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7ff fd3c 	bl	8016b14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d004      	beq.n	80170ac <tcp_abandon+0x154>
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	f06f 010c 	mvn.w	r1, #12
 80170a8:	68f8      	ldr	r0, [r7, #12]
 80170aa:	4798      	blx	r3
  }
}
 80170ac:	3728      	adds	r7, #40	; 0x28
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	0801ef6c 	.word	0x0801ef6c
 80170b8:	0801f0d8 	.word	0x0801f0d8
 80170bc:	0801efd8 	.word	0x0801efd8
 80170c0:	0801f0f4 	.word	0x0801f0f4
 80170c4:	24007694 	.word	0x24007694
 80170c8:	24007690 	.word	0x24007690
 80170cc:	24007684 	.word	0x24007684
 80170d0:	24007680 	.word	0x24007680

080170d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80170d4:	b580      	push	{r7, lr}
 80170d6:	b082      	sub	sp, #8
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80170dc:	2101      	movs	r1, #1
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f7ff ff3a 	bl	8016f58 <tcp_abandon>
}
 80170e4:	bf00      	nop
 80170e6:	3708      	adds	r7, #8
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}

080170ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b084      	sub	sp, #16
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d106      	bne.n	8017108 <tcp_update_rcv_ann_wnd+0x1c>
 80170fa:	4b25      	ldr	r3, [pc, #148]	; (8017190 <tcp_update_rcv_ann_wnd+0xa4>)
 80170fc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8017100:	4924      	ldr	r1, [pc, #144]	; (8017194 <tcp_update_rcv_ann_wnd+0xa8>)
 8017102:	4825      	ldr	r0, [pc, #148]	; (8017198 <tcp_update_rcv_ann_wnd+0xac>)
 8017104:	f005 fc58 	bl	801c9b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801710c:	687a      	ldr	r2, [r7, #4]
 801710e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8017110:	4413      	add	r3, r2
 8017112:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017118:	687a      	ldr	r2, [r7, #4]
 801711a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801711c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8017120:	bf28      	it	cs
 8017122:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8017126:	b292      	uxth	r2, r2
 8017128:	4413      	add	r3, r2
 801712a:	68fa      	ldr	r2, [r7, #12]
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	2b00      	cmp	r3, #0
 8017130:	db08      	blt.n	8017144 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801713e:	68fa      	ldr	r2, [r7, #12]
 8017140:	1ad3      	subs	r3, r2, r3
 8017142:	e020      	b.n	8017186 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801714c:	1ad3      	subs	r3, r2, r3
 801714e:	2b00      	cmp	r3, #0
 8017150:	dd03      	ble.n	801715a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	2200      	movs	r2, #0
 8017156:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017158:	e014      	b.n	8017184 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017162:	1ad3      	subs	r3, r2, r3
 8017164:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801716c:	d306      	bcc.n	801717c <tcp_update_rcv_ann_wnd+0x90>
 801716e:	4b08      	ldr	r3, [pc, #32]	; (8017190 <tcp_update_rcv_ann_wnd+0xa4>)
 8017170:	f240 32b6 	movw	r2, #950	; 0x3b6
 8017174:	4909      	ldr	r1, [pc, #36]	; (801719c <tcp_update_rcv_ann_wnd+0xb0>)
 8017176:	4808      	ldr	r0, [pc, #32]	; (8017198 <tcp_update_rcv_ann_wnd+0xac>)
 8017178:	f005 fc1e 	bl	801c9b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801717c:	68bb      	ldr	r3, [r7, #8]
 801717e:	b29a      	uxth	r2, r3
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8017184:	2300      	movs	r3, #0
  }
}
 8017186:	4618      	mov	r0, r3
 8017188:	3710      	adds	r7, #16
 801718a:	46bd      	mov	sp, r7
 801718c:	bd80      	pop	{r7, pc}
 801718e:	bf00      	nop
 8017190:	0801ef6c 	.word	0x0801ef6c
 8017194:	0801f1f0 	.word	0x0801f1f0
 8017198:	0801efd8 	.word	0x0801efd8
 801719c:	0801f214 	.word	0x0801f214

080171a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b084      	sub	sp, #16
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	460b      	mov	r3, r1
 80171aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d107      	bne.n	80171c2 <tcp_recved+0x22>
 80171b2:	4b1f      	ldr	r3, [pc, #124]	; (8017230 <tcp_recved+0x90>)
 80171b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80171b8:	491e      	ldr	r1, [pc, #120]	; (8017234 <tcp_recved+0x94>)
 80171ba:	481f      	ldr	r0, [pc, #124]	; (8017238 <tcp_recved+0x98>)
 80171bc:	f005 fbfc 	bl	801c9b8 <iprintf>
 80171c0:	e032      	b.n	8017228 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	7d1b      	ldrb	r3, [r3, #20]
 80171c6:	2b01      	cmp	r3, #1
 80171c8:	d106      	bne.n	80171d8 <tcp_recved+0x38>
 80171ca:	4b19      	ldr	r3, [pc, #100]	; (8017230 <tcp_recved+0x90>)
 80171cc:	f240 32d3 	movw	r2, #979	; 0x3d3
 80171d0:	491a      	ldr	r1, [pc, #104]	; (801723c <tcp_recved+0x9c>)
 80171d2:	4819      	ldr	r0, [pc, #100]	; (8017238 <tcp_recved+0x98>)
 80171d4:	f005 fbf0 	bl	801c9b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80171dc:	887b      	ldrh	r3, [r7, #2]
 80171de:	4413      	add	r3, r2
 80171e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80171e2:	89fb      	ldrh	r3, [r7, #14]
 80171e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80171e8:	d804      	bhi.n	80171f4 <tcp_recved+0x54>
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171ee:	89fa      	ldrh	r2, [r7, #14]
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d204      	bcs.n	80171fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80171fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80171fc:	e002      	b.n	8017204 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	89fa      	ldrh	r2, [r7, #14]
 8017202:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8017204:	6878      	ldr	r0, [r7, #4]
 8017206:	f7ff ff71 	bl	80170ec <tcp_update_rcv_ann_wnd>
 801720a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017212:	d309      	bcc.n	8017228 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	8b5b      	ldrh	r3, [r3, #26]
 8017218:	f043 0302 	orr.w	r3, r3, #2
 801721c:	b29a      	uxth	r2, r3
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017222:	6878      	ldr	r0, [r7, #4]
 8017224:	f003 fe38 	bl	801ae98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8017228:	3710      	adds	r7, #16
 801722a:	46bd      	mov	sp, r7
 801722c:	bd80      	pop	{r7, pc}
 801722e:	bf00      	nop
 8017230:	0801ef6c 	.word	0x0801ef6c
 8017234:	0801f230 	.word	0x0801f230
 8017238:	0801efd8 	.word	0x0801efd8
 801723c:	0801f248 	.word	0x0801f248

08017240 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8017240:	b5b0      	push	{r4, r5, r7, lr}
 8017242:	b090      	sub	sp, #64	; 0x40
 8017244:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8017246:	2300      	movs	r3, #0
 8017248:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801724c:	4b94      	ldr	r3, [pc, #592]	; (80174a0 <tcp_slowtmr+0x260>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	3301      	adds	r3, #1
 8017252:	4a93      	ldr	r2, [pc, #588]	; (80174a0 <tcp_slowtmr+0x260>)
 8017254:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8017256:	4b93      	ldr	r3, [pc, #588]	; (80174a4 <tcp_slowtmr+0x264>)
 8017258:	781b      	ldrb	r3, [r3, #0]
 801725a:	3301      	adds	r3, #1
 801725c:	b2da      	uxtb	r2, r3
 801725e:	4b91      	ldr	r3, [pc, #580]	; (80174a4 <tcp_slowtmr+0x264>)
 8017260:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8017262:	2300      	movs	r3, #0
 8017264:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8017266:	4b90      	ldr	r3, [pc, #576]	; (80174a8 <tcp_slowtmr+0x268>)
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801726c:	e29d      	b.n	80177aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	7d1b      	ldrb	r3, [r3, #20]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d106      	bne.n	8017284 <tcp_slowtmr+0x44>
 8017276:	4b8d      	ldr	r3, [pc, #564]	; (80174ac <tcp_slowtmr+0x26c>)
 8017278:	f240 42be 	movw	r2, #1214	; 0x4be
 801727c:	498c      	ldr	r1, [pc, #560]	; (80174b0 <tcp_slowtmr+0x270>)
 801727e:	488d      	ldr	r0, [pc, #564]	; (80174b4 <tcp_slowtmr+0x274>)
 8017280:	f005 fb9a 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8017284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017286:	7d1b      	ldrb	r3, [r3, #20]
 8017288:	2b01      	cmp	r3, #1
 801728a:	d106      	bne.n	801729a <tcp_slowtmr+0x5a>
 801728c:	4b87      	ldr	r3, [pc, #540]	; (80174ac <tcp_slowtmr+0x26c>)
 801728e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8017292:	4989      	ldr	r1, [pc, #548]	; (80174b8 <tcp_slowtmr+0x278>)
 8017294:	4887      	ldr	r0, [pc, #540]	; (80174b4 <tcp_slowtmr+0x274>)
 8017296:	f005 fb8f 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801729c:	7d1b      	ldrb	r3, [r3, #20]
 801729e:	2b0a      	cmp	r3, #10
 80172a0:	d106      	bne.n	80172b0 <tcp_slowtmr+0x70>
 80172a2:	4b82      	ldr	r3, [pc, #520]	; (80174ac <tcp_slowtmr+0x26c>)
 80172a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80172a8:	4984      	ldr	r1, [pc, #528]	; (80174bc <tcp_slowtmr+0x27c>)
 80172aa:	4882      	ldr	r0, [pc, #520]	; (80174b4 <tcp_slowtmr+0x274>)
 80172ac:	f005 fb84 	bl	801c9b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80172b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b2:	7f9a      	ldrb	r2, [r3, #30]
 80172b4:	4b7b      	ldr	r3, [pc, #492]	; (80174a4 <tcp_slowtmr+0x264>)
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	429a      	cmp	r2, r3
 80172ba:	d105      	bne.n	80172c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80172bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80172c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c2:	68db      	ldr	r3, [r3, #12]
 80172c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80172c6:	e270      	b.n	80177aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80172c8:	4b76      	ldr	r3, [pc, #472]	; (80174a4 <tcp_slowtmr+0x264>)
 80172ca:	781a      	ldrb	r2, [r3, #0]
 80172cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80172d0:	2300      	movs	r3, #0
 80172d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80172d6:	2300      	movs	r3, #0
 80172d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80172dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172de:	7d1b      	ldrb	r3, [r3, #20]
 80172e0:	2b02      	cmp	r3, #2
 80172e2:	d10a      	bne.n	80172fa <tcp_slowtmr+0xba>
 80172e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172ea:	2b05      	cmp	r3, #5
 80172ec:	d905      	bls.n	80172fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80172ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172f2:	3301      	adds	r3, #1
 80172f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80172f8:	e11e      	b.n	8017538 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80172fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017300:	2b0b      	cmp	r3, #11
 8017302:	d905      	bls.n	8017310 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8017304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017308:	3301      	adds	r3, #1
 801730a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801730e:	e113      	b.n	8017538 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8017310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017312:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017316:	2b00      	cmp	r3, #0
 8017318:	d075      	beq.n	8017406 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801731e:	2b00      	cmp	r3, #0
 8017320:	d006      	beq.n	8017330 <tcp_slowtmr+0xf0>
 8017322:	4b62      	ldr	r3, [pc, #392]	; (80174ac <tcp_slowtmr+0x26c>)
 8017324:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8017328:	4965      	ldr	r1, [pc, #404]	; (80174c0 <tcp_slowtmr+0x280>)
 801732a:	4862      	ldr	r0, [pc, #392]	; (80174b4 <tcp_slowtmr+0x274>)
 801732c:	f005 fb44 	bl	801c9b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8017330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017334:	2b00      	cmp	r3, #0
 8017336:	d106      	bne.n	8017346 <tcp_slowtmr+0x106>
 8017338:	4b5c      	ldr	r3, [pc, #368]	; (80174ac <tcp_slowtmr+0x26c>)
 801733a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801733e:	4961      	ldr	r1, [pc, #388]	; (80174c4 <tcp_slowtmr+0x284>)
 8017340:	485c      	ldr	r0, [pc, #368]	; (80174b4 <tcp_slowtmr+0x274>)
 8017342:	f005 fb39 	bl	801c9b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8017346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017348:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801734c:	2b0b      	cmp	r3, #11
 801734e:	d905      	bls.n	801735c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8017350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017354:	3301      	adds	r3, #1
 8017356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801735a:	e0ed      	b.n	8017538 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801735e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017362:	3b01      	subs	r3, #1
 8017364:	4a58      	ldr	r2, [pc, #352]	; (80174c8 <tcp_slowtmr+0x288>)
 8017366:	5cd3      	ldrb	r3, [r2, r3]
 8017368:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8017370:	7c7a      	ldrb	r2, [r7, #17]
 8017372:	429a      	cmp	r2, r3
 8017374:	d907      	bls.n	8017386 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8017376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017378:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801737c:	3301      	adds	r3, #1
 801737e:	b2da      	uxtb	r2, r3
 8017380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017382:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8017386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017388:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801738c:	7c7a      	ldrb	r2, [r7, #17]
 801738e:	429a      	cmp	r2, r3
 8017390:	f200 80d2 	bhi.w	8017538 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8017394:	2301      	movs	r3, #1
 8017396:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8017398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801739a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d108      	bne.n	80173b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80173a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173a4:	f004 fc32 	bl	801bc0c <tcp_zero_window_probe>
 80173a8:	4603      	mov	r3, r0
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d014      	beq.n	80173d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80173ae:	2300      	movs	r3, #0
 80173b0:	623b      	str	r3, [r7, #32]
 80173b2:	e011      	b.n	80173d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80173b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80173ba:	4619      	mov	r1, r3
 80173bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173be:	f003 fae5 	bl	801a98c <tcp_split_unsent_seg>
 80173c2:	4603      	mov	r3, r0
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d107      	bne.n	80173d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80173c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80173ca:	f003 fd65 	bl	801ae98 <tcp_output>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d101      	bne.n	80173d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80173d4:	2300      	movs	r3, #0
 80173d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80173d8:	6a3b      	ldr	r3, [r7, #32]
 80173da:	2b00      	cmp	r3, #0
 80173dc:	f000 80ac 	beq.w	8017538 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80173e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e2:	2200      	movs	r2, #0
 80173e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80173e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80173ee:	2b06      	cmp	r3, #6
 80173f0:	f200 80a2 	bhi.w	8017538 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80173f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80173fa:	3301      	adds	r3, #1
 80173fc:	b2da      	uxtb	r2, r3
 80173fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017400:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8017404:	e098      	b.n	8017538 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8017406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017408:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801740c:	2b00      	cmp	r3, #0
 801740e:	db0f      	blt.n	8017430 <tcp_slowtmr+0x1f0>
 8017410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017412:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017416:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801741a:	4293      	cmp	r3, r2
 801741c:	d008      	beq.n	8017430 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017420:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017424:	b29b      	uxth	r3, r3
 8017426:	3301      	adds	r3, #1
 8017428:	b29b      	uxth	r3, r3
 801742a:	b21a      	sxth	r2, r3
 801742c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801742e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8017430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017432:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8017436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017438:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801743c:	429a      	cmp	r2, r3
 801743e:	db7b      	blt.n	8017538 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8017440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017442:	f004 f821 	bl	801b488 <tcp_rexmit_rto_prepare>
 8017446:	4603      	mov	r3, r0
 8017448:	2b00      	cmp	r3, #0
 801744a:	d007      	beq.n	801745c <tcp_slowtmr+0x21c>
 801744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017450:	2b00      	cmp	r3, #0
 8017452:	d171      	bne.n	8017538 <tcp_slowtmr+0x2f8>
 8017454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017458:	2b00      	cmp	r3, #0
 801745a:	d06d      	beq.n	8017538 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745e:	7d1b      	ldrb	r3, [r3, #20]
 8017460:	2b02      	cmp	r3, #2
 8017462:	d03a      	beq.n	80174da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8017464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017466:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801746a:	2b0c      	cmp	r3, #12
 801746c:	bf28      	it	cs
 801746e:	230c      	movcs	r3, #12
 8017470:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8017472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017474:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017478:	10db      	asrs	r3, r3, #3
 801747a:	b21b      	sxth	r3, r3
 801747c:	461a      	mov	r2, r3
 801747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017480:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017484:	4413      	add	r3, r2
 8017486:	7efa      	ldrb	r2, [r7, #27]
 8017488:	4910      	ldr	r1, [pc, #64]	; (80174cc <tcp_slowtmr+0x28c>)
 801748a:	5c8a      	ldrb	r2, [r1, r2]
 801748c:	4093      	lsls	r3, r2
 801748e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8017490:	697b      	ldr	r3, [r7, #20]
 8017492:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8017496:	4293      	cmp	r3, r2
 8017498:	dc1a      	bgt.n	80174d0 <tcp_slowtmr+0x290>
 801749a:	697b      	ldr	r3, [r7, #20]
 801749c:	b21a      	sxth	r2, r3
 801749e:	e019      	b.n	80174d4 <tcp_slowtmr+0x294>
 80174a0:	24007688 	.word	0x24007688
 80174a4:	24000222 	.word	0x24000222
 80174a8:	24007684 	.word	0x24007684
 80174ac:	0801ef6c 	.word	0x0801ef6c
 80174b0:	0801f2d8 	.word	0x0801f2d8
 80174b4:	0801efd8 	.word	0x0801efd8
 80174b8:	0801f304 	.word	0x0801f304
 80174bc:	0801f330 	.word	0x0801f330
 80174c0:	0801f360 	.word	0x0801f360
 80174c4:	0801f394 	.word	0x0801f394
 80174c8:	08020dcc 	.word	0x08020dcc
 80174cc:	08020dbc 	.word	0x08020dbc
 80174d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80174d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80174da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174dc:	2200      	movs	r2, #0
 80174de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80174e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80174e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174ec:	4293      	cmp	r3, r2
 80174ee:	bf28      	it	cs
 80174f0:	4613      	movcs	r3, r2
 80174f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80174f4:	8a7b      	ldrh	r3, [r7, #18]
 80174f6:	085b      	lsrs	r3, r3, #1
 80174f8:	b29a      	uxth	r2, r3
 80174fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8017500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017502:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801750a:	005b      	lsls	r3, r3, #1
 801750c:	b29b      	uxth	r3, r3
 801750e:	429a      	cmp	r2, r3
 8017510:	d206      	bcs.n	8017520 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8017512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017516:	005b      	lsls	r3, r3, #1
 8017518:	b29a      	uxth	r2, r3
 801751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8017520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017522:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8017524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017526:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752c:	2200      	movs	r2, #0
 801752e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8017532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017534:	f004 f818 	bl	801b568 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8017538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801753a:	7d1b      	ldrb	r3, [r3, #20]
 801753c:	2b06      	cmp	r3, #6
 801753e:	d111      	bne.n	8017564 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8017540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017542:	8b5b      	ldrh	r3, [r3, #26]
 8017544:	f003 0310 	and.w	r3, r3, #16
 8017548:	2b00      	cmp	r3, #0
 801754a:	d00b      	beq.n	8017564 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801754c:	4b9c      	ldr	r3, [pc, #624]	; (80177c0 <tcp_slowtmr+0x580>)
 801754e:	681a      	ldr	r2, [r3, #0]
 8017550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017552:	6a1b      	ldr	r3, [r3, #32]
 8017554:	1ad3      	subs	r3, r2, r3
 8017556:	2b28      	cmp	r3, #40	; 0x28
 8017558:	d904      	bls.n	8017564 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801755a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801755e:	3301      	adds	r3, #1
 8017560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017566:	7a5b      	ldrb	r3, [r3, #9]
 8017568:	f003 0308 	and.w	r3, r3, #8
 801756c:	2b00      	cmp	r3, #0
 801756e:	d04a      	beq.n	8017606 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8017574:	2b04      	cmp	r3, #4
 8017576:	d003      	beq.n	8017580 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8017578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801757a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801757c:	2b07      	cmp	r3, #7
 801757e:	d142      	bne.n	8017606 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8017580:	4b8f      	ldr	r3, [pc, #572]	; (80177c0 <tcp_slowtmr+0x580>)
 8017582:	681a      	ldr	r2, [r3, #0]
 8017584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017586:	6a1b      	ldr	r3, [r3, #32]
 8017588:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8017590:	4b8c      	ldr	r3, [pc, #560]	; (80177c4 <tcp_slowtmr+0x584>)
 8017592:	440b      	add	r3, r1
 8017594:	498c      	ldr	r1, [pc, #560]	; (80177c8 <tcp_slowtmr+0x588>)
 8017596:	fba1 1303 	umull	r1, r3, r1, r3
 801759a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801759c:	429a      	cmp	r2, r3
 801759e:	d90a      	bls.n	80175b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80175a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80175a4:	3301      	adds	r3, #1
 80175a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80175aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80175ae:	3301      	adds	r3, #1
 80175b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80175b4:	e027      	b.n	8017606 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175b6:	4b82      	ldr	r3, [pc, #520]	; (80177c0 <tcp_slowtmr+0x580>)
 80175b8:	681a      	ldr	r2, [r3, #0]
 80175ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175bc:	6a1b      	ldr	r3, [r3, #32]
 80175be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80175c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80175cc:	4618      	mov	r0, r3
 80175ce:	4b7f      	ldr	r3, [pc, #508]	; (80177cc <tcp_slowtmr+0x58c>)
 80175d0:	fb03 f300 	mul.w	r3, r3, r0
 80175d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80175d6:	497c      	ldr	r1, [pc, #496]	; (80177c8 <tcp_slowtmr+0x588>)
 80175d8:	fba1 1303 	umull	r1, r3, r1, r3
 80175dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80175de:	429a      	cmp	r2, r3
 80175e0:	d911      	bls.n	8017606 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80175e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175e4:	f004 fad2 	bl	801bb8c <tcp_keepalive>
 80175e8:	4603      	mov	r3, r0
 80175ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80175ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d107      	bne.n	8017606 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80175f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80175fc:	3301      	adds	r3, #1
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017602:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8017606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801760a:	2b00      	cmp	r3, #0
 801760c:	d011      	beq.n	8017632 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801760e:	4b6c      	ldr	r3, [pc, #432]	; (80177c0 <tcp_slowtmr+0x580>)
 8017610:	681a      	ldr	r2, [r3, #0]
 8017612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017614:	6a1b      	ldr	r3, [r3, #32]
 8017616:	1ad2      	subs	r2, r2, r3
 8017618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801761e:	4619      	mov	r1, r3
 8017620:	460b      	mov	r3, r1
 8017622:	005b      	lsls	r3, r3, #1
 8017624:	440b      	add	r3, r1
 8017626:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8017628:	429a      	cmp	r2, r3
 801762a:	d302      	bcc.n	8017632 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801762c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801762e:	f000 fdd9 	bl	80181e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8017632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017634:	7d1b      	ldrb	r3, [r3, #20]
 8017636:	2b03      	cmp	r3, #3
 8017638:	d10b      	bne.n	8017652 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801763a:	4b61      	ldr	r3, [pc, #388]	; (80177c0 <tcp_slowtmr+0x580>)
 801763c:	681a      	ldr	r2, [r3, #0]
 801763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017640:	6a1b      	ldr	r3, [r3, #32]
 8017642:	1ad3      	subs	r3, r2, r3
 8017644:	2b28      	cmp	r3, #40	; 0x28
 8017646:	d904      	bls.n	8017652 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8017648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801764c:	3301      	adds	r3, #1
 801764e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8017652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017654:	7d1b      	ldrb	r3, [r3, #20]
 8017656:	2b09      	cmp	r3, #9
 8017658:	d10b      	bne.n	8017672 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801765a:	4b59      	ldr	r3, [pc, #356]	; (80177c0 <tcp_slowtmr+0x580>)
 801765c:	681a      	ldr	r2, [r3, #0]
 801765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017660:	6a1b      	ldr	r3, [r3, #32]
 8017662:	1ad3      	subs	r3, r2, r3
 8017664:	2bf0      	cmp	r3, #240	; 0xf0
 8017666:	d904      	bls.n	8017672 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8017668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801766c:	3301      	adds	r3, #1
 801766e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017672:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017676:	2b00      	cmp	r3, #0
 8017678:	d060      	beq.n	801773c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017680:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8017682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017684:	f000 fbfa 	bl	8017e7c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8017688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801768a:	2b00      	cmp	r3, #0
 801768c:	d010      	beq.n	80176b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801768e:	4b50      	ldr	r3, [pc, #320]	; (80177d0 <tcp_slowtmr+0x590>)
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017694:	429a      	cmp	r2, r3
 8017696:	d106      	bne.n	80176a6 <tcp_slowtmr+0x466>
 8017698:	4b4e      	ldr	r3, [pc, #312]	; (80177d4 <tcp_slowtmr+0x594>)
 801769a:	f240 526d 	movw	r2, #1389	; 0x56d
 801769e:	494e      	ldr	r1, [pc, #312]	; (80177d8 <tcp_slowtmr+0x598>)
 80176a0:	484e      	ldr	r0, [pc, #312]	; (80177dc <tcp_slowtmr+0x59c>)
 80176a2:	f005 f989 	bl	801c9b8 <iprintf>
        prev->next = pcb->next;
 80176a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a8:	68da      	ldr	r2, [r3, #12]
 80176aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ac:	60da      	str	r2, [r3, #12]
 80176ae:	e00f      	b.n	80176d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80176b0:	4b47      	ldr	r3, [pc, #284]	; (80177d0 <tcp_slowtmr+0x590>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d006      	beq.n	80176c8 <tcp_slowtmr+0x488>
 80176ba:	4b46      	ldr	r3, [pc, #280]	; (80177d4 <tcp_slowtmr+0x594>)
 80176bc:	f240 5271 	movw	r2, #1393	; 0x571
 80176c0:	4947      	ldr	r1, [pc, #284]	; (80177e0 <tcp_slowtmr+0x5a0>)
 80176c2:	4846      	ldr	r0, [pc, #280]	; (80177dc <tcp_slowtmr+0x59c>)
 80176c4:	f005 f978 	bl	801c9b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80176c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176ca:	68db      	ldr	r3, [r3, #12]
 80176cc:	4a40      	ldr	r2, [pc, #256]	; (80177d0 <tcp_slowtmr+0x590>)
 80176ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80176d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d013      	beq.n	8017700 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80176d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80176dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80176e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80176e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176e4:	3304      	adds	r3, #4
 80176e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80176e8:	8ad2      	ldrh	r2, [r2, #22]
 80176ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176ec:	8b09      	ldrh	r1, [r1, #24]
 80176ee:	9102      	str	r1, [sp, #8]
 80176f0:	9201      	str	r2, [sp, #4]
 80176f2:	9300      	str	r3, [sp, #0]
 80176f4:	462b      	mov	r3, r5
 80176f6:	4622      	mov	r2, r4
 80176f8:	4601      	mov	r1, r0
 80176fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80176fc:	f004 f992 	bl	801ba24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8017700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017702:	691b      	ldr	r3, [r3, #16]
 8017704:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8017706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017708:	7d1b      	ldrb	r3, [r3, #20]
 801770a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801770e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8017710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017712:	68db      	ldr	r3, [r3, #12]
 8017714:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017716:	6838      	ldr	r0, [r7, #0]
 8017718:	f7ff f9fc 	bl	8016b14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801771c:	4b31      	ldr	r3, [pc, #196]	; (80177e4 <tcp_slowtmr+0x5a4>)
 801771e:	2200      	movs	r2, #0
 8017720:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d004      	beq.n	8017732 <tcp_slowtmr+0x4f2>
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f06f 010c 	mvn.w	r1, #12
 801772e:	68b8      	ldr	r0, [r7, #8]
 8017730:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8017732:	4b2c      	ldr	r3, [pc, #176]	; (80177e4 <tcp_slowtmr+0x5a4>)
 8017734:	781b      	ldrb	r3, [r3, #0]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d037      	beq.n	80177aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801773a:	e592      	b.n	8017262 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801773e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8017740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017742:	68db      	ldr	r3, [r3, #12]
 8017744:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8017746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017748:	7f1b      	ldrb	r3, [r3, #28]
 801774a:	3301      	adds	r3, #1
 801774c:	b2da      	uxtb	r2, r3
 801774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017750:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8017752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017754:	7f1a      	ldrb	r2, [r3, #28]
 8017756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017758:	7f5b      	ldrb	r3, [r3, #29]
 801775a:	429a      	cmp	r2, r3
 801775c:	d325      	bcc.n	80177aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017760:	2200      	movs	r2, #0
 8017762:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8017764:	4b1f      	ldr	r3, [pc, #124]	; (80177e4 <tcp_slowtmr+0x5a4>)
 8017766:	2200      	movs	r2, #0
 8017768:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801776c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017770:	2b00      	cmp	r3, #0
 8017772:	d00b      	beq.n	801778c <tcp_slowtmr+0x54c>
 8017774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017776:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801777a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801777c:	6912      	ldr	r2, [r2, #16]
 801777e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017780:	4610      	mov	r0, r2
 8017782:	4798      	blx	r3
 8017784:	4603      	mov	r3, r0
 8017786:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801778a:	e002      	b.n	8017792 <tcp_slowtmr+0x552>
 801778c:	2300      	movs	r3, #0
 801778e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8017792:	4b14      	ldr	r3, [pc, #80]	; (80177e4 <tcp_slowtmr+0x5a4>)
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d000      	beq.n	801779c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801779a:	e562      	b.n	8017262 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801779c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d102      	bne.n	80177aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80177a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80177a6:	f003 fb77 	bl	801ae98 <tcp_output>
  while (pcb != NULL) {
 80177aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	f47f ad5e 	bne.w	801726e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80177b2:	2300      	movs	r3, #0
 80177b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80177b6:	4b0c      	ldr	r3, [pc, #48]	; (80177e8 <tcp_slowtmr+0x5a8>)
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80177bc:	e069      	b.n	8017892 <tcp_slowtmr+0x652>
 80177be:	bf00      	nop
 80177c0:	24007688 	.word	0x24007688
 80177c4:	000a4cb8 	.word	0x000a4cb8
 80177c8:	10624dd3 	.word	0x10624dd3
 80177cc:	000124f8 	.word	0x000124f8
 80177d0:	24007684 	.word	0x24007684
 80177d4:	0801ef6c 	.word	0x0801ef6c
 80177d8:	0801f3cc 	.word	0x0801f3cc
 80177dc:	0801efd8 	.word	0x0801efd8
 80177e0:	0801f3f8 	.word	0x0801f3f8
 80177e4:	24007680 	.word	0x24007680
 80177e8:	24007694 	.word	0x24007694
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80177ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ee:	7d1b      	ldrb	r3, [r3, #20]
 80177f0:	2b0a      	cmp	r3, #10
 80177f2:	d006      	beq.n	8017802 <tcp_slowtmr+0x5c2>
 80177f4:	4b2a      	ldr	r3, [pc, #168]	; (80178a0 <tcp_slowtmr+0x660>)
 80177f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80177fa:	492a      	ldr	r1, [pc, #168]	; (80178a4 <tcp_slowtmr+0x664>)
 80177fc:	482a      	ldr	r0, [pc, #168]	; (80178a8 <tcp_slowtmr+0x668>)
 80177fe:	f005 f8db 	bl	801c9b8 <iprintf>
    pcb_remove = 0;
 8017802:	2300      	movs	r3, #0
 8017804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8017808:	4b28      	ldr	r3, [pc, #160]	; (80178ac <tcp_slowtmr+0x66c>)
 801780a:	681a      	ldr	r2, [r3, #0]
 801780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801780e:	6a1b      	ldr	r3, [r3, #32]
 8017810:	1ad3      	subs	r3, r2, r3
 8017812:	2bf0      	cmp	r3, #240	; 0xf0
 8017814:	d904      	bls.n	8017820 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8017816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801781a:	3301      	adds	r3, #1
 801781c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8017820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017824:	2b00      	cmp	r3, #0
 8017826:	d02f      	beq.n	8017888 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8017828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801782a:	f000 fb27 	bl	8017e7c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017830:	2b00      	cmp	r3, #0
 8017832:	d010      	beq.n	8017856 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8017834:	4b1e      	ldr	r3, [pc, #120]	; (80178b0 <tcp_slowtmr+0x670>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801783a:	429a      	cmp	r2, r3
 801783c:	d106      	bne.n	801784c <tcp_slowtmr+0x60c>
 801783e:	4b18      	ldr	r3, [pc, #96]	; (80178a0 <tcp_slowtmr+0x660>)
 8017840:	f240 52af 	movw	r2, #1455	; 0x5af
 8017844:	491b      	ldr	r1, [pc, #108]	; (80178b4 <tcp_slowtmr+0x674>)
 8017846:	4818      	ldr	r0, [pc, #96]	; (80178a8 <tcp_slowtmr+0x668>)
 8017848:	f005 f8b6 	bl	801c9b8 <iprintf>
        prev->next = pcb->next;
 801784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784e:	68da      	ldr	r2, [r3, #12]
 8017850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017852:	60da      	str	r2, [r3, #12]
 8017854:	e00f      	b.n	8017876 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8017856:	4b16      	ldr	r3, [pc, #88]	; (80178b0 <tcp_slowtmr+0x670>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801785c:	429a      	cmp	r2, r3
 801785e:	d006      	beq.n	801786e <tcp_slowtmr+0x62e>
 8017860:	4b0f      	ldr	r3, [pc, #60]	; (80178a0 <tcp_slowtmr+0x660>)
 8017862:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8017866:	4914      	ldr	r1, [pc, #80]	; (80178b8 <tcp_slowtmr+0x678>)
 8017868:	480f      	ldr	r0, [pc, #60]	; (80178a8 <tcp_slowtmr+0x668>)
 801786a:	f005 f8a5 	bl	801c9b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801786e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	4a0f      	ldr	r2, [pc, #60]	; (80178b0 <tcp_slowtmr+0x670>)
 8017874:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8017876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017878:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787c:	68db      	ldr	r3, [r3, #12]
 801787e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8017880:	69f8      	ldr	r0, [r7, #28]
 8017882:	f7ff f947 	bl	8016b14 <tcp_free>
 8017886:	e004      	b.n	8017892 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8017888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788e:	68db      	ldr	r3, [r3, #12]
 8017890:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8017892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017894:	2b00      	cmp	r3, #0
 8017896:	d1a9      	bne.n	80177ec <tcp_slowtmr+0x5ac>
    }
  }
}
 8017898:	bf00      	nop
 801789a:	3730      	adds	r7, #48	; 0x30
 801789c:	46bd      	mov	sp, r7
 801789e:	bdb0      	pop	{r4, r5, r7, pc}
 80178a0:	0801ef6c 	.word	0x0801ef6c
 80178a4:	0801f424 	.word	0x0801f424
 80178a8:	0801efd8 	.word	0x0801efd8
 80178ac:	24007688 	.word	0x24007688
 80178b0:	24007694 	.word	0x24007694
 80178b4:	0801f454 	.word	0x0801f454
 80178b8:	0801f47c 	.word	0x0801f47c

080178bc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80178bc:	b580      	push	{r7, lr}
 80178be:	b082      	sub	sp, #8
 80178c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80178c2:	4b2d      	ldr	r3, [pc, #180]	; (8017978 <tcp_fasttmr+0xbc>)
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	3301      	adds	r3, #1
 80178c8:	b2da      	uxtb	r2, r3
 80178ca:	4b2b      	ldr	r3, [pc, #172]	; (8017978 <tcp_fasttmr+0xbc>)
 80178cc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80178ce:	4b2b      	ldr	r3, [pc, #172]	; (801797c <tcp_fasttmr+0xc0>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80178d4:	e048      	b.n	8017968 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	7f9a      	ldrb	r2, [r3, #30]
 80178da:	4b27      	ldr	r3, [pc, #156]	; (8017978 <tcp_fasttmr+0xbc>)
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d03f      	beq.n	8017962 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80178e2:	4b25      	ldr	r3, [pc, #148]	; (8017978 <tcp_fasttmr+0xbc>)
 80178e4:	781a      	ldrb	r2, [r3, #0]
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	8b5b      	ldrh	r3, [r3, #26]
 80178ee:	f003 0301 	and.w	r3, r3, #1
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d010      	beq.n	8017918 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	8b5b      	ldrh	r3, [r3, #26]
 80178fa:	f043 0302 	orr.w	r3, r3, #2
 80178fe:	b29a      	uxth	r2, r3
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8017904:	6878      	ldr	r0, [r7, #4]
 8017906:	f003 fac7 	bl	801ae98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	8b5b      	ldrh	r3, [r3, #26]
 801790e:	f023 0303 	bic.w	r3, r3, #3
 8017912:	b29a      	uxth	r2, r3
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	8b5b      	ldrh	r3, [r3, #26]
 801791c:	f003 0308 	and.w	r3, r3, #8
 8017920:	2b00      	cmp	r3, #0
 8017922:	d009      	beq.n	8017938 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	8b5b      	ldrh	r3, [r3, #26]
 8017928:	f023 0308 	bic.w	r3, r3, #8
 801792c:	b29a      	uxth	r2, r3
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f7ff fa7e 	bl	8016e34 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	68db      	ldr	r3, [r3, #12]
 801793c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017942:	2b00      	cmp	r3, #0
 8017944:	d00a      	beq.n	801795c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8017946:	4b0e      	ldr	r3, [pc, #56]	; (8017980 <tcp_fasttmr+0xc4>)
 8017948:	2200      	movs	r2, #0
 801794a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	f000 f819 	bl	8017984 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8017952:	4b0b      	ldr	r3, [pc, #44]	; (8017980 <tcp_fasttmr+0xc4>)
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d000      	beq.n	801795c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801795a:	e7b8      	b.n	80178ce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801795c:	683b      	ldr	r3, [r7, #0]
 801795e:	607b      	str	r3, [r7, #4]
 8017960:	e002      	b.n	8017968 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d1b3      	bne.n	80178d6 <tcp_fasttmr+0x1a>
    }
  }
}
 801796e:	bf00      	nop
 8017970:	3708      	adds	r7, #8
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}
 8017976:	bf00      	nop
 8017978:	24000222 	.word	0x24000222
 801797c:	24007684 	.word	0x24007684
 8017980:	24007680 	.word	0x24007680

08017984 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8017984:	b590      	push	{r4, r7, lr}
 8017986:	b085      	sub	sp, #20
 8017988:	af00      	add	r7, sp, #0
 801798a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	2b00      	cmp	r3, #0
 8017990:	d109      	bne.n	80179a6 <tcp_process_refused_data+0x22>
 8017992:	4b37      	ldr	r3, [pc, #220]	; (8017a70 <tcp_process_refused_data+0xec>)
 8017994:	f240 6209 	movw	r2, #1545	; 0x609
 8017998:	4936      	ldr	r1, [pc, #216]	; (8017a74 <tcp_process_refused_data+0xf0>)
 801799a:	4837      	ldr	r0, [pc, #220]	; (8017a78 <tcp_process_refused_data+0xf4>)
 801799c:	f005 f80c 	bl	801c9b8 <iprintf>
 80179a0:	f06f 030f 	mvn.w	r3, #15
 80179a4:	e060      	b.n	8017a68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80179aa:	7b5b      	ldrb	r3, [r3, #13]
 80179ac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80179b2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2200      	movs	r2, #0
 80179b8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00b      	beq.n	80179dc <tcp_process_refused_data+0x58>
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6918      	ldr	r0, [r3, #16]
 80179ce:	2300      	movs	r3, #0
 80179d0:	68ba      	ldr	r2, [r7, #8]
 80179d2:	6879      	ldr	r1, [r7, #4]
 80179d4:	47a0      	blx	r4
 80179d6:	4603      	mov	r3, r0
 80179d8:	73fb      	strb	r3, [r7, #15]
 80179da:	e007      	b.n	80179ec <tcp_process_refused_data+0x68>
 80179dc:	2300      	movs	r3, #0
 80179de:	68ba      	ldr	r2, [r7, #8]
 80179e0:	6879      	ldr	r1, [r7, #4]
 80179e2:	2000      	movs	r0, #0
 80179e4:	f000 f8a2 	bl	8017b2c <tcp_recv_null>
 80179e8:	4603      	mov	r3, r0
 80179ea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80179ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d12a      	bne.n	8017a4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80179f4:	7bbb      	ldrb	r3, [r7, #14]
 80179f6:	f003 0320 	and.w	r3, r3, #32
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d033      	beq.n	8017a66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017a06:	d005      	beq.n	8017a14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017a0c:	3301      	adds	r3, #1
 8017a0e:	b29a      	uxth	r2, r3
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d00b      	beq.n	8017a36 <tcp_process_refused_data+0xb2>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6918      	ldr	r0, [r3, #16]
 8017a28:	2300      	movs	r3, #0
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	6879      	ldr	r1, [r7, #4]
 8017a2e:	47a0      	blx	r4
 8017a30:	4603      	mov	r3, r0
 8017a32:	73fb      	strb	r3, [r7, #15]
 8017a34:	e001      	b.n	8017a3a <tcp_process_refused_data+0xb6>
 8017a36:	2300      	movs	r3, #0
 8017a38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8017a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a3e:	f113 0f0d 	cmn.w	r3, #13
 8017a42:	d110      	bne.n	8017a66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8017a44:	f06f 030c 	mvn.w	r3, #12
 8017a48:	e00e      	b.n	8017a68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8017a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017a4e:	f113 0f0d 	cmn.w	r3, #13
 8017a52:	d102      	bne.n	8017a5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8017a54:	f06f 030c 	mvn.w	r3, #12
 8017a58:	e006      	b.n	8017a68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	68ba      	ldr	r2, [r7, #8]
 8017a5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8017a60:	f06f 0304 	mvn.w	r3, #4
 8017a64:	e000      	b.n	8017a68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8017a66:	2300      	movs	r3, #0
}
 8017a68:	4618      	mov	r0, r3
 8017a6a:	3714      	adds	r7, #20
 8017a6c:	46bd      	mov	sp, r7
 8017a6e:	bd90      	pop	{r4, r7, pc}
 8017a70:	0801ef6c 	.word	0x0801ef6c
 8017a74:	0801f4a4 	.word	0x0801f4a4
 8017a78:	0801efd8 	.word	0x0801efd8

08017a7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b084      	sub	sp, #16
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8017a84:	e007      	b.n	8017a96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8017a8c:	6878      	ldr	r0, [r7, #4]
 8017a8e:	f000 f809 	bl	8017aa4 <tcp_seg_free>
    seg = next;
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d1f4      	bne.n	8017a86 <tcp_segs_free+0xa>
  }
}
 8017a9c:	bf00      	nop
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}

08017aa4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b082      	sub	sp, #8
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d00c      	beq.n	8017acc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	685b      	ldr	r3, [r3, #4]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d004      	beq.n	8017ac4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	685b      	ldr	r3, [r3, #4]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7fe fd78 	bl	80165b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8017ac4:	6879      	ldr	r1, [r7, #4]
 8017ac6:	2003      	movs	r0, #3
 8017ac8:	f7fd ff7e 	bl	80159c8 <memp_free>
  }
}
 8017acc:	bf00      	nop
 8017ace:	3708      	adds	r7, #8
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	bd80      	pop	{r7, pc}

08017ad4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b084      	sub	sp, #16
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d106      	bne.n	8017af0 <tcp_seg_copy+0x1c>
 8017ae2:	4b0f      	ldr	r3, [pc, #60]	; (8017b20 <tcp_seg_copy+0x4c>)
 8017ae4:	f240 6282 	movw	r2, #1666	; 0x682
 8017ae8:	490e      	ldr	r1, [pc, #56]	; (8017b24 <tcp_seg_copy+0x50>)
 8017aea:	480f      	ldr	r0, [pc, #60]	; (8017b28 <tcp_seg_copy+0x54>)
 8017aec:	f004 ff64 	bl	801c9b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8017af0:	2003      	movs	r0, #3
 8017af2:	f7fd ff1d 	bl	8015930 <memp_malloc>
 8017af6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d101      	bne.n	8017b02 <tcp_seg_copy+0x2e>
    return NULL;
 8017afe:	2300      	movs	r3, #0
 8017b00:	e00a      	b.n	8017b18 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8017b02:	2210      	movs	r2, #16
 8017b04:	6879      	ldr	r1, [r7, #4]
 8017b06:	68f8      	ldr	r0, [r7, #12]
 8017b08:	f004 ff43 	bl	801c992 <memcpy>
  pbuf_ref(cseg->p);
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7fe fdef 	bl	80166f4 <pbuf_ref>
  return cseg;
 8017b16:	68fb      	ldr	r3, [r7, #12]
}
 8017b18:	4618      	mov	r0, r3
 8017b1a:	3710      	adds	r7, #16
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	0801ef6c 	.word	0x0801ef6c
 8017b24:	0801f4e8 	.word	0x0801f4e8
 8017b28:	0801efd8 	.word	0x0801efd8

08017b2c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b084      	sub	sp, #16
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	607a      	str	r2, [r7, #4]
 8017b38:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d109      	bne.n	8017b54 <tcp_recv_null+0x28>
 8017b40:	4b12      	ldr	r3, [pc, #72]	; (8017b8c <tcp_recv_null+0x60>)
 8017b42:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017b46:	4912      	ldr	r1, [pc, #72]	; (8017b90 <tcp_recv_null+0x64>)
 8017b48:	4812      	ldr	r0, [pc, #72]	; (8017b94 <tcp_recv_null+0x68>)
 8017b4a:	f004 ff35 	bl	801c9b8 <iprintf>
 8017b4e:	f06f 030f 	mvn.w	r3, #15
 8017b52:	e016      	b.n	8017b82 <tcp_recv_null+0x56>

  if (p != NULL) {
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d009      	beq.n	8017b6e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	891b      	ldrh	r3, [r3, #8]
 8017b5e:	4619      	mov	r1, r3
 8017b60:	68b8      	ldr	r0, [r7, #8]
 8017b62:	f7ff fb1d 	bl	80171a0 <tcp_recved>
    pbuf_free(p);
 8017b66:	6878      	ldr	r0, [r7, #4]
 8017b68:	f7fe fd24 	bl	80165b4 <pbuf_free>
 8017b6c:	e008      	b.n	8017b80 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8017b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d104      	bne.n	8017b80 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8017b76:	68b8      	ldr	r0, [r7, #8]
 8017b78:	f7ff f9c2 	bl	8016f00 <tcp_close>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	e000      	b.n	8017b82 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8017b80:	2300      	movs	r3, #0
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	0801ef6c 	.word	0x0801ef6c
 8017b90:	0801f504 	.word	0x0801f504
 8017b94:	0801efd8 	.word	0x0801efd8

08017b98 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8017b98:	b580      	push	{r7, lr}
 8017b9a:	b086      	sub	sp, #24
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8017ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	db01      	blt.n	8017bae <tcp_kill_prio+0x16>
 8017baa:	79fb      	ldrb	r3, [r7, #7]
 8017bac:	e000      	b.n	8017bb0 <tcp_kill_prio+0x18>
 8017bae:	237f      	movs	r3, #127	; 0x7f
 8017bb0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8017bb2:	7afb      	ldrb	r3, [r7, #11]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d034      	beq.n	8017c22 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8017bb8:	7afb      	ldrb	r3, [r7, #11]
 8017bba:	3b01      	subs	r3, #1
 8017bbc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017bc6:	4b19      	ldr	r3, [pc, #100]	; (8017c2c <tcp_kill_prio+0x94>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	617b      	str	r3, [r7, #20]
 8017bcc:	e01f      	b.n	8017c0e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	7d5b      	ldrb	r3, [r3, #21]
 8017bd2:	7afa      	ldrb	r2, [r7, #11]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d80c      	bhi.n	8017bf2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017bd8:	697b      	ldr	r3, [r7, #20]
 8017bda:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8017bdc:	7afa      	ldrb	r2, [r7, #11]
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d112      	bne.n	8017c08 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8017be2:	4b13      	ldr	r3, [pc, #76]	; (8017c30 <tcp_kill_prio+0x98>)
 8017be4:	681a      	ldr	r2, [r3, #0]
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	6a1b      	ldr	r3, [r3, #32]
 8017bea:	1ad3      	subs	r3, r2, r3
 8017bec:	68fa      	ldr	r2, [r7, #12]
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	d80a      	bhi.n	8017c08 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8017bf2:	4b0f      	ldr	r3, [pc, #60]	; (8017c30 <tcp_kill_prio+0x98>)
 8017bf4:	681a      	ldr	r2, [r3, #0]
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	6a1b      	ldr	r3, [r3, #32]
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	7d5b      	ldrb	r3, [r3, #21]
 8017c06:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c08:	697b      	ldr	r3, [r7, #20]
 8017c0a:	68db      	ldr	r3, [r3, #12]
 8017c0c:	617b      	str	r3, [r7, #20]
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d1dc      	bne.n	8017bce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8017c14:	693b      	ldr	r3, [r7, #16]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d004      	beq.n	8017c24 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017c1a:	6938      	ldr	r0, [r7, #16]
 8017c1c:	f7ff fa5a 	bl	80170d4 <tcp_abort>
 8017c20:	e000      	b.n	8017c24 <tcp_kill_prio+0x8c>
    return;
 8017c22:	bf00      	nop
  }
}
 8017c24:	3718      	adds	r7, #24
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}
 8017c2a:	bf00      	nop
 8017c2c:	24007684 	.word	0x24007684
 8017c30:	24007688 	.word	0x24007688

08017c34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b086      	sub	sp, #24
 8017c38:	af00      	add	r7, sp, #0
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8017c3e:	79fb      	ldrb	r3, [r7, #7]
 8017c40:	2b08      	cmp	r3, #8
 8017c42:	d009      	beq.n	8017c58 <tcp_kill_state+0x24>
 8017c44:	79fb      	ldrb	r3, [r7, #7]
 8017c46:	2b09      	cmp	r3, #9
 8017c48:	d006      	beq.n	8017c58 <tcp_kill_state+0x24>
 8017c4a:	4b1a      	ldr	r3, [pc, #104]	; (8017cb4 <tcp_kill_state+0x80>)
 8017c4c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8017c50:	4919      	ldr	r1, [pc, #100]	; (8017cb8 <tcp_kill_state+0x84>)
 8017c52:	481a      	ldr	r0, [pc, #104]	; (8017cbc <tcp_kill_state+0x88>)
 8017c54:	f004 feb0 	bl	801c9b8 <iprintf>

  inactivity = 0;
 8017c58:	2300      	movs	r3, #0
 8017c5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c60:	4b17      	ldr	r3, [pc, #92]	; (8017cc0 <tcp_kill_state+0x8c>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	617b      	str	r3, [r7, #20]
 8017c66:	e017      	b.n	8017c98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	7d1b      	ldrb	r3, [r3, #20]
 8017c6c:	79fa      	ldrb	r2, [r7, #7]
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d10f      	bne.n	8017c92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017c72:	4b14      	ldr	r3, [pc, #80]	; (8017cc4 <tcp_kill_state+0x90>)
 8017c74:	681a      	ldr	r2, [r3, #0]
 8017c76:	697b      	ldr	r3, [r7, #20]
 8017c78:	6a1b      	ldr	r3, [r3, #32]
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	68fa      	ldr	r2, [r7, #12]
 8017c7e:	429a      	cmp	r2, r3
 8017c80:	d807      	bhi.n	8017c92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8017c82:	4b10      	ldr	r3, [pc, #64]	; (8017cc4 <tcp_kill_state+0x90>)
 8017c84:	681a      	ldr	r2, [r3, #0]
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	6a1b      	ldr	r3, [r3, #32]
 8017c8a:	1ad3      	subs	r3, r2, r3
 8017c8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8017c8e:	697b      	ldr	r3, [r7, #20]
 8017c90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	68db      	ldr	r3, [r3, #12]
 8017c96:	617b      	str	r3, [r7, #20]
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d1e4      	bne.n	8017c68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8017c9e:	693b      	ldr	r3, [r7, #16]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d003      	beq.n	8017cac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	6938      	ldr	r0, [r7, #16]
 8017ca8:	f7ff f956 	bl	8016f58 <tcp_abandon>
  }
}
 8017cac:	bf00      	nop
 8017cae:	3718      	adds	r7, #24
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	0801ef6c 	.word	0x0801ef6c
 8017cb8:	0801f520 	.word	0x0801f520
 8017cbc:	0801efd8 	.word	0x0801efd8
 8017cc0:	24007684 	.word	0x24007684
 8017cc4:	24007688 	.word	0x24007688

08017cc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b084      	sub	sp, #16
 8017ccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017cd6:	4b12      	ldr	r3, [pc, #72]	; (8017d20 <tcp_kill_timewait+0x58>)
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	60fb      	str	r3, [r7, #12]
 8017cdc:	e012      	b.n	8017d04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8017cde:	4b11      	ldr	r3, [pc, #68]	; (8017d24 <tcp_kill_timewait+0x5c>)
 8017ce0:	681a      	ldr	r2, [r3, #0]
 8017ce2:	68fb      	ldr	r3, [r7, #12]
 8017ce4:	6a1b      	ldr	r3, [r3, #32]
 8017ce6:	1ad3      	subs	r3, r2, r3
 8017ce8:	687a      	ldr	r2, [r7, #4]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d807      	bhi.n	8017cfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8017cee:	4b0d      	ldr	r3, [pc, #52]	; (8017d24 <tcp_kill_timewait+0x5c>)
 8017cf0:	681a      	ldr	r2, [r3, #0]
 8017cf2:	68fb      	ldr	r3, [r7, #12]
 8017cf4:	6a1b      	ldr	r3, [r3, #32]
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	68db      	ldr	r3, [r3, #12]
 8017d02:	60fb      	str	r3, [r7, #12]
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d1e9      	bne.n	8017cde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8017d0a:	68bb      	ldr	r3, [r7, #8]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8017d10:	68b8      	ldr	r0, [r7, #8]
 8017d12:	f7ff f9df 	bl	80170d4 <tcp_abort>
  }
}
 8017d16:	bf00      	nop
 8017d18:	3710      	adds	r7, #16
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	24007694 	.word	0x24007694
 8017d24:	24007688 	.word	0x24007688

08017d28 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8017d28:	b580      	push	{r7, lr}
 8017d2a:	b082      	sub	sp, #8
 8017d2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8017d2e:	4b10      	ldr	r3, [pc, #64]	; (8017d70 <tcp_handle_closepend+0x48>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8017d34:	e014      	b.n	8017d60 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	68db      	ldr	r3, [r3, #12]
 8017d3a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	8b5b      	ldrh	r3, [r3, #26]
 8017d40:	f003 0308 	and.w	r3, r3, #8
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d009      	beq.n	8017d5c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	8b5b      	ldrh	r3, [r3, #26]
 8017d4c:	f023 0308 	bic.w	r3, r3, #8
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8017d56:	6878      	ldr	r0, [r7, #4]
 8017d58:	f7ff f86c 	bl	8016e34 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d1e7      	bne.n	8017d36 <tcp_handle_closepend+0xe>
  }
}
 8017d66:	bf00      	nop
 8017d68:	3708      	adds	r7, #8
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	24007684 	.word	0x24007684

08017d74 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b084      	sub	sp, #16
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	4603      	mov	r3, r0
 8017d7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d7e:	2001      	movs	r0, #1
 8017d80:	f7fd fdd6 	bl	8015930 <memp_malloc>
 8017d84:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d126      	bne.n	8017dda <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8017d8c:	f7ff ffcc 	bl	8017d28 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8017d90:	f7ff ff9a 	bl	8017cc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017d94:	2001      	movs	r0, #1
 8017d96:	f7fd fdcb 	bl	8015930 <memp_malloc>
 8017d9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d11b      	bne.n	8017dda <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8017da2:	2009      	movs	r0, #9
 8017da4:	f7ff ff46 	bl	8017c34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017da8:	2001      	movs	r0, #1
 8017daa:	f7fd fdc1 	bl	8015930 <memp_malloc>
 8017dae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d111      	bne.n	8017dda <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8017db6:	2008      	movs	r0, #8
 8017db8:	f7ff ff3c 	bl	8017c34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017dbc:	2001      	movs	r0, #1
 8017dbe:	f7fd fdb7 	bl	8015930 <memp_malloc>
 8017dc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	d107      	bne.n	8017dda <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8017dca:	79fb      	ldrb	r3, [r7, #7]
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7ff fee3 	bl	8017b98 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8017dd2:	2001      	movs	r0, #1
 8017dd4:	f7fd fdac 	bl	8015930 <memp_malloc>
 8017dd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d03f      	beq.n	8017e60 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8017de0:	229c      	movs	r2, #156	; 0x9c
 8017de2:	2100      	movs	r1, #0
 8017de4:	68f8      	ldr	r0, [r7, #12]
 8017de6:	f004 fddf 	bl	801c9a8 <memset>
    pcb->prio = prio;
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	79fa      	ldrb	r2, [r7, #7]
 8017dee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017df6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8017e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	22ff      	movs	r2, #255	; 0xff
 8017e0e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017e16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	2206      	movs	r2, #6
 8017e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8017e20:	68fb      	ldr	r3, [r7, #12]
 8017e22:	2206      	movs	r2, #6
 8017e24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2201      	movs	r2, #1
 8017e32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8017e36:	4b0d      	ldr	r3, [pc, #52]	; (8017e6c <tcp_alloc+0xf8>)
 8017e38:	681a      	ldr	r2, [r3, #0]
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8017e3e:	4b0c      	ldr	r3, [pc, #48]	; (8017e70 <tcp_alloc+0xfc>)
 8017e40:	781a      	ldrb	r2, [r3, #0]
 8017e42:	68fb      	ldr	r3, [r7, #12]
 8017e44:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8017e4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	4a08      	ldr	r2, [pc, #32]	; (8017e74 <tcp_alloc+0x100>)
 8017e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	4a07      	ldr	r2, [pc, #28]	; (8017e78 <tcp_alloc+0x104>)
 8017e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8017e60:	68fb      	ldr	r3, [r7, #12]
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	3710      	adds	r7, #16
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	24007688 	.word	0x24007688
 8017e70:	24000222 	.word	0x24000222
 8017e74:	08017b2d 	.word	0x08017b2d
 8017e78:	006ddd00 	.word	0x006ddd00

08017e7c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b082      	sub	sp, #8
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d107      	bne.n	8017e9a <tcp_pcb_purge+0x1e>
 8017e8a:	4b21      	ldr	r3, [pc, #132]	; (8017f10 <tcp_pcb_purge+0x94>)
 8017e8c:	f640 0251 	movw	r2, #2129	; 0x851
 8017e90:	4920      	ldr	r1, [pc, #128]	; (8017f14 <tcp_pcb_purge+0x98>)
 8017e92:	4821      	ldr	r0, [pc, #132]	; (8017f18 <tcp_pcb_purge+0x9c>)
 8017e94:	f004 fd90 	bl	801c9b8 <iprintf>
 8017e98:	e037      	b.n	8017f0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	7d1b      	ldrb	r3, [r3, #20]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d033      	beq.n	8017f0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017ea6:	2b0a      	cmp	r3, #10
 8017ea8:	d02f      	beq.n	8017f0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	d02b      	beq.n	8017f0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d007      	beq.n	8017eca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7fe fb78 	bl	80165b4 <pbuf_free>
      pcb->refused_data = NULL;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d002      	beq.n	8017ed8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8017ed2:	6878      	ldr	r0, [r7, #4]
 8017ed4:	f000 f986 	bl	80181e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ede:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ff fdc9 	bl	8017a7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7ff fdc4 	bl	8017a7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2200      	movs	r2, #0
 8017ef8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	2200      	movs	r2, #0
 8017f06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8017f0a:	3708      	adds	r7, #8
 8017f0c:	46bd      	mov	sp, r7
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	0801ef6c 	.word	0x0801ef6c
 8017f14:	0801f5e0 	.word	0x0801f5e0
 8017f18:	0801efd8 	.word	0x0801efd8

08017f1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d106      	bne.n	8017f3a <tcp_pcb_remove+0x1e>
 8017f2c:	4b3e      	ldr	r3, [pc, #248]	; (8018028 <tcp_pcb_remove+0x10c>)
 8017f2e:	f640 0283 	movw	r2, #2179	; 0x883
 8017f32:	493e      	ldr	r1, [pc, #248]	; (801802c <tcp_pcb_remove+0x110>)
 8017f34:	483e      	ldr	r0, [pc, #248]	; (8018030 <tcp_pcb_remove+0x114>)
 8017f36:	f004 fd3f 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	2b00      	cmp	r3, #0
 8017f3e:	d106      	bne.n	8017f4e <tcp_pcb_remove+0x32>
 8017f40:	4b39      	ldr	r3, [pc, #228]	; (8018028 <tcp_pcb_remove+0x10c>)
 8017f42:	f640 0284 	movw	r2, #2180	; 0x884
 8017f46:	493b      	ldr	r1, [pc, #236]	; (8018034 <tcp_pcb_remove+0x118>)
 8017f48:	4839      	ldr	r0, [pc, #228]	; (8018030 <tcp_pcb_remove+0x114>)
 8017f4a:	f004 fd35 	bl	801c9b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	683a      	ldr	r2, [r7, #0]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d105      	bne.n	8017f64 <tcp_pcb_remove+0x48>
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	68da      	ldr	r2, [r3, #12]
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	601a      	str	r2, [r3, #0]
 8017f62:	e013      	b.n	8017f8c <tcp_pcb_remove+0x70>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	681b      	ldr	r3, [r3, #0]
 8017f68:	60fb      	str	r3, [r7, #12]
 8017f6a:	e00c      	b.n	8017f86 <tcp_pcb_remove+0x6a>
 8017f6c:	68fb      	ldr	r3, [r7, #12]
 8017f6e:	68db      	ldr	r3, [r3, #12]
 8017f70:	683a      	ldr	r2, [r7, #0]
 8017f72:	429a      	cmp	r2, r3
 8017f74:	d104      	bne.n	8017f80 <tcp_pcb_remove+0x64>
 8017f76:	683b      	ldr	r3, [r7, #0]
 8017f78:	68da      	ldr	r2, [r3, #12]
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	60da      	str	r2, [r3, #12]
 8017f7e:	e005      	b.n	8017f8c <tcp_pcb_remove+0x70>
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	60fb      	str	r3, [r7, #12]
 8017f86:	68fb      	ldr	r3, [r7, #12]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d1ef      	bne.n	8017f6c <tcp_pcb_remove+0x50>
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	2200      	movs	r2, #0
 8017f90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8017f92:	6838      	ldr	r0, [r7, #0]
 8017f94:	f7ff ff72 	bl	8017e7c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	7d1b      	ldrb	r3, [r3, #20]
 8017f9c:	2b0a      	cmp	r3, #10
 8017f9e:	d013      	beq.n	8017fc8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017fa4:	2b01      	cmp	r3, #1
 8017fa6:	d00f      	beq.n	8017fc8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	8b5b      	ldrh	r3, [r3, #26]
 8017fac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d009      	beq.n	8017fc8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	8b5b      	ldrh	r3, [r3, #26]
 8017fb8:	f043 0302 	orr.w	r3, r3, #2
 8017fbc:	b29a      	uxth	r2, r3
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017fc2:	6838      	ldr	r0, [r7, #0]
 8017fc4:	f002 ff68 	bl	801ae98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017fc8:	683b      	ldr	r3, [r7, #0]
 8017fca:	7d1b      	ldrb	r3, [r3, #20]
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	d020      	beq.n	8018012 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d006      	beq.n	8017fe6 <tcp_pcb_remove+0xca>
 8017fd8:	4b13      	ldr	r3, [pc, #76]	; (8018028 <tcp_pcb_remove+0x10c>)
 8017fda:	f640 0293 	movw	r2, #2195	; 0x893
 8017fde:	4916      	ldr	r1, [pc, #88]	; (8018038 <tcp_pcb_remove+0x11c>)
 8017fe0:	4813      	ldr	r0, [pc, #76]	; (8018030 <tcp_pcb_remove+0x114>)
 8017fe2:	f004 fce9 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8017fe6:	683b      	ldr	r3, [r7, #0]
 8017fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d006      	beq.n	8017ffc <tcp_pcb_remove+0xe0>
 8017fee:	4b0e      	ldr	r3, [pc, #56]	; (8018028 <tcp_pcb_remove+0x10c>)
 8017ff0:	f640 0294 	movw	r2, #2196	; 0x894
 8017ff4:	4911      	ldr	r1, [pc, #68]	; (801803c <tcp_pcb_remove+0x120>)
 8017ff6:	480e      	ldr	r0, [pc, #56]	; (8018030 <tcp_pcb_remove+0x114>)
 8017ff8:	f004 fcde 	bl	801c9b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8017ffc:	683b      	ldr	r3, [r7, #0]
 8017ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018000:	2b00      	cmp	r3, #0
 8018002:	d006      	beq.n	8018012 <tcp_pcb_remove+0xf6>
 8018004:	4b08      	ldr	r3, [pc, #32]	; (8018028 <tcp_pcb_remove+0x10c>)
 8018006:	f640 0296 	movw	r2, #2198	; 0x896
 801800a:	490d      	ldr	r1, [pc, #52]	; (8018040 <tcp_pcb_remove+0x124>)
 801800c:	4808      	ldr	r0, [pc, #32]	; (8018030 <tcp_pcb_remove+0x114>)
 801800e:	f004 fcd3 	bl	801c9b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8018012:	683b      	ldr	r3, [r7, #0]
 8018014:	2200      	movs	r2, #0
 8018016:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	2200      	movs	r2, #0
 801801c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801801e:	bf00      	nop
 8018020:	3710      	adds	r7, #16
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	0801ef6c 	.word	0x0801ef6c
 801802c:	0801f5fc 	.word	0x0801f5fc
 8018030:	0801efd8 	.word	0x0801efd8
 8018034:	0801f618 	.word	0x0801f618
 8018038:	0801f638 	.word	0x0801f638
 801803c:	0801f650 	.word	0x0801f650
 8018040:	0801f66c 	.word	0x0801f66c

08018044 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b082      	sub	sp, #8
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d106      	bne.n	8018060 <tcp_next_iss+0x1c>
 8018052:	4b0a      	ldr	r3, [pc, #40]	; (801807c <tcp_next_iss+0x38>)
 8018054:	f640 02af 	movw	r2, #2223	; 0x8af
 8018058:	4909      	ldr	r1, [pc, #36]	; (8018080 <tcp_next_iss+0x3c>)
 801805a:	480a      	ldr	r0, [pc, #40]	; (8018084 <tcp_next_iss+0x40>)
 801805c:	f004 fcac 	bl	801c9b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8018060:	4b09      	ldr	r3, [pc, #36]	; (8018088 <tcp_next_iss+0x44>)
 8018062:	681a      	ldr	r2, [r3, #0]
 8018064:	4b09      	ldr	r3, [pc, #36]	; (801808c <tcp_next_iss+0x48>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	4413      	add	r3, r2
 801806a:	4a07      	ldr	r2, [pc, #28]	; (8018088 <tcp_next_iss+0x44>)
 801806c:	6013      	str	r3, [r2, #0]
  return iss;
 801806e:	4b06      	ldr	r3, [pc, #24]	; (8018088 <tcp_next_iss+0x44>)
 8018070:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8018072:	4618      	mov	r0, r3
 8018074:	3708      	adds	r7, #8
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}
 801807a:	bf00      	nop
 801807c:	0801ef6c 	.word	0x0801ef6c
 8018080:	0801f684 	.word	0x0801f684
 8018084:	0801efd8 	.word	0x0801efd8
 8018088:	24000018 	.word	0x24000018
 801808c:	24007688 	.word	0x24007688

08018090 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b086      	sub	sp, #24
 8018094:	af00      	add	r7, sp, #0
 8018096:	4603      	mov	r3, r0
 8018098:	60b9      	str	r1, [r7, #8]
 801809a:	607a      	str	r2, [r7, #4]
 801809c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d106      	bne.n	80180b2 <tcp_eff_send_mss_netif+0x22>
 80180a4:	4b14      	ldr	r3, [pc, #80]	; (80180f8 <tcp_eff_send_mss_netif+0x68>)
 80180a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80180aa:	4914      	ldr	r1, [pc, #80]	; (80180fc <tcp_eff_send_mss_netif+0x6c>)
 80180ac:	4814      	ldr	r0, [pc, #80]	; (8018100 <tcp_eff_send_mss_netif+0x70>)
 80180ae:	f004 fc83 	bl	801c9b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80180b2:	68bb      	ldr	r3, [r7, #8]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d101      	bne.n	80180bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80180b8:	89fb      	ldrh	r3, [r7, #14]
 80180ba:	e019      	b.n	80180f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80180c2:	8afb      	ldrh	r3, [r7, #22]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d012      	beq.n	80180ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80180c8:	2328      	movs	r3, #40	; 0x28
 80180ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80180cc:	8afa      	ldrh	r2, [r7, #22]
 80180ce:	8abb      	ldrh	r3, [r7, #20]
 80180d0:	429a      	cmp	r2, r3
 80180d2:	d904      	bls.n	80180de <tcp_eff_send_mss_netif+0x4e>
 80180d4:	8afa      	ldrh	r2, [r7, #22]
 80180d6:	8abb      	ldrh	r3, [r7, #20]
 80180d8:	1ad3      	subs	r3, r2, r3
 80180da:	b29b      	uxth	r3, r3
 80180dc:	e000      	b.n	80180e0 <tcp_eff_send_mss_netif+0x50>
 80180de:	2300      	movs	r3, #0
 80180e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80180e2:	8a7a      	ldrh	r2, [r7, #18]
 80180e4:	89fb      	ldrh	r3, [r7, #14]
 80180e6:	4293      	cmp	r3, r2
 80180e8:	bf28      	it	cs
 80180ea:	4613      	movcs	r3, r2
 80180ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80180ee:	89fb      	ldrh	r3, [r7, #14]
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	3718      	adds	r7, #24
 80180f4:	46bd      	mov	sp, r7
 80180f6:	bd80      	pop	{r7, pc}
 80180f8:	0801ef6c 	.word	0x0801ef6c
 80180fc:	0801f6a0 	.word	0x0801f6a0
 8018100:	0801efd8 	.word	0x0801efd8

08018104 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8018104:	b580      	push	{r7, lr}
 8018106:	b084      	sub	sp, #16
 8018108:	af00      	add	r7, sp, #0
 801810a:	6078      	str	r0, [r7, #4]
 801810c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d119      	bne.n	801814c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8018118:	4b10      	ldr	r3, [pc, #64]	; (801815c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801811a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801811e:	4910      	ldr	r1, [pc, #64]	; (8018160 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8018120:	4810      	ldr	r0, [pc, #64]	; (8018164 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8018122:	f004 fc49 	bl	801c9b8 <iprintf>

  while (pcb != NULL) {
 8018126:	e011      	b.n	801814c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	681a      	ldr	r2, [r3, #0]
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	429a      	cmp	r2, r3
 8018132:	d108      	bne.n	8018146 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	68db      	ldr	r3, [r3, #12]
 8018138:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801813a:	68f8      	ldr	r0, [r7, #12]
 801813c:	f7fe ffca 	bl	80170d4 <tcp_abort>
      pcb = next;
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	60fb      	str	r3, [r7, #12]
 8018144:	e002      	b.n	801814c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	68db      	ldr	r3, [r3, #12]
 801814a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d1ea      	bne.n	8018128 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8018152:	bf00      	nop
 8018154:	3710      	adds	r7, #16
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	0801ef6c 	.word	0x0801ef6c
 8018160:	0801f6c8 	.word	0x0801f6c8
 8018164:	0801efd8 	.word	0x0801efd8

08018168 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b084      	sub	sp, #16
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d02a      	beq.n	80181ce <tcp_netif_ip_addr_changed+0x66>
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d026      	beq.n	80181ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8018180:	4b15      	ldr	r3, [pc, #84]	; (80181d8 <tcp_netif_ip_addr_changed+0x70>)
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4619      	mov	r1, r3
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f7ff ffbc 	bl	8018104 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801818c:	4b13      	ldr	r3, [pc, #76]	; (80181dc <tcp_netif_ip_addr_changed+0x74>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	4619      	mov	r1, r3
 8018192:	6878      	ldr	r0, [r7, #4]
 8018194:	f7ff ffb6 	bl	8018104 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8018198:	683b      	ldr	r3, [r7, #0]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d017      	beq.n	80181ce <tcp_netif_ip_addr_changed+0x66>
 801819e:	683b      	ldr	r3, [r7, #0]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d013      	beq.n	80181ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80181a6:	4b0e      	ldr	r3, [pc, #56]	; (80181e0 <tcp_netif_ip_addr_changed+0x78>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	60fb      	str	r3, [r7, #12]
 80181ac:	e00c      	b.n	80181c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	681a      	ldr	r2, [r3, #0]
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d103      	bne.n	80181c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80181ba:	683b      	ldr	r3, [r7, #0]
 80181bc:	681a      	ldr	r2, [r3, #0]
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	68db      	ldr	r3, [r3, #12]
 80181c6:	60fb      	str	r3, [r7, #12]
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d1ef      	bne.n	80181ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80181ce:	bf00      	nop
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}
 80181d6:	bf00      	nop
 80181d8:	24007684 	.word	0x24007684
 80181dc:	24007690 	.word	0x24007690
 80181e0:	2400768c 	.word	0x2400768c

080181e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80181e4:	b580      	push	{r7, lr}
 80181e6:	b082      	sub	sp, #8
 80181e8:	af00      	add	r7, sp, #0
 80181ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d007      	beq.n	8018204 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff fc3f 	bl	8017a7c <tcp_segs_free>
    pcb->ooseq = NULL;
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	2200      	movs	r2, #0
 8018202:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8018204:	bf00      	nop
 8018206:	3708      	adds	r7, #8
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801820c:	b590      	push	{r4, r7, lr}
 801820e:	b08d      	sub	sp, #52	; 0x34
 8018210:	af04      	add	r7, sp, #16
 8018212:	6078      	str	r0, [r7, #4]
 8018214:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d105      	bne.n	8018228 <tcp_input+0x1c>
 801821c:	4b9b      	ldr	r3, [pc, #620]	; (801848c <tcp_input+0x280>)
 801821e:	2283      	movs	r2, #131	; 0x83
 8018220:	499b      	ldr	r1, [pc, #620]	; (8018490 <tcp_input+0x284>)
 8018222:	489c      	ldr	r0, [pc, #624]	; (8018494 <tcp_input+0x288>)
 8018224:	f004 fbc8 	bl	801c9b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	685b      	ldr	r3, [r3, #4]
 801822c:	4a9a      	ldr	r2, [pc, #616]	; (8018498 <tcp_input+0x28c>)
 801822e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	895b      	ldrh	r3, [r3, #10]
 8018234:	2b13      	cmp	r3, #19
 8018236:	f240 83c4 	bls.w	80189c2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801823a:	4b98      	ldr	r3, [pc, #608]	; (801849c <tcp_input+0x290>)
 801823c:	695a      	ldr	r2, [r3, #20]
 801823e:	4b97      	ldr	r3, [pc, #604]	; (801849c <tcp_input+0x290>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	4619      	mov	r1, r3
 8018244:	4610      	mov	r0, r2
 8018246:	f7fc f8ef 	bl	8014428 <ip4_addr_isbroadcast_u32>
 801824a:	4603      	mov	r3, r0
 801824c:	2b00      	cmp	r3, #0
 801824e:	f040 83ba 	bne.w	80189c6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8018252:	4b92      	ldr	r3, [pc, #584]	; (801849c <tcp_input+0x290>)
 8018254:	695b      	ldr	r3, [r3, #20]
 8018256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801825a:	2be0      	cmp	r3, #224	; 0xe0
 801825c:	f000 83b3 	beq.w	80189c6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8018260:	4b8d      	ldr	r3, [pc, #564]	; (8018498 <tcp_input+0x28c>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	899b      	ldrh	r3, [r3, #12]
 8018266:	b29b      	uxth	r3, r3
 8018268:	4618      	mov	r0, r3
 801826a:	f7f8 fcfa 	bl	8010c62 <lwip_htons>
 801826e:	4603      	mov	r3, r0
 8018270:	0b1b      	lsrs	r3, r3, #12
 8018272:	b29b      	uxth	r3, r3
 8018274:	b2db      	uxtb	r3, r3
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801827a:	7cbb      	ldrb	r3, [r7, #18]
 801827c:	2b13      	cmp	r3, #19
 801827e:	f240 83a2 	bls.w	80189c6 <tcp_input+0x7ba>
 8018282:	7cbb      	ldrb	r3, [r7, #18]
 8018284:	b29a      	uxth	r2, r3
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	891b      	ldrh	r3, [r3, #8]
 801828a:	429a      	cmp	r2, r3
 801828c:	f200 839b 	bhi.w	80189c6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8018290:	7cbb      	ldrb	r3, [r7, #18]
 8018292:	b29b      	uxth	r3, r3
 8018294:	3b14      	subs	r3, #20
 8018296:	b29a      	uxth	r2, r3
 8018298:	4b81      	ldr	r3, [pc, #516]	; (80184a0 <tcp_input+0x294>)
 801829a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801829c:	4b81      	ldr	r3, [pc, #516]	; (80184a4 <tcp_input+0x298>)
 801829e:	2200      	movs	r2, #0
 80182a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	895a      	ldrh	r2, [r3, #10]
 80182a6:	7cbb      	ldrb	r3, [r7, #18]
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d309      	bcc.n	80182c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80182ae:	4b7c      	ldr	r3, [pc, #496]	; (80184a0 <tcp_input+0x294>)
 80182b0:	881a      	ldrh	r2, [r3, #0]
 80182b2:	4b7d      	ldr	r3, [pc, #500]	; (80184a8 <tcp_input+0x29c>)
 80182b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80182b6:	7cbb      	ldrb	r3, [r7, #18]
 80182b8:	4619      	mov	r1, r3
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f7fe f8f4 	bl	80164a8 <pbuf_remove_header>
 80182c0:	e04e      	b.n	8018360 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d105      	bne.n	80182d6 <tcp_input+0xca>
 80182ca:	4b70      	ldr	r3, [pc, #448]	; (801848c <tcp_input+0x280>)
 80182cc:	22c2      	movs	r2, #194	; 0xc2
 80182ce:	4977      	ldr	r1, [pc, #476]	; (80184ac <tcp_input+0x2a0>)
 80182d0:	4870      	ldr	r0, [pc, #448]	; (8018494 <tcp_input+0x288>)
 80182d2:	f004 fb71 	bl	801c9b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80182d6:	2114      	movs	r1, #20
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f7fe f8e5 	bl	80164a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	895a      	ldrh	r2, [r3, #10]
 80182e2:	4b71      	ldr	r3, [pc, #452]	; (80184a8 <tcp_input+0x29c>)
 80182e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80182e6:	4b6e      	ldr	r3, [pc, #440]	; (80184a0 <tcp_input+0x294>)
 80182e8:	881a      	ldrh	r2, [r3, #0]
 80182ea:	4b6f      	ldr	r3, [pc, #444]	; (80184a8 <tcp_input+0x29c>)
 80182ec:	881b      	ldrh	r3, [r3, #0]
 80182ee:	1ad3      	subs	r3, r2, r3
 80182f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80182f2:	4b6d      	ldr	r3, [pc, #436]	; (80184a8 <tcp_input+0x29c>)
 80182f4:	881b      	ldrh	r3, [r3, #0]
 80182f6:	4619      	mov	r1, r3
 80182f8:	6878      	ldr	r0, [r7, #4]
 80182fa:	f7fe f8d5 	bl	80164a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	895b      	ldrh	r3, [r3, #10]
 8018304:	8a3a      	ldrh	r2, [r7, #16]
 8018306:	429a      	cmp	r2, r3
 8018308:	f200 835f 	bhi.w	80189ca <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	685b      	ldr	r3, [r3, #4]
 8018312:	4a64      	ldr	r2, [pc, #400]	; (80184a4 <tcp_input+0x298>)
 8018314:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	8a3a      	ldrh	r2, [r7, #16]
 801831c:	4611      	mov	r1, r2
 801831e:	4618      	mov	r0, r3
 8018320:	f7fe f8c2 	bl	80164a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	891a      	ldrh	r2, [r3, #8]
 8018328:	8a3b      	ldrh	r3, [r7, #16]
 801832a:	1ad3      	subs	r3, r2, r3
 801832c:	b29a      	uxth	r2, r3
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	895b      	ldrh	r3, [r3, #10]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d005      	beq.n	8018346 <tcp_input+0x13a>
 801833a:	4b54      	ldr	r3, [pc, #336]	; (801848c <tcp_input+0x280>)
 801833c:	22df      	movs	r2, #223	; 0xdf
 801833e:	495c      	ldr	r1, [pc, #368]	; (80184b0 <tcp_input+0x2a4>)
 8018340:	4854      	ldr	r0, [pc, #336]	; (8018494 <tcp_input+0x288>)
 8018342:	f004 fb39 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	891a      	ldrh	r2, [r3, #8]
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	891b      	ldrh	r3, [r3, #8]
 8018350:	429a      	cmp	r2, r3
 8018352:	d005      	beq.n	8018360 <tcp_input+0x154>
 8018354:	4b4d      	ldr	r3, [pc, #308]	; (801848c <tcp_input+0x280>)
 8018356:	22e0      	movs	r2, #224	; 0xe0
 8018358:	4956      	ldr	r1, [pc, #344]	; (80184b4 <tcp_input+0x2a8>)
 801835a:	484e      	ldr	r0, [pc, #312]	; (8018494 <tcp_input+0x288>)
 801835c:	f004 fb2c 	bl	801c9b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8018360:	4b4d      	ldr	r3, [pc, #308]	; (8018498 <tcp_input+0x28c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	881b      	ldrh	r3, [r3, #0]
 8018366:	b29a      	uxth	r2, r3
 8018368:	4b4b      	ldr	r3, [pc, #300]	; (8018498 <tcp_input+0x28c>)
 801836a:	681c      	ldr	r4, [r3, #0]
 801836c:	4610      	mov	r0, r2
 801836e:	f7f8 fc78 	bl	8010c62 <lwip_htons>
 8018372:	4603      	mov	r3, r0
 8018374:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8018376:	4b48      	ldr	r3, [pc, #288]	; (8018498 <tcp_input+0x28c>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	885b      	ldrh	r3, [r3, #2]
 801837c:	b29a      	uxth	r2, r3
 801837e:	4b46      	ldr	r3, [pc, #280]	; (8018498 <tcp_input+0x28c>)
 8018380:	681c      	ldr	r4, [r3, #0]
 8018382:	4610      	mov	r0, r2
 8018384:	f7f8 fc6d 	bl	8010c62 <lwip_htons>
 8018388:	4603      	mov	r3, r0
 801838a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801838c:	4b42      	ldr	r3, [pc, #264]	; (8018498 <tcp_input+0x28c>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	685a      	ldr	r2, [r3, #4]
 8018392:	4b41      	ldr	r3, [pc, #260]	; (8018498 <tcp_input+0x28c>)
 8018394:	681c      	ldr	r4, [r3, #0]
 8018396:	4610      	mov	r0, r2
 8018398:	f7f8 fc78 	bl	8010c8c <lwip_htonl>
 801839c:	4603      	mov	r3, r0
 801839e:	6063      	str	r3, [r4, #4]
 80183a0:	6863      	ldr	r3, [r4, #4]
 80183a2:	4a45      	ldr	r2, [pc, #276]	; (80184b8 <tcp_input+0x2ac>)
 80183a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80183a6:	4b3c      	ldr	r3, [pc, #240]	; (8018498 <tcp_input+0x28c>)
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	689a      	ldr	r2, [r3, #8]
 80183ac:	4b3a      	ldr	r3, [pc, #232]	; (8018498 <tcp_input+0x28c>)
 80183ae:	681c      	ldr	r4, [r3, #0]
 80183b0:	4610      	mov	r0, r2
 80183b2:	f7f8 fc6b 	bl	8010c8c <lwip_htonl>
 80183b6:	4603      	mov	r3, r0
 80183b8:	60a3      	str	r3, [r4, #8]
 80183ba:	68a3      	ldr	r3, [r4, #8]
 80183bc:	4a3f      	ldr	r2, [pc, #252]	; (80184bc <tcp_input+0x2b0>)
 80183be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80183c0:	4b35      	ldr	r3, [pc, #212]	; (8018498 <tcp_input+0x28c>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	89db      	ldrh	r3, [r3, #14]
 80183c6:	b29a      	uxth	r2, r3
 80183c8:	4b33      	ldr	r3, [pc, #204]	; (8018498 <tcp_input+0x28c>)
 80183ca:	681c      	ldr	r4, [r3, #0]
 80183cc:	4610      	mov	r0, r2
 80183ce:	f7f8 fc48 	bl	8010c62 <lwip_htons>
 80183d2:	4603      	mov	r3, r0
 80183d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80183d6:	4b30      	ldr	r3, [pc, #192]	; (8018498 <tcp_input+0x28c>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	899b      	ldrh	r3, [r3, #12]
 80183dc:	b29b      	uxth	r3, r3
 80183de:	4618      	mov	r0, r3
 80183e0:	f7f8 fc3f 	bl	8010c62 <lwip_htons>
 80183e4:	4603      	mov	r3, r0
 80183e6:	b2db      	uxtb	r3, r3
 80183e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80183ec:	b2da      	uxtb	r2, r3
 80183ee:	4b34      	ldr	r3, [pc, #208]	; (80184c0 <tcp_input+0x2b4>)
 80183f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	891a      	ldrh	r2, [r3, #8]
 80183f6:	4b33      	ldr	r3, [pc, #204]	; (80184c4 <tcp_input+0x2b8>)
 80183f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80183fa:	4b31      	ldr	r3, [pc, #196]	; (80184c0 <tcp_input+0x2b4>)
 80183fc:	781b      	ldrb	r3, [r3, #0]
 80183fe:	f003 0303 	and.w	r3, r3, #3
 8018402:	2b00      	cmp	r3, #0
 8018404:	d00c      	beq.n	8018420 <tcp_input+0x214>
    tcplen++;
 8018406:	4b2f      	ldr	r3, [pc, #188]	; (80184c4 <tcp_input+0x2b8>)
 8018408:	881b      	ldrh	r3, [r3, #0]
 801840a:	3301      	adds	r3, #1
 801840c:	b29a      	uxth	r2, r3
 801840e:	4b2d      	ldr	r3, [pc, #180]	; (80184c4 <tcp_input+0x2b8>)
 8018410:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	891a      	ldrh	r2, [r3, #8]
 8018416:	4b2b      	ldr	r3, [pc, #172]	; (80184c4 <tcp_input+0x2b8>)
 8018418:	881b      	ldrh	r3, [r3, #0]
 801841a:	429a      	cmp	r2, r3
 801841c:	f200 82d7 	bhi.w	80189ce <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8018420:	2300      	movs	r3, #0
 8018422:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018424:	4b28      	ldr	r3, [pc, #160]	; (80184c8 <tcp_input+0x2bc>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	61fb      	str	r3, [r7, #28]
 801842a:	e09d      	b.n	8018568 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	7d1b      	ldrb	r3, [r3, #20]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d105      	bne.n	8018440 <tcp_input+0x234>
 8018434:	4b15      	ldr	r3, [pc, #84]	; (801848c <tcp_input+0x280>)
 8018436:	22fb      	movs	r2, #251	; 0xfb
 8018438:	4924      	ldr	r1, [pc, #144]	; (80184cc <tcp_input+0x2c0>)
 801843a:	4816      	ldr	r0, [pc, #88]	; (8018494 <tcp_input+0x288>)
 801843c:	f004 fabc 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	7d1b      	ldrb	r3, [r3, #20]
 8018444:	2b0a      	cmp	r3, #10
 8018446:	d105      	bne.n	8018454 <tcp_input+0x248>
 8018448:	4b10      	ldr	r3, [pc, #64]	; (801848c <tcp_input+0x280>)
 801844a:	22fc      	movs	r2, #252	; 0xfc
 801844c:	4920      	ldr	r1, [pc, #128]	; (80184d0 <tcp_input+0x2c4>)
 801844e:	4811      	ldr	r0, [pc, #68]	; (8018494 <tcp_input+0x288>)
 8018450:	f004 fab2 	bl	801c9b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8018454:	69fb      	ldr	r3, [r7, #28]
 8018456:	7d1b      	ldrb	r3, [r3, #20]
 8018458:	2b01      	cmp	r3, #1
 801845a:	d105      	bne.n	8018468 <tcp_input+0x25c>
 801845c:	4b0b      	ldr	r3, [pc, #44]	; (801848c <tcp_input+0x280>)
 801845e:	22fd      	movs	r2, #253	; 0xfd
 8018460:	491c      	ldr	r1, [pc, #112]	; (80184d4 <tcp_input+0x2c8>)
 8018462:	480c      	ldr	r0, [pc, #48]	; (8018494 <tcp_input+0x288>)
 8018464:	f004 faa8 	bl	801c9b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	7a1b      	ldrb	r3, [r3, #8]
 801846c:	2b00      	cmp	r3, #0
 801846e:	d033      	beq.n	80184d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018470:	69fb      	ldr	r3, [r7, #28]
 8018472:	7a1a      	ldrb	r2, [r3, #8]
 8018474:	4b09      	ldr	r3, [pc, #36]	; (801849c <tcp_input+0x290>)
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801847c:	3301      	adds	r3, #1
 801847e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018480:	429a      	cmp	r2, r3
 8018482:	d029      	beq.n	80184d8 <tcp_input+0x2cc>
      prev = pcb;
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	61bb      	str	r3, [r7, #24]
      continue;
 8018488:	e06b      	b.n	8018562 <tcp_input+0x356>
 801848a:	bf00      	nop
 801848c:	0801f6fc 	.word	0x0801f6fc
 8018490:	0801f758 	.word	0x0801f758
 8018494:	0801f770 	.word	0x0801f770
 8018498:	24000234 	.word	0x24000234
 801849c:	24004774 	.word	0x24004774
 80184a0:	24000238 	.word	0x24000238
 80184a4:	2400023c 	.word	0x2400023c
 80184a8:	2400023a 	.word	0x2400023a
 80184ac:	0801f798 	.word	0x0801f798
 80184b0:	0801f7a8 	.word	0x0801f7a8
 80184b4:	0801f7b4 	.word	0x0801f7b4
 80184b8:	24000244 	.word	0x24000244
 80184bc:	24000248 	.word	0x24000248
 80184c0:	24000250 	.word	0x24000250
 80184c4:	2400024e 	.word	0x2400024e
 80184c8:	24007684 	.word	0x24007684
 80184cc:	0801f7d4 	.word	0x0801f7d4
 80184d0:	0801f7fc 	.word	0x0801f7fc
 80184d4:	0801f828 	.word	0x0801f828
    }

    if (pcb->remote_port == tcphdr->src &&
 80184d8:	69fb      	ldr	r3, [r7, #28]
 80184da:	8b1a      	ldrh	r2, [r3, #24]
 80184dc:	4b94      	ldr	r3, [pc, #592]	; (8018730 <tcp_input+0x524>)
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	881b      	ldrh	r3, [r3, #0]
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	429a      	cmp	r2, r3
 80184e6:	d13a      	bne.n	801855e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80184e8:	69fb      	ldr	r3, [r7, #28]
 80184ea:	8ada      	ldrh	r2, [r3, #22]
 80184ec:	4b90      	ldr	r3, [pc, #576]	; (8018730 <tcp_input+0x524>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	885b      	ldrh	r3, [r3, #2]
 80184f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80184f4:	429a      	cmp	r2, r3
 80184f6:	d132      	bne.n	801855e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80184f8:	69fb      	ldr	r3, [r7, #28]
 80184fa:	685a      	ldr	r2, [r3, #4]
 80184fc:	4b8d      	ldr	r3, [pc, #564]	; (8018734 <tcp_input+0x528>)
 80184fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8018500:	429a      	cmp	r2, r3
 8018502:	d12c      	bne.n	801855e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8018504:	69fb      	ldr	r3, [r7, #28]
 8018506:	681a      	ldr	r2, [r3, #0]
 8018508:	4b8a      	ldr	r3, [pc, #552]	; (8018734 <tcp_input+0x528>)
 801850a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801850c:	429a      	cmp	r2, r3
 801850e:	d126      	bne.n	801855e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8018510:	69fb      	ldr	r3, [r7, #28]
 8018512:	68db      	ldr	r3, [r3, #12]
 8018514:	69fa      	ldr	r2, [r7, #28]
 8018516:	429a      	cmp	r2, r3
 8018518:	d106      	bne.n	8018528 <tcp_input+0x31c>
 801851a:	4b87      	ldr	r3, [pc, #540]	; (8018738 <tcp_input+0x52c>)
 801851c:	f240 120d 	movw	r2, #269	; 0x10d
 8018520:	4986      	ldr	r1, [pc, #536]	; (801873c <tcp_input+0x530>)
 8018522:	4887      	ldr	r0, [pc, #540]	; (8018740 <tcp_input+0x534>)
 8018524:	f004 fa48 	bl	801c9b8 <iprintf>
      if (prev != NULL) {
 8018528:	69bb      	ldr	r3, [r7, #24]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d00a      	beq.n	8018544 <tcp_input+0x338>
        prev->next = pcb->next;
 801852e:	69fb      	ldr	r3, [r7, #28]
 8018530:	68da      	ldr	r2, [r3, #12]
 8018532:	69bb      	ldr	r3, [r7, #24]
 8018534:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8018536:	4b83      	ldr	r3, [pc, #524]	; (8018744 <tcp_input+0x538>)
 8018538:	681a      	ldr	r2, [r3, #0]
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801853e:	4a81      	ldr	r2, [pc, #516]	; (8018744 <tcp_input+0x538>)
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8018544:	69fb      	ldr	r3, [r7, #28]
 8018546:	68db      	ldr	r3, [r3, #12]
 8018548:	69fa      	ldr	r2, [r7, #28]
 801854a:	429a      	cmp	r2, r3
 801854c:	d111      	bne.n	8018572 <tcp_input+0x366>
 801854e:	4b7a      	ldr	r3, [pc, #488]	; (8018738 <tcp_input+0x52c>)
 8018550:	f240 1215 	movw	r2, #277	; 0x115
 8018554:	497c      	ldr	r1, [pc, #496]	; (8018748 <tcp_input+0x53c>)
 8018556:	487a      	ldr	r0, [pc, #488]	; (8018740 <tcp_input+0x534>)
 8018558:	f004 fa2e 	bl	801c9b8 <iprintf>
      break;
 801855c:	e009      	b.n	8018572 <tcp_input+0x366>
    }
    prev = pcb;
 801855e:	69fb      	ldr	r3, [r7, #28]
 8018560:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018562:	69fb      	ldr	r3, [r7, #28]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	61fb      	str	r3, [r7, #28]
 8018568:	69fb      	ldr	r3, [r7, #28]
 801856a:	2b00      	cmp	r3, #0
 801856c:	f47f af5e 	bne.w	801842c <tcp_input+0x220>
 8018570:	e000      	b.n	8018574 <tcp_input+0x368>
      break;
 8018572:	bf00      	nop
  }

  if (pcb == NULL) {
 8018574:	69fb      	ldr	r3, [r7, #28]
 8018576:	2b00      	cmp	r3, #0
 8018578:	f040 8095 	bne.w	80186a6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801857c:	4b73      	ldr	r3, [pc, #460]	; (801874c <tcp_input+0x540>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	61fb      	str	r3, [r7, #28]
 8018582:	e03f      	b.n	8018604 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018584:	69fb      	ldr	r3, [r7, #28]
 8018586:	7d1b      	ldrb	r3, [r3, #20]
 8018588:	2b0a      	cmp	r3, #10
 801858a:	d006      	beq.n	801859a <tcp_input+0x38e>
 801858c:	4b6a      	ldr	r3, [pc, #424]	; (8018738 <tcp_input+0x52c>)
 801858e:	f240 121f 	movw	r2, #287	; 0x11f
 8018592:	496f      	ldr	r1, [pc, #444]	; (8018750 <tcp_input+0x544>)
 8018594:	486a      	ldr	r0, [pc, #424]	; (8018740 <tcp_input+0x534>)
 8018596:	f004 fa0f 	bl	801c9b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801859a:	69fb      	ldr	r3, [r7, #28]
 801859c:	7a1b      	ldrb	r3, [r3, #8]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d009      	beq.n	80185b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80185a2:	69fb      	ldr	r3, [r7, #28]
 80185a4:	7a1a      	ldrb	r2, [r3, #8]
 80185a6:	4b63      	ldr	r3, [pc, #396]	; (8018734 <tcp_input+0x528>)
 80185a8:	685b      	ldr	r3, [r3, #4]
 80185aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80185ae:	3301      	adds	r3, #1
 80185b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d122      	bne.n	80185fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	8b1a      	ldrh	r2, [r3, #24]
 80185ba:	4b5d      	ldr	r3, [pc, #372]	; (8018730 <tcp_input+0x524>)
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	881b      	ldrh	r3, [r3, #0]
 80185c0:	b29b      	uxth	r3, r3
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d11b      	bne.n	80185fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	8ada      	ldrh	r2, [r3, #22]
 80185ca:	4b59      	ldr	r3, [pc, #356]	; (8018730 <tcp_input+0x524>)
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	885b      	ldrh	r3, [r3, #2]
 80185d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80185d2:	429a      	cmp	r2, r3
 80185d4:	d113      	bne.n	80185fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	685a      	ldr	r2, [r3, #4]
 80185da:	4b56      	ldr	r3, [pc, #344]	; (8018734 <tcp_input+0x528>)
 80185dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80185de:	429a      	cmp	r2, r3
 80185e0:	d10d      	bne.n	80185fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185e2:	69fb      	ldr	r3, [r7, #28]
 80185e4:	681a      	ldr	r2, [r3, #0]
 80185e6:	4b53      	ldr	r3, [pc, #332]	; (8018734 <tcp_input+0x528>)
 80185e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80185ea:	429a      	cmp	r2, r3
 80185ec:	d107      	bne.n	80185fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80185ee:	69f8      	ldr	r0, [r7, #28]
 80185f0:	f000 fb52 	bl	8018c98 <tcp_timewait_input>
        }
        pbuf_free(p);
 80185f4:	6878      	ldr	r0, [r7, #4]
 80185f6:	f7fd ffdd 	bl	80165b4 <pbuf_free>
        return;
 80185fa:	e1ee      	b.n	80189da <tcp_input+0x7ce>
        continue;
 80185fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80185fe:	69fb      	ldr	r3, [r7, #28]
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	61fb      	str	r3, [r7, #28]
 8018604:	69fb      	ldr	r3, [r7, #28]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d1bc      	bne.n	8018584 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801860a:	2300      	movs	r3, #0
 801860c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801860e:	4b51      	ldr	r3, [pc, #324]	; (8018754 <tcp_input+0x548>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	617b      	str	r3, [r7, #20]
 8018614:	e02a      	b.n	801866c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8018616:	697b      	ldr	r3, [r7, #20]
 8018618:	7a1b      	ldrb	r3, [r3, #8]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d00c      	beq.n	8018638 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	7a1a      	ldrb	r2, [r3, #8]
 8018622:	4b44      	ldr	r3, [pc, #272]	; (8018734 <tcp_input+0x528>)
 8018624:	685b      	ldr	r3, [r3, #4]
 8018626:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801862a:	3301      	adds	r3, #1
 801862c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801862e:	429a      	cmp	r2, r3
 8018630:	d002      	beq.n	8018638 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8018632:	697b      	ldr	r3, [r7, #20]
 8018634:	61bb      	str	r3, [r7, #24]
        continue;
 8018636:	e016      	b.n	8018666 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	8ada      	ldrh	r2, [r3, #22]
 801863c:	4b3c      	ldr	r3, [pc, #240]	; (8018730 <tcp_input+0x524>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	885b      	ldrh	r3, [r3, #2]
 8018642:	b29b      	uxth	r3, r3
 8018644:	429a      	cmp	r2, r3
 8018646:	d10c      	bne.n	8018662 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	681a      	ldr	r2, [r3, #0]
 801864c:	4b39      	ldr	r3, [pc, #228]	; (8018734 <tcp_input+0x528>)
 801864e:	695b      	ldr	r3, [r3, #20]
 8018650:	429a      	cmp	r2, r3
 8018652:	d00f      	beq.n	8018674 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8018654:	697b      	ldr	r3, [r7, #20]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d00d      	beq.n	8018676 <tcp_input+0x46a>
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d009      	beq.n	8018676 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8018666:	697b      	ldr	r3, [r7, #20]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	617b      	str	r3, [r7, #20]
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d1d1      	bne.n	8018616 <tcp_input+0x40a>
 8018672:	e000      	b.n	8018676 <tcp_input+0x46a>
            break;
 8018674:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	2b00      	cmp	r3, #0
 801867a:	d014      	beq.n	80186a6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801867c:	69bb      	ldr	r3, [r7, #24]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d00a      	beq.n	8018698 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	68da      	ldr	r2, [r3, #12]
 8018686:	69bb      	ldr	r3, [r7, #24]
 8018688:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801868a:	4b32      	ldr	r3, [pc, #200]	; (8018754 <tcp_input+0x548>)
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8018692:	4a30      	ldr	r2, [pc, #192]	; (8018754 <tcp_input+0x548>)
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8018698:	6978      	ldr	r0, [r7, #20]
 801869a:	f000 f9ff 	bl	8018a9c <tcp_listen_input>
      }
      pbuf_free(p);
 801869e:	6878      	ldr	r0, [r7, #4]
 80186a0:	f7fd ff88 	bl	80165b4 <pbuf_free>
      return;
 80186a4:	e199      	b.n	80189da <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80186a6:	69fb      	ldr	r3, [r7, #28]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	f000 8160 	beq.w	801896e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80186ae:	4b2a      	ldr	r3, [pc, #168]	; (8018758 <tcp_input+0x54c>)
 80186b0:	2200      	movs	r2, #0
 80186b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	891a      	ldrh	r2, [r3, #8]
 80186b8:	4b27      	ldr	r3, [pc, #156]	; (8018758 <tcp_input+0x54c>)
 80186ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80186bc:	4a26      	ldr	r2, [pc, #152]	; (8018758 <tcp_input+0x54c>)
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80186c2:	4b1b      	ldr	r3, [pc, #108]	; (8018730 <tcp_input+0x524>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	4a24      	ldr	r2, [pc, #144]	; (8018758 <tcp_input+0x54c>)
 80186c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80186ca:	4b24      	ldr	r3, [pc, #144]	; (801875c <tcp_input+0x550>)
 80186cc:	2200      	movs	r2, #0
 80186ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80186d0:	4b23      	ldr	r3, [pc, #140]	; (8018760 <tcp_input+0x554>)
 80186d2:	2200      	movs	r2, #0
 80186d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80186d6:	4b23      	ldr	r3, [pc, #140]	; (8018764 <tcp_input+0x558>)
 80186d8:	2200      	movs	r2, #0
 80186da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80186dc:	4b22      	ldr	r3, [pc, #136]	; (8018768 <tcp_input+0x55c>)
 80186de:	781b      	ldrb	r3, [r3, #0]
 80186e0:	f003 0308 	and.w	r3, r3, #8
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d006      	beq.n	80186f6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	7b5b      	ldrb	r3, [r3, #13]
 80186ec:	f043 0301 	orr.w	r3, r3, #1
 80186f0:	b2da      	uxtb	r2, r3
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80186f6:	69fb      	ldr	r3, [r7, #28]
 80186f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d038      	beq.n	8018770 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80186fe:	69f8      	ldr	r0, [r7, #28]
 8018700:	f7ff f940 	bl	8017984 <tcp_process_refused_data>
 8018704:	4603      	mov	r3, r0
 8018706:	f113 0f0d 	cmn.w	r3, #13
 801870a:	d007      	beq.n	801871c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801870c:	69fb      	ldr	r3, [r7, #28]
 801870e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8018710:	2b00      	cmp	r3, #0
 8018712:	d02d      	beq.n	8018770 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8018714:	4b15      	ldr	r3, [pc, #84]	; (801876c <tcp_input+0x560>)
 8018716:	881b      	ldrh	r3, [r3, #0]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d029      	beq.n	8018770 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018720:	2b00      	cmp	r3, #0
 8018722:	f040 8104 	bne.w	801892e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8018726:	69f8      	ldr	r0, [r7, #28]
 8018728:	f003 f9ce 	bl	801bac8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801872c:	e0ff      	b.n	801892e <tcp_input+0x722>
 801872e:	bf00      	nop
 8018730:	24000234 	.word	0x24000234
 8018734:	24004774 	.word	0x24004774
 8018738:	0801f6fc 	.word	0x0801f6fc
 801873c:	0801f850 	.word	0x0801f850
 8018740:	0801f770 	.word	0x0801f770
 8018744:	24007684 	.word	0x24007684
 8018748:	0801f87c 	.word	0x0801f87c
 801874c:	24007694 	.word	0x24007694
 8018750:	0801f8a8 	.word	0x0801f8a8
 8018754:	2400768c 	.word	0x2400768c
 8018758:	24000224 	.word	0x24000224
 801875c:	24000254 	.word	0x24000254
 8018760:	24000251 	.word	0x24000251
 8018764:	2400024c 	.word	0x2400024c
 8018768:	24000250 	.word	0x24000250
 801876c:	2400024e 	.word	0x2400024e
      }
    }
    tcp_input_pcb = pcb;
 8018770:	4a9b      	ldr	r2, [pc, #620]	; (80189e0 <tcp_input+0x7d4>)
 8018772:	69fb      	ldr	r3, [r7, #28]
 8018774:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8018776:	69f8      	ldr	r0, [r7, #28]
 8018778:	f000 fb0a 	bl	8018d90 <tcp_process>
 801877c:	4603      	mov	r3, r0
 801877e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8018780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018784:	f113 0f0d 	cmn.w	r3, #13
 8018788:	f000 80d3 	beq.w	8018932 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801878c:	4b95      	ldr	r3, [pc, #596]	; (80189e4 <tcp_input+0x7d8>)
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	f003 0308 	and.w	r3, r3, #8
 8018794:	2b00      	cmp	r3, #0
 8018796:	d015      	beq.n	80187c4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d008      	beq.n	80187b4 <tcp_input+0x5a8>
 80187a2:	69fb      	ldr	r3, [r7, #28]
 80187a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80187a8:	69fa      	ldr	r2, [r7, #28]
 80187aa:	6912      	ldr	r2, [r2, #16]
 80187ac:	f06f 010d 	mvn.w	r1, #13
 80187b0:	4610      	mov	r0, r2
 80187b2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80187b4:	69f9      	ldr	r1, [r7, #28]
 80187b6:	488c      	ldr	r0, [pc, #560]	; (80189e8 <tcp_input+0x7dc>)
 80187b8:	f7ff fbb0 	bl	8017f1c <tcp_pcb_remove>
        tcp_free(pcb);
 80187bc:	69f8      	ldr	r0, [r7, #28]
 80187be:	f7fe f9a9 	bl	8016b14 <tcp_free>
 80187c2:	e0c1      	b.n	8018948 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80187c4:	2300      	movs	r3, #0
 80187c6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80187c8:	4b88      	ldr	r3, [pc, #544]	; (80189ec <tcp_input+0x7e0>)
 80187ca:	881b      	ldrh	r3, [r3, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d01d      	beq.n	801880c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80187d0:	4b86      	ldr	r3, [pc, #536]	; (80189ec <tcp_input+0x7e0>)
 80187d2:	881b      	ldrh	r3, [r3, #0]
 80187d4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80187d6:	69fb      	ldr	r3, [r7, #28]
 80187d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d00a      	beq.n	80187f6 <tcp_input+0x5ea>
 80187e0:	69fb      	ldr	r3, [r7, #28]
 80187e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80187e6:	69fa      	ldr	r2, [r7, #28]
 80187e8:	6910      	ldr	r0, [r2, #16]
 80187ea:	89fa      	ldrh	r2, [r7, #14]
 80187ec:	69f9      	ldr	r1, [r7, #28]
 80187ee:	4798      	blx	r3
 80187f0:	4603      	mov	r3, r0
 80187f2:	74fb      	strb	r3, [r7, #19]
 80187f4:	e001      	b.n	80187fa <tcp_input+0x5ee>
 80187f6:	2300      	movs	r3, #0
 80187f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80187fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80187fe:	f113 0f0d 	cmn.w	r3, #13
 8018802:	f000 8098 	beq.w	8018936 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8018806:	4b79      	ldr	r3, [pc, #484]	; (80189ec <tcp_input+0x7e0>)
 8018808:	2200      	movs	r2, #0
 801880a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801880c:	69f8      	ldr	r0, [r7, #28]
 801880e:	f000 f905 	bl	8018a1c <tcp_input_delayed_close>
 8018812:	4603      	mov	r3, r0
 8018814:	2b00      	cmp	r3, #0
 8018816:	f040 8090 	bne.w	801893a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801881a:	4b75      	ldr	r3, [pc, #468]	; (80189f0 <tcp_input+0x7e4>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d041      	beq.n	80188a6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8018822:	69fb      	ldr	r3, [r7, #28]
 8018824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018826:	2b00      	cmp	r3, #0
 8018828:	d006      	beq.n	8018838 <tcp_input+0x62c>
 801882a:	4b72      	ldr	r3, [pc, #456]	; (80189f4 <tcp_input+0x7e8>)
 801882c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018830:	4971      	ldr	r1, [pc, #452]	; (80189f8 <tcp_input+0x7ec>)
 8018832:	4872      	ldr	r0, [pc, #456]	; (80189fc <tcp_input+0x7f0>)
 8018834:	f004 f8c0 	bl	801c9b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8018838:	69fb      	ldr	r3, [r7, #28]
 801883a:	8b5b      	ldrh	r3, [r3, #26]
 801883c:	f003 0310 	and.w	r3, r3, #16
 8018840:	2b00      	cmp	r3, #0
 8018842:	d008      	beq.n	8018856 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8018844:	4b6a      	ldr	r3, [pc, #424]	; (80189f0 <tcp_input+0x7e4>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	4618      	mov	r0, r3
 801884a:	f7fd feb3 	bl	80165b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801884e:	69f8      	ldr	r0, [r7, #28]
 8018850:	f7fe fc40 	bl	80170d4 <tcp_abort>
            goto aborted;
 8018854:	e078      	b.n	8018948 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8018856:	69fb      	ldr	r3, [r7, #28]
 8018858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801885c:	2b00      	cmp	r3, #0
 801885e:	d00c      	beq.n	801887a <tcp_input+0x66e>
 8018860:	69fb      	ldr	r3, [r7, #28]
 8018862:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018866:	69fb      	ldr	r3, [r7, #28]
 8018868:	6918      	ldr	r0, [r3, #16]
 801886a:	4b61      	ldr	r3, [pc, #388]	; (80189f0 <tcp_input+0x7e4>)
 801886c:	681a      	ldr	r2, [r3, #0]
 801886e:	2300      	movs	r3, #0
 8018870:	69f9      	ldr	r1, [r7, #28]
 8018872:	47a0      	blx	r4
 8018874:	4603      	mov	r3, r0
 8018876:	74fb      	strb	r3, [r7, #19]
 8018878:	e008      	b.n	801888c <tcp_input+0x680>
 801887a:	4b5d      	ldr	r3, [pc, #372]	; (80189f0 <tcp_input+0x7e4>)
 801887c:	681a      	ldr	r2, [r3, #0]
 801887e:	2300      	movs	r3, #0
 8018880:	69f9      	ldr	r1, [r7, #28]
 8018882:	2000      	movs	r0, #0
 8018884:	f7ff f952 	bl	8017b2c <tcp_recv_null>
 8018888:	4603      	mov	r3, r0
 801888a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801888c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018890:	f113 0f0d 	cmn.w	r3, #13
 8018894:	d053      	beq.n	801893e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8018896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d003      	beq.n	80188a6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801889e:	4b54      	ldr	r3, [pc, #336]	; (80189f0 <tcp_input+0x7e4>)
 80188a0:	681a      	ldr	r2, [r3, #0]
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80188a6:	4b4f      	ldr	r3, [pc, #316]	; (80189e4 <tcp_input+0x7d8>)
 80188a8:	781b      	ldrb	r3, [r3, #0]
 80188aa:	f003 0320 	and.w	r3, r3, #32
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d030      	beq.n	8018914 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80188b2:	69fb      	ldr	r3, [r7, #28]
 80188b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d009      	beq.n	80188ce <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80188ba:	69fb      	ldr	r3, [r7, #28]
 80188bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188be:	7b5a      	ldrb	r2, [r3, #13]
 80188c0:	69fb      	ldr	r3, [r7, #28]
 80188c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80188c4:	f042 0220 	orr.w	r2, r2, #32
 80188c8:	b2d2      	uxtb	r2, r2
 80188ca:	735a      	strb	r2, [r3, #13]
 80188cc:	e022      	b.n	8018914 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80188ce:	69fb      	ldr	r3, [r7, #28]
 80188d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80188d6:	d005      	beq.n	80188e4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80188d8:	69fb      	ldr	r3, [r7, #28]
 80188da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80188dc:	3301      	adds	r3, #1
 80188de:	b29a      	uxth	r2, r3
 80188e0:	69fb      	ldr	r3, [r7, #28]
 80188e2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d00b      	beq.n	8018906 <tcp_input+0x6fa>
 80188ee:	69fb      	ldr	r3, [r7, #28]
 80188f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80188f4:	69fb      	ldr	r3, [r7, #28]
 80188f6:	6918      	ldr	r0, [r3, #16]
 80188f8:	2300      	movs	r3, #0
 80188fa:	2200      	movs	r2, #0
 80188fc:	69f9      	ldr	r1, [r7, #28]
 80188fe:	47a0      	blx	r4
 8018900:	4603      	mov	r3, r0
 8018902:	74fb      	strb	r3, [r7, #19]
 8018904:	e001      	b.n	801890a <tcp_input+0x6fe>
 8018906:	2300      	movs	r3, #0
 8018908:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801890a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801890e:	f113 0f0d 	cmn.w	r3, #13
 8018912:	d016      	beq.n	8018942 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8018914:	4b32      	ldr	r3, [pc, #200]	; (80189e0 <tcp_input+0x7d4>)
 8018916:	2200      	movs	r2, #0
 8018918:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801891a:	69f8      	ldr	r0, [r7, #28]
 801891c:	f000 f87e 	bl	8018a1c <tcp_input_delayed_close>
 8018920:	4603      	mov	r3, r0
 8018922:	2b00      	cmp	r3, #0
 8018924:	d10f      	bne.n	8018946 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8018926:	69f8      	ldr	r0, [r7, #28]
 8018928:	f002 fab6 	bl	801ae98 <tcp_output>
 801892c:	e00c      	b.n	8018948 <tcp_input+0x73c>
        goto aborted;
 801892e:	bf00      	nop
 8018930:	e00a      	b.n	8018948 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8018932:	bf00      	nop
 8018934:	e008      	b.n	8018948 <tcp_input+0x73c>
              goto aborted;
 8018936:	bf00      	nop
 8018938:	e006      	b.n	8018948 <tcp_input+0x73c>
          goto aborted;
 801893a:	bf00      	nop
 801893c:	e004      	b.n	8018948 <tcp_input+0x73c>
            goto aborted;
 801893e:	bf00      	nop
 8018940:	e002      	b.n	8018948 <tcp_input+0x73c>
              goto aborted;
 8018942:	bf00      	nop
 8018944:	e000      	b.n	8018948 <tcp_input+0x73c>
          goto aborted;
 8018946:	bf00      	nop
    tcp_input_pcb = NULL;
 8018948:	4b25      	ldr	r3, [pc, #148]	; (80189e0 <tcp_input+0x7d4>)
 801894a:	2200      	movs	r2, #0
 801894c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801894e:	4b28      	ldr	r3, [pc, #160]	; (80189f0 <tcp_input+0x7e4>)
 8018950:	2200      	movs	r2, #0
 8018952:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8018954:	4b2a      	ldr	r3, [pc, #168]	; (8018a00 <tcp_input+0x7f4>)
 8018956:	685b      	ldr	r3, [r3, #4]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d03d      	beq.n	80189d8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801895c:	4b28      	ldr	r3, [pc, #160]	; (8018a00 <tcp_input+0x7f4>)
 801895e:	685b      	ldr	r3, [r3, #4]
 8018960:	4618      	mov	r0, r3
 8018962:	f7fd fe27 	bl	80165b4 <pbuf_free>
      inseg.p = NULL;
 8018966:	4b26      	ldr	r3, [pc, #152]	; (8018a00 <tcp_input+0x7f4>)
 8018968:	2200      	movs	r2, #0
 801896a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801896c:	e034      	b.n	80189d8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801896e:	4b25      	ldr	r3, [pc, #148]	; (8018a04 <tcp_input+0x7f8>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	899b      	ldrh	r3, [r3, #12]
 8018974:	b29b      	uxth	r3, r3
 8018976:	4618      	mov	r0, r3
 8018978:	f7f8 f973 	bl	8010c62 <lwip_htons>
 801897c:	4603      	mov	r3, r0
 801897e:	b2db      	uxtb	r3, r3
 8018980:	f003 0304 	and.w	r3, r3, #4
 8018984:	2b00      	cmp	r3, #0
 8018986:	d118      	bne.n	80189ba <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018988:	4b1f      	ldr	r3, [pc, #124]	; (8018a08 <tcp_input+0x7fc>)
 801898a:	6819      	ldr	r1, [r3, #0]
 801898c:	4b1f      	ldr	r3, [pc, #124]	; (8018a0c <tcp_input+0x800>)
 801898e:	881b      	ldrh	r3, [r3, #0]
 8018990:	461a      	mov	r2, r3
 8018992:	4b1f      	ldr	r3, [pc, #124]	; (8018a10 <tcp_input+0x804>)
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018998:	4b1a      	ldr	r3, [pc, #104]	; (8018a04 <tcp_input+0x7f8>)
 801899a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801899c:	885b      	ldrh	r3, [r3, #2]
 801899e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80189a0:	4a18      	ldr	r2, [pc, #96]	; (8018a04 <tcp_input+0x7f8>)
 80189a2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80189a4:	8812      	ldrh	r2, [r2, #0]
 80189a6:	b292      	uxth	r2, r2
 80189a8:	9202      	str	r2, [sp, #8]
 80189aa:	9301      	str	r3, [sp, #4]
 80189ac:	4b19      	ldr	r3, [pc, #100]	; (8018a14 <tcp_input+0x808>)
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	4b19      	ldr	r3, [pc, #100]	; (8018a18 <tcp_input+0x80c>)
 80189b2:	4602      	mov	r2, r0
 80189b4:	2000      	movs	r0, #0
 80189b6:	f003 f835 	bl	801ba24 <tcp_rst>
    pbuf_free(p);
 80189ba:	6878      	ldr	r0, [r7, #4]
 80189bc:	f7fd fdfa 	bl	80165b4 <pbuf_free>
  return;
 80189c0:	e00a      	b.n	80189d8 <tcp_input+0x7cc>
    goto dropped;
 80189c2:	bf00      	nop
 80189c4:	e004      	b.n	80189d0 <tcp_input+0x7c4>
dropped:
 80189c6:	bf00      	nop
 80189c8:	e002      	b.n	80189d0 <tcp_input+0x7c4>
      goto dropped;
 80189ca:	bf00      	nop
 80189cc:	e000      	b.n	80189d0 <tcp_input+0x7c4>
      goto dropped;
 80189ce:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f7fd fdef 	bl	80165b4 <pbuf_free>
 80189d6:	e000      	b.n	80189da <tcp_input+0x7ce>
  return;
 80189d8:	bf00      	nop
}
 80189da:	3724      	adds	r7, #36	; 0x24
 80189dc:	46bd      	mov	sp, r7
 80189de:	bd90      	pop	{r4, r7, pc}
 80189e0:	24007698 	.word	0x24007698
 80189e4:	24000251 	.word	0x24000251
 80189e8:	24007684 	.word	0x24007684
 80189ec:	2400024c 	.word	0x2400024c
 80189f0:	24000254 	.word	0x24000254
 80189f4:	0801f6fc 	.word	0x0801f6fc
 80189f8:	0801f8d8 	.word	0x0801f8d8
 80189fc:	0801f770 	.word	0x0801f770
 8018a00:	24000224 	.word	0x24000224
 8018a04:	24000234 	.word	0x24000234
 8018a08:	24000248 	.word	0x24000248
 8018a0c:	2400024e 	.word	0x2400024e
 8018a10:	24000244 	.word	0x24000244
 8018a14:	24004784 	.word	0x24004784
 8018a18:	24004788 	.word	0x24004788

08018a1c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8018a1c:	b580      	push	{r7, lr}
 8018a1e:	b082      	sub	sp, #8
 8018a20:	af00      	add	r7, sp, #0
 8018a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d106      	bne.n	8018a38 <tcp_input_delayed_close+0x1c>
 8018a2a:	4b17      	ldr	r3, [pc, #92]	; (8018a88 <tcp_input_delayed_close+0x6c>)
 8018a2c:	f240 225a 	movw	r2, #602	; 0x25a
 8018a30:	4916      	ldr	r1, [pc, #88]	; (8018a8c <tcp_input_delayed_close+0x70>)
 8018a32:	4817      	ldr	r0, [pc, #92]	; (8018a90 <tcp_input_delayed_close+0x74>)
 8018a34:	f003 ffc0 	bl	801c9b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8018a38:	4b16      	ldr	r3, [pc, #88]	; (8018a94 <tcp_input_delayed_close+0x78>)
 8018a3a:	781b      	ldrb	r3, [r3, #0]
 8018a3c:	f003 0310 	and.w	r3, r3, #16
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d01c      	beq.n	8018a7e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	8b5b      	ldrh	r3, [r3, #26]
 8018a48:	f003 0310 	and.w	r3, r3, #16
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d10d      	bne.n	8018a6c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d008      	beq.n	8018a6c <tcp_input_delayed_close+0x50>
 8018a5a:	687b      	ldr	r3, [r7, #4]
 8018a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018a60:	687a      	ldr	r2, [r7, #4]
 8018a62:	6912      	ldr	r2, [r2, #16]
 8018a64:	f06f 010e 	mvn.w	r1, #14
 8018a68:	4610      	mov	r0, r2
 8018a6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8018a6c:	6879      	ldr	r1, [r7, #4]
 8018a6e:	480a      	ldr	r0, [pc, #40]	; (8018a98 <tcp_input_delayed_close+0x7c>)
 8018a70:	f7ff fa54 	bl	8017f1c <tcp_pcb_remove>
    tcp_free(pcb);
 8018a74:	6878      	ldr	r0, [r7, #4]
 8018a76:	f7fe f84d 	bl	8016b14 <tcp_free>
    return 1;
 8018a7a:	2301      	movs	r3, #1
 8018a7c:	e000      	b.n	8018a80 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8018a7e:	2300      	movs	r3, #0
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3708      	adds	r7, #8
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}
 8018a88:	0801f6fc 	.word	0x0801f6fc
 8018a8c:	0801f8f4 	.word	0x0801f8f4
 8018a90:	0801f770 	.word	0x0801f770
 8018a94:	24000251 	.word	0x24000251
 8018a98:	24007684 	.word	0x24007684

08018a9c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8018a9c:	b590      	push	{r4, r7, lr}
 8018a9e:	b08b      	sub	sp, #44	; 0x2c
 8018aa0:	af04      	add	r7, sp, #16
 8018aa2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8018aa4:	4b6f      	ldr	r3, [pc, #444]	; (8018c64 <tcp_listen_input+0x1c8>)
 8018aa6:	781b      	ldrb	r3, [r3, #0]
 8018aa8:	f003 0304 	and.w	r3, r3, #4
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	f040 80d3 	bne.w	8018c58 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d106      	bne.n	8018ac6 <tcp_listen_input+0x2a>
 8018ab8:	4b6b      	ldr	r3, [pc, #428]	; (8018c68 <tcp_listen_input+0x1cc>)
 8018aba:	f240 2281 	movw	r2, #641	; 0x281
 8018abe:	496b      	ldr	r1, [pc, #428]	; (8018c6c <tcp_listen_input+0x1d0>)
 8018ac0:	486b      	ldr	r0, [pc, #428]	; (8018c70 <tcp_listen_input+0x1d4>)
 8018ac2:	f003 ff79 	bl	801c9b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8018ac6:	4b67      	ldr	r3, [pc, #412]	; (8018c64 <tcp_listen_input+0x1c8>)
 8018ac8:	781b      	ldrb	r3, [r3, #0]
 8018aca:	f003 0310 	and.w	r3, r3, #16
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d019      	beq.n	8018b06 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ad2:	4b68      	ldr	r3, [pc, #416]	; (8018c74 <tcp_listen_input+0x1d8>)
 8018ad4:	6819      	ldr	r1, [r3, #0]
 8018ad6:	4b68      	ldr	r3, [pc, #416]	; (8018c78 <tcp_listen_input+0x1dc>)
 8018ad8:	881b      	ldrh	r3, [r3, #0]
 8018ada:	461a      	mov	r2, r3
 8018adc:	4b67      	ldr	r3, [pc, #412]	; (8018c7c <tcp_listen_input+0x1e0>)
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018ae2:	4b67      	ldr	r3, [pc, #412]	; (8018c80 <tcp_listen_input+0x1e4>)
 8018ae4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018ae6:	885b      	ldrh	r3, [r3, #2]
 8018ae8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018aea:	4a65      	ldr	r2, [pc, #404]	; (8018c80 <tcp_listen_input+0x1e4>)
 8018aec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018aee:	8812      	ldrh	r2, [r2, #0]
 8018af0:	b292      	uxth	r2, r2
 8018af2:	9202      	str	r2, [sp, #8]
 8018af4:	9301      	str	r3, [sp, #4]
 8018af6:	4b63      	ldr	r3, [pc, #396]	; (8018c84 <tcp_listen_input+0x1e8>)
 8018af8:	9300      	str	r3, [sp, #0]
 8018afa:	4b63      	ldr	r3, [pc, #396]	; (8018c88 <tcp_listen_input+0x1ec>)
 8018afc:	4602      	mov	r2, r0
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f002 ff90 	bl	801ba24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8018b04:	e0aa      	b.n	8018c5c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8018b06:	4b57      	ldr	r3, [pc, #348]	; (8018c64 <tcp_listen_input+0x1c8>)
 8018b08:	781b      	ldrb	r3, [r3, #0]
 8018b0a:	f003 0302 	and.w	r3, r3, #2
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	f000 80a4 	beq.w	8018c5c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	7d5b      	ldrb	r3, [r3, #21]
 8018b18:	4618      	mov	r0, r3
 8018b1a:	f7ff f92b 	bl	8017d74 <tcp_alloc>
 8018b1e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8018b20:	697b      	ldr	r3, [r7, #20]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d111      	bne.n	8018b4a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	699b      	ldr	r3, [r3, #24]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d00a      	beq.n	8018b44 <tcp_listen_input+0xa8>
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	699b      	ldr	r3, [r3, #24]
 8018b32:	687a      	ldr	r2, [r7, #4]
 8018b34:	6910      	ldr	r0, [r2, #16]
 8018b36:	f04f 32ff 	mov.w	r2, #4294967295
 8018b3a:	2100      	movs	r1, #0
 8018b3c:	4798      	blx	r3
 8018b3e:	4603      	mov	r3, r0
 8018b40:	73bb      	strb	r3, [r7, #14]
      return;
 8018b42:	e08c      	b.n	8018c5e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8018b44:	23f0      	movs	r3, #240	; 0xf0
 8018b46:	73bb      	strb	r3, [r7, #14]
      return;
 8018b48:	e089      	b.n	8018c5e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8018b4a:	4b50      	ldr	r3, [pc, #320]	; (8018c8c <tcp_listen_input+0x1f0>)
 8018b4c:	695a      	ldr	r2, [r3, #20]
 8018b4e:	697b      	ldr	r3, [r7, #20]
 8018b50:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8018b52:	4b4e      	ldr	r3, [pc, #312]	; (8018c8c <tcp_listen_input+0x1f0>)
 8018b54:	691a      	ldr	r2, [r3, #16]
 8018b56:	697b      	ldr	r3, [r7, #20]
 8018b58:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	8ada      	ldrh	r2, [r3, #22]
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8018b62:	4b47      	ldr	r3, [pc, #284]	; (8018c80 <tcp_listen_input+0x1e4>)
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	881b      	ldrh	r3, [r3, #0]
 8018b68:	b29a      	uxth	r2, r3
 8018b6a:	697b      	ldr	r3, [r7, #20]
 8018b6c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8018b6e:	697b      	ldr	r3, [r7, #20]
 8018b70:	2203      	movs	r2, #3
 8018b72:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8018b74:	4b41      	ldr	r3, [pc, #260]	; (8018c7c <tcp_listen_input+0x1e0>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	1c5a      	adds	r2, r3, #1
 8018b7a:	697b      	ldr	r3, [r7, #20]
 8018b7c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018b82:	697b      	ldr	r3, [r7, #20]
 8018b84:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8018b86:	6978      	ldr	r0, [r7, #20]
 8018b88:	f7ff fa5c 	bl	8018044 <tcp_next_iss>
 8018b8c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8018b8e:	697b      	ldr	r3, [r7, #20]
 8018b90:	693a      	ldr	r2, [r7, #16]
 8018b92:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	693a      	ldr	r2, [r7, #16]
 8018b98:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	693a      	ldr	r2, [r7, #16]
 8018b9e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8018ba0:	697b      	ldr	r3, [r7, #20]
 8018ba2:	693a      	ldr	r2, [r7, #16]
 8018ba4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8018ba6:	4b35      	ldr	r3, [pc, #212]	; (8018c7c <tcp_listen_input+0x1e0>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	1e5a      	subs	r2, r3, #1
 8018bac:	697b      	ldr	r3, [r7, #20]
 8018bae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	691a      	ldr	r2, [r3, #16]
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8018bb8:	697b      	ldr	r3, [r7, #20]
 8018bba:	687a      	ldr	r2, [r7, #4]
 8018bbc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	7a5b      	ldrb	r3, [r3, #9]
 8018bc2:	f003 030c 	and.w	r3, r3, #12
 8018bc6:	b2da      	uxtb	r2, r3
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	7a1a      	ldrb	r2, [r3, #8]
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8018bd4:	4b2e      	ldr	r3, [pc, #184]	; (8018c90 <tcp_listen_input+0x1f4>)
 8018bd6:	681a      	ldr	r2, [r3, #0]
 8018bd8:	697b      	ldr	r3, [r7, #20]
 8018bda:	60da      	str	r2, [r3, #12]
 8018bdc:	4a2c      	ldr	r2, [pc, #176]	; (8018c90 <tcp_listen_input+0x1f4>)
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	6013      	str	r3, [r2, #0]
 8018be2:	f003 f8e1 	bl	801bda8 <tcp_timer_needed>
 8018be6:	4b2b      	ldr	r3, [pc, #172]	; (8018c94 <tcp_listen_input+0x1f8>)
 8018be8:	2201      	movs	r2, #1
 8018bea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8018bec:	6978      	ldr	r0, [r7, #20]
 8018bee:	f001 fd8f 	bl	801a710 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8018bf2:	4b23      	ldr	r3, [pc, #140]	; (8018c80 <tcp_listen_input+0x1e4>)
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	89db      	ldrh	r3, [r3, #14]
 8018bf8:	b29a      	uxth	r2, r3
 8018bfa:	697b      	ldr	r3, [r7, #20]
 8018bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8018c0c:	697b      	ldr	r3, [r7, #20]
 8018c0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018c10:	697b      	ldr	r3, [r7, #20]
 8018c12:	3304      	adds	r3, #4
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7fb f955 	bl	8013ec4 <ip4_route>
 8018c1a:	4601      	mov	r1, r0
 8018c1c:	697b      	ldr	r3, [r7, #20]
 8018c1e:	3304      	adds	r3, #4
 8018c20:	461a      	mov	r2, r3
 8018c22:	4620      	mov	r0, r4
 8018c24:	f7ff fa34 	bl	8018090 <tcp_eff_send_mss_netif>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	461a      	mov	r2, r3
 8018c2c:	697b      	ldr	r3, [r7, #20]
 8018c2e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8018c30:	2112      	movs	r1, #18
 8018c32:	6978      	ldr	r0, [r7, #20]
 8018c34:	f002 f842 	bl	801acbc <tcp_enqueue_flags>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8018c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018c40:	2b00      	cmp	r3, #0
 8018c42:	d004      	beq.n	8018c4e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8018c44:	2100      	movs	r1, #0
 8018c46:	6978      	ldr	r0, [r7, #20]
 8018c48:	f7fe f986 	bl	8016f58 <tcp_abandon>
      return;
 8018c4c:	e007      	b.n	8018c5e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8018c4e:	6978      	ldr	r0, [r7, #20]
 8018c50:	f002 f922 	bl	801ae98 <tcp_output>
  return;
 8018c54:	bf00      	nop
 8018c56:	e001      	b.n	8018c5c <tcp_listen_input+0x1c0>
    return;
 8018c58:	bf00      	nop
 8018c5a:	e000      	b.n	8018c5e <tcp_listen_input+0x1c2>
  return;
 8018c5c:	bf00      	nop
}
 8018c5e:	371c      	adds	r7, #28
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd90      	pop	{r4, r7, pc}
 8018c64:	24000250 	.word	0x24000250
 8018c68:	0801f6fc 	.word	0x0801f6fc
 8018c6c:	0801f91c 	.word	0x0801f91c
 8018c70:	0801f770 	.word	0x0801f770
 8018c74:	24000248 	.word	0x24000248
 8018c78:	2400024e 	.word	0x2400024e
 8018c7c:	24000244 	.word	0x24000244
 8018c80:	24000234 	.word	0x24000234
 8018c84:	24004784 	.word	0x24004784
 8018c88:	24004788 	.word	0x24004788
 8018c8c:	24004774 	.word	0x24004774
 8018c90:	24007684 	.word	0x24007684
 8018c94:	24007680 	.word	0x24007680

08018c98 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	b086      	sub	sp, #24
 8018c9c:	af04      	add	r7, sp, #16
 8018c9e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8018ca0:	4b30      	ldr	r3, [pc, #192]	; (8018d64 <tcp_timewait_input+0xcc>)
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	f003 0304 	and.w	r3, r3, #4
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d154      	bne.n	8018d56 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d106      	bne.n	8018cc0 <tcp_timewait_input+0x28>
 8018cb2:	4b2d      	ldr	r3, [pc, #180]	; (8018d68 <tcp_timewait_input+0xd0>)
 8018cb4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018cb8:	492c      	ldr	r1, [pc, #176]	; (8018d6c <tcp_timewait_input+0xd4>)
 8018cba:	482d      	ldr	r0, [pc, #180]	; (8018d70 <tcp_timewait_input+0xd8>)
 8018cbc:	f003 fe7c 	bl	801c9b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8018cc0:	4b28      	ldr	r3, [pc, #160]	; (8018d64 <tcp_timewait_input+0xcc>)
 8018cc2:	781b      	ldrb	r3, [r3, #0]
 8018cc4:	f003 0302 	and.w	r3, r3, #2
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d02a      	beq.n	8018d22 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018ccc:	4b29      	ldr	r3, [pc, #164]	; (8018d74 <tcp_timewait_input+0xdc>)
 8018cce:	681a      	ldr	r2, [r3, #0]
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd4:	1ad3      	subs	r3, r2, r3
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	db2d      	blt.n	8018d36 <tcp_timewait_input+0x9e>
 8018cda:	4b26      	ldr	r3, [pc, #152]	; (8018d74 <tcp_timewait_input+0xdc>)
 8018cdc:	681a      	ldr	r2, [r3, #0]
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce2:	6879      	ldr	r1, [r7, #4]
 8018ce4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ce6:	440b      	add	r3, r1
 8018ce8:	1ad3      	subs	r3, r2, r3
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	dc23      	bgt.n	8018d36 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018cee:	4b22      	ldr	r3, [pc, #136]	; (8018d78 <tcp_timewait_input+0xe0>)
 8018cf0:	6819      	ldr	r1, [r3, #0]
 8018cf2:	4b22      	ldr	r3, [pc, #136]	; (8018d7c <tcp_timewait_input+0xe4>)
 8018cf4:	881b      	ldrh	r3, [r3, #0]
 8018cf6:	461a      	mov	r2, r3
 8018cf8:	4b1e      	ldr	r3, [pc, #120]	; (8018d74 <tcp_timewait_input+0xdc>)
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018cfe:	4b20      	ldr	r3, [pc, #128]	; (8018d80 <tcp_timewait_input+0xe8>)
 8018d00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d02:	885b      	ldrh	r3, [r3, #2]
 8018d04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018d06:	4a1e      	ldr	r2, [pc, #120]	; (8018d80 <tcp_timewait_input+0xe8>)
 8018d08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018d0a:	8812      	ldrh	r2, [r2, #0]
 8018d0c:	b292      	uxth	r2, r2
 8018d0e:	9202      	str	r2, [sp, #8]
 8018d10:	9301      	str	r3, [sp, #4]
 8018d12:	4b1c      	ldr	r3, [pc, #112]	; (8018d84 <tcp_timewait_input+0xec>)
 8018d14:	9300      	str	r3, [sp, #0]
 8018d16:	4b1c      	ldr	r3, [pc, #112]	; (8018d88 <tcp_timewait_input+0xf0>)
 8018d18:	4602      	mov	r2, r0
 8018d1a:	6878      	ldr	r0, [r7, #4]
 8018d1c:	f002 fe82 	bl	801ba24 <tcp_rst>
      return;
 8018d20:	e01c      	b.n	8018d5c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8018d22:	4b10      	ldr	r3, [pc, #64]	; (8018d64 <tcp_timewait_input+0xcc>)
 8018d24:	781b      	ldrb	r3, [r3, #0]
 8018d26:	f003 0301 	and.w	r3, r3, #1
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d003      	beq.n	8018d36 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8018d2e:	4b17      	ldr	r3, [pc, #92]	; (8018d8c <tcp_timewait_input+0xf4>)
 8018d30:	681a      	ldr	r2, [r3, #0]
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8018d36:	4b11      	ldr	r3, [pc, #68]	; (8018d7c <tcp_timewait_input+0xe4>)
 8018d38:	881b      	ldrh	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d00d      	beq.n	8018d5a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	8b5b      	ldrh	r3, [r3, #26]
 8018d42:	f043 0302 	orr.w	r3, r3, #2
 8018d46:	b29a      	uxth	r2, r3
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018d4c:	6878      	ldr	r0, [r7, #4]
 8018d4e:	f002 f8a3 	bl	801ae98 <tcp_output>
  }
  return;
 8018d52:	bf00      	nop
 8018d54:	e001      	b.n	8018d5a <tcp_timewait_input+0xc2>
    return;
 8018d56:	bf00      	nop
 8018d58:	e000      	b.n	8018d5c <tcp_timewait_input+0xc4>
  return;
 8018d5a:	bf00      	nop
}
 8018d5c:	3708      	adds	r7, #8
 8018d5e:	46bd      	mov	sp, r7
 8018d60:	bd80      	pop	{r7, pc}
 8018d62:	bf00      	nop
 8018d64:	24000250 	.word	0x24000250
 8018d68:	0801f6fc 	.word	0x0801f6fc
 8018d6c:	0801f93c 	.word	0x0801f93c
 8018d70:	0801f770 	.word	0x0801f770
 8018d74:	24000244 	.word	0x24000244
 8018d78:	24000248 	.word	0x24000248
 8018d7c:	2400024e 	.word	0x2400024e
 8018d80:	24000234 	.word	0x24000234
 8018d84:	24004784 	.word	0x24004784
 8018d88:	24004788 	.word	0x24004788
 8018d8c:	24007688 	.word	0x24007688

08018d90 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018d90:	b590      	push	{r4, r7, lr}
 8018d92:	b08d      	sub	sp, #52	; 0x34
 8018d94:	af04      	add	r7, sp, #16
 8018d96:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018d98:	2300      	movs	r3, #0
 8018d9a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d106      	bne.n	8018db4 <tcp_process+0x24>
 8018da6:	4ba5      	ldr	r3, [pc, #660]	; (801903c <tcp_process+0x2ac>)
 8018da8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8018dac:	49a4      	ldr	r1, [pc, #656]	; (8019040 <tcp_process+0x2b0>)
 8018dae:	48a5      	ldr	r0, [pc, #660]	; (8019044 <tcp_process+0x2b4>)
 8018db0:	f003 fe02 	bl	801c9b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8018db4:	4ba4      	ldr	r3, [pc, #656]	; (8019048 <tcp_process+0x2b8>)
 8018db6:	781b      	ldrb	r3, [r3, #0]
 8018db8:	f003 0304 	and.w	r3, r3, #4
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d04e      	beq.n	8018e5e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	7d1b      	ldrb	r3, [r3, #20]
 8018dc4:	2b02      	cmp	r3, #2
 8018dc6:	d108      	bne.n	8018dda <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018dcc:	4b9f      	ldr	r3, [pc, #636]	; (801904c <tcp_process+0x2bc>)
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	429a      	cmp	r2, r3
 8018dd2:	d123      	bne.n	8018e1c <tcp_process+0x8c>
        acceptable = 1;
 8018dd4:	2301      	movs	r3, #1
 8018dd6:	76fb      	strb	r3, [r7, #27]
 8018dd8:	e020      	b.n	8018e1c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018dde:	4b9c      	ldr	r3, [pc, #624]	; (8019050 <tcp_process+0x2c0>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	429a      	cmp	r2, r3
 8018de4:	d102      	bne.n	8018dec <tcp_process+0x5c>
        acceptable = 1;
 8018de6:	2301      	movs	r3, #1
 8018de8:	76fb      	strb	r3, [r7, #27]
 8018dea:	e017      	b.n	8018e1c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018dec:	4b98      	ldr	r3, [pc, #608]	; (8019050 <tcp_process+0x2c0>)
 8018dee:	681a      	ldr	r2, [r3, #0]
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df4:	1ad3      	subs	r3, r2, r3
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	db10      	blt.n	8018e1c <tcp_process+0x8c>
 8018dfa:	4b95      	ldr	r3, [pc, #596]	; (8019050 <tcp_process+0x2c0>)
 8018dfc:	681a      	ldr	r2, [r3, #0]
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e02:	6879      	ldr	r1, [r7, #4]
 8018e04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018e06:	440b      	add	r3, r1
 8018e08:	1ad3      	subs	r3, r2, r3
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	dc06      	bgt.n	8018e1c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	8b5b      	ldrh	r3, [r3, #26]
 8018e12:	f043 0302 	orr.w	r3, r3, #2
 8018e16:	b29a      	uxth	r2, r3
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8018e1c:	7efb      	ldrb	r3, [r7, #27]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d01b      	beq.n	8018e5a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	7d1b      	ldrb	r3, [r3, #20]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d106      	bne.n	8018e38 <tcp_process+0xa8>
 8018e2a:	4b84      	ldr	r3, [pc, #528]	; (801903c <tcp_process+0x2ac>)
 8018e2c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8018e30:	4988      	ldr	r1, [pc, #544]	; (8019054 <tcp_process+0x2c4>)
 8018e32:	4884      	ldr	r0, [pc, #528]	; (8019044 <tcp_process+0x2b4>)
 8018e34:	f003 fdc0 	bl	801c9b8 <iprintf>
      recv_flags |= TF_RESET;
 8018e38:	4b87      	ldr	r3, [pc, #540]	; (8019058 <tcp_process+0x2c8>)
 8018e3a:	781b      	ldrb	r3, [r3, #0]
 8018e3c:	f043 0308 	orr.w	r3, r3, #8
 8018e40:	b2da      	uxtb	r2, r3
 8018e42:	4b85      	ldr	r3, [pc, #532]	; (8019058 <tcp_process+0x2c8>)
 8018e44:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	8b5b      	ldrh	r3, [r3, #26]
 8018e4a:	f023 0301 	bic.w	r3, r3, #1
 8018e4e:	b29a      	uxth	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8018e54:	f06f 030d 	mvn.w	r3, #13
 8018e58:	e37a      	b.n	8019550 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	e378      	b.n	8019550 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018e5e:	4b7a      	ldr	r3, [pc, #488]	; (8019048 <tcp_process+0x2b8>)
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	f003 0302 	and.w	r3, r3, #2
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d010      	beq.n	8018e8c <tcp_process+0xfc>
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	7d1b      	ldrb	r3, [r3, #20]
 8018e6e:	2b02      	cmp	r3, #2
 8018e70:	d00c      	beq.n	8018e8c <tcp_process+0xfc>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	7d1b      	ldrb	r3, [r3, #20]
 8018e76:	2b03      	cmp	r3, #3
 8018e78:	d008      	beq.n	8018e8c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	8b5b      	ldrh	r3, [r3, #26]
 8018e7e:	f043 0302 	orr.w	r3, r3, #2
 8018e82:	b29a      	uxth	r2, r3
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018e88:	2300      	movs	r3, #0
 8018e8a:	e361      	b.n	8019550 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	8b5b      	ldrh	r3, [r3, #26]
 8018e90:	f003 0310 	and.w	r3, r3, #16
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d103      	bne.n	8018ea0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018e98:	4b70      	ldr	r3, [pc, #448]	; (801905c <tcp_process+0x2cc>)
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2200      	movs	r2, #0
 8018eac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f001 fc2d 	bl	801a710 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	7d1b      	ldrb	r3, [r3, #20]
 8018eba:	3b02      	subs	r3, #2
 8018ebc:	2b07      	cmp	r3, #7
 8018ebe:	f200 8337 	bhi.w	8019530 <tcp_process+0x7a0>
 8018ec2:	a201      	add	r2, pc, #4	; (adr r2, 8018ec8 <tcp_process+0x138>)
 8018ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ec8:	08018ee9 	.word	0x08018ee9
 8018ecc:	08019119 	.word	0x08019119
 8018ed0:	08019291 	.word	0x08019291
 8018ed4:	080192bb 	.word	0x080192bb
 8018ed8:	080193df 	.word	0x080193df
 8018edc:	08019291 	.word	0x08019291
 8018ee0:	0801946b 	.word	0x0801946b
 8018ee4:	080194fb 	.word	0x080194fb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018ee8:	4b57      	ldr	r3, [pc, #348]	; (8019048 <tcp_process+0x2b8>)
 8018eea:	781b      	ldrb	r3, [r3, #0]
 8018eec:	f003 0310 	and.w	r3, r3, #16
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	f000 80e4 	beq.w	80190be <tcp_process+0x32e>
 8018ef6:	4b54      	ldr	r3, [pc, #336]	; (8019048 <tcp_process+0x2b8>)
 8018ef8:	781b      	ldrb	r3, [r3, #0]
 8018efa:	f003 0302 	and.w	r3, r3, #2
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f000 80dd 	beq.w	80190be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018f08:	1c5a      	adds	r2, r3, #1
 8018f0a:	4b50      	ldr	r3, [pc, #320]	; (801904c <tcp_process+0x2bc>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	f040 80d5 	bne.w	80190be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8018f14:	4b4e      	ldr	r3, [pc, #312]	; (8019050 <tcp_process+0x2c0>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	1c5a      	adds	r2, r3, #1
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8018f26:	4b49      	ldr	r3, [pc, #292]	; (801904c <tcp_process+0x2bc>)
 8018f28:	681a      	ldr	r2, [r3, #0]
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8018f2e:	4b4c      	ldr	r3, [pc, #304]	; (8019060 <tcp_process+0x2d0>)
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	89db      	ldrh	r3, [r3, #14]
 8018f34:	b29a      	uxth	r2, r3
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8018f48:	4b41      	ldr	r3, [pc, #260]	; (8019050 <tcp_process+0x2c0>)
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	1e5a      	subs	r2, r3, #1
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2204      	movs	r2, #4
 8018f56:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	3304      	adds	r3, #4
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7fa ffaf 	bl	8013ec4 <ip4_route>
 8018f66:	4601      	mov	r1, r0
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	3304      	adds	r3, #4
 8018f6c:	461a      	mov	r2, r3
 8018f6e:	4620      	mov	r0, r4
 8018f70:	f7ff f88e 	bl	8018090 <tcp_eff_send_mss_netif>
 8018f74:	4603      	mov	r3, r0
 8018f76:	461a      	mov	r2, r3
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f80:	009a      	lsls	r2, r3, #2
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f86:	005b      	lsls	r3, r3, #1
 8018f88:	f241 111c 	movw	r1, #4380	; 0x111c
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	bf38      	it	cc
 8018f90:	460b      	movcc	r3, r1
 8018f92:	429a      	cmp	r2, r3
 8018f94:	d204      	bcs.n	8018fa0 <tcp_process+0x210>
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018f9a:	009b      	lsls	r3, r3, #2
 8018f9c:	b29b      	uxth	r3, r3
 8018f9e:	e00d      	b.n	8018fbc <tcp_process+0x22c>
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fa4:	005b      	lsls	r3, r3, #1
 8018fa6:	f241 121c 	movw	r2, #4380	; 0x111c
 8018faa:	4293      	cmp	r3, r2
 8018fac:	d904      	bls.n	8018fb8 <tcp_process+0x228>
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fb2:	005b      	lsls	r3, r3, #1
 8018fb4:	b29b      	uxth	r3, r3
 8018fb6:	e001      	b.n	8018fbc <tcp_process+0x22c>
 8018fb8:	f241 131c 	movw	r3, #4380	; 0x111c
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d106      	bne.n	8018fda <tcp_process+0x24a>
 8018fcc:	4b1b      	ldr	r3, [pc, #108]	; (801903c <tcp_process+0x2ac>)
 8018fce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8018fd2:	4924      	ldr	r1, [pc, #144]	; (8019064 <tcp_process+0x2d4>)
 8018fd4:	481b      	ldr	r0, [pc, #108]	; (8019044 <tcp_process+0x2b4>)
 8018fd6:	f003 fcef 	bl	801c9b8 <iprintf>
        --pcb->snd_queuelen;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018fe0:	3b01      	subs	r3, #1
 8018fe2:	b29a      	uxth	r2, r3
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018fea:	687b      	ldr	r3, [r7, #4]
 8018fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8018ff0:	69fb      	ldr	r3, [r7, #28]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d111      	bne.n	801901a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ffa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8018ffc:	69fb      	ldr	r3, [r7, #28]
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d106      	bne.n	8019010 <tcp_process+0x280>
 8019002:	4b0e      	ldr	r3, [pc, #56]	; (801903c <tcp_process+0x2ac>)
 8019004:	f44f 725d 	mov.w	r2, #884	; 0x374
 8019008:	4917      	ldr	r1, [pc, #92]	; (8019068 <tcp_process+0x2d8>)
 801900a:	480e      	ldr	r0, [pc, #56]	; (8019044 <tcp_process+0x2b4>)
 801900c:	f003 fcd4 	bl	801c9b8 <iprintf>
          pcb->unsent = rseg->next;
 8019010:	69fb      	ldr	r3, [r7, #28]
 8019012:	681a      	ldr	r2, [r3, #0]
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	66da      	str	r2, [r3, #108]	; 0x6c
 8019018:	e003      	b.n	8019022 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801901a:	69fb      	ldr	r3, [r7, #28]
 801901c:	681a      	ldr	r2, [r3, #0]
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8019022:	69f8      	ldr	r0, [r7, #28]
 8019024:	f7fe fd3e 	bl	8017aa4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801902c:	2b00      	cmp	r3, #0
 801902e:	d11d      	bne.n	801906c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019036:	861a      	strh	r2, [r3, #48]	; 0x30
 8019038:	e01f      	b.n	801907a <tcp_process+0x2ea>
 801903a:	bf00      	nop
 801903c:	0801f6fc 	.word	0x0801f6fc
 8019040:	0801f95c 	.word	0x0801f95c
 8019044:	0801f770 	.word	0x0801f770
 8019048:	24000250 	.word	0x24000250
 801904c:	24000248 	.word	0x24000248
 8019050:	24000244 	.word	0x24000244
 8019054:	0801f978 	.word	0x0801f978
 8019058:	24000251 	.word	0x24000251
 801905c:	24007688 	.word	0x24007688
 8019060:	24000234 	.word	0x24000234
 8019064:	0801f998 	.word	0x0801f998
 8019068:	0801f9b0 	.word	0x0801f9b0
        } else {
          pcb->rtime = 0;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	2200      	movs	r2, #0
 8019070:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	2200      	movs	r2, #0
 8019076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019080:	2b00      	cmp	r3, #0
 8019082:	d00a      	beq.n	801909a <tcp_process+0x30a>
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	6910      	ldr	r0, [r2, #16]
 801908e:	2200      	movs	r2, #0
 8019090:	6879      	ldr	r1, [r7, #4]
 8019092:	4798      	blx	r3
 8019094:	4603      	mov	r3, r0
 8019096:	76bb      	strb	r3, [r7, #26]
 8019098:	e001      	b.n	801909e <tcp_process+0x30e>
 801909a:	2300      	movs	r3, #0
 801909c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801909e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80190a2:	f113 0f0d 	cmn.w	r3, #13
 80190a6:	d102      	bne.n	80190ae <tcp_process+0x31e>
          return ERR_ABRT;
 80190a8:	f06f 030c 	mvn.w	r3, #12
 80190ac:	e250      	b.n	8019550 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	8b5b      	ldrh	r3, [r3, #26]
 80190b2:	f043 0302 	orr.w	r3, r3, #2
 80190b6:	b29a      	uxth	r2, r3
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80190bc:	e23a      	b.n	8019534 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80190be:	4b9d      	ldr	r3, [pc, #628]	; (8019334 <tcp_process+0x5a4>)
 80190c0:	781b      	ldrb	r3, [r3, #0]
 80190c2:	f003 0310 	and.w	r3, r3, #16
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	f000 8234 	beq.w	8019534 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190cc:	4b9a      	ldr	r3, [pc, #616]	; (8019338 <tcp_process+0x5a8>)
 80190ce:	6819      	ldr	r1, [r3, #0]
 80190d0:	4b9a      	ldr	r3, [pc, #616]	; (801933c <tcp_process+0x5ac>)
 80190d2:	881b      	ldrh	r3, [r3, #0]
 80190d4:	461a      	mov	r2, r3
 80190d6:	4b9a      	ldr	r3, [pc, #616]	; (8019340 <tcp_process+0x5b0>)
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190dc:	4b99      	ldr	r3, [pc, #612]	; (8019344 <tcp_process+0x5b4>)
 80190de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190e0:	885b      	ldrh	r3, [r3, #2]
 80190e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80190e4:	4a97      	ldr	r2, [pc, #604]	; (8019344 <tcp_process+0x5b4>)
 80190e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80190e8:	8812      	ldrh	r2, [r2, #0]
 80190ea:	b292      	uxth	r2, r2
 80190ec:	9202      	str	r2, [sp, #8]
 80190ee:	9301      	str	r3, [sp, #4]
 80190f0:	4b95      	ldr	r3, [pc, #596]	; (8019348 <tcp_process+0x5b8>)
 80190f2:	9300      	str	r3, [sp, #0]
 80190f4:	4b95      	ldr	r3, [pc, #596]	; (801934c <tcp_process+0x5bc>)
 80190f6:	4602      	mov	r2, r0
 80190f8:	6878      	ldr	r0, [r7, #4]
 80190fa:	f002 fc93 	bl	801ba24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019104:	2b05      	cmp	r3, #5
 8019106:	f200 8215 	bhi.w	8019534 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	2200      	movs	r2, #0
 801910e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8019110:	6878      	ldr	r0, [r7, #4]
 8019112:	f002 fa51 	bl	801b5b8 <tcp_rexmit_rto>
      break;
 8019116:	e20d      	b.n	8019534 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8019118:	4b86      	ldr	r3, [pc, #536]	; (8019334 <tcp_process+0x5a4>)
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	f003 0310 	and.w	r3, r3, #16
 8019120:	2b00      	cmp	r3, #0
 8019122:	f000 80a1 	beq.w	8019268 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019126:	4b84      	ldr	r3, [pc, #528]	; (8019338 <tcp_process+0x5a8>)
 8019128:	681a      	ldr	r2, [r3, #0]
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801912e:	1ad3      	subs	r3, r2, r3
 8019130:	3b01      	subs	r3, #1
 8019132:	2b00      	cmp	r3, #0
 8019134:	db7e      	blt.n	8019234 <tcp_process+0x4a4>
 8019136:	4b80      	ldr	r3, [pc, #512]	; (8019338 <tcp_process+0x5a8>)
 8019138:	681a      	ldr	r2, [r3, #0]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801913e:	1ad3      	subs	r3, r2, r3
 8019140:	2b00      	cmp	r3, #0
 8019142:	dc77      	bgt.n	8019234 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	2204      	movs	r2, #4
 8019148:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801914e:	2b00      	cmp	r3, #0
 8019150:	d102      	bne.n	8019158 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8019152:	23fa      	movs	r3, #250	; 0xfa
 8019154:	76bb      	strb	r3, [r7, #26]
 8019156:	e01d      	b.n	8019194 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801915c:	699b      	ldr	r3, [r3, #24]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d106      	bne.n	8019170 <tcp_process+0x3e0>
 8019162:	4b7b      	ldr	r3, [pc, #492]	; (8019350 <tcp_process+0x5c0>)
 8019164:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8019168:	497a      	ldr	r1, [pc, #488]	; (8019354 <tcp_process+0x5c4>)
 801916a:	487b      	ldr	r0, [pc, #492]	; (8019358 <tcp_process+0x5c8>)
 801916c:	f003 fc24 	bl	801c9b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019174:	699b      	ldr	r3, [r3, #24]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d00a      	beq.n	8019190 <tcp_process+0x400>
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801917e:	699b      	ldr	r3, [r3, #24]
 8019180:	687a      	ldr	r2, [r7, #4]
 8019182:	6910      	ldr	r0, [r2, #16]
 8019184:	2200      	movs	r2, #0
 8019186:	6879      	ldr	r1, [r7, #4]
 8019188:	4798      	blx	r3
 801918a:	4603      	mov	r3, r0
 801918c:	76bb      	strb	r3, [r7, #26]
 801918e:	e001      	b.n	8019194 <tcp_process+0x404>
 8019190:	23f0      	movs	r3, #240	; 0xf0
 8019192:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8019194:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d00a      	beq.n	80191b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801919c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80191a0:	f113 0f0d 	cmn.w	r3, #13
 80191a4:	d002      	beq.n	80191ac <tcp_process+0x41c>
              tcp_abort(pcb);
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f7fd ff94 	bl	80170d4 <tcp_abort>
            }
            return ERR_ABRT;
 80191ac:	f06f 030c 	mvn.w	r3, #12
 80191b0:	e1ce      	b.n	8019550 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80191b2:	6878      	ldr	r0, [r7, #4]
 80191b4:	f000 fae0 	bl	8019778 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80191b8:	4b68      	ldr	r3, [pc, #416]	; (801935c <tcp_process+0x5cc>)
 80191ba:	881b      	ldrh	r3, [r3, #0]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d005      	beq.n	80191cc <tcp_process+0x43c>
            recv_acked--;
 80191c0:	4b66      	ldr	r3, [pc, #408]	; (801935c <tcp_process+0x5cc>)
 80191c2:	881b      	ldrh	r3, [r3, #0]
 80191c4:	3b01      	subs	r3, #1
 80191c6:	b29a      	uxth	r2, r3
 80191c8:	4b64      	ldr	r3, [pc, #400]	; (801935c <tcp_process+0x5cc>)
 80191ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191d0:	009a      	lsls	r2, r3, #2
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191d6:	005b      	lsls	r3, r3, #1
 80191d8:	f241 111c 	movw	r1, #4380	; 0x111c
 80191dc:	428b      	cmp	r3, r1
 80191de:	bf38      	it	cc
 80191e0:	460b      	movcc	r3, r1
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d204      	bcs.n	80191f0 <tcp_process+0x460>
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191ea:	009b      	lsls	r3, r3, #2
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	e00d      	b.n	801920c <tcp_process+0x47c>
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80191f4:	005b      	lsls	r3, r3, #1
 80191f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80191fa:	4293      	cmp	r3, r2
 80191fc:	d904      	bls.n	8019208 <tcp_process+0x478>
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019202:	005b      	lsls	r3, r3, #1
 8019204:	b29b      	uxth	r3, r3
 8019206:	e001      	b.n	801920c <tcp_process+0x47c>
 8019208:	f241 131c 	movw	r3, #4380	; 0x111c
 801920c:	687a      	ldr	r2, [r7, #4]
 801920e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8019212:	4b53      	ldr	r3, [pc, #332]	; (8019360 <tcp_process+0x5d0>)
 8019214:	781b      	ldrb	r3, [r3, #0]
 8019216:	f003 0320 	and.w	r3, r3, #32
 801921a:	2b00      	cmp	r3, #0
 801921c:	d037      	beq.n	801928e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	8b5b      	ldrh	r3, [r3, #26]
 8019222:	f043 0302 	orr.w	r3, r3, #2
 8019226:	b29a      	uxth	r2, r3
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	2207      	movs	r2, #7
 8019230:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8019232:	e02c      	b.n	801928e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019234:	4b40      	ldr	r3, [pc, #256]	; (8019338 <tcp_process+0x5a8>)
 8019236:	6819      	ldr	r1, [r3, #0]
 8019238:	4b40      	ldr	r3, [pc, #256]	; (801933c <tcp_process+0x5ac>)
 801923a:	881b      	ldrh	r3, [r3, #0]
 801923c:	461a      	mov	r2, r3
 801923e:	4b40      	ldr	r3, [pc, #256]	; (8019340 <tcp_process+0x5b0>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019244:	4b3f      	ldr	r3, [pc, #252]	; (8019344 <tcp_process+0x5b4>)
 8019246:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019248:	885b      	ldrh	r3, [r3, #2]
 801924a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801924c:	4a3d      	ldr	r2, [pc, #244]	; (8019344 <tcp_process+0x5b4>)
 801924e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019250:	8812      	ldrh	r2, [r2, #0]
 8019252:	b292      	uxth	r2, r2
 8019254:	9202      	str	r2, [sp, #8]
 8019256:	9301      	str	r3, [sp, #4]
 8019258:	4b3b      	ldr	r3, [pc, #236]	; (8019348 <tcp_process+0x5b8>)
 801925a:	9300      	str	r3, [sp, #0]
 801925c:	4b3b      	ldr	r3, [pc, #236]	; (801934c <tcp_process+0x5bc>)
 801925e:	4602      	mov	r2, r0
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f002 fbdf 	bl	801ba24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8019266:	e167      	b.n	8019538 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8019268:	4b32      	ldr	r3, [pc, #200]	; (8019334 <tcp_process+0x5a4>)
 801926a:	781b      	ldrb	r3, [r3, #0]
 801926c:	f003 0302 	and.w	r3, r3, #2
 8019270:	2b00      	cmp	r3, #0
 8019272:	f000 8161 	beq.w	8019538 <tcp_process+0x7a8>
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801927a:	1e5a      	subs	r2, r3, #1
 801927c:	4b30      	ldr	r3, [pc, #192]	; (8019340 <tcp_process+0x5b0>)
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	429a      	cmp	r2, r3
 8019282:	f040 8159 	bne.w	8019538 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8019286:	6878      	ldr	r0, [r7, #4]
 8019288:	f002 f9b8 	bl	801b5fc <tcp_rexmit>
      break;
 801928c:	e154      	b.n	8019538 <tcp_process+0x7a8>
 801928e:	e153      	b.n	8019538 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8019290:	6878      	ldr	r0, [r7, #4]
 8019292:	f000 fa71 	bl	8019778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8019296:	4b32      	ldr	r3, [pc, #200]	; (8019360 <tcp_process+0x5d0>)
 8019298:	781b      	ldrb	r3, [r3, #0]
 801929a:	f003 0320 	and.w	r3, r3, #32
 801929e:	2b00      	cmp	r3, #0
 80192a0:	f000 814c 	beq.w	801953c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	8b5b      	ldrh	r3, [r3, #26]
 80192a8:	f043 0302 	orr.w	r3, r3, #2
 80192ac:	b29a      	uxth	r2, r3
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	2207      	movs	r2, #7
 80192b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80192b8:	e140      	b.n	801953c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80192ba:	6878      	ldr	r0, [r7, #4]
 80192bc:	f000 fa5c 	bl	8019778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80192c0:	4b27      	ldr	r3, [pc, #156]	; (8019360 <tcp_process+0x5d0>)
 80192c2:	781b      	ldrb	r3, [r3, #0]
 80192c4:	f003 0320 	and.w	r3, r3, #32
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d071      	beq.n	80193b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192cc:	4b19      	ldr	r3, [pc, #100]	; (8019334 <tcp_process+0x5a4>)
 80192ce:	781b      	ldrb	r3, [r3, #0]
 80192d0:	f003 0310 	and.w	r3, r3, #16
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d060      	beq.n	801939a <tcp_process+0x60a>
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192dc:	4b16      	ldr	r3, [pc, #88]	; (8019338 <tcp_process+0x5a8>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	429a      	cmp	r2, r3
 80192e2:	d15a      	bne.n	801939a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d156      	bne.n	801939a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	8b5b      	ldrh	r3, [r3, #26]
 80192f0:	f043 0302 	orr.w	r3, r3, #2
 80192f4:	b29a      	uxth	r2, r3
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80192fa:	6878      	ldr	r0, [r7, #4]
 80192fc:	f7fe fdbe 	bl	8017e7c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8019300:	4b18      	ldr	r3, [pc, #96]	; (8019364 <tcp_process+0x5d4>)
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	687a      	ldr	r2, [r7, #4]
 8019306:	429a      	cmp	r2, r3
 8019308:	d105      	bne.n	8019316 <tcp_process+0x586>
 801930a:	4b16      	ldr	r3, [pc, #88]	; (8019364 <tcp_process+0x5d4>)
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	68db      	ldr	r3, [r3, #12]
 8019310:	4a14      	ldr	r2, [pc, #80]	; (8019364 <tcp_process+0x5d4>)
 8019312:	6013      	str	r3, [r2, #0]
 8019314:	e02e      	b.n	8019374 <tcp_process+0x5e4>
 8019316:	4b13      	ldr	r3, [pc, #76]	; (8019364 <tcp_process+0x5d4>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	617b      	str	r3, [r7, #20]
 801931c:	e027      	b.n	801936e <tcp_process+0x5de>
 801931e:	697b      	ldr	r3, [r7, #20]
 8019320:	68db      	ldr	r3, [r3, #12]
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	429a      	cmp	r2, r3
 8019326:	d11f      	bne.n	8019368 <tcp_process+0x5d8>
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	68da      	ldr	r2, [r3, #12]
 801932c:	697b      	ldr	r3, [r7, #20]
 801932e:	60da      	str	r2, [r3, #12]
 8019330:	e020      	b.n	8019374 <tcp_process+0x5e4>
 8019332:	bf00      	nop
 8019334:	24000250 	.word	0x24000250
 8019338:	24000248 	.word	0x24000248
 801933c:	2400024e 	.word	0x2400024e
 8019340:	24000244 	.word	0x24000244
 8019344:	24000234 	.word	0x24000234
 8019348:	24004784 	.word	0x24004784
 801934c:	24004788 	.word	0x24004788
 8019350:	0801f6fc 	.word	0x0801f6fc
 8019354:	0801f9c4 	.word	0x0801f9c4
 8019358:	0801f770 	.word	0x0801f770
 801935c:	2400024c 	.word	0x2400024c
 8019360:	24000251 	.word	0x24000251
 8019364:	24007684 	.word	0x24007684
 8019368:	697b      	ldr	r3, [r7, #20]
 801936a:	68db      	ldr	r3, [r3, #12]
 801936c:	617b      	str	r3, [r7, #20]
 801936e:	697b      	ldr	r3, [r7, #20]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d1d4      	bne.n	801931e <tcp_process+0x58e>
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	2200      	movs	r2, #0
 8019378:	60da      	str	r2, [r3, #12]
 801937a:	4b77      	ldr	r3, [pc, #476]	; (8019558 <tcp_process+0x7c8>)
 801937c:	2201      	movs	r2, #1
 801937e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	220a      	movs	r2, #10
 8019384:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8019386:	4b75      	ldr	r3, [pc, #468]	; (801955c <tcp_process+0x7cc>)
 8019388:	681a      	ldr	r2, [r3, #0]
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	60da      	str	r2, [r3, #12]
 801938e:	4a73      	ldr	r2, [pc, #460]	; (801955c <tcp_process+0x7cc>)
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	6013      	str	r3, [r2, #0]
 8019394:	f002 fd08 	bl	801bda8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8019398:	e0d2      	b.n	8019540 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	8b5b      	ldrh	r3, [r3, #26]
 801939e:	f043 0302 	orr.w	r3, r3, #2
 80193a2:	b29a      	uxth	r2, r3
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	2208      	movs	r2, #8
 80193ac:	751a      	strb	r2, [r3, #20]
      break;
 80193ae:	e0c7      	b.n	8019540 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193b0:	4b6b      	ldr	r3, [pc, #428]	; (8019560 <tcp_process+0x7d0>)
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	f003 0310 	and.w	r3, r3, #16
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	f000 80c1 	beq.w	8019540 <tcp_process+0x7b0>
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80193c2:	4b68      	ldr	r3, [pc, #416]	; (8019564 <tcp_process+0x7d4>)
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	429a      	cmp	r2, r3
 80193c8:	f040 80ba 	bne.w	8019540 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	f040 80b5 	bne.w	8019540 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	2206      	movs	r2, #6
 80193da:	751a      	strb	r2, [r3, #20]
      break;
 80193dc:	e0b0      	b.n	8019540 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f000 f9ca 	bl	8019778 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80193e4:	4b60      	ldr	r3, [pc, #384]	; (8019568 <tcp_process+0x7d8>)
 80193e6:	781b      	ldrb	r3, [r3, #0]
 80193e8:	f003 0320 	and.w	r3, r3, #32
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	f000 80a9 	beq.w	8019544 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	8b5b      	ldrh	r3, [r3, #26]
 80193f6:	f043 0302 	orr.w	r3, r3, #2
 80193fa:	b29a      	uxth	r2, r3
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8019400:	6878      	ldr	r0, [r7, #4]
 8019402:	f7fe fd3b 	bl	8017e7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019406:	4b59      	ldr	r3, [pc, #356]	; (801956c <tcp_process+0x7dc>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	429a      	cmp	r2, r3
 801940e:	d105      	bne.n	801941c <tcp_process+0x68c>
 8019410:	4b56      	ldr	r3, [pc, #344]	; (801956c <tcp_process+0x7dc>)
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	68db      	ldr	r3, [r3, #12]
 8019416:	4a55      	ldr	r2, [pc, #340]	; (801956c <tcp_process+0x7dc>)
 8019418:	6013      	str	r3, [r2, #0]
 801941a:	e013      	b.n	8019444 <tcp_process+0x6b4>
 801941c:	4b53      	ldr	r3, [pc, #332]	; (801956c <tcp_process+0x7dc>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	613b      	str	r3, [r7, #16]
 8019422:	e00c      	b.n	801943e <tcp_process+0x6ae>
 8019424:	693b      	ldr	r3, [r7, #16]
 8019426:	68db      	ldr	r3, [r3, #12]
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	429a      	cmp	r2, r3
 801942c:	d104      	bne.n	8019438 <tcp_process+0x6a8>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	68da      	ldr	r2, [r3, #12]
 8019432:	693b      	ldr	r3, [r7, #16]
 8019434:	60da      	str	r2, [r3, #12]
 8019436:	e005      	b.n	8019444 <tcp_process+0x6b4>
 8019438:	693b      	ldr	r3, [r7, #16]
 801943a:	68db      	ldr	r3, [r3, #12]
 801943c:	613b      	str	r3, [r7, #16]
 801943e:	693b      	ldr	r3, [r7, #16]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d1ef      	bne.n	8019424 <tcp_process+0x694>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	2200      	movs	r2, #0
 8019448:	60da      	str	r2, [r3, #12]
 801944a:	4b43      	ldr	r3, [pc, #268]	; (8019558 <tcp_process+0x7c8>)
 801944c:	2201      	movs	r2, #1
 801944e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	220a      	movs	r2, #10
 8019454:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8019456:	4b41      	ldr	r3, [pc, #260]	; (801955c <tcp_process+0x7cc>)
 8019458:	681a      	ldr	r2, [r3, #0]
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	60da      	str	r2, [r3, #12]
 801945e:	4a3f      	ldr	r2, [pc, #252]	; (801955c <tcp_process+0x7cc>)
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6013      	str	r3, [r2, #0]
 8019464:	f002 fca0 	bl	801bda8 <tcp_timer_needed>
      }
      break;
 8019468:	e06c      	b.n	8019544 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f000 f984 	bl	8019778 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019470:	4b3b      	ldr	r3, [pc, #236]	; (8019560 <tcp_process+0x7d0>)
 8019472:	781b      	ldrb	r3, [r3, #0]
 8019474:	f003 0310 	and.w	r3, r3, #16
 8019478:	2b00      	cmp	r3, #0
 801947a:	d065      	beq.n	8019548 <tcp_process+0x7b8>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019480:	4b38      	ldr	r3, [pc, #224]	; (8019564 <tcp_process+0x7d4>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	429a      	cmp	r2, r3
 8019486:	d15f      	bne.n	8019548 <tcp_process+0x7b8>
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801948c:	2b00      	cmp	r3, #0
 801948e:	d15b      	bne.n	8019548 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8019490:	6878      	ldr	r0, [r7, #4]
 8019492:	f7fe fcf3 	bl	8017e7c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8019496:	4b35      	ldr	r3, [pc, #212]	; (801956c <tcp_process+0x7dc>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	687a      	ldr	r2, [r7, #4]
 801949c:	429a      	cmp	r2, r3
 801949e:	d105      	bne.n	80194ac <tcp_process+0x71c>
 80194a0:	4b32      	ldr	r3, [pc, #200]	; (801956c <tcp_process+0x7dc>)
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	68db      	ldr	r3, [r3, #12]
 80194a6:	4a31      	ldr	r2, [pc, #196]	; (801956c <tcp_process+0x7dc>)
 80194a8:	6013      	str	r3, [r2, #0]
 80194aa:	e013      	b.n	80194d4 <tcp_process+0x744>
 80194ac:	4b2f      	ldr	r3, [pc, #188]	; (801956c <tcp_process+0x7dc>)
 80194ae:	681b      	ldr	r3, [r3, #0]
 80194b0:	60fb      	str	r3, [r7, #12]
 80194b2:	e00c      	b.n	80194ce <tcp_process+0x73e>
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	68db      	ldr	r3, [r3, #12]
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d104      	bne.n	80194c8 <tcp_process+0x738>
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	68da      	ldr	r2, [r3, #12]
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	60da      	str	r2, [r3, #12]
 80194c6:	e005      	b.n	80194d4 <tcp_process+0x744>
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	68db      	ldr	r3, [r3, #12]
 80194cc:	60fb      	str	r3, [r7, #12]
 80194ce:	68fb      	ldr	r3, [r7, #12]
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	d1ef      	bne.n	80194b4 <tcp_process+0x724>
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	2200      	movs	r2, #0
 80194d8:	60da      	str	r2, [r3, #12]
 80194da:	4b1f      	ldr	r3, [pc, #124]	; (8019558 <tcp_process+0x7c8>)
 80194dc:	2201      	movs	r2, #1
 80194de:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	220a      	movs	r2, #10
 80194e4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80194e6:	4b1d      	ldr	r3, [pc, #116]	; (801955c <tcp_process+0x7cc>)
 80194e8:	681a      	ldr	r2, [r3, #0]
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	60da      	str	r2, [r3, #12]
 80194ee:	4a1b      	ldr	r2, [pc, #108]	; (801955c <tcp_process+0x7cc>)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	6013      	str	r3, [r2, #0]
 80194f4:	f002 fc58 	bl	801bda8 <tcp_timer_needed>
      }
      break;
 80194f8:	e026      	b.n	8019548 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80194fa:	6878      	ldr	r0, [r7, #4]
 80194fc:	f000 f93c 	bl	8019778 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8019500:	4b17      	ldr	r3, [pc, #92]	; (8019560 <tcp_process+0x7d0>)
 8019502:	781b      	ldrb	r3, [r3, #0]
 8019504:	f003 0310 	and.w	r3, r3, #16
 8019508:	2b00      	cmp	r3, #0
 801950a:	d01f      	beq.n	801954c <tcp_process+0x7bc>
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019510:	4b14      	ldr	r3, [pc, #80]	; (8019564 <tcp_process+0x7d4>)
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	429a      	cmp	r2, r3
 8019516:	d119      	bne.n	801954c <tcp_process+0x7bc>
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801951c:	2b00      	cmp	r3, #0
 801951e:	d115      	bne.n	801954c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8019520:	4b11      	ldr	r3, [pc, #68]	; (8019568 <tcp_process+0x7d8>)
 8019522:	781b      	ldrb	r3, [r3, #0]
 8019524:	f043 0310 	orr.w	r3, r3, #16
 8019528:	b2da      	uxtb	r2, r3
 801952a:	4b0f      	ldr	r3, [pc, #60]	; (8019568 <tcp_process+0x7d8>)
 801952c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801952e:	e00d      	b.n	801954c <tcp_process+0x7bc>
    default:
      break;
 8019530:	bf00      	nop
 8019532:	e00c      	b.n	801954e <tcp_process+0x7be>
      break;
 8019534:	bf00      	nop
 8019536:	e00a      	b.n	801954e <tcp_process+0x7be>
      break;
 8019538:	bf00      	nop
 801953a:	e008      	b.n	801954e <tcp_process+0x7be>
      break;
 801953c:	bf00      	nop
 801953e:	e006      	b.n	801954e <tcp_process+0x7be>
      break;
 8019540:	bf00      	nop
 8019542:	e004      	b.n	801954e <tcp_process+0x7be>
      break;
 8019544:	bf00      	nop
 8019546:	e002      	b.n	801954e <tcp_process+0x7be>
      break;
 8019548:	bf00      	nop
 801954a:	e000      	b.n	801954e <tcp_process+0x7be>
      break;
 801954c:	bf00      	nop
  }
  return ERR_OK;
 801954e:	2300      	movs	r3, #0
}
 8019550:	4618      	mov	r0, r3
 8019552:	3724      	adds	r7, #36	; 0x24
 8019554:	46bd      	mov	sp, r7
 8019556:	bd90      	pop	{r4, r7, pc}
 8019558:	24007680 	.word	0x24007680
 801955c:	24007694 	.word	0x24007694
 8019560:	24000250 	.word	0x24000250
 8019564:	24000248 	.word	0x24000248
 8019568:	24000251 	.word	0x24000251
 801956c:	24007684 	.word	0x24007684

08019570 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8019570:	b590      	push	{r4, r7, lr}
 8019572:	b085      	sub	sp, #20
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
 8019578:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d106      	bne.n	801958e <tcp_oos_insert_segment+0x1e>
 8019580:	4b3b      	ldr	r3, [pc, #236]	; (8019670 <tcp_oos_insert_segment+0x100>)
 8019582:	f240 421f 	movw	r2, #1055	; 0x41f
 8019586:	493b      	ldr	r1, [pc, #236]	; (8019674 <tcp_oos_insert_segment+0x104>)
 8019588:	483b      	ldr	r0, [pc, #236]	; (8019678 <tcp_oos_insert_segment+0x108>)
 801958a:	f003 fa15 	bl	801c9b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	68db      	ldr	r3, [r3, #12]
 8019592:	899b      	ldrh	r3, [r3, #12]
 8019594:	b29b      	uxth	r3, r3
 8019596:	4618      	mov	r0, r3
 8019598:	f7f7 fb63 	bl	8010c62 <lwip_htons>
 801959c:	4603      	mov	r3, r0
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	f003 0301 	and.w	r3, r3, #1
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d028      	beq.n	80195fa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80195a8:	6838      	ldr	r0, [r7, #0]
 80195aa:	f7fe fa67 	bl	8017a7c <tcp_segs_free>
    next = NULL;
 80195ae:	2300      	movs	r3, #0
 80195b0:	603b      	str	r3, [r7, #0]
 80195b2:	e056      	b.n	8019662 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	68db      	ldr	r3, [r3, #12]
 80195b8:	899b      	ldrh	r3, [r3, #12]
 80195ba:	b29b      	uxth	r3, r3
 80195bc:	4618      	mov	r0, r3
 80195be:	f7f7 fb50 	bl	8010c62 <lwip_htons>
 80195c2:	4603      	mov	r3, r0
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	f003 0301 	and.w	r3, r3, #1
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d00d      	beq.n	80195ea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	68db      	ldr	r3, [r3, #12]
 80195d2:	899b      	ldrh	r3, [r3, #12]
 80195d4:	b29c      	uxth	r4, r3
 80195d6:	2001      	movs	r0, #1
 80195d8:	f7f7 fb43 	bl	8010c62 <lwip_htons>
 80195dc:	4603      	mov	r3, r0
 80195de:	461a      	mov	r2, r3
 80195e0:	687b      	ldr	r3, [r7, #4]
 80195e2:	68db      	ldr	r3, [r3, #12]
 80195e4:	4322      	orrs	r2, r4
 80195e6:	b292      	uxth	r2, r2
 80195e8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80195ea:	683b      	ldr	r3, [r7, #0]
 80195ec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80195ee:	683b      	ldr	r3, [r7, #0]
 80195f0:	681b      	ldr	r3, [r3, #0]
 80195f2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80195f4:	68f8      	ldr	r0, [r7, #12]
 80195f6:	f7fe fa55 	bl	8017aa4 <tcp_seg_free>
    while (next &&
 80195fa:	683b      	ldr	r3, [r7, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d00e      	beq.n	801961e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	891b      	ldrh	r3, [r3, #8]
 8019604:	461a      	mov	r2, r3
 8019606:	4b1d      	ldr	r3, [pc, #116]	; (801967c <tcp_oos_insert_segment+0x10c>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	441a      	add	r2, r3
 801960c:	683b      	ldr	r3, [r7, #0]
 801960e:	68db      	ldr	r3, [r3, #12]
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	6839      	ldr	r1, [r7, #0]
 8019614:	8909      	ldrh	r1, [r1, #8]
 8019616:	440b      	add	r3, r1
 8019618:	1ad3      	subs	r3, r2, r3
    while (next &&
 801961a:	2b00      	cmp	r3, #0
 801961c:	daca      	bge.n	80195b4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d01e      	beq.n	8019662 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	891b      	ldrh	r3, [r3, #8]
 8019628:	461a      	mov	r2, r3
 801962a:	4b14      	ldr	r3, [pc, #80]	; (801967c <tcp_oos_insert_segment+0x10c>)
 801962c:	681b      	ldr	r3, [r3, #0]
 801962e:	441a      	add	r2, r3
 8019630:	683b      	ldr	r3, [r7, #0]
 8019632:	68db      	ldr	r3, [r3, #12]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	1ad3      	subs	r3, r2, r3
    if (next &&
 8019638:	2b00      	cmp	r3, #0
 801963a:	dd12      	ble.n	8019662 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	68db      	ldr	r3, [r3, #12]
 8019640:	685b      	ldr	r3, [r3, #4]
 8019642:	b29a      	uxth	r2, r3
 8019644:	4b0d      	ldr	r3, [pc, #52]	; (801967c <tcp_oos_insert_segment+0x10c>)
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	b29b      	uxth	r3, r3
 801964a:	1ad3      	subs	r3, r2, r3
 801964c:	b29a      	uxth	r2, r3
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	685a      	ldr	r2, [r3, #4]
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	891b      	ldrh	r3, [r3, #8]
 801965a:	4619      	mov	r1, r3
 801965c:	4610      	mov	r0, r2
 801965e:	f7fc fe23 	bl	80162a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	683a      	ldr	r2, [r7, #0]
 8019666:	601a      	str	r2, [r3, #0]
}
 8019668:	bf00      	nop
 801966a:	3714      	adds	r7, #20
 801966c:	46bd      	mov	sp, r7
 801966e:	bd90      	pop	{r4, r7, pc}
 8019670:	0801f6fc 	.word	0x0801f6fc
 8019674:	0801f9e4 	.word	0x0801f9e4
 8019678:	0801f770 	.word	0x0801f770
 801967c:	24000244 	.word	0x24000244

08019680 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8019680:	b5b0      	push	{r4, r5, r7, lr}
 8019682:	b086      	sub	sp, #24
 8019684:	af00      	add	r7, sp, #0
 8019686:	60f8      	str	r0, [r7, #12]
 8019688:	60b9      	str	r1, [r7, #8]
 801968a:	607a      	str	r2, [r7, #4]
 801968c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801968e:	e03e      	b.n	801970e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8019694:	68bb      	ldr	r3, [r7, #8]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	4618      	mov	r0, r3
 80196a0:	f7fd f810 	bl	80166c4 <pbuf_clen>
 80196a4:	4603      	mov	r3, r0
 80196a6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196ae:	8a7a      	ldrh	r2, [r7, #18]
 80196b0:	429a      	cmp	r2, r3
 80196b2:	d906      	bls.n	80196c2 <tcp_free_acked_segments+0x42>
 80196b4:	4b2a      	ldr	r3, [pc, #168]	; (8019760 <tcp_free_acked_segments+0xe0>)
 80196b6:	f240 4257 	movw	r2, #1111	; 0x457
 80196ba:	492a      	ldr	r1, [pc, #168]	; (8019764 <tcp_free_acked_segments+0xe4>)
 80196bc:	482a      	ldr	r0, [pc, #168]	; (8019768 <tcp_free_acked_segments+0xe8>)
 80196be:	f003 f97b 	bl	801c9b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80196c8:	8a7b      	ldrh	r3, [r7, #18]
 80196ca:	1ad3      	subs	r3, r2, r3
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	891a      	ldrh	r2, [r3, #8]
 80196d8:	4b24      	ldr	r3, [pc, #144]	; (801976c <tcp_free_acked_segments+0xec>)
 80196da:	881b      	ldrh	r3, [r3, #0]
 80196dc:	4413      	add	r3, r2
 80196de:	b29a      	uxth	r2, r3
 80196e0:	4b22      	ldr	r3, [pc, #136]	; (801976c <tcp_free_acked_segments+0xec>)
 80196e2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80196e4:	6978      	ldr	r0, [r7, #20]
 80196e6:	f7fe f9dd 	bl	8017aa4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	d00c      	beq.n	801970e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80196f4:	68bb      	ldr	r3, [r7, #8]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d109      	bne.n	801970e <tcp_free_acked_segments+0x8e>
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d106      	bne.n	801970e <tcp_free_acked_segments+0x8e>
 8019700:	4b17      	ldr	r3, [pc, #92]	; (8019760 <tcp_free_acked_segments+0xe0>)
 8019702:	f240 4262 	movw	r2, #1122	; 0x462
 8019706:	491a      	ldr	r1, [pc, #104]	; (8019770 <tcp_free_acked_segments+0xf0>)
 8019708:	4817      	ldr	r0, [pc, #92]	; (8019768 <tcp_free_acked_segments+0xe8>)
 801970a:	f003 f955 	bl	801c9b8 <iprintf>
  while (seg_list != NULL &&
 801970e:	68bb      	ldr	r3, [r7, #8]
 8019710:	2b00      	cmp	r3, #0
 8019712:	d020      	beq.n	8019756 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	68db      	ldr	r3, [r3, #12]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	4618      	mov	r0, r3
 801971c:	f7f7 fab6 	bl	8010c8c <lwip_htonl>
 8019720:	4604      	mov	r4, r0
 8019722:	68bb      	ldr	r3, [r7, #8]
 8019724:	891b      	ldrh	r3, [r3, #8]
 8019726:	461d      	mov	r5, r3
 8019728:	68bb      	ldr	r3, [r7, #8]
 801972a:	68db      	ldr	r3, [r3, #12]
 801972c:	899b      	ldrh	r3, [r3, #12]
 801972e:	b29b      	uxth	r3, r3
 8019730:	4618      	mov	r0, r3
 8019732:	f7f7 fa96 	bl	8010c62 <lwip_htons>
 8019736:	4603      	mov	r3, r0
 8019738:	b2db      	uxtb	r3, r3
 801973a:	f003 0303 	and.w	r3, r3, #3
 801973e:	2b00      	cmp	r3, #0
 8019740:	d001      	beq.n	8019746 <tcp_free_acked_segments+0xc6>
 8019742:	2301      	movs	r3, #1
 8019744:	e000      	b.n	8019748 <tcp_free_acked_segments+0xc8>
 8019746:	2300      	movs	r3, #0
 8019748:	442b      	add	r3, r5
 801974a:	18e2      	adds	r2, r4, r3
 801974c:	4b09      	ldr	r3, [pc, #36]	; (8019774 <tcp_free_acked_segments+0xf4>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8019752:	2b00      	cmp	r3, #0
 8019754:	dd9c      	ble.n	8019690 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8019756:	68bb      	ldr	r3, [r7, #8]
}
 8019758:	4618      	mov	r0, r3
 801975a:	3718      	adds	r7, #24
 801975c:	46bd      	mov	sp, r7
 801975e:	bdb0      	pop	{r4, r5, r7, pc}
 8019760:	0801f6fc 	.word	0x0801f6fc
 8019764:	0801fa0c 	.word	0x0801fa0c
 8019768:	0801f770 	.word	0x0801f770
 801976c:	2400024c 	.word	0x2400024c
 8019770:	0801fa34 	.word	0x0801fa34
 8019774:	24000248 	.word	0x24000248

08019778 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8019778:	b5b0      	push	{r4, r5, r7, lr}
 801977a:	b094      	sub	sp, #80	; 0x50
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8019780:	2300      	movs	r3, #0
 8019782:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d106      	bne.n	8019798 <tcp_receive+0x20>
 801978a:	4ba6      	ldr	r3, [pc, #664]	; (8019a24 <tcp_receive+0x2ac>)
 801978c:	f240 427b 	movw	r2, #1147	; 0x47b
 8019790:	49a5      	ldr	r1, [pc, #660]	; (8019a28 <tcp_receive+0x2b0>)
 8019792:	48a6      	ldr	r0, [pc, #664]	; (8019a2c <tcp_receive+0x2b4>)
 8019794:	f003 f910 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8019798:	687b      	ldr	r3, [r7, #4]
 801979a:	7d1b      	ldrb	r3, [r3, #20]
 801979c:	2b03      	cmp	r3, #3
 801979e:	d806      	bhi.n	80197ae <tcp_receive+0x36>
 80197a0:	4ba0      	ldr	r3, [pc, #640]	; (8019a24 <tcp_receive+0x2ac>)
 80197a2:	f240 427c 	movw	r2, #1148	; 0x47c
 80197a6:	49a2      	ldr	r1, [pc, #648]	; (8019a30 <tcp_receive+0x2b8>)
 80197a8:	48a0      	ldr	r0, [pc, #640]	; (8019a2c <tcp_receive+0x2b4>)
 80197aa:	f003 f905 	bl	801c9b8 <iprintf>

  if (flags & TCP_ACK) {
 80197ae:	4ba1      	ldr	r3, [pc, #644]	; (8019a34 <tcp_receive+0x2bc>)
 80197b0:	781b      	ldrb	r3, [r3, #0]
 80197b2:	f003 0310 	and.w	r3, r3, #16
 80197b6:	2b00      	cmp	r3, #0
 80197b8:	f000 8263 	beq.w	8019c82 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80197c2:	461a      	mov	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197c8:	4413      	add	r3, r2
 80197ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197d0:	4b99      	ldr	r3, [pc, #612]	; (8019a38 <tcp_receive+0x2c0>)
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	1ad3      	subs	r3, r2, r3
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	db1b      	blt.n	8019812 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80197de:	4b96      	ldr	r3, [pc, #600]	; (8019a38 <tcp_receive+0x2c0>)
 80197e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197e2:	429a      	cmp	r2, r3
 80197e4:	d106      	bne.n	80197f4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197ea:	4b94      	ldr	r3, [pc, #592]	; (8019a3c <tcp_receive+0x2c4>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	1ad3      	subs	r3, r2, r3
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	db0e      	blt.n	8019812 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80197f8:	4b90      	ldr	r3, [pc, #576]	; (8019a3c <tcp_receive+0x2c4>)
 80197fa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197fc:	429a      	cmp	r2, r3
 80197fe:	d125      	bne.n	801984c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019800:	4b8f      	ldr	r3, [pc, #572]	; (8019a40 <tcp_receive+0x2c8>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	89db      	ldrh	r3, [r3, #14]
 8019806:	b29a      	uxth	r2, r3
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801980e:	429a      	cmp	r2, r3
 8019810:	d91c      	bls.n	801984c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8019812:	4b8b      	ldr	r3, [pc, #556]	; (8019a40 <tcp_receive+0x2c8>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	89db      	ldrh	r3, [r3, #14]
 8019818:	b29a      	uxth	r2, r3
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801982c:	429a      	cmp	r2, r3
 801982e:	d205      	bcs.n	801983c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801983c:	4b7e      	ldr	r3, [pc, #504]	; (8019a38 <tcp_receive+0x2c0>)
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8019844:	4b7d      	ldr	r3, [pc, #500]	; (8019a3c <tcp_receive+0x2c4>)
 8019846:	681a      	ldr	r2, [r3, #0]
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801984c:	4b7b      	ldr	r3, [pc, #492]	; (8019a3c <tcp_receive+0x2c4>)
 801984e:	681a      	ldr	r2, [r3, #0]
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019854:	1ad3      	subs	r3, r2, r3
 8019856:	2b00      	cmp	r3, #0
 8019858:	dc58      	bgt.n	801990c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801985a:	4b7a      	ldr	r3, [pc, #488]	; (8019a44 <tcp_receive+0x2cc>)
 801985c:	881b      	ldrh	r3, [r3, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d14b      	bne.n	80198fa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019866:	687a      	ldr	r2, [r7, #4]
 8019868:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801986c:	4413      	add	r3, r2
 801986e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019870:	429a      	cmp	r2, r3
 8019872:	d142      	bne.n	80198fa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801987a:	2b00      	cmp	r3, #0
 801987c:	db3d      	blt.n	80198fa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019882:	4b6e      	ldr	r3, [pc, #440]	; (8019a3c <tcp_receive+0x2c4>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	429a      	cmp	r2, r3
 8019888:	d137      	bne.n	80198fa <tcp_receive+0x182>
              found_dupack = 1;
 801988a:	2301      	movs	r3, #1
 801988c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8019894:	2bff      	cmp	r3, #255	; 0xff
 8019896:	d007      	beq.n	80198a8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801989e:	3301      	adds	r3, #1
 80198a0:	b2da      	uxtb	r2, r3
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80198ae:	2b03      	cmp	r3, #3
 80198b0:	d91b      	bls.n	80198ea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198bc:	4413      	add	r3, r2
 80198be:	b29a      	uxth	r2, r3
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80198c6:	429a      	cmp	r2, r3
 80198c8:	d30a      	bcc.n	80198e0 <tcp_receive+0x168>
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80198d4:	4413      	add	r3, r2
 80198d6:	b29a      	uxth	r2, r3
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80198de:	e004      	b.n	80198ea <tcp_receive+0x172>
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80198e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80198f0:	2b02      	cmp	r3, #2
 80198f2:	d902      	bls.n	80198fa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80198f4:	6878      	ldr	r0, [r7, #4]
 80198f6:	f001 feed 	bl	801b6d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80198fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	f040 8160 	bne.w	8019bc2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	2200      	movs	r2, #0
 8019906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801990a:	e15a      	b.n	8019bc2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801990c:	4b4b      	ldr	r3, [pc, #300]	; (8019a3c <tcp_receive+0x2c4>)
 801990e:	681a      	ldr	r2, [r3, #0]
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019914:	1ad3      	subs	r3, r2, r3
 8019916:	3b01      	subs	r3, #1
 8019918:	2b00      	cmp	r3, #0
 801991a:	f2c0 814d 	blt.w	8019bb8 <tcp_receive+0x440>
 801991e:	4b47      	ldr	r3, [pc, #284]	; (8019a3c <tcp_receive+0x2c4>)
 8019920:	681a      	ldr	r2, [r3, #0]
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019926:	1ad3      	subs	r3, r2, r3
 8019928:	2b00      	cmp	r3, #0
 801992a:	f300 8145 	bgt.w	8019bb8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	8b5b      	ldrh	r3, [r3, #26]
 8019932:	f003 0304 	and.w	r3, r3, #4
 8019936:	2b00      	cmp	r3, #0
 8019938:	d010      	beq.n	801995c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	8b5b      	ldrh	r3, [r3, #26]
 801993e:	f023 0304 	bic.w	r3, r3, #4
 8019942:	b29a      	uxth	r2, r3
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	2200      	movs	r2, #0
 8019958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	2200      	movs	r2, #0
 8019960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801996a:	10db      	asrs	r3, r3, #3
 801996c:	b21b      	sxth	r3, r3
 801996e:	b29a      	uxth	r2, r3
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019976:	b29b      	uxth	r3, r3
 8019978:	4413      	add	r3, r2
 801997a:	b29b      	uxth	r3, r3
 801997c:	b21a      	sxth	r2, r3
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019984:	4b2d      	ldr	r3, [pc, #180]	; (8019a3c <tcp_receive+0x2c4>)
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	b29a      	uxth	r2, r3
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801998e:	b29b      	uxth	r3, r3
 8019990:	1ad3      	subs	r3, r2, r3
 8019992:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	2200      	movs	r2, #0
 8019998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801999c:	4b27      	ldr	r3, [pc, #156]	; (8019a3c <tcp_receive+0x2c4>)
 801999e:	681a      	ldr	r2, [r3, #0]
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	7d1b      	ldrb	r3, [r3, #20]
 80199a8:	2b03      	cmp	r3, #3
 80199aa:	f240 8096 	bls.w	8019ada <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80199ba:	429a      	cmp	r2, r3
 80199bc:	d244      	bcs.n	8019a48 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	8b5b      	ldrh	r3, [r3, #26]
 80199c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d001      	beq.n	80199ce <tcp_receive+0x256>
 80199ca:	2301      	movs	r3, #1
 80199cc:	e000      	b.n	80199d0 <tcp_receive+0x258>
 80199ce:	2302      	movs	r3, #2
 80199d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80199d4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80199d8:	b29a      	uxth	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80199de:	fb12 f303 	smulbb	r3, r2, r3
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80199e6:	4293      	cmp	r3, r2
 80199e8:	bf28      	it	cs
 80199ea:	4613      	movcs	r3, r2
 80199ec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80199f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80199f6:	4413      	add	r3, r2
 80199f8:	b29a      	uxth	r2, r3
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a00:	429a      	cmp	r2, r3
 8019a02:	d309      	bcc.n	8019a18 <tcp_receive+0x2a0>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019a0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019a0c:	4413      	add	r3, r2
 8019a0e:	b29a      	uxth	r2, r3
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019a16:	e060      	b.n	8019ada <tcp_receive+0x362>
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019a22:	e05a      	b.n	8019ada <tcp_receive+0x362>
 8019a24:	0801f6fc 	.word	0x0801f6fc
 8019a28:	0801fa54 	.word	0x0801fa54
 8019a2c:	0801f770 	.word	0x0801f770
 8019a30:	0801fa70 	.word	0x0801fa70
 8019a34:	24000250 	.word	0x24000250
 8019a38:	24000244 	.word	0x24000244
 8019a3c:	24000248 	.word	0x24000248
 8019a40:	24000234 	.word	0x24000234
 8019a44:	2400024e 	.word	0x2400024e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a50:	4413      	add	r3, r2
 8019a52:	b29a      	uxth	r2, r3
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8019a5a:	429a      	cmp	r2, r3
 8019a5c:	d309      	bcc.n	8019a72 <tcp_receive+0x2fa>
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a64:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8019a66:	4413      	add	r3, r2
 8019a68:	b29a      	uxth	r2, r3
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8019a70:	e004      	b.n	8019a7c <tcp_receive+0x304>
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a88:	429a      	cmp	r2, r3
 8019a8a:	d326      	bcc.n	8019ada <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019a98:	1ad3      	subs	r3, r2, r3
 8019a9a:	b29a      	uxth	r2, r3
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019aac:	4413      	add	r3, r2
 8019aae:	b29a      	uxth	r2, r3
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d30a      	bcc.n	8019ad0 <tcp_receive+0x358>
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019ac4:	4413      	add	r3, r2
 8019ac6:	b29a      	uxth	r2, r3
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8019ace:	e004      	b.n	8019ada <tcp_receive+0x362>
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ae2:	4a98      	ldr	r2, [pc, #608]	; (8019d44 <tcp_receive+0x5cc>)
 8019ae4:	6878      	ldr	r0, [r7, #4]
 8019ae6:	f7ff fdcb 	bl	8019680 <tcp_free_acked_segments>
 8019aea:	4602      	mov	r2, r0
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019af8:	4a93      	ldr	r2, [pc, #588]	; (8019d48 <tcp_receive+0x5d0>)
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	f7ff fdc0 	bl	8019680 <tcp_free_acked_segments>
 8019b00:	4602      	mov	r2, r0
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d104      	bne.n	8019b18 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b14:	861a      	strh	r2, [r3, #48]	; 0x30
 8019b16:	e002      	b.n	8019b1e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	2200      	movs	r2, #0
 8019b22:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d103      	bne.n	8019b34 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	2200      	movs	r2, #0
 8019b30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019b3a:	4b84      	ldr	r3, [pc, #528]	; (8019d4c <tcp_receive+0x5d4>)
 8019b3c:	881b      	ldrh	r3, [r3, #0]
 8019b3e:	4413      	add	r3, r2
 8019b40:	b29a      	uxth	r2, r3
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	8b5b      	ldrh	r3, [r3, #26]
 8019b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d035      	beq.n	8019bc0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d118      	bne.n	8019b8e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d00c      	beq.n	8019b7e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b6c:	68db      	ldr	r3, [r3, #12]
 8019b6e:	685b      	ldr	r3, [r3, #4]
 8019b70:	4618      	mov	r0, r3
 8019b72:	f7f7 f88b 	bl	8010c8c <lwip_htonl>
 8019b76:	4603      	mov	r3, r0
 8019b78:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	dc20      	bgt.n	8019bc0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	8b5b      	ldrh	r3, [r3, #26]
 8019b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019b86:	b29a      	uxth	r2, r3
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019b8c:	e018      	b.n	8019bc0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b96:	68db      	ldr	r3, [r3, #12]
 8019b98:	685b      	ldr	r3, [r3, #4]
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	f7f7 f876 	bl	8010c8c <lwip_htonl>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	1ae3      	subs	r3, r4, r3
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	dc0b      	bgt.n	8019bc0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	8b5b      	ldrh	r3, [r3, #26]
 8019bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8019bb0:	b29a      	uxth	r2, r3
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019bb6:	e003      	b.n	8019bc0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8019bb8:	6878      	ldr	r0, [r7, #4]
 8019bba:	f001 ff85 	bl	801bac8 <tcp_send_empty_ack>
 8019bbe:	e000      	b.n	8019bc2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8019bc0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d05b      	beq.n	8019c82 <tcp_receive+0x50a>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019bce:	4b60      	ldr	r3, [pc, #384]	; (8019d50 <tcp_receive+0x5d8>)
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	1ad3      	subs	r3, r2, r3
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	da54      	bge.n	8019c82 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019bd8:	4b5e      	ldr	r3, [pc, #376]	; (8019d54 <tcp_receive+0x5dc>)
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	b29a      	uxth	r2, r3
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019be2:	b29b      	uxth	r3, r3
 8019be4:	1ad3      	subs	r3, r2, r3
 8019be6:	b29b      	uxth	r3, r3
 8019be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8019bec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019bf6:	10db      	asrs	r3, r3, #3
 8019bf8:	b21b      	sxth	r3, r3
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	1ad3      	subs	r3, r2, r3
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019c0a:	b29a      	uxth	r2, r3
 8019c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c10:	4413      	add	r3, r2
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	b21a      	sxth	r2, r3
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8019c1a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8019c1e:	2b00      	cmp	r3, #0
 8019c20:	da05      	bge.n	8019c2e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8019c22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c26:	425b      	negs	r3, r3
 8019c28:	b29b      	uxth	r3, r3
 8019c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8019c2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c38:	109b      	asrs	r3, r3, #2
 8019c3a:	b21b      	sxth	r3, r3
 8019c3c:	b29b      	uxth	r3, r3
 8019c3e:	1ad3      	subs	r3, r2, r3
 8019c40:	b29b      	uxth	r3, r3
 8019c42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c4c:	b29a      	uxth	r2, r3
 8019c4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8019c52:	4413      	add	r3, r2
 8019c54:	b29b      	uxth	r3, r3
 8019c56:	b21a      	sxth	r2, r3
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019c62:	10db      	asrs	r3, r3, #3
 8019c64:	b21b      	sxth	r3, r3
 8019c66:	b29a      	uxth	r2, r3
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019c6e:	b29b      	uxth	r3, r3
 8019c70:	4413      	add	r3, r2
 8019c72:	b29b      	uxth	r3, r3
 8019c74:	b21a      	sxth	r2, r3
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	2200      	movs	r2, #0
 8019c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019c82:	4b35      	ldr	r3, [pc, #212]	; (8019d58 <tcp_receive+0x5e0>)
 8019c84:	881b      	ldrh	r3, [r3, #0]
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	f000 84e1 	beq.w	801a64e <tcp_receive+0xed6>
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	7d1b      	ldrb	r3, [r3, #20]
 8019c90:	2b06      	cmp	r3, #6
 8019c92:	f200 84dc 	bhi.w	801a64e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019c9a:	4b30      	ldr	r3, [pc, #192]	; (8019d5c <tcp_receive+0x5e4>)
 8019c9c:	681b      	ldr	r3, [r3, #0]
 8019c9e:	1ad3      	subs	r3, r2, r3
 8019ca0:	3b01      	subs	r3, #1
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	f2c0 808e 	blt.w	8019dc4 <tcp_receive+0x64c>
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cac:	4b2a      	ldr	r3, [pc, #168]	; (8019d58 <tcp_receive+0x5e0>)
 8019cae:	881b      	ldrh	r3, [r3, #0]
 8019cb0:	4619      	mov	r1, r3
 8019cb2:	4b2a      	ldr	r3, [pc, #168]	; (8019d5c <tcp_receive+0x5e4>)
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	440b      	add	r3, r1
 8019cb8:	1ad3      	subs	r3, r2, r3
 8019cba:	3301      	adds	r3, #1
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	f300 8081 	bgt.w	8019dc4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8019cc2:	4b27      	ldr	r3, [pc, #156]	; (8019d60 <tcp_receive+0x5e8>)
 8019cc4:	685b      	ldr	r3, [r3, #4]
 8019cc6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019ccc:	4b23      	ldr	r3, [pc, #140]	; (8019d5c <tcp_receive+0x5e4>)
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019cd4:	4b22      	ldr	r3, [pc, #136]	; (8019d60 <tcp_receive+0x5e8>)
 8019cd6:	685b      	ldr	r3, [r3, #4]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d106      	bne.n	8019cea <tcp_receive+0x572>
 8019cdc:	4b21      	ldr	r3, [pc, #132]	; (8019d64 <tcp_receive+0x5ec>)
 8019cde:	f240 5294 	movw	r2, #1428	; 0x594
 8019ce2:	4921      	ldr	r1, [pc, #132]	; (8019d68 <tcp_receive+0x5f0>)
 8019ce4:	4821      	ldr	r0, [pc, #132]	; (8019d6c <tcp_receive+0x5f4>)
 8019ce6:	f002 fe67 	bl	801c9b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8019cf0:	4293      	cmp	r3, r2
 8019cf2:	d906      	bls.n	8019d02 <tcp_receive+0x58a>
 8019cf4:	4b1b      	ldr	r3, [pc, #108]	; (8019d64 <tcp_receive+0x5ec>)
 8019cf6:	f240 5295 	movw	r2, #1429	; 0x595
 8019cfa:	491d      	ldr	r1, [pc, #116]	; (8019d70 <tcp_receive+0x5f8>)
 8019cfc:	481b      	ldr	r0, [pc, #108]	; (8019d6c <tcp_receive+0x5f4>)
 8019cfe:	f002 fe5b 	bl	801c9b8 <iprintf>
      off = (u16_t)off32;
 8019d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d04:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019d08:	4b15      	ldr	r3, [pc, #84]	; (8019d60 <tcp_receive+0x5e8>)
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	891b      	ldrh	r3, [r3, #8]
 8019d0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d12:	429a      	cmp	r2, r3
 8019d14:	d906      	bls.n	8019d24 <tcp_receive+0x5ac>
 8019d16:	4b13      	ldr	r3, [pc, #76]	; (8019d64 <tcp_receive+0x5ec>)
 8019d18:	f240 5297 	movw	r2, #1431	; 0x597
 8019d1c:	4915      	ldr	r1, [pc, #84]	; (8019d74 <tcp_receive+0x5fc>)
 8019d1e:	4813      	ldr	r0, [pc, #76]	; (8019d6c <tcp_receive+0x5f4>)
 8019d20:	f002 fe4a 	bl	801c9b8 <iprintf>
      inseg.len -= off;
 8019d24:	4b0e      	ldr	r3, [pc, #56]	; (8019d60 <tcp_receive+0x5e8>)
 8019d26:	891a      	ldrh	r2, [r3, #8]
 8019d28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d2c:	1ad3      	subs	r3, r2, r3
 8019d2e:	b29a      	uxth	r2, r3
 8019d30:	4b0b      	ldr	r3, [pc, #44]	; (8019d60 <tcp_receive+0x5e8>)
 8019d32:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019d34:	4b0a      	ldr	r3, [pc, #40]	; (8019d60 <tcp_receive+0x5e8>)
 8019d36:	685b      	ldr	r3, [r3, #4]
 8019d38:	891a      	ldrh	r2, [r3, #8]
 8019d3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d3e:	1ad3      	subs	r3, r2, r3
 8019d40:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8019d42:	e029      	b.n	8019d98 <tcp_receive+0x620>
 8019d44:	0801fa8c 	.word	0x0801fa8c
 8019d48:	0801fa94 	.word	0x0801fa94
 8019d4c:	2400024c 	.word	0x2400024c
 8019d50:	24000248 	.word	0x24000248
 8019d54:	24007688 	.word	0x24007688
 8019d58:	2400024e 	.word	0x2400024e
 8019d5c:	24000244 	.word	0x24000244
 8019d60:	24000224 	.word	0x24000224
 8019d64:	0801f6fc 	.word	0x0801f6fc
 8019d68:	0801fa9c 	.word	0x0801fa9c
 8019d6c:	0801f770 	.word	0x0801f770
 8019d70:	0801faac 	.word	0x0801faac
 8019d74:	0801fabc 	.word	0x0801fabc
        off -= p->len;
 8019d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d7a:	895b      	ldrh	r3, [r3, #10]
 8019d7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019d8a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d8e:	2200      	movs	r2, #0
 8019d90:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8019d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8019d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019d9a:	895b      	ldrh	r3, [r3, #10]
 8019d9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019da0:	429a      	cmp	r2, r3
 8019da2:	d8e9      	bhi.n	8019d78 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019da8:	4619      	mov	r1, r3
 8019daa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8019dac:	f7fc fb7c 	bl	80164a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db4:	4a91      	ldr	r2, [pc, #580]	; (8019ffc <tcp_receive+0x884>)
 8019db6:	6013      	str	r3, [r2, #0]
 8019db8:	4b91      	ldr	r3, [pc, #580]	; (801a000 <tcp_receive+0x888>)
 8019dba:	68db      	ldr	r3, [r3, #12]
 8019dbc:	4a8f      	ldr	r2, [pc, #572]	; (8019ffc <tcp_receive+0x884>)
 8019dbe:	6812      	ldr	r2, [r2, #0]
 8019dc0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019dc2:	e00d      	b.n	8019de0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019dc4:	4b8d      	ldr	r3, [pc, #564]	; (8019ffc <tcp_receive+0x884>)
 8019dc6:	681a      	ldr	r2, [r3, #0]
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dcc:	1ad3      	subs	r3, r2, r3
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	da06      	bge.n	8019de0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	8b5b      	ldrh	r3, [r3, #26]
 8019dd6:	f043 0302 	orr.w	r3, r3, #2
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019de0:	4b86      	ldr	r3, [pc, #536]	; (8019ffc <tcp_receive+0x884>)
 8019de2:	681a      	ldr	r2, [r3, #0]
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de8:	1ad3      	subs	r3, r2, r3
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	f2c0 842a 	blt.w	801a644 <tcp_receive+0xecc>
 8019df0:	4b82      	ldr	r3, [pc, #520]	; (8019ffc <tcp_receive+0x884>)
 8019df2:	681a      	ldr	r2, [r3, #0]
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df8:	6879      	ldr	r1, [r7, #4]
 8019dfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019dfc:	440b      	add	r3, r1
 8019dfe:	1ad3      	subs	r3, r2, r3
 8019e00:	3301      	adds	r3, #1
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	f300 841e 	bgt.w	801a644 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019e0c:	4b7b      	ldr	r3, [pc, #492]	; (8019ffc <tcp_receive+0x884>)
 8019e0e:	681b      	ldr	r3, [r3, #0]
 8019e10:	429a      	cmp	r2, r3
 8019e12:	f040 829a 	bne.w	801a34a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8019e16:	4b7a      	ldr	r3, [pc, #488]	; (801a000 <tcp_receive+0x888>)
 8019e18:	891c      	ldrh	r4, [r3, #8]
 8019e1a:	4b79      	ldr	r3, [pc, #484]	; (801a000 <tcp_receive+0x888>)
 8019e1c:	68db      	ldr	r3, [r3, #12]
 8019e1e:	899b      	ldrh	r3, [r3, #12]
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7f6 ff1d 	bl	8010c62 <lwip_htons>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	b2db      	uxtb	r3, r3
 8019e2c:	f003 0303 	and.w	r3, r3, #3
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d001      	beq.n	8019e38 <tcp_receive+0x6c0>
 8019e34:	2301      	movs	r3, #1
 8019e36:	e000      	b.n	8019e3a <tcp_receive+0x6c2>
 8019e38:	2300      	movs	r3, #0
 8019e3a:	4423      	add	r3, r4
 8019e3c:	b29a      	uxth	r2, r3
 8019e3e:	4b71      	ldr	r3, [pc, #452]	; (801a004 <tcp_receive+0x88c>)
 8019e40:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019e46:	4b6f      	ldr	r3, [pc, #444]	; (801a004 <tcp_receive+0x88c>)
 8019e48:	881b      	ldrh	r3, [r3, #0]
 8019e4a:	429a      	cmp	r2, r3
 8019e4c:	d275      	bcs.n	8019f3a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e4e:	4b6c      	ldr	r3, [pc, #432]	; (801a000 <tcp_receive+0x888>)
 8019e50:	68db      	ldr	r3, [r3, #12]
 8019e52:	899b      	ldrh	r3, [r3, #12]
 8019e54:	b29b      	uxth	r3, r3
 8019e56:	4618      	mov	r0, r3
 8019e58:	f7f6 ff03 	bl	8010c62 <lwip_htons>
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	b2db      	uxtb	r3, r3
 8019e60:	f003 0301 	and.w	r3, r3, #1
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d01f      	beq.n	8019ea8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e68:	4b65      	ldr	r3, [pc, #404]	; (801a000 <tcp_receive+0x888>)
 8019e6a:	68db      	ldr	r3, [r3, #12]
 8019e6c:	899b      	ldrh	r3, [r3, #12]
 8019e6e:	b29b      	uxth	r3, r3
 8019e70:	b21b      	sxth	r3, r3
 8019e72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019e76:	b21c      	sxth	r4, r3
 8019e78:	4b61      	ldr	r3, [pc, #388]	; (801a000 <tcp_receive+0x888>)
 8019e7a:	68db      	ldr	r3, [r3, #12]
 8019e7c:	899b      	ldrh	r3, [r3, #12]
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	4618      	mov	r0, r3
 8019e82:	f7f6 feee 	bl	8010c62 <lwip_htons>
 8019e86:	4603      	mov	r3, r0
 8019e88:	b2db      	uxtb	r3, r3
 8019e8a:	b29b      	uxth	r3, r3
 8019e8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8019e90:	b29b      	uxth	r3, r3
 8019e92:	4618      	mov	r0, r3
 8019e94:	f7f6 fee5 	bl	8010c62 <lwip_htons>
 8019e98:	4603      	mov	r3, r0
 8019e9a:	b21b      	sxth	r3, r3
 8019e9c:	4323      	orrs	r3, r4
 8019e9e:	b21a      	sxth	r2, r3
 8019ea0:	4b57      	ldr	r3, [pc, #348]	; (801a000 <tcp_receive+0x888>)
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	b292      	uxth	r2, r2
 8019ea6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019eac:	4b54      	ldr	r3, [pc, #336]	; (801a000 <tcp_receive+0x888>)
 8019eae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019eb0:	4b53      	ldr	r3, [pc, #332]	; (801a000 <tcp_receive+0x888>)
 8019eb2:	68db      	ldr	r3, [r3, #12]
 8019eb4:	899b      	ldrh	r3, [r3, #12]
 8019eb6:	b29b      	uxth	r3, r3
 8019eb8:	4618      	mov	r0, r3
 8019eba:	f7f6 fed2 	bl	8010c62 <lwip_htons>
 8019ebe:	4603      	mov	r3, r0
 8019ec0:	b2db      	uxtb	r3, r3
 8019ec2:	f003 0302 	and.w	r3, r3, #2
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	d005      	beq.n	8019ed6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8019eca:	4b4d      	ldr	r3, [pc, #308]	; (801a000 <tcp_receive+0x888>)
 8019ecc:	891b      	ldrh	r3, [r3, #8]
 8019ece:	3b01      	subs	r3, #1
 8019ed0:	b29a      	uxth	r2, r3
 8019ed2:	4b4b      	ldr	r3, [pc, #300]	; (801a000 <tcp_receive+0x888>)
 8019ed4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019ed6:	4b4a      	ldr	r3, [pc, #296]	; (801a000 <tcp_receive+0x888>)
 8019ed8:	685a      	ldr	r2, [r3, #4]
 8019eda:	4b49      	ldr	r3, [pc, #292]	; (801a000 <tcp_receive+0x888>)
 8019edc:	891b      	ldrh	r3, [r3, #8]
 8019ede:	4619      	mov	r1, r3
 8019ee0:	4610      	mov	r0, r2
 8019ee2:	f7fc f9e1 	bl	80162a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019ee6:	4b46      	ldr	r3, [pc, #280]	; (801a000 <tcp_receive+0x888>)
 8019ee8:	891c      	ldrh	r4, [r3, #8]
 8019eea:	4b45      	ldr	r3, [pc, #276]	; (801a000 <tcp_receive+0x888>)
 8019eec:	68db      	ldr	r3, [r3, #12]
 8019eee:	899b      	ldrh	r3, [r3, #12]
 8019ef0:	b29b      	uxth	r3, r3
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	f7f6 feb5 	bl	8010c62 <lwip_htons>
 8019ef8:	4603      	mov	r3, r0
 8019efa:	b2db      	uxtb	r3, r3
 8019efc:	f003 0303 	and.w	r3, r3, #3
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d001      	beq.n	8019f08 <tcp_receive+0x790>
 8019f04:	2301      	movs	r3, #1
 8019f06:	e000      	b.n	8019f0a <tcp_receive+0x792>
 8019f08:	2300      	movs	r3, #0
 8019f0a:	4423      	add	r3, r4
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	4b3d      	ldr	r3, [pc, #244]	; (801a004 <tcp_receive+0x88c>)
 8019f10:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019f12:	4b3c      	ldr	r3, [pc, #240]	; (801a004 <tcp_receive+0x88c>)
 8019f14:	881b      	ldrh	r3, [r3, #0]
 8019f16:	461a      	mov	r2, r3
 8019f18:	4b38      	ldr	r3, [pc, #224]	; (8019ffc <tcp_receive+0x884>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	441a      	add	r2, r3
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f22:	6879      	ldr	r1, [r7, #4]
 8019f24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8019f26:	440b      	add	r3, r1
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d006      	beq.n	8019f3a <tcp_receive+0x7c2>
 8019f2c:	4b36      	ldr	r3, [pc, #216]	; (801a008 <tcp_receive+0x890>)
 8019f2e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8019f32:	4936      	ldr	r1, [pc, #216]	; (801a00c <tcp_receive+0x894>)
 8019f34:	4836      	ldr	r0, [pc, #216]	; (801a010 <tcp_receive+0x898>)
 8019f36:	f002 fd3f 	bl	801c9b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	f000 80e7 	beq.w	801a112 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019f44:	4b2e      	ldr	r3, [pc, #184]	; (801a000 <tcp_receive+0x888>)
 8019f46:	68db      	ldr	r3, [r3, #12]
 8019f48:	899b      	ldrh	r3, [r3, #12]
 8019f4a:	b29b      	uxth	r3, r3
 8019f4c:	4618      	mov	r0, r3
 8019f4e:	f7f6 fe88 	bl	8010c62 <lwip_htons>
 8019f52:	4603      	mov	r3, r0
 8019f54:	b2db      	uxtb	r3, r3
 8019f56:	f003 0301 	and.w	r3, r3, #1
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d010      	beq.n	8019f80 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019f5e:	e00a      	b.n	8019f76 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f6a:	681a      	ldr	r2, [r3, #0]
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019f70:	68f8      	ldr	r0, [r7, #12]
 8019f72:	f7fd fd97 	bl	8017aa4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d1f0      	bne.n	8019f60 <tcp_receive+0x7e8>
 8019f7e:	e0c8      	b.n	801a112 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f84:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019f86:	e052      	b.n	801a02e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019f8a:	68db      	ldr	r3, [r3, #12]
 8019f8c:	899b      	ldrh	r3, [r3, #12]
 8019f8e:	b29b      	uxth	r3, r3
 8019f90:	4618      	mov	r0, r3
 8019f92:	f7f6 fe66 	bl	8010c62 <lwip_htons>
 8019f96:	4603      	mov	r3, r0
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	f003 0301 	and.w	r3, r3, #1
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d03d      	beq.n	801a01e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019fa2:	4b17      	ldr	r3, [pc, #92]	; (801a000 <tcp_receive+0x888>)
 8019fa4:	68db      	ldr	r3, [r3, #12]
 8019fa6:	899b      	ldrh	r3, [r3, #12]
 8019fa8:	b29b      	uxth	r3, r3
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7f6 fe59 	bl	8010c62 <lwip_htons>
 8019fb0:	4603      	mov	r3, r0
 8019fb2:	b2db      	uxtb	r3, r3
 8019fb4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d130      	bne.n	801a01e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019fbc:	4b10      	ldr	r3, [pc, #64]	; (801a000 <tcp_receive+0x888>)
 8019fbe:	68db      	ldr	r3, [r3, #12]
 8019fc0:	899b      	ldrh	r3, [r3, #12]
 8019fc2:	b29c      	uxth	r4, r3
 8019fc4:	2001      	movs	r0, #1
 8019fc6:	f7f6 fe4c 	bl	8010c62 <lwip_htons>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	461a      	mov	r2, r3
 8019fce:	4b0c      	ldr	r3, [pc, #48]	; (801a000 <tcp_receive+0x888>)
 8019fd0:	68db      	ldr	r3, [r3, #12]
 8019fd2:	4322      	orrs	r2, r4
 8019fd4:	b292      	uxth	r2, r2
 8019fd6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019fd8:	4b09      	ldr	r3, [pc, #36]	; (801a000 <tcp_receive+0x888>)
 8019fda:	891c      	ldrh	r4, [r3, #8]
 8019fdc:	4b08      	ldr	r3, [pc, #32]	; (801a000 <tcp_receive+0x888>)
 8019fde:	68db      	ldr	r3, [r3, #12]
 8019fe0:	899b      	ldrh	r3, [r3, #12]
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	4618      	mov	r0, r3
 8019fe6:	f7f6 fe3c 	bl	8010c62 <lwip_htons>
 8019fea:	4603      	mov	r3, r0
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	f003 0303 	and.w	r3, r3, #3
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d00e      	beq.n	801a014 <tcp_receive+0x89c>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	e00d      	b.n	801a016 <tcp_receive+0x89e>
 8019ffa:	bf00      	nop
 8019ffc:	24000244 	.word	0x24000244
 801a000:	24000224 	.word	0x24000224
 801a004:	2400024e 	.word	0x2400024e
 801a008:	0801f6fc 	.word	0x0801f6fc
 801a00c:	0801facc 	.word	0x0801facc
 801a010:	0801f770 	.word	0x0801f770
 801a014:	2300      	movs	r3, #0
 801a016:	4423      	add	r3, r4
 801a018:	b29a      	uxth	r2, r3
 801a01a:	4b98      	ldr	r3, [pc, #608]	; (801a27c <tcp_receive+0xb04>)
 801a01c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a020:	613b      	str	r3, [r7, #16]
              next = next->next;
 801a022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801a028:	6938      	ldr	r0, [r7, #16]
 801a02a:	f7fd fd3b 	bl	8017aa4 <tcp_seg_free>
            while (next &&
 801a02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a030:	2b00      	cmp	r3, #0
 801a032:	d00e      	beq.n	801a052 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801a034:	4b91      	ldr	r3, [pc, #580]	; (801a27c <tcp_receive+0xb04>)
 801a036:	881b      	ldrh	r3, [r3, #0]
 801a038:	461a      	mov	r2, r3
 801a03a:	4b91      	ldr	r3, [pc, #580]	; (801a280 <tcp_receive+0xb08>)
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	441a      	add	r2, r3
 801a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a042:	68db      	ldr	r3, [r3, #12]
 801a044:	685b      	ldr	r3, [r3, #4]
 801a046:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801a048:	8909      	ldrh	r1, [r1, #8]
 801a04a:	440b      	add	r3, r1
 801a04c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801a04e:	2b00      	cmp	r3, #0
 801a050:	da9a      	bge.n	8019f88 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801a052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a054:	2b00      	cmp	r3, #0
 801a056:	d059      	beq.n	801a10c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801a058:	4b88      	ldr	r3, [pc, #544]	; (801a27c <tcp_receive+0xb04>)
 801a05a:	881b      	ldrh	r3, [r3, #0]
 801a05c:	461a      	mov	r2, r3
 801a05e:	4b88      	ldr	r3, [pc, #544]	; (801a280 <tcp_receive+0xb08>)
 801a060:	681b      	ldr	r3, [r3, #0]
 801a062:	441a      	add	r2, r3
 801a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a066:	68db      	ldr	r3, [r3, #12]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	dd4d      	ble.n	801a10c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801a070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	685b      	ldr	r3, [r3, #4]
 801a076:	b29a      	uxth	r2, r3
 801a078:	4b81      	ldr	r3, [pc, #516]	; (801a280 <tcp_receive+0xb08>)
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	b29b      	uxth	r3, r3
 801a07e:	1ad3      	subs	r3, r2, r3
 801a080:	b29a      	uxth	r2, r3
 801a082:	4b80      	ldr	r3, [pc, #512]	; (801a284 <tcp_receive+0xb0c>)
 801a084:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801a086:	4b7f      	ldr	r3, [pc, #508]	; (801a284 <tcp_receive+0xb0c>)
 801a088:	68db      	ldr	r3, [r3, #12]
 801a08a:	899b      	ldrh	r3, [r3, #12]
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	4618      	mov	r0, r3
 801a090:	f7f6 fde7 	bl	8010c62 <lwip_htons>
 801a094:	4603      	mov	r3, r0
 801a096:	b2db      	uxtb	r3, r3
 801a098:	f003 0302 	and.w	r3, r3, #2
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d005      	beq.n	801a0ac <tcp_receive+0x934>
                inseg.len -= 1;
 801a0a0:	4b78      	ldr	r3, [pc, #480]	; (801a284 <tcp_receive+0xb0c>)
 801a0a2:	891b      	ldrh	r3, [r3, #8]
 801a0a4:	3b01      	subs	r3, #1
 801a0a6:	b29a      	uxth	r2, r3
 801a0a8:	4b76      	ldr	r3, [pc, #472]	; (801a284 <tcp_receive+0xb0c>)
 801a0aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801a0ac:	4b75      	ldr	r3, [pc, #468]	; (801a284 <tcp_receive+0xb0c>)
 801a0ae:	685a      	ldr	r2, [r3, #4]
 801a0b0:	4b74      	ldr	r3, [pc, #464]	; (801a284 <tcp_receive+0xb0c>)
 801a0b2:	891b      	ldrh	r3, [r3, #8]
 801a0b4:	4619      	mov	r1, r3
 801a0b6:	4610      	mov	r0, r2
 801a0b8:	f7fc f8f6 	bl	80162a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801a0bc:	4b71      	ldr	r3, [pc, #452]	; (801a284 <tcp_receive+0xb0c>)
 801a0be:	891c      	ldrh	r4, [r3, #8]
 801a0c0:	4b70      	ldr	r3, [pc, #448]	; (801a284 <tcp_receive+0xb0c>)
 801a0c2:	68db      	ldr	r3, [r3, #12]
 801a0c4:	899b      	ldrh	r3, [r3, #12]
 801a0c6:	b29b      	uxth	r3, r3
 801a0c8:	4618      	mov	r0, r3
 801a0ca:	f7f6 fdca 	bl	8010c62 <lwip_htons>
 801a0ce:	4603      	mov	r3, r0
 801a0d0:	b2db      	uxtb	r3, r3
 801a0d2:	f003 0303 	and.w	r3, r3, #3
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	d001      	beq.n	801a0de <tcp_receive+0x966>
 801a0da:	2301      	movs	r3, #1
 801a0dc:	e000      	b.n	801a0e0 <tcp_receive+0x968>
 801a0de:	2300      	movs	r3, #0
 801a0e0:	4423      	add	r3, r4
 801a0e2:	b29a      	uxth	r2, r3
 801a0e4:	4b65      	ldr	r3, [pc, #404]	; (801a27c <tcp_receive+0xb04>)
 801a0e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801a0e8:	4b64      	ldr	r3, [pc, #400]	; (801a27c <tcp_receive+0xb04>)
 801a0ea:	881b      	ldrh	r3, [r3, #0]
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	4b64      	ldr	r3, [pc, #400]	; (801a280 <tcp_receive+0xb08>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	441a      	add	r2, r3
 801a0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a0f6:	68db      	ldr	r3, [r3, #12]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d006      	beq.n	801a10c <tcp_receive+0x994>
 801a0fe:	4b62      	ldr	r3, [pc, #392]	; (801a288 <tcp_receive+0xb10>)
 801a100:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801a104:	4961      	ldr	r1, [pc, #388]	; (801a28c <tcp_receive+0xb14>)
 801a106:	4862      	ldr	r0, [pc, #392]	; (801a290 <tcp_receive+0xb18>)
 801a108:	f002 fc56 	bl	801c9b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801a110:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801a112:	4b5a      	ldr	r3, [pc, #360]	; (801a27c <tcp_receive+0xb04>)
 801a114:	881b      	ldrh	r3, [r3, #0]
 801a116:	461a      	mov	r2, r3
 801a118:	4b59      	ldr	r3, [pc, #356]	; (801a280 <tcp_receive+0xb08>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	441a      	add	r2, r3
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a126:	4b55      	ldr	r3, [pc, #340]	; (801a27c <tcp_receive+0xb04>)
 801a128:	881b      	ldrh	r3, [r3, #0]
 801a12a:	429a      	cmp	r2, r3
 801a12c:	d206      	bcs.n	801a13c <tcp_receive+0x9c4>
 801a12e:	4b56      	ldr	r3, [pc, #344]	; (801a288 <tcp_receive+0xb10>)
 801a130:	f240 6207 	movw	r2, #1543	; 0x607
 801a134:	4957      	ldr	r1, [pc, #348]	; (801a294 <tcp_receive+0xb1c>)
 801a136:	4856      	ldr	r0, [pc, #344]	; (801a290 <tcp_receive+0xb18>)
 801a138:	f002 fc3e 	bl	801c9b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a140:	4b4e      	ldr	r3, [pc, #312]	; (801a27c <tcp_receive+0xb04>)
 801a142:	881b      	ldrh	r3, [r3, #0]
 801a144:	1ad3      	subs	r3, r2, r3
 801a146:	b29a      	uxth	r2, r3
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801a14c:	6878      	ldr	r0, [r7, #4]
 801a14e:	f7fc ffcd 	bl	80170ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801a152:	4b4c      	ldr	r3, [pc, #304]	; (801a284 <tcp_receive+0xb0c>)
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	891b      	ldrh	r3, [r3, #8]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d006      	beq.n	801a16a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801a15c:	4b49      	ldr	r3, [pc, #292]	; (801a284 <tcp_receive+0xb0c>)
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	4a4d      	ldr	r2, [pc, #308]	; (801a298 <tcp_receive+0xb20>)
 801a162:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801a164:	4b47      	ldr	r3, [pc, #284]	; (801a284 <tcp_receive+0xb0c>)
 801a166:	2200      	movs	r2, #0
 801a168:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801a16a:	4b46      	ldr	r3, [pc, #280]	; (801a284 <tcp_receive+0xb0c>)
 801a16c:	68db      	ldr	r3, [r3, #12]
 801a16e:	899b      	ldrh	r3, [r3, #12]
 801a170:	b29b      	uxth	r3, r3
 801a172:	4618      	mov	r0, r3
 801a174:	f7f6 fd75 	bl	8010c62 <lwip_htons>
 801a178:	4603      	mov	r3, r0
 801a17a:	b2db      	uxtb	r3, r3
 801a17c:	f003 0301 	and.w	r3, r3, #1
 801a180:	2b00      	cmp	r3, #0
 801a182:	f000 80b8 	beq.w	801a2f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801a186:	4b45      	ldr	r3, [pc, #276]	; (801a29c <tcp_receive+0xb24>)
 801a188:	781b      	ldrb	r3, [r3, #0]
 801a18a:	f043 0320 	orr.w	r3, r3, #32
 801a18e:	b2da      	uxtb	r2, r3
 801a190:	4b42      	ldr	r3, [pc, #264]	; (801a29c <tcp_receive+0xb24>)
 801a192:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801a194:	e0af      	b.n	801a2f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a19a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a1a0:	68db      	ldr	r3, [r3, #12]
 801a1a2:	685b      	ldr	r3, [r3, #4]
 801a1a4:	4a36      	ldr	r2, [pc, #216]	; (801a280 <tcp_receive+0xb08>)
 801a1a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801a1a8:	68bb      	ldr	r3, [r7, #8]
 801a1aa:	891b      	ldrh	r3, [r3, #8]
 801a1ac:	461c      	mov	r4, r3
 801a1ae:	68bb      	ldr	r3, [r7, #8]
 801a1b0:	68db      	ldr	r3, [r3, #12]
 801a1b2:	899b      	ldrh	r3, [r3, #12]
 801a1b4:	b29b      	uxth	r3, r3
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7f6 fd53 	bl	8010c62 <lwip_htons>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	b2db      	uxtb	r3, r3
 801a1c0:	f003 0303 	and.w	r3, r3, #3
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d001      	beq.n	801a1cc <tcp_receive+0xa54>
 801a1c8:	2301      	movs	r3, #1
 801a1ca:	e000      	b.n	801a1ce <tcp_receive+0xa56>
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	191a      	adds	r2, r3, r4
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1d4:	441a      	add	r2, r3
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a1de:	461c      	mov	r4, r3
 801a1e0:	68bb      	ldr	r3, [r7, #8]
 801a1e2:	891b      	ldrh	r3, [r3, #8]
 801a1e4:	461d      	mov	r5, r3
 801a1e6:	68bb      	ldr	r3, [r7, #8]
 801a1e8:	68db      	ldr	r3, [r3, #12]
 801a1ea:	899b      	ldrh	r3, [r3, #12]
 801a1ec:	b29b      	uxth	r3, r3
 801a1ee:	4618      	mov	r0, r3
 801a1f0:	f7f6 fd37 	bl	8010c62 <lwip_htons>
 801a1f4:	4603      	mov	r3, r0
 801a1f6:	b2db      	uxtb	r3, r3
 801a1f8:	f003 0303 	and.w	r3, r3, #3
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d001      	beq.n	801a204 <tcp_receive+0xa8c>
 801a200:	2301      	movs	r3, #1
 801a202:	e000      	b.n	801a206 <tcp_receive+0xa8e>
 801a204:	2300      	movs	r3, #0
 801a206:	442b      	add	r3, r5
 801a208:	429c      	cmp	r4, r3
 801a20a:	d206      	bcs.n	801a21a <tcp_receive+0xaa2>
 801a20c:	4b1e      	ldr	r3, [pc, #120]	; (801a288 <tcp_receive+0xb10>)
 801a20e:	f240 622c 	movw	r2, #1580	; 0x62c
 801a212:	4923      	ldr	r1, [pc, #140]	; (801a2a0 <tcp_receive+0xb28>)
 801a214:	481e      	ldr	r0, [pc, #120]	; (801a290 <tcp_receive+0xb18>)
 801a216:	f002 fbcf 	bl	801c9b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	891b      	ldrh	r3, [r3, #8]
 801a21e:	461c      	mov	r4, r3
 801a220:	68bb      	ldr	r3, [r7, #8]
 801a222:	68db      	ldr	r3, [r3, #12]
 801a224:	899b      	ldrh	r3, [r3, #12]
 801a226:	b29b      	uxth	r3, r3
 801a228:	4618      	mov	r0, r3
 801a22a:	f7f6 fd1a 	bl	8010c62 <lwip_htons>
 801a22e:	4603      	mov	r3, r0
 801a230:	b2db      	uxtb	r3, r3
 801a232:	f003 0303 	and.w	r3, r3, #3
 801a236:	2b00      	cmp	r3, #0
 801a238:	d001      	beq.n	801a23e <tcp_receive+0xac6>
 801a23a:	2301      	movs	r3, #1
 801a23c:	e000      	b.n	801a240 <tcp_receive+0xac8>
 801a23e:	2300      	movs	r3, #0
 801a240:	1919      	adds	r1, r3, r4
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801a246:	b28b      	uxth	r3, r1
 801a248:	1ad3      	subs	r3, r2, r3
 801a24a:	b29a      	uxth	r2, r3
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801a250:	6878      	ldr	r0, [r7, #4]
 801a252:	f7fc ff4b 	bl	80170ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	685b      	ldr	r3, [r3, #4]
 801a25a:	891b      	ldrh	r3, [r3, #8]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d028      	beq.n	801a2b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801a260:	4b0d      	ldr	r3, [pc, #52]	; (801a298 <tcp_receive+0xb20>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	2b00      	cmp	r3, #0
 801a266:	d01d      	beq.n	801a2a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801a268:	4b0b      	ldr	r3, [pc, #44]	; (801a298 <tcp_receive+0xb20>)
 801a26a:	681a      	ldr	r2, [r3, #0]
 801a26c:	68bb      	ldr	r3, [r7, #8]
 801a26e:	685b      	ldr	r3, [r3, #4]
 801a270:	4619      	mov	r1, r3
 801a272:	4610      	mov	r0, r2
 801a274:	f7fc fa60 	bl	8016738 <pbuf_cat>
 801a278:	e018      	b.n	801a2ac <tcp_receive+0xb34>
 801a27a:	bf00      	nop
 801a27c:	2400024e 	.word	0x2400024e
 801a280:	24000244 	.word	0x24000244
 801a284:	24000224 	.word	0x24000224
 801a288:	0801f6fc 	.word	0x0801f6fc
 801a28c:	0801fb04 	.word	0x0801fb04
 801a290:	0801f770 	.word	0x0801f770
 801a294:	0801fb40 	.word	0x0801fb40
 801a298:	24000254 	.word	0x24000254
 801a29c:	24000251 	.word	0x24000251
 801a2a0:	0801fb60 	.word	0x0801fb60
            } else {
              recv_data = cseg->p;
 801a2a4:	68bb      	ldr	r3, [r7, #8]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	4a70      	ldr	r2, [pc, #448]	; (801a46c <tcp_receive+0xcf4>)
 801a2aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801a2ac:	68bb      	ldr	r3, [r7, #8]
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801a2b2:	68bb      	ldr	r3, [r7, #8]
 801a2b4:	68db      	ldr	r3, [r3, #12]
 801a2b6:	899b      	ldrh	r3, [r3, #12]
 801a2b8:	b29b      	uxth	r3, r3
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f7f6 fcd1 	bl	8010c62 <lwip_htons>
 801a2c0:	4603      	mov	r3, r0
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	f003 0301 	and.w	r3, r3, #1
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d00d      	beq.n	801a2e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801a2cc:	4b68      	ldr	r3, [pc, #416]	; (801a470 <tcp_receive+0xcf8>)
 801a2ce:	781b      	ldrb	r3, [r3, #0]
 801a2d0:	f043 0320 	orr.w	r3, r3, #32
 801a2d4:	b2da      	uxtb	r2, r3
 801a2d6:	4b66      	ldr	r3, [pc, #408]	; (801a470 <tcp_receive+0xcf8>)
 801a2d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	7d1b      	ldrb	r3, [r3, #20]
 801a2de:	2b04      	cmp	r3, #4
 801a2e0:	d102      	bne.n	801a2e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	2207      	movs	r2, #7
 801a2e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	681a      	ldr	r2, [r3, #0]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801a2f0:	68b8      	ldr	r0, [r7, #8]
 801a2f2:	f7fd fbd7 	bl	8017aa4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d008      	beq.n	801a310 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a302:	68db      	ldr	r3, [r3, #12]
 801a304:	685a      	ldr	r2, [r3, #4]
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801a30a:	429a      	cmp	r2, r3
 801a30c:	f43f af43 	beq.w	801a196 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	8b5b      	ldrh	r3, [r3, #26]
 801a314:	f003 0301 	and.w	r3, r3, #1
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d00e      	beq.n	801a33a <tcp_receive+0xbc2>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	8b5b      	ldrh	r3, [r3, #26]
 801a320:	f023 0301 	bic.w	r3, r3, #1
 801a324:	b29a      	uxth	r2, r3
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	835a      	strh	r2, [r3, #26]
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	8b5b      	ldrh	r3, [r3, #26]
 801a32e:	f043 0302 	orr.w	r3, r3, #2
 801a332:	b29a      	uxth	r2, r3
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a338:	e188      	b.n	801a64c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	8b5b      	ldrh	r3, [r3, #26]
 801a33e:	f043 0301 	orr.w	r3, r3, #1
 801a342:	b29a      	uxth	r2, r3
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801a348:	e180      	b.n	801a64c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d106      	bne.n	801a360 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801a352:	4848      	ldr	r0, [pc, #288]	; (801a474 <tcp_receive+0xcfc>)
 801a354:	f7fd fbbe 	bl	8017ad4 <tcp_seg_copy>
 801a358:	4602      	mov	r2, r0
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	675a      	str	r2, [r3, #116]	; 0x74
 801a35e:	e16d      	b.n	801a63c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801a360:	2300      	movs	r3, #0
 801a362:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a368:	63bb      	str	r3, [r7, #56]	; 0x38
 801a36a:	e157      	b.n	801a61c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801a36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a36e:	68db      	ldr	r3, [r3, #12]
 801a370:	685a      	ldr	r2, [r3, #4]
 801a372:	4b41      	ldr	r3, [pc, #260]	; (801a478 <tcp_receive+0xd00>)
 801a374:	681b      	ldr	r3, [r3, #0]
 801a376:	429a      	cmp	r2, r3
 801a378:	d11d      	bne.n	801a3b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801a37a:	4b3e      	ldr	r3, [pc, #248]	; (801a474 <tcp_receive+0xcfc>)
 801a37c:	891a      	ldrh	r2, [r3, #8]
 801a37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a380:	891b      	ldrh	r3, [r3, #8]
 801a382:	429a      	cmp	r2, r3
 801a384:	f240 814f 	bls.w	801a626 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a388:	483a      	ldr	r0, [pc, #232]	; (801a474 <tcp_receive+0xcfc>)
 801a38a:	f7fd fba3 	bl	8017ad4 <tcp_seg_copy>
 801a38e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801a390:	697b      	ldr	r3, [r7, #20]
 801a392:	2b00      	cmp	r3, #0
 801a394:	f000 8149 	beq.w	801a62a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801a398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d003      	beq.n	801a3a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801a39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3a0:	697a      	ldr	r2, [r7, #20]
 801a3a2:	601a      	str	r2, [r3, #0]
 801a3a4:	e002      	b.n	801a3ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	697a      	ldr	r2, [r7, #20]
 801a3aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801a3ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a3ae:	6978      	ldr	r0, [r7, #20]
 801a3b0:	f7ff f8de 	bl	8019570 <tcp_oos_insert_segment>
                }
                break;
 801a3b4:	e139      	b.n	801a62a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801a3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d117      	bne.n	801a3ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801a3bc:	4b2e      	ldr	r3, [pc, #184]	; (801a478 <tcp_receive+0xd00>)
 801a3be:	681a      	ldr	r2, [r3, #0]
 801a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a3c2:	68db      	ldr	r3, [r3, #12]
 801a3c4:	685b      	ldr	r3, [r3, #4]
 801a3c6:	1ad3      	subs	r3, r2, r3
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	da57      	bge.n	801a47c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a3cc:	4829      	ldr	r0, [pc, #164]	; (801a474 <tcp_receive+0xcfc>)
 801a3ce:	f7fd fb81 	bl	8017ad4 <tcp_seg_copy>
 801a3d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801a3d4:	69bb      	ldr	r3, [r7, #24]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	f000 8129 	beq.w	801a62e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	69ba      	ldr	r2, [r7, #24]
 801a3e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801a3e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a3e4:	69b8      	ldr	r0, [r7, #24]
 801a3e6:	f7ff f8c3 	bl	8019570 <tcp_oos_insert_segment>
                  }
                  break;
 801a3ea:	e120      	b.n	801a62e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801a3ec:	4b22      	ldr	r3, [pc, #136]	; (801a478 <tcp_receive+0xd00>)
 801a3ee:	681a      	ldr	r2, [r3, #0]
 801a3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a3f2:	68db      	ldr	r3, [r3, #12]
 801a3f4:	685b      	ldr	r3, [r3, #4]
 801a3f6:	1ad3      	subs	r3, r2, r3
 801a3f8:	3b01      	subs	r3, #1
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	db3e      	blt.n	801a47c <tcp_receive+0xd04>
 801a3fe:	4b1e      	ldr	r3, [pc, #120]	; (801a478 <tcp_receive+0xd00>)
 801a400:	681a      	ldr	r2, [r3, #0]
 801a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a404:	68db      	ldr	r3, [r3, #12]
 801a406:	685b      	ldr	r3, [r3, #4]
 801a408:	1ad3      	subs	r3, r2, r3
 801a40a:	3301      	adds	r3, #1
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	dc35      	bgt.n	801a47c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801a410:	4818      	ldr	r0, [pc, #96]	; (801a474 <tcp_receive+0xcfc>)
 801a412:	f7fd fb5f 	bl	8017ad4 <tcp_seg_copy>
 801a416:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	f000 8109 	beq.w	801a632 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801a420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a422:	68db      	ldr	r3, [r3, #12]
 801a424:	685b      	ldr	r3, [r3, #4]
 801a426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a428:	8912      	ldrh	r2, [r2, #8]
 801a42a:	441a      	add	r2, r3
 801a42c:	4b12      	ldr	r3, [pc, #72]	; (801a478 <tcp_receive+0xd00>)
 801a42e:	681b      	ldr	r3, [r3, #0]
 801a430:	1ad3      	subs	r3, r2, r3
 801a432:	2b00      	cmp	r3, #0
 801a434:	dd12      	ble.n	801a45c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801a436:	4b10      	ldr	r3, [pc, #64]	; (801a478 <tcp_receive+0xd00>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	b29a      	uxth	r2, r3
 801a43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a43e:	68db      	ldr	r3, [r3, #12]
 801a440:	685b      	ldr	r3, [r3, #4]
 801a442:	b29b      	uxth	r3, r3
 801a444:	1ad3      	subs	r3, r2, r3
 801a446:	b29a      	uxth	r2, r3
 801a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a44a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a44e:	685a      	ldr	r2, [r3, #4]
 801a450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a452:	891b      	ldrh	r3, [r3, #8]
 801a454:	4619      	mov	r1, r3
 801a456:	4610      	mov	r0, r2
 801a458:	f7fb ff26 	bl	80162a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801a45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a45e:	69fa      	ldr	r2, [r7, #28]
 801a460:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801a462:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801a464:	69f8      	ldr	r0, [r7, #28]
 801a466:	f7ff f883 	bl	8019570 <tcp_oos_insert_segment>
                  }
                  break;
 801a46a:	e0e2      	b.n	801a632 <tcp_receive+0xeba>
 801a46c:	24000254 	.word	0x24000254
 801a470:	24000251 	.word	0x24000251
 801a474:	24000224 	.word	0x24000224
 801a478:	24000244 	.word	0x24000244
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a47e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801a480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	f040 80c6 	bne.w	801a616 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801a48a:	4b80      	ldr	r3, [pc, #512]	; (801a68c <tcp_receive+0xf14>)
 801a48c:	681a      	ldr	r2, [r3, #0]
 801a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a490:	68db      	ldr	r3, [r3, #12]
 801a492:	685b      	ldr	r3, [r3, #4]
 801a494:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801a496:	2b00      	cmp	r3, #0
 801a498:	f340 80bd 	ble.w	801a616 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a49e:	68db      	ldr	r3, [r3, #12]
 801a4a0:	899b      	ldrh	r3, [r3, #12]
 801a4a2:	b29b      	uxth	r3, r3
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f7f6 fbdc 	bl	8010c62 <lwip_htons>
 801a4aa:	4603      	mov	r3, r0
 801a4ac:	b2db      	uxtb	r3, r3
 801a4ae:	f003 0301 	and.w	r3, r3, #1
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	f040 80bf 	bne.w	801a636 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801a4b8:	4875      	ldr	r0, [pc, #468]	; (801a690 <tcp_receive+0xf18>)
 801a4ba:	f7fd fb0b 	bl	8017ad4 <tcp_seg_copy>
 801a4be:	4602      	mov	r2, r0
 801a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4c2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	f000 80b6 	beq.w	801a63a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801a4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4d0:	68db      	ldr	r3, [r3, #12]
 801a4d2:	685b      	ldr	r3, [r3, #4]
 801a4d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801a4d6:	8912      	ldrh	r2, [r2, #8]
 801a4d8:	441a      	add	r2, r3
 801a4da:	4b6c      	ldr	r3, [pc, #432]	; (801a68c <tcp_receive+0xf14>)
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	dd12      	ble.n	801a50a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801a4e4:	4b69      	ldr	r3, [pc, #420]	; (801a68c <tcp_receive+0xf14>)
 801a4e6:	681b      	ldr	r3, [r3, #0]
 801a4e8:	b29a      	uxth	r2, r3
 801a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4ec:	68db      	ldr	r3, [r3, #12]
 801a4ee:	685b      	ldr	r3, [r3, #4]
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	1ad3      	subs	r3, r2, r3
 801a4f4:	b29a      	uxth	r2, r3
 801a4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4f8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a4fc:	685a      	ldr	r2, [r3, #4]
 801a4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a500:	891b      	ldrh	r3, [r3, #8]
 801a502:	4619      	mov	r1, r3
 801a504:	4610      	mov	r0, r2
 801a506:	f7fb fecf 	bl	80162a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801a50a:	4b62      	ldr	r3, [pc, #392]	; (801a694 <tcp_receive+0xf1c>)
 801a50c:	881b      	ldrh	r3, [r3, #0]
 801a50e:	461a      	mov	r2, r3
 801a510:	4b5e      	ldr	r3, [pc, #376]	; (801a68c <tcp_receive+0xf14>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	441a      	add	r2, r3
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a51a:	6879      	ldr	r1, [r7, #4]
 801a51c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a51e:	440b      	add	r3, r1
 801a520:	1ad3      	subs	r3, r2, r3
 801a522:	2b00      	cmp	r3, #0
 801a524:	f340 8089 	ble.w	801a63a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	68db      	ldr	r3, [r3, #12]
 801a52e:	899b      	ldrh	r3, [r3, #12]
 801a530:	b29b      	uxth	r3, r3
 801a532:	4618      	mov	r0, r3
 801a534:	f7f6 fb95 	bl	8010c62 <lwip_htons>
 801a538:	4603      	mov	r3, r0
 801a53a:	b2db      	uxtb	r3, r3
 801a53c:	f003 0301 	and.w	r3, r3, #1
 801a540:	2b00      	cmp	r3, #0
 801a542:	d022      	beq.n	801a58a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	899b      	ldrh	r3, [r3, #12]
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	b21b      	sxth	r3, r3
 801a550:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a554:	b21c      	sxth	r4, r3
 801a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	68db      	ldr	r3, [r3, #12]
 801a55c:	899b      	ldrh	r3, [r3, #12]
 801a55e:	b29b      	uxth	r3, r3
 801a560:	4618      	mov	r0, r3
 801a562:	f7f6 fb7e 	bl	8010c62 <lwip_htons>
 801a566:	4603      	mov	r3, r0
 801a568:	b2db      	uxtb	r3, r3
 801a56a:	b29b      	uxth	r3, r3
 801a56c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801a570:	b29b      	uxth	r3, r3
 801a572:	4618      	mov	r0, r3
 801a574:	f7f6 fb75 	bl	8010c62 <lwip_htons>
 801a578:	4603      	mov	r3, r0
 801a57a:	b21b      	sxth	r3, r3
 801a57c:	4323      	orrs	r3, r4
 801a57e:	b21a      	sxth	r2, r3
 801a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	68db      	ldr	r3, [r3, #12]
 801a586:	b292      	uxth	r2, r2
 801a588:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a58e:	b29a      	uxth	r2, r3
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a594:	4413      	add	r3, r2
 801a596:	b299      	uxth	r1, r3
 801a598:	4b3c      	ldr	r3, [pc, #240]	; (801a68c <tcp_receive+0xf14>)
 801a59a:	681b      	ldr	r3, [r3, #0]
 801a59c:	b29a      	uxth	r2, r3
 801a59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	1a8a      	subs	r2, r1, r2
 801a5a4:	b292      	uxth	r2, r2
 801a5a6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801a5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	685a      	ldr	r2, [r3, #4]
 801a5ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	891b      	ldrh	r3, [r3, #8]
 801a5b4:	4619      	mov	r1, r3
 801a5b6:	4610      	mov	r0, r2
 801a5b8:	f7fb fe76 	bl	80162a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	891c      	ldrh	r4, [r3, #8]
 801a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	68db      	ldr	r3, [r3, #12]
 801a5c8:	899b      	ldrh	r3, [r3, #12]
 801a5ca:	b29b      	uxth	r3, r3
 801a5cc:	4618      	mov	r0, r3
 801a5ce:	f7f6 fb48 	bl	8010c62 <lwip_htons>
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	b2db      	uxtb	r3, r3
 801a5d6:	f003 0303 	and.w	r3, r3, #3
 801a5da:	2b00      	cmp	r3, #0
 801a5dc:	d001      	beq.n	801a5e2 <tcp_receive+0xe6a>
 801a5de:	2301      	movs	r3, #1
 801a5e0:	e000      	b.n	801a5e4 <tcp_receive+0xe6c>
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	4423      	add	r3, r4
 801a5e6:	b29a      	uxth	r2, r3
 801a5e8:	4b2a      	ldr	r3, [pc, #168]	; (801a694 <tcp_receive+0xf1c>)
 801a5ea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801a5ec:	4b29      	ldr	r3, [pc, #164]	; (801a694 <tcp_receive+0xf1c>)
 801a5ee:	881b      	ldrh	r3, [r3, #0]
 801a5f0:	461a      	mov	r2, r3
 801a5f2:	4b26      	ldr	r3, [pc, #152]	; (801a68c <tcp_receive+0xf14>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	441a      	add	r2, r3
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5fc:	6879      	ldr	r1, [r7, #4]
 801a5fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a600:	440b      	add	r3, r1
 801a602:	429a      	cmp	r2, r3
 801a604:	d019      	beq.n	801a63a <tcp_receive+0xec2>
 801a606:	4b24      	ldr	r3, [pc, #144]	; (801a698 <tcp_receive+0xf20>)
 801a608:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a60c:	4923      	ldr	r1, [pc, #140]	; (801a69c <tcp_receive+0xf24>)
 801a60e:	4824      	ldr	r0, [pc, #144]	; (801a6a0 <tcp_receive+0xf28>)
 801a610:	f002 f9d2 	bl	801c9b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801a614:	e011      	b.n	801a63a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	63bb      	str	r3, [r7, #56]	; 0x38
 801a61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a61e:	2b00      	cmp	r3, #0
 801a620:	f47f aea4 	bne.w	801a36c <tcp_receive+0xbf4>
 801a624:	e00a      	b.n	801a63c <tcp_receive+0xec4>
                break;
 801a626:	bf00      	nop
 801a628:	e008      	b.n	801a63c <tcp_receive+0xec4>
                break;
 801a62a:	bf00      	nop
 801a62c:	e006      	b.n	801a63c <tcp_receive+0xec4>
                  break;
 801a62e:	bf00      	nop
 801a630:	e004      	b.n	801a63c <tcp_receive+0xec4>
                  break;
 801a632:	bf00      	nop
 801a634:	e002      	b.n	801a63c <tcp_receive+0xec4>
                  break;
 801a636:	bf00      	nop
 801a638:	e000      	b.n	801a63c <tcp_receive+0xec4>
                break;
 801a63a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	f001 fa43 	bl	801bac8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801a642:	e003      	b.n	801a64c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801a644:	6878      	ldr	r0, [r7, #4]
 801a646:	f001 fa3f 	bl	801bac8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a64a:	e01a      	b.n	801a682 <tcp_receive+0xf0a>
 801a64c:	e019      	b.n	801a682 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801a64e:	4b0f      	ldr	r3, [pc, #60]	; (801a68c <tcp_receive+0xf14>)
 801a650:	681a      	ldr	r2, [r3, #0]
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a656:	1ad3      	subs	r3, r2, r3
 801a658:	2b00      	cmp	r3, #0
 801a65a:	db0a      	blt.n	801a672 <tcp_receive+0xefa>
 801a65c:	4b0b      	ldr	r3, [pc, #44]	; (801a68c <tcp_receive+0xf14>)
 801a65e:	681a      	ldr	r2, [r3, #0]
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a664:	6879      	ldr	r1, [r7, #4]
 801a666:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a668:	440b      	add	r3, r1
 801a66a:	1ad3      	subs	r3, r2, r3
 801a66c:	3301      	adds	r3, #1
 801a66e:	2b00      	cmp	r3, #0
 801a670:	dd07      	ble.n	801a682 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	8b5b      	ldrh	r3, [r3, #26]
 801a676:	f043 0302 	orr.w	r3, r3, #2
 801a67a:	b29a      	uxth	r2, r3
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801a680:	e7ff      	b.n	801a682 <tcp_receive+0xf0a>
 801a682:	bf00      	nop
 801a684:	3750      	adds	r7, #80	; 0x50
 801a686:	46bd      	mov	sp, r7
 801a688:	bdb0      	pop	{r4, r5, r7, pc}
 801a68a:	bf00      	nop
 801a68c:	24000244 	.word	0x24000244
 801a690:	24000224 	.word	0x24000224
 801a694:	2400024e 	.word	0x2400024e
 801a698:	0801f6fc 	.word	0x0801f6fc
 801a69c:	0801facc 	.word	0x0801facc
 801a6a0:	0801f770 	.word	0x0801f770

0801a6a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801a6a4:	b480      	push	{r7}
 801a6a6:	b083      	sub	sp, #12
 801a6a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801a6aa:	4b15      	ldr	r3, [pc, #84]	; (801a700 <tcp_get_next_optbyte+0x5c>)
 801a6ac:	881b      	ldrh	r3, [r3, #0]
 801a6ae:	1c5a      	adds	r2, r3, #1
 801a6b0:	b291      	uxth	r1, r2
 801a6b2:	4a13      	ldr	r2, [pc, #76]	; (801a700 <tcp_get_next_optbyte+0x5c>)
 801a6b4:	8011      	strh	r1, [r2, #0]
 801a6b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801a6b8:	4b12      	ldr	r3, [pc, #72]	; (801a704 <tcp_get_next_optbyte+0x60>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d004      	beq.n	801a6ca <tcp_get_next_optbyte+0x26>
 801a6c0:	4b11      	ldr	r3, [pc, #68]	; (801a708 <tcp_get_next_optbyte+0x64>)
 801a6c2:	881b      	ldrh	r3, [r3, #0]
 801a6c4:	88fa      	ldrh	r2, [r7, #6]
 801a6c6:	429a      	cmp	r2, r3
 801a6c8:	d208      	bcs.n	801a6dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801a6ca:	4b10      	ldr	r3, [pc, #64]	; (801a70c <tcp_get_next_optbyte+0x68>)
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	3314      	adds	r3, #20
 801a6d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801a6d2:	88fb      	ldrh	r3, [r7, #6]
 801a6d4:	683a      	ldr	r2, [r7, #0]
 801a6d6:	4413      	add	r3, r2
 801a6d8:	781b      	ldrb	r3, [r3, #0]
 801a6da:	e00b      	b.n	801a6f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801a6dc:	88fb      	ldrh	r3, [r7, #6]
 801a6de:	b2da      	uxtb	r2, r3
 801a6e0:	4b09      	ldr	r3, [pc, #36]	; (801a708 <tcp_get_next_optbyte+0x64>)
 801a6e2:	881b      	ldrh	r3, [r3, #0]
 801a6e4:	b2db      	uxtb	r3, r3
 801a6e6:	1ad3      	subs	r3, r2, r3
 801a6e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801a6ea:	4b06      	ldr	r3, [pc, #24]	; (801a704 <tcp_get_next_optbyte+0x60>)
 801a6ec:	681a      	ldr	r2, [r3, #0]
 801a6ee:	797b      	ldrb	r3, [r7, #5]
 801a6f0:	4413      	add	r3, r2
 801a6f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	370c      	adds	r7, #12
 801a6f8:	46bd      	mov	sp, r7
 801a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6fe:	4770      	bx	lr
 801a700:	24000240 	.word	0x24000240
 801a704:	2400023c 	.word	0x2400023c
 801a708:	2400023a 	.word	0x2400023a
 801a70c:	24000234 	.word	0x24000234

0801a710 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b084      	sub	sp, #16
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d106      	bne.n	801a72c <tcp_parseopt+0x1c>
 801a71e:	4b31      	ldr	r3, [pc, #196]	; (801a7e4 <tcp_parseopt+0xd4>)
 801a720:	f240 727d 	movw	r2, #1917	; 0x77d
 801a724:	4930      	ldr	r1, [pc, #192]	; (801a7e8 <tcp_parseopt+0xd8>)
 801a726:	4831      	ldr	r0, [pc, #196]	; (801a7ec <tcp_parseopt+0xdc>)
 801a728:	f002 f946 	bl	801c9b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801a72c:	4b30      	ldr	r3, [pc, #192]	; (801a7f0 <tcp_parseopt+0xe0>)
 801a72e:	881b      	ldrh	r3, [r3, #0]
 801a730:	2b00      	cmp	r3, #0
 801a732:	d053      	beq.n	801a7dc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a734:	4b2f      	ldr	r3, [pc, #188]	; (801a7f4 <tcp_parseopt+0xe4>)
 801a736:	2200      	movs	r2, #0
 801a738:	801a      	strh	r2, [r3, #0]
 801a73a:	e043      	b.n	801a7c4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801a73c:	f7ff ffb2 	bl	801a6a4 <tcp_get_next_optbyte>
 801a740:	4603      	mov	r3, r0
 801a742:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801a744:	7bfb      	ldrb	r3, [r7, #15]
 801a746:	2b01      	cmp	r3, #1
 801a748:	d03c      	beq.n	801a7c4 <tcp_parseopt+0xb4>
 801a74a:	2b02      	cmp	r3, #2
 801a74c:	d002      	beq.n	801a754 <tcp_parseopt+0x44>
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d03f      	beq.n	801a7d2 <tcp_parseopt+0xc2>
 801a752:	e026      	b.n	801a7a2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801a754:	f7ff ffa6 	bl	801a6a4 <tcp_get_next_optbyte>
 801a758:	4603      	mov	r3, r0
 801a75a:	2b04      	cmp	r3, #4
 801a75c:	d13b      	bne.n	801a7d6 <tcp_parseopt+0xc6>
 801a75e:	4b25      	ldr	r3, [pc, #148]	; (801a7f4 <tcp_parseopt+0xe4>)
 801a760:	881b      	ldrh	r3, [r3, #0]
 801a762:	3302      	adds	r3, #2
 801a764:	4a22      	ldr	r2, [pc, #136]	; (801a7f0 <tcp_parseopt+0xe0>)
 801a766:	8812      	ldrh	r2, [r2, #0]
 801a768:	4293      	cmp	r3, r2
 801a76a:	dc34      	bgt.n	801a7d6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801a76c:	f7ff ff9a 	bl	801a6a4 <tcp_get_next_optbyte>
 801a770:	4603      	mov	r3, r0
 801a772:	b29b      	uxth	r3, r3
 801a774:	021b      	lsls	r3, r3, #8
 801a776:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801a778:	f7ff ff94 	bl	801a6a4 <tcp_get_next_optbyte>
 801a77c:	4603      	mov	r3, r0
 801a77e:	b29a      	uxth	r2, r3
 801a780:	89bb      	ldrh	r3, [r7, #12]
 801a782:	4313      	orrs	r3, r2
 801a784:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801a786:	89bb      	ldrh	r3, [r7, #12]
 801a788:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801a78c:	d804      	bhi.n	801a798 <tcp_parseopt+0x88>
 801a78e:	89bb      	ldrh	r3, [r7, #12]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d001      	beq.n	801a798 <tcp_parseopt+0x88>
 801a794:	89ba      	ldrh	r2, [r7, #12]
 801a796:	e001      	b.n	801a79c <tcp_parseopt+0x8c>
 801a798:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801a7a0:	e010      	b.n	801a7c4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801a7a2:	f7ff ff7f 	bl	801a6a4 <tcp_get_next_optbyte>
 801a7a6:	4603      	mov	r3, r0
 801a7a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801a7aa:	7afb      	ldrb	r3, [r7, #11]
 801a7ac:	2b01      	cmp	r3, #1
 801a7ae:	d914      	bls.n	801a7da <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801a7b0:	7afb      	ldrb	r3, [r7, #11]
 801a7b2:	b29a      	uxth	r2, r3
 801a7b4:	4b0f      	ldr	r3, [pc, #60]	; (801a7f4 <tcp_parseopt+0xe4>)
 801a7b6:	881b      	ldrh	r3, [r3, #0]
 801a7b8:	4413      	add	r3, r2
 801a7ba:	b29b      	uxth	r3, r3
 801a7bc:	3b02      	subs	r3, #2
 801a7be:	b29a      	uxth	r2, r3
 801a7c0:	4b0c      	ldr	r3, [pc, #48]	; (801a7f4 <tcp_parseopt+0xe4>)
 801a7c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801a7c4:	4b0b      	ldr	r3, [pc, #44]	; (801a7f4 <tcp_parseopt+0xe4>)
 801a7c6:	881a      	ldrh	r2, [r3, #0]
 801a7c8:	4b09      	ldr	r3, [pc, #36]	; (801a7f0 <tcp_parseopt+0xe0>)
 801a7ca:	881b      	ldrh	r3, [r3, #0]
 801a7cc:	429a      	cmp	r2, r3
 801a7ce:	d3b5      	bcc.n	801a73c <tcp_parseopt+0x2c>
 801a7d0:	e004      	b.n	801a7dc <tcp_parseopt+0xcc>
          return;
 801a7d2:	bf00      	nop
 801a7d4:	e002      	b.n	801a7dc <tcp_parseopt+0xcc>
            return;
 801a7d6:	bf00      	nop
 801a7d8:	e000      	b.n	801a7dc <tcp_parseopt+0xcc>
            return;
 801a7da:	bf00      	nop
      }
    }
  }
}
 801a7dc:	3710      	adds	r7, #16
 801a7de:	46bd      	mov	sp, r7
 801a7e0:	bd80      	pop	{r7, pc}
 801a7e2:	bf00      	nop
 801a7e4:	0801f6fc 	.word	0x0801f6fc
 801a7e8:	0801fb88 	.word	0x0801fb88
 801a7ec:	0801f770 	.word	0x0801f770
 801a7f0:	24000238 	.word	0x24000238
 801a7f4:	24000240 	.word	0x24000240

0801a7f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801a7f8:	b480      	push	{r7}
 801a7fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801a7fc:	4b05      	ldr	r3, [pc, #20]	; (801a814 <tcp_trigger_input_pcb_close+0x1c>)
 801a7fe:	781b      	ldrb	r3, [r3, #0]
 801a800:	f043 0310 	orr.w	r3, r3, #16
 801a804:	b2da      	uxtb	r2, r3
 801a806:	4b03      	ldr	r3, [pc, #12]	; (801a814 <tcp_trigger_input_pcb_close+0x1c>)
 801a808:	701a      	strb	r2, [r3, #0]
}
 801a80a:	bf00      	nop
 801a80c:	46bd      	mov	sp, r7
 801a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a812:	4770      	bx	lr
 801a814:	24000251 	.word	0x24000251

0801a818 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b084      	sub	sp, #16
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	60f8      	str	r0, [r7, #12]
 801a820:	60b9      	str	r1, [r7, #8]
 801a822:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d00a      	beq.n	801a840 <tcp_route+0x28>
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	7a1b      	ldrb	r3, [r3, #8]
 801a82e:	2b00      	cmp	r3, #0
 801a830:	d006      	beq.n	801a840 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	7a1b      	ldrb	r3, [r3, #8]
 801a836:	4618      	mov	r0, r3
 801a838:	f7fb fb80 	bl	8015f3c <netif_get_by_index>
 801a83c:	4603      	mov	r3, r0
 801a83e:	e003      	b.n	801a848 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801a840:	6878      	ldr	r0, [r7, #4]
 801a842:	f7f9 fb3f 	bl	8013ec4 <ip4_route>
 801a846:	4603      	mov	r3, r0
  }
}
 801a848:	4618      	mov	r0, r3
 801a84a:	3710      	adds	r7, #16
 801a84c:	46bd      	mov	sp, r7
 801a84e:	bd80      	pop	{r7, pc}

0801a850 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801a850:	b590      	push	{r4, r7, lr}
 801a852:	b087      	sub	sp, #28
 801a854:	af00      	add	r7, sp, #0
 801a856:	60f8      	str	r0, [r7, #12]
 801a858:	60b9      	str	r1, [r7, #8]
 801a85a:	603b      	str	r3, [r7, #0]
 801a85c:	4613      	mov	r3, r2
 801a85e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2b00      	cmp	r3, #0
 801a864:	d105      	bne.n	801a872 <tcp_create_segment+0x22>
 801a866:	4b44      	ldr	r3, [pc, #272]	; (801a978 <tcp_create_segment+0x128>)
 801a868:	22a3      	movs	r2, #163	; 0xa3
 801a86a:	4944      	ldr	r1, [pc, #272]	; (801a97c <tcp_create_segment+0x12c>)
 801a86c:	4844      	ldr	r0, [pc, #272]	; (801a980 <tcp_create_segment+0x130>)
 801a86e:	f002 f8a3 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801a872:	68bb      	ldr	r3, [r7, #8]
 801a874:	2b00      	cmp	r3, #0
 801a876:	d105      	bne.n	801a884 <tcp_create_segment+0x34>
 801a878:	4b3f      	ldr	r3, [pc, #252]	; (801a978 <tcp_create_segment+0x128>)
 801a87a:	22a4      	movs	r2, #164	; 0xa4
 801a87c:	4941      	ldr	r1, [pc, #260]	; (801a984 <tcp_create_segment+0x134>)
 801a87e:	4840      	ldr	r0, [pc, #256]	; (801a980 <tcp_create_segment+0x130>)
 801a880:	f002 f89a 	bl	801c9b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a884:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a888:	009b      	lsls	r3, r3, #2
 801a88a:	b2db      	uxtb	r3, r3
 801a88c:	f003 0304 	and.w	r3, r3, #4
 801a890:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801a892:	2003      	movs	r0, #3
 801a894:	f7fb f84c 	bl	8015930 <memp_malloc>
 801a898:	6138      	str	r0, [r7, #16]
 801a89a:	693b      	ldr	r3, [r7, #16]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d104      	bne.n	801a8aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801a8a0:	68b8      	ldr	r0, [r7, #8]
 801a8a2:	f7fb fe87 	bl	80165b4 <pbuf_free>
    return NULL;
 801a8a6:	2300      	movs	r3, #0
 801a8a8:	e061      	b.n	801a96e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801a8aa:	693b      	ldr	r3, [r7, #16]
 801a8ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a8b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801a8b2:	693b      	ldr	r3, [r7, #16]
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801a8b8:	693b      	ldr	r3, [r7, #16]
 801a8ba:	68ba      	ldr	r2, [r7, #8]
 801a8bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801a8be:	68bb      	ldr	r3, [r7, #8]
 801a8c0:	891a      	ldrh	r2, [r3, #8]
 801a8c2:	7dfb      	ldrb	r3, [r7, #23]
 801a8c4:	b29b      	uxth	r3, r3
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d205      	bcs.n	801a8d6 <tcp_create_segment+0x86>
 801a8ca:	4b2b      	ldr	r3, [pc, #172]	; (801a978 <tcp_create_segment+0x128>)
 801a8cc:	22b0      	movs	r2, #176	; 0xb0
 801a8ce:	492e      	ldr	r1, [pc, #184]	; (801a988 <tcp_create_segment+0x138>)
 801a8d0:	482b      	ldr	r0, [pc, #172]	; (801a980 <tcp_create_segment+0x130>)
 801a8d2:	f002 f871 	bl	801c9b8 <iprintf>
  seg->len = p->tot_len - optlen;
 801a8d6:	68bb      	ldr	r3, [r7, #8]
 801a8d8:	891a      	ldrh	r2, [r3, #8]
 801a8da:	7dfb      	ldrb	r3, [r7, #23]
 801a8dc:	b29b      	uxth	r3, r3
 801a8de:	1ad3      	subs	r3, r2, r3
 801a8e0:	b29a      	uxth	r2, r3
 801a8e2:	693b      	ldr	r3, [r7, #16]
 801a8e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801a8e6:	2114      	movs	r1, #20
 801a8e8:	68b8      	ldr	r0, [r7, #8]
 801a8ea:	f7fb fdcd 	bl	8016488 <pbuf_add_header>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d004      	beq.n	801a8fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801a8f4:	6938      	ldr	r0, [r7, #16]
 801a8f6:	f7fd f8d5 	bl	8017aa4 <tcp_seg_free>
    return NULL;
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	e037      	b.n	801a96e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801a8fe:	693b      	ldr	r3, [r7, #16]
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	685a      	ldr	r2, [r3, #4]
 801a904:	693b      	ldr	r3, [r7, #16]
 801a906:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	8ada      	ldrh	r2, [r3, #22]
 801a90c:	693b      	ldr	r3, [r7, #16]
 801a90e:	68dc      	ldr	r4, [r3, #12]
 801a910:	4610      	mov	r0, r2
 801a912:	f7f6 f9a6 	bl	8010c62 <lwip_htons>
 801a916:	4603      	mov	r3, r0
 801a918:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	8b1a      	ldrh	r2, [r3, #24]
 801a91e:	693b      	ldr	r3, [r7, #16]
 801a920:	68dc      	ldr	r4, [r3, #12]
 801a922:	4610      	mov	r0, r2
 801a924:	f7f6 f99d 	bl	8010c62 <lwip_htons>
 801a928:	4603      	mov	r3, r0
 801a92a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801a92c:	693b      	ldr	r3, [r7, #16]
 801a92e:	68dc      	ldr	r4, [r3, #12]
 801a930:	6838      	ldr	r0, [r7, #0]
 801a932:	f7f6 f9ab 	bl	8010c8c <lwip_htonl>
 801a936:	4603      	mov	r3, r0
 801a938:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801a93a:	7dfb      	ldrb	r3, [r7, #23]
 801a93c:	089b      	lsrs	r3, r3, #2
 801a93e:	b2db      	uxtb	r3, r3
 801a940:	b29b      	uxth	r3, r3
 801a942:	3305      	adds	r3, #5
 801a944:	b29b      	uxth	r3, r3
 801a946:	031b      	lsls	r3, r3, #12
 801a948:	b29a      	uxth	r2, r3
 801a94a:	79fb      	ldrb	r3, [r7, #7]
 801a94c:	b29b      	uxth	r3, r3
 801a94e:	4313      	orrs	r3, r2
 801a950:	b29a      	uxth	r2, r3
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	68dc      	ldr	r4, [r3, #12]
 801a956:	4610      	mov	r0, r2
 801a958:	f7f6 f983 	bl	8010c62 <lwip_htons>
 801a95c:	4603      	mov	r3, r0
 801a95e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801a960:	693b      	ldr	r3, [r7, #16]
 801a962:	68db      	ldr	r3, [r3, #12]
 801a964:	2200      	movs	r2, #0
 801a966:	749a      	strb	r2, [r3, #18]
 801a968:	2200      	movs	r2, #0
 801a96a:	74da      	strb	r2, [r3, #19]
  return seg;
 801a96c:	693b      	ldr	r3, [r7, #16]
}
 801a96e:	4618      	mov	r0, r3
 801a970:	371c      	adds	r7, #28
 801a972:	46bd      	mov	sp, r7
 801a974:	bd90      	pop	{r4, r7, pc}
 801a976:	bf00      	nop
 801a978:	0801fba4 	.word	0x0801fba4
 801a97c:	0801fc00 	.word	0x0801fc00
 801a980:	0801fc20 	.word	0x0801fc20
 801a984:	0801fc48 	.word	0x0801fc48
 801a988:	0801fc6c 	.word	0x0801fc6c

0801a98c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a98c:	b590      	push	{r4, r7, lr}
 801a98e:	b08b      	sub	sp, #44	; 0x2c
 801a990:	af02      	add	r7, sp, #8
 801a992:	6078      	str	r0, [r7, #4]
 801a994:	460b      	mov	r3, r1
 801a996:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a998:	2300      	movs	r3, #0
 801a99a:	61fb      	str	r3, [r7, #28]
 801a99c:	2300      	movs	r3, #0
 801a99e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d106      	bne.n	801a9b8 <tcp_split_unsent_seg+0x2c>
 801a9aa:	4b95      	ldr	r3, [pc, #596]	; (801ac00 <tcp_split_unsent_seg+0x274>)
 801a9ac:	f240 324b 	movw	r2, #843	; 0x34b
 801a9b0:	4994      	ldr	r1, [pc, #592]	; (801ac04 <tcp_split_unsent_seg+0x278>)
 801a9b2:	4895      	ldr	r0, [pc, #596]	; (801ac08 <tcp_split_unsent_seg+0x27c>)
 801a9b4:	f002 f800 	bl	801c9b8 <iprintf>

  useg = pcb->unsent;
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a9be:	697b      	ldr	r3, [r7, #20]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d102      	bne.n	801a9ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a9c8:	e116      	b.n	801abf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801a9ca:	887b      	ldrh	r3, [r7, #2]
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	d109      	bne.n	801a9e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a9d0:	4b8b      	ldr	r3, [pc, #556]	; (801ac00 <tcp_split_unsent_seg+0x274>)
 801a9d2:	f240 3253 	movw	r2, #851	; 0x353
 801a9d6:	498d      	ldr	r1, [pc, #564]	; (801ac0c <tcp_split_unsent_seg+0x280>)
 801a9d8:	488b      	ldr	r0, [pc, #556]	; (801ac08 <tcp_split_unsent_seg+0x27c>)
 801a9da:	f001 ffed 	bl	801c9b8 <iprintf>
    return ERR_VAL;
 801a9de:	f06f 0305 	mvn.w	r3, #5
 801a9e2:	e109      	b.n	801abf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801a9e4:	697b      	ldr	r3, [r7, #20]
 801a9e6:	891b      	ldrh	r3, [r3, #8]
 801a9e8:	887a      	ldrh	r2, [r7, #2]
 801a9ea:	429a      	cmp	r2, r3
 801a9ec:	d301      	bcc.n	801a9f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	e102      	b.n	801abf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9f6:	887a      	ldrh	r2, [r7, #2]
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d906      	bls.n	801aa0a <tcp_split_unsent_seg+0x7e>
 801a9fc:	4b80      	ldr	r3, [pc, #512]	; (801ac00 <tcp_split_unsent_seg+0x274>)
 801a9fe:	f240 325b 	movw	r2, #859	; 0x35b
 801aa02:	4983      	ldr	r1, [pc, #524]	; (801ac10 <tcp_split_unsent_seg+0x284>)
 801aa04:	4880      	ldr	r0, [pc, #512]	; (801ac08 <tcp_split_unsent_seg+0x27c>)
 801aa06:	f001 ffd7 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801aa0a:	697b      	ldr	r3, [r7, #20]
 801aa0c:	891b      	ldrh	r3, [r3, #8]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d106      	bne.n	801aa20 <tcp_split_unsent_seg+0x94>
 801aa12:	4b7b      	ldr	r3, [pc, #492]	; (801ac00 <tcp_split_unsent_seg+0x274>)
 801aa14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801aa18:	497e      	ldr	r1, [pc, #504]	; (801ac14 <tcp_split_unsent_seg+0x288>)
 801aa1a:	487b      	ldr	r0, [pc, #492]	; (801ac08 <tcp_split_unsent_seg+0x27c>)
 801aa1c:	f001 ffcc 	bl	801c9b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	7a9b      	ldrb	r3, [r3, #10]
 801aa24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801aa26:	7bfb      	ldrb	r3, [r7, #15]
 801aa28:	009b      	lsls	r3, r3, #2
 801aa2a:	b2db      	uxtb	r3, r3
 801aa2c:	f003 0304 	and.w	r3, r3, #4
 801aa30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	891a      	ldrh	r2, [r3, #8]
 801aa36:	887b      	ldrh	r3, [r7, #2]
 801aa38:	1ad3      	subs	r3, r2, r3
 801aa3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801aa3c:	7bbb      	ldrb	r3, [r7, #14]
 801aa3e:	b29a      	uxth	r2, r3
 801aa40:	89bb      	ldrh	r3, [r7, #12]
 801aa42:	4413      	add	r3, r2
 801aa44:	b29b      	uxth	r3, r3
 801aa46:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa4a:	4619      	mov	r1, r3
 801aa4c:	2036      	movs	r0, #54	; 0x36
 801aa4e:	f7fb fad1 	bl	8015ff4 <pbuf_alloc>
 801aa52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801aa54:	693b      	ldr	r3, [r7, #16]
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	f000 80b7 	beq.w	801abca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801aa5c:	697b      	ldr	r3, [r7, #20]
 801aa5e:	685b      	ldr	r3, [r3, #4]
 801aa60:	891a      	ldrh	r2, [r3, #8]
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	891b      	ldrh	r3, [r3, #8]
 801aa66:	1ad3      	subs	r3, r2, r3
 801aa68:	b29a      	uxth	r2, r3
 801aa6a:	887b      	ldrh	r3, [r7, #2]
 801aa6c:	4413      	add	r3, r2
 801aa6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801aa70:	697b      	ldr	r3, [r7, #20]
 801aa72:	6858      	ldr	r0, [r3, #4]
 801aa74:	693b      	ldr	r3, [r7, #16]
 801aa76:	685a      	ldr	r2, [r3, #4]
 801aa78:	7bbb      	ldrb	r3, [r7, #14]
 801aa7a:	18d1      	adds	r1, r2, r3
 801aa7c:	897b      	ldrh	r3, [r7, #10]
 801aa7e:	89ba      	ldrh	r2, [r7, #12]
 801aa80:	f7fb ff92 	bl	80169a8 <pbuf_copy_partial>
 801aa84:	4603      	mov	r3, r0
 801aa86:	461a      	mov	r2, r3
 801aa88:	89bb      	ldrh	r3, [r7, #12]
 801aa8a:	4293      	cmp	r3, r2
 801aa8c:	f040 809f 	bne.w	801abce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801aa90:	697b      	ldr	r3, [r7, #20]
 801aa92:	68db      	ldr	r3, [r3, #12]
 801aa94:	899b      	ldrh	r3, [r3, #12]
 801aa96:	b29b      	uxth	r3, r3
 801aa98:	4618      	mov	r0, r3
 801aa9a:	f7f6 f8e2 	bl	8010c62 <lwip_htons>
 801aa9e:	4603      	mov	r3, r0
 801aaa0:	b2db      	uxtb	r3, r3
 801aaa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801aaa6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801aaa8:	2300      	movs	r3, #0
 801aaaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801aaac:	7efb      	ldrb	r3, [r7, #27]
 801aaae:	f003 0308 	and.w	r3, r3, #8
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d007      	beq.n	801aac6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801aab6:	7efb      	ldrb	r3, [r7, #27]
 801aab8:	f023 0308 	bic.w	r3, r3, #8
 801aabc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801aabe:	7ebb      	ldrb	r3, [r7, #26]
 801aac0:	f043 0308 	orr.w	r3, r3, #8
 801aac4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801aac6:	7efb      	ldrb	r3, [r7, #27]
 801aac8:	f003 0301 	and.w	r3, r3, #1
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d007      	beq.n	801aae0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801aad0:	7efb      	ldrb	r3, [r7, #27]
 801aad2:	f023 0301 	bic.w	r3, r3, #1
 801aad6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801aad8:	7ebb      	ldrb	r3, [r7, #26]
 801aada:	f043 0301 	orr.w	r3, r3, #1
 801aade:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	685b      	ldr	r3, [r3, #4]
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7f6 f8d0 	bl	8010c8c <lwip_htonl>
 801aaec:	4602      	mov	r2, r0
 801aaee:	887b      	ldrh	r3, [r7, #2]
 801aaf0:	18d1      	adds	r1, r2, r3
 801aaf2:	7eba      	ldrb	r2, [r7, #26]
 801aaf4:	7bfb      	ldrb	r3, [r7, #15]
 801aaf6:	9300      	str	r3, [sp, #0]
 801aaf8:	460b      	mov	r3, r1
 801aafa:	6939      	ldr	r1, [r7, #16]
 801aafc:	6878      	ldr	r0, [r7, #4]
 801aafe:	f7ff fea7 	bl	801a850 <tcp_create_segment>
 801ab02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801ab04:	69fb      	ldr	r3, [r7, #28]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d063      	beq.n	801abd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	4618      	mov	r0, r3
 801ab10:	f7fb fdd8 	bl	80166c4 <pbuf_clen>
 801ab14:	4603      	mov	r3, r0
 801ab16:	461a      	mov	r2, r3
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab1e:	1a9b      	subs	r3, r3, r2
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ab28:	697b      	ldr	r3, [r7, #20]
 801ab2a:	6858      	ldr	r0, [r3, #4]
 801ab2c:	697b      	ldr	r3, [r7, #20]
 801ab2e:	685b      	ldr	r3, [r3, #4]
 801ab30:	891a      	ldrh	r2, [r3, #8]
 801ab32:	89bb      	ldrh	r3, [r7, #12]
 801ab34:	1ad3      	subs	r3, r2, r3
 801ab36:	b29b      	uxth	r3, r3
 801ab38:	4619      	mov	r1, r3
 801ab3a:	f7fb fbb5 	bl	80162a8 <pbuf_realloc>
  useg->len -= remainder;
 801ab3e:	697b      	ldr	r3, [r7, #20]
 801ab40:	891a      	ldrh	r2, [r3, #8]
 801ab42:	89bb      	ldrh	r3, [r7, #12]
 801ab44:	1ad3      	subs	r3, r2, r3
 801ab46:	b29a      	uxth	r2, r3
 801ab48:	697b      	ldr	r3, [r7, #20]
 801ab4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ab4c:	697b      	ldr	r3, [r7, #20]
 801ab4e:	68db      	ldr	r3, [r3, #12]
 801ab50:	899b      	ldrh	r3, [r3, #12]
 801ab52:	b29c      	uxth	r4, r3
 801ab54:	7efb      	ldrb	r3, [r7, #27]
 801ab56:	b29b      	uxth	r3, r3
 801ab58:	4618      	mov	r0, r3
 801ab5a:	f7f6 f882 	bl	8010c62 <lwip_htons>
 801ab5e:	4603      	mov	r3, r0
 801ab60:	461a      	mov	r2, r3
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	68db      	ldr	r3, [r3, #12]
 801ab66:	4322      	orrs	r2, r4
 801ab68:	b292      	uxth	r2, r2
 801ab6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	4618      	mov	r0, r3
 801ab72:	f7fb fda7 	bl	80166c4 <pbuf_clen>
 801ab76:	4603      	mov	r3, r0
 801ab78:	461a      	mov	r2, r3
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab80:	4413      	add	r3, r2
 801ab82:	b29a      	uxth	r2, r3
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ab8a:	69fb      	ldr	r3, [r7, #28]
 801ab8c:	685b      	ldr	r3, [r3, #4]
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f7fb fd98 	bl	80166c4 <pbuf_clen>
 801ab94:	4603      	mov	r3, r0
 801ab96:	461a      	mov	r2, r3
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ab9e:	4413      	add	r3, r2
 801aba0:	b29a      	uxth	r2, r3
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801aba8:	697b      	ldr	r3, [r7, #20]
 801abaa:	681a      	ldr	r2, [r3, #0]
 801abac:	69fb      	ldr	r3, [r7, #28]
 801abae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801abb0:	697b      	ldr	r3, [r7, #20]
 801abb2:	69fa      	ldr	r2, [r7, #28]
 801abb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801abb6:	69fb      	ldr	r3, [r7, #28]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d103      	bne.n	801abc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	2200      	movs	r2, #0
 801abc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801abc6:	2300      	movs	r3, #0
 801abc8:	e016      	b.n	801abf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801abca:	bf00      	nop
 801abcc:	e002      	b.n	801abd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801abce:	bf00      	nop
 801abd0:	e000      	b.n	801abd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801abd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801abd4:	69fb      	ldr	r3, [r7, #28]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d006      	beq.n	801abe8 <tcp_split_unsent_seg+0x25c>
 801abda:	4b09      	ldr	r3, [pc, #36]	; (801ac00 <tcp_split_unsent_seg+0x274>)
 801abdc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801abe0:	490d      	ldr	r1, [pc, #52]	; (801ac18 <tcp_split_unsent_seg+0x28c>)
 801abe2:	4809      	ldr	r0, [pc, #36]	; (801ac08 <tcp_split_unsent_seg+0x27c>)
 801abe4:	f001 fee8 	bl	801c9b8 <iprintf>
  if (p != NULL) {
 801abe8:	693b      	ldr	r3, [r7, #16]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d002      	beq.n	801abf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801abee:	6938      	ldr	r0, [r7, #16]
 801abf0:	f7fb fce0 	bl	80165b4 <pbuf_free>
  }

  return ERR_MEM;
 801abf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801abf8:	4618      	mov	r0, r3
 801abfa:	3724      	adds	r7, #36	; 0x24
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bd90      	pop	{r4, r7, pc}
 801ac00:	0801fba4 	.word	0x0801fba4
 801ac04:	0801ff60 	.word	0x0801ff60
 801ac08:	0801fc20 	.word	0x0801fc20
 801ac0c:	0801ff84 	.word	0x0801ff84
 801ac10:	0801ffa8 	.word	0x0801ffa8
 801ac14:	0801ffb8 	.word	0x0801ffb8
 801ac18:	0801ffc8 	.word	0x0801ffc8

0801ac1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ac1c:	b590      	push	{r4, r7, lr}
 801ac1e:	b085      	sub	sp, #20
 801ac20:	af00      	add	r7, sp, #0
 801ac22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	2b00      	cmp	r3, #0
 801ac28:	d106      	bne.n	801ac38 <tcp_send_fin+0x1c>
 801ac2a:	4b21      	ldr	r3, [pc, #132]	; (801acb0 <tcp_send_fin+0x94>)
 801ac2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ac30:	4920      	ldr	r1, [pc, #128]	; (801acb4 <tcp_send_fin+0x98>)
 801ac32:	4821      	ldr	r0, [pc, #132]	; (801acb8 <tcp_send_fin+0x9c>)
 801ac34:	f001 fec0 	bl	801c9b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d02e      	beq.n	801ac9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ac44:	60fb      	str	r3, [r7, #12]
 801ac46:	e002      	b.n	801ac4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801ac48:	68fb      	ldr	r3, [r7, #12]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d1f8      	bne.n	801ac48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	68db      	ldr	r3, [r3, #12]
 801ac5a:	899b      	ldrh	r3, [r3, #12]
 801ac5c:	b29b      	uxth	r3, r3
 801ac5e:	4618      	mov	r0, r3
 801ac60:	f7f5 ffff 	bl	8010c62 <lwip_htons>
 801ac64:	4603      	mov	r3, r0
 801ac66:	b2db      	uxtb	r3, r3
 801ac68:	f003 0307 	and.w	r3, r3, #7
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d116      	bne.n	801ac9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	68db      	ldr	r3, [r3, #12]
 801ac74:	899b      	ldrh	r3, [r3, #12]
 801ac76:	b29c      	uxth	r4, r3
 801ac78:	2001      	movs	r0, #1
 801ac7a:	f7f5 fff2 	bl	8010c62 <lwip_htons>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	461a      	mov	r2, r3
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	68db      	ldr	r3, [r3, #12]
 801ac86:	4322      	orrs	r2, r4
 801ac88:	b292      	uxth	r2, r2
 801ac8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	8b5b      	ldrh	r3, [r3, #26]
 801ac90:	f043 0320 	orr.w	r3, r3, #32
 801ac94:	b29a      	uxth	r2, r3
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	e004      	b.n	801aca8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ac9e:	2101      	movs	r1, #1
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f000 f80b 	bl	801acbc <tcp_enqueue_flags>
 801aca6:	4603      	mov	r3, r0
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	3714      	adds	r7, #20
 801acac:	46bd      	mov	sp, r7
 801acae:	bd90      	pop	{r4, r7, pc}
 801acb0:	0801fba4 	.word	0x0801fba4
 801acb4:	0801ffd4 	.word	0x0801ffd4
 801acb8:	0801fc20 	.word	0x0801fc20

0801acbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b08a      	sub	sp, #40	; 0x28
 801acc0:	af02      	add	r7, sp, #8
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	460b      	mov	r3, r1
 801acc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801acc8:	2300      	movs	r3, #0
 801acca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801accc:	2300      	movs	r3, #0
 801acce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801acd0:	78fb      	ldrb	r3, [r7, #3]
 801acd2:	f003 0303 	and.w	r3, r3, #3
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d106      	bne.n	801ace8 <tcp_enqueue_flags+0x2c>
 801acda:	4b67      	ldr	r3, [pc, #412]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801acdc:	f240 4212 	movw	r2, #1042	; 0x412
 801ace0:	4966      	ldr	r1, [pc, #408]	; (801ae7c <tcp_enqueue_flags+0x1c0>)
 801ace2:	4867      	ldr	r0, [pc, #412]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801ace4:	f001 fe68 	bl	801c9b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	2b00      	cmp	r3, #0
 801acec:	d106      	bne.n	801acfc <tcp_enqueue_flags+0x40>
 801acee:	4b62      	ldr	r3, [pc, #392]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801acf0:	f240 4213 	movw	r2, #1043	; 0x413
 801acf4:	4963      	ldr	r1, [pc, #396]	; (801ae84 <tcp_enqueue_flags+0x1c8>)
 801acf6:	4862      	ldr	r0, [pc, #392]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801acf8:	f001 fe5e 	bl	801c9b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801acfc:	78fb      	ldrb	r3, [r7, #3]
 801acfe:	f003 0302 	and.w	r3, r3, #2
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d001      	beq.n	801ad0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801ad06:	2301      	movs	r3, #1
 801ad08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ad0a:	7ffb      	ldrb	r3, [r7, #31]
 801ad0c:	009b      	lsls	r3, r3, #2
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	f003 0304 	and.w	r3, r3, #4
 801ad14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ad16:	7dfb      	ldrb	r3, [r7, #23]
 801ad18:	b29b      	uxth	r3, r3
 801ad1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ad1e:	4619      	mov	r1, r3
 801ad20:	2036      	movs	r0, #54	; 0x36
 801ad22:	f7fb f967 	bl	8015ff4 <pbuf_alloc>
 801ad26:	6138      	str	r0, [r7, #16]
 801ad28:	693b      	ldr	r3, [r7, #16]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d109      	bne.n	801ad42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	8b5b      	ldrh	r3, [r3, #26]
 801ad32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad36:	b29a      	uxth	r2, r3
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ad3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad40:	e095      	b.n	801ae6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ad42:	693b      	ldr	r3, [r7, #16]
 801ad44:	895a      	ldrh	r2, [r3, #10]
 801ad46:	7dfb      	ldrb	r3, [r7, #23]
 801ad48:	b29b      	uxth	r3, r3
 801ad4a:	429a      	cmp	r2, r3
 801ad4c:	d206      	bcs.n	801ad5c <tcp_enqueue_flags+0xa0>
 801ad4e:	4b4a      	ldr	r3, [pc, #296]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801ad50:	f240 423a 	movw	r2, #1082	; 0x43a
 801ad54:	494c      	ldr	r1, [pc, #304]	; (801ae88 <tcp_enqueue_flags+0x1cc>)
 801ad56:	484a      	ldr	r0, [pc, #296]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801ad58:	f001 fe2e 	bl	801c9b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801ad60:	78fa      	ldrb	r2, [r7, #3]
 801ad62:	7ffb      	ldrb	r3, [r7, #31]
 801ad64:	9300      	str	r3, [sp, #0]
 801ad66:	460b      	mov	r3, r1
 801ad68:	6939      	ldr	r1, [r7, #16]
 801ad6a:	6878      	ldr	r0, [r7, #4]
 801ad6c:	f7ff fd70 	bl	801a850 <tcp_create_segment>
 801ad70:	60f8      	str	r0, [r7, #12]
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d109      	bne.n	801ad8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	8b5b      	ldrh	r3, [r3, #26]
 801ad7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ad80:	b29a      	uxth	r2, r3
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801ad86:	f04f 33ff 	mov.w	r3, #4294967295
 801ad8a:	e070      	b.n	801ae6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	68db      	ldr	r3, [r3, #12]
 801ad90:	f003 0303 	and.w	r3, r3, #3
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d006      	beq.n	801ada6 <tcp_enqueue_flags+0xea>
 801ad98:	4b37      	ldr	r3, [pc, #220]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801ad9a:	f240 4242 	movw	r2, #1090	; 0x442
 801ad9e:	493b      	ldr	r1, [pc, #236]	; (801ae8c <tcp_enqueue_flags+0x1d0>)
 801ada0:	4837      	ldr	r0, [pc, #220]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801ada2:	f001 fe09 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ada6:	68fb      	ldr	r3, [r7, #12]
 801ada8:	891b      	ldrh	r3, [r3, #8]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d006      	beq.n	801adbc <tcp_enqueue_flags+0x100>
 801adae:	4b32      	ldr	r3, [pc, #200]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801adb0:	f240 4243 	movw	r2, #1091	; 0x443
 801adb4:	4936      	ldr	r1, [pc, #216]	; (801ae90 <tcp_enqueue_flags+0x1d4>)
 801adb6:	4832      	ldr	r0, [pc, #200]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801adb8:	f001 fdfe 	bl	801c9b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d103      	bne.n	801adcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	68fa      	ldr	r2, [r7, #12]
 801adc8:	66da      	str	r2, [r3, #108]	; 0x6c
 801adca:	e00d      	b.n	801ade8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801add0:	61bb      	str	r3, [r7, #24]
 801add2:	e002      	b.n	801adda <tcp_enqueue_flags+0x11e>
 801add4:	69bb      	ldr	r3, [r7, #24]
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	61bb      	str	r3, [r7, #24]
 801adda:	69bb      	ldr	r3, [r7, #24]
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	2b00      	cmp	r3, #0
 801ade0:	d1f8      	bne.n	801add4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801ade2:	69bb      	ldr	r3, [r7, #24]
 801ade4:	68fa      	ldr	r2, [r7, #12]
 801ade6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2200      	movs	r2, #0
 801adec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801adf0:	78fb      	ldrb	r3, [r7, #3]
 801adf2:	f003 0302 	and.w	r3, r3, #2
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d104      	bne.n	801ae04 <tcp_enqueue_flags+0x148>
 801adfa:	78fb      	ldrb	r3, [r7, #3]
 801adfc:	f003 0301 	and.w	r3, r3, #1
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	d004      	beq.n	801ae0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae08:	1c5a      	adds	r2, r3, #1
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ae0e:	78fb      	ldrb	r3, [r7, #3]
 801ae10:	f003 0301 	and.w	r3, r3, #1
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d006      	beq.n	801ae26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	8b5b      	ldrh	r3, [r3, #26]
 801ae1c:	f043 0320 	orr.w	r3, r3, #32
 801ae20:	b29a      	uxth	r2, r3
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ae26:	68fb      	ldr	r3, [r7, #12]
 801ae28:	685b      	ldr	r3, [r3, #4]
 801ae2a:	4618      	mov	r0, r3
 801ae2c:	f7fb fc4a 	bl	80166c4 <pbuf_clen>
 801ae30:	4603      	mov	r3, r0
 801ae32:	461a      	mov	r2, r3
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae3a:	4413      	add	r3, r2
 801ae3c:	b29a      	uxth	r2, r3
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d00e      	beq.n	801ae6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d10a      	bne.n	801ae6c <tcp_enqueue_flags+0x1b0>
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d106      	bne.n	801ae6c <tcp_enqueue_flags+0x1b0>
 801ae5e:	4b06      	ldr	r3, [pc, #24]	; (801ae78 <tcp_enqueue_flags+0x1bc>)
 801ae60:	f240 4266 	movw	r2, #1126	; 0x466
 801ae64:	490b      	ldr	r1, [pc, #44]	; (801ae94 <tcp_enqueue_flags+0x1d8>)
 801ae66:	4806      	ldr	r0, [pc, #24]	; (801ae80 <tcp_enqueue_flags+0x1c4>)
 801ae68:	f001 fda6 	bl	801c9b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801ae6c:	2300      	movs	r3, #0
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	3720      	adds	r7, #32
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}
 801ae76:	bf00      	nop
 801ae78:	0801fba4 	.word	0x0801fba4
 801ae7c:	0801fff0 	.word	0x0801fff0
 801ae80:	0801fc20 	.word	0x0801fc20
 801ae84:	08020048 	.word	0x08020048
 801ae88:	08020068 	.word	0x08020068
 801ae8c:	080200a4 	.word	0x080200a4
 801ae90:	080200bc 	.word	0x080200bc
 801ae94:	080200e8 	.word	0x080200e8

0801ae98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ae98:	b5b0      	push	{r4, r5, r7, lr}
 801ae9a:	b08a      	sub	sp, #40	; 0x28
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d106      	bne.n	801aeb4 <tcp_output+0x1c>
 801aea6:	4ba0      	ldr	r3, [pc, #640]	; (801b128 <tcp_output+0x290>)
 801aea8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801aeac:	499f      	ldr	r1, [pc, #636]	; (801b12c <tcp_output+0x294>)
 801aeae:	48a0      	ldr	r0, [pc, #640]	; (801b130 <tcp_output+0x298>)
 801aeb0:	f001 fd82 	bl	801c9b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	7d1b      	ldrb	r3, [r3, #20]
 801aeb8:	2b01      	cmp	r3, #1
 801aeba:	d106      	bne.n	801aeca <tcp_output+0x32>
 801aebc:	4b9a      	ldr	r3, [pc, #616]	; (801b128 <tcp_output+0x290>)
 801aebe:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801aec2:	499c      	ldr	r1, [pc, #624]	; (801b134 <tcp_output+0x29c>)
 801aec4:	489a      	ldr	r0, [pc, #616]	; (801b130 <tcp_output+0x298>)
 801aec6:	f001 fd77 	bl	801c9b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801aeca:	4b9b      	ldr	r3, [pc, #620]	; (801b138 <tcp_output+0x2a0>)
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	687a      	ldr	r2, [r7, #4]
 801aed0:	429a      	cmp	r2, r3
 801aed2:	d101      	bne.n	801aed8 <tcp_output+0x40>
    return ERR_OK;
 801aed4:	2300      	movs	r3, #0
 801aed6:	e1d2      	b.n	801b27e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aee4:	429a      	cmp	r2, r3
 801aee6:	d203      	bcs.n	801aef0 <tcp_output+0x58>
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801aeee:	e002      	b.n	801aef6 <tcp_output+0x5e>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aef6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aefc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af00:	2b00      	cmp	r3, #0
 801af02:	d10b      	bne.n	801af1c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	8b5b      	ldrh	r3, [r3, #26]
 801af08:	f003 0302 	and.w	r3, r3, #2
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	f000 81a9 	beq.w	801b264 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801af12:	6878      	ldr	r0, [r7, #4]
 801af14:	f000 fdd8 	bl	801bac8 <tcp_send_empty_ack>
 801af18:	4603      	mov	r3, r0
 801af1a:	e1b0      	b.n	801b27e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801af1c:	6879      	ldr	r1, [r7, #4]
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	3304      	adds	r3, #4
 801af22:	461a      	mov	r2, r3
 801af24:	6878      	ldr	r0, [r7, #4]
 801af26:	f7ff fc77 	bl	801a818 <tcp_route>
 801af2a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801af2c:	697b      	ldr	r3, [r7, #20]
 801af2e:	2b00      	cmp	r3, #0
 801af30:	d102      	bne.n	801af38 <tcp_output+0xa0>
    return ERR_RTE;
 801af32:	f06f 0303 	mvn.w	r3, #3
 801af36:	e1a2      	b.n	801b27e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	2b00      	cmp	r3, #0
 801af3c:	d003      	beq.n	801af46 <tcp_output+0xae>
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	681b      	ldr	r3, [r3, #0]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d111      	bne.n	801af6a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801af46:	697b      	ldr	r3, [r7, #20]
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d002      	beq.n	801af52 <tcp_output+0xba>
 801af4c:	697b      	ldr	r3, [r7, #20]
 801af4e:	3304      	adds	r3, #4
 801af50:	e000      	b.n	801af54 <tcp_output+0xbc>
 801af52:	2300      	movs	r3, #0
 801af54:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801af56:	693b      	ldr	r3, [r7, #16]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d102      	bne.n	801af62 <tcp_output+0xca>
      return ERR_RTE;
 801af5c:	f06f 0303 	mvn.w	r3, #3
 801af60:	e18d      	b.n	801b27e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801af62:	693b      	ldr	r3, [r7, #16]
 801af64:	681a      	ldr	r2, [r3, #0]
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801af6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af6c:	68db      	ldr	r3, [r3, #12]
 801af6e:	685b      	ldr	r3, [r3, #4]
 801af70:	4618      	mov	r0, r3
 801af72:	f7f5 fe8b 	bl	8010c8c <lwip_htonl>
 801af76:	4602      	mov	r2, r0
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af7c:	1ad3      	subs	r3, r2, r3
 801af7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801af80:	8912      	ldrh	r2, [r2, #8]
 801af82:	4413      	add	r3, r2
 801af84:	69ba      	ldr	r2, [r7, #24]
 801af86:	429a      	cmp	r2, r3
 801af88:	d227      	bcs.n	801afda <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801af90:	461a      	mov	r2, r3
 801af92:	69bb      	ldr	r3, [r7, #24]
 801af94:	4293      	cmp	r3, r2
 801af96:	d114      	bne.n	801afc2 <tcp_output+0x12a>
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d110      	bne.n	801afc2 <tcp_output+0x12a>
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d10b      	bne.n	801afc2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2200      	movs	r2, #0
 801afae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	2201      	movs	r2, #1
 801afb6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	2200      	movs	r2, #0
 801afbe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	8b5b      	ldrh	r3, [r3, #26]
 801afc6:	f003 0302 	and.w	r3, r3, #2
 801afca:	2b00      	cmp	r3, #0
 801afcc:	f000 814c 	beq.w	801b268 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801afd0:	6878      	ldr	r0, [r7, #4]
 801afd2:	f000 fd79 	bl	801bac8 <tcp_send_empty_ack>
 801afd6:	4603      	mov	r3, r0
 801afd8:	e151      	b.n	801b27e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	2200      	movs	r2, #0
 801afde:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801afe6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801afe8:	6a3b      	ldr	r3, [r7, #32]
 801afea:	2b00      	cmp	r3, #0
 801afec:	f000 811b 	beq.w	801b226 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801aff0:	e002      	b.n	801aff8 <tcp_output+0x160>
 801aff2:	6a3b      	ldr	r3, [r7, #32]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	623b      	str	r3, [r7, #32]
 801aff8:	6a3b      	ldr	r3, [r7, #32]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d1f8      	bne.n	801aff2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801b000:	e111      	b.n	801b226 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b004:	68db      	ldr	r3, [r3, #12]
 801b006:	899b      	ldrh	r3, [r3, #12]
 801b008:	b29b      	uxth	r3, r3
 801b00a:	4618      	mov	r0, r3
 801b00c:	f7f5 fe29 	bl	8010c62 <lwip_htons>
 801b010:	4603      	mov	r3, r0
 801b012:	b2db      	uxtb	r3, r3
 801b014:	f003 0304 	and.w	r3, r3, #4
 801b018:	2b00      	cmp	r3, #0
 801b01a:	d006      	beq.n	801b02a <tcp_output+0x192>
 801b01c:	4b42      	ldr	r3, [pc, #264]	; (801b128 <tcp_output+0x290>)
 801b01e:	f240 5237 	movw	r2, #1335	; 0x537
 801b022:	4946      	ldr	r1, [pc, #280]	; (801b13c <tcp_output+0x2a4>)
 801b024:	4842      	ldr	r0, [pc, #264]	; (801b130 <tcp_output+0x298>)
 801b026:	f001 fcc7 	bl	801c9b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d01f      	beq.n	801b072 <tcp_output+0x1da>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	8b5b      	ldrh	r3, [r3, #26]
 801b036:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d119      	bne.n	801b072 <tcp_output+0x1da>
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b042:	2b00      	cmp	r3, #0
 801b044:	d00b      	beq.n	801b05e <tcp_output+0x1c6>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d110      	bne.n	801b072 <tcp_output+0x1da>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b054:	891a      	ldrh	r2, [r3, #8]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b05a:	429a      	cmp	r2, r3
 801b05c:	d209      	bcs.n	801b072 <tcp_output+0x1da>
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801b064:	2b00      	cmp	r3, #0
 801b066:	d004      	beq.n	801b072 <tcp_output+0x1da>
 801b068:	687b      	ldr	r3, [r7, #4]
 801b06a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b06e:	2b08      	cmp	r3, #8
 801b070:	d901      	bls.n	801b076 <tcp_output+0x1de>
 801b072:	2301      	movs	r3, #1
 801b074:	e000      	b.n	801b078 <tcp_output+0x1e0>
 801b076:	2300      	movs	r3, #0
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d106      	bne.n	801b08a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	8b5b      	ldrh	r3, [r3, #26]
 801b080:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801b084:	2b00      	cmp	r3, #0
 801b086:	f000 80e3 	beq.w	801b250 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	7d1b      	ldrb	r3, [r3, #20]
 801b08e:	2b02      	cmp	r3, #2
 801b090:	d00d      	beq.n	801b0ae <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801b092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b094:	68db      	ldr	r3, [r3, #12]
 801b096:	899b      	ldrh	r3, [r3, #12]
 801b098:	b29c      	uxth	r4, r3
 801b09a:	2010      	movs	r0, #16
 801b09c:	f7f5 fde1 	bl	8010c62 <lwip_htons>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	461a      	mov	r2, r3
 801b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a6:	68db      	ldr	r3, [r3, #12]
 801b0a8:	4322      	orrs	r2, r4
 801b0aa:	b292      	uxth	r2, r2
 801b0ac:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801b0ae:	697a      	ldr	r2, [r7, #20]
 801b0b0:	6879      	ldr	r1, [r7, #4]
 801b0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b0b4:	f000 f908 	bl	801b2c8 <tcp_output_segment>
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801b0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d009      	beq.n	801b0d8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	8b5b      	ldrh	r3, [r3, #26]
 801b0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0cc:	b29a      	uxth	r2, r3
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	835a      	strh	r2, [r3, #26]
      return err;
 801b0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b0d6:	e0d2      	b.n	801b27e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0da:	681a      	ldr	r2, [r3, #0]
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	7d1b      	ldrb	r3, [r3, #20]
 801b0e4:	2b02      	cmp	r3, #2
 801b0e6:	d006      	beq.n	801b0f6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	8b5b      	ldrh	r3, [r3, #26]
 801b0ec:	f023 0303 	bic.w	r3, r3, #3
 801b0f0:	b29a      	uxth	r2, r3
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f8:	68db      	ldr	r3, [r3, #12]
 801b0fa:	685b      	ldr	r3, [r3, #4]
 801b0fc:	4618      	mov	r0, r3
 801b0fe:	f7f5 fdc5 	bl	8010c8c <lwip_htonl>
 801b102:	4604      	mov	r4, r0
 801b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b106:	891b      	ldrh	r3, [r3, #8]
 801b108:	461d      	mov	r5, r3
 801b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b10c:	68db      	ldr	r3, [r3, #12]
 801b10e:	899b      	ldrh	r3, [r3, #12]
 801b110:	b29b      	uxth	r3, r3
 801b112:	4618      	mov	r0, r3
 801b114:	f7f5 fda5 	bl	8010c62 <lwip_htons>
 801b118:	4603      	mov	r3, r0
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	f003 0303 	and.w	r3, r3, #3
 801b120:	2b00      	cmp	r3, #0
 801b122:	d00d      	beq.n	801b140 <tcp_output+0x2a8>
 801b124:	2301      	movs	r3, #1
 801b126:	e00c      	b.n	801b142 <tcp_output+0x2aa>
 801b128:	0801fba4 	.word	0x0801fba4
 801b12c:	08020110 	.word	0x08020110
 801b130:	0801fc20 	.word	0x0801fc20
 801b134:	08020128 	.word	0x08020128
 801b138:	24007698 	.word	0x24007698
 801b13c:	08020150 	.word	0x08020150
 801b140:	2300      	movs	r3, #0
 801b142:	442b      	add	r3, r5
 801b144:	4423      	add	r3, r4
 801b146:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b14c:	68bb      	ldr	r3, [r7, #8]
 801b14e:	1ad3      	subs	r3, r2, r3
 801b150:	2b00      	cmp	r3, #0
 801b152:	da02      	bge.n	801b15a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	68ba      	ldr	r2, [r7, #8]
 801b158:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b15c:	891b      	ldrh	r3, [r3, #8]
 801b15e:	461c      	mov	r4, r3
 801b160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b162:	68db      	ldr	r3, [r3, #12]
 801b164:	899b      	ldrh	r3, [r3, #12]
 801b166:	b29b      	uxth	r3, r3
 801b168:	4618      	mov	r0, r3
 801b16a:	f7f5 fd7a 	bl	8010c62 <lwip_htons>
 801b16e:	4603      	mov	r3, r0
 801b170:	b2db      	uxtb	r3, r3
 801b172:	f003 0303 	and.w	r3, r3, #3
 801b176:	2b00      	cmp	r3, #0
 801b178:	d001      	beq.n	801b17e <tcp_output+0x2e6>
 801b17a:	2301      	movs	r3, #1
 801b17c:	e000      	b.n	801b180 <tcp_output+0x2e8>
 801b17e:	2300      	movs	r3, #0
 801b180:	4423      	add	r3, r4
 801b182:	2b00      	cmp	r3, #0
 801b184:	d049      	beq.n	801b21a <tcp_output+0x382>
      seg->next = NULL;
 801b186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b188:	2200      	movs	r2, #0
 801b18a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b190:	2b00      	cmp	r3, #0
 801b192:	d105      	bne.n	801b1a0 <tcp_output+0x308>
        pcb->unacked = seg;
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b198:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19c:	623b      	str	r3, [r7, #32]
 801b19e:	e03f      	b.n	801b220 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1a2:	68db      	ldr	r3, [r3, #12]
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7f5 fd70 	bl	8010c8c <lwip_htonl>
 801b1ac:	4604      	mov	r4, r0
 801b1ae:	6a3b      	ldr	r3, [r7, #32]
 801b1b0:	68db      	ldr	r3, [r3, #12]
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	f7f5 fd69 	bl	8010c8c <lwip_htonl>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	1ae3      	subs	r3, r4, r3
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	da24      	bge.n	801b20c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	3370      	adds	r3, #112	; 0x70
 801b1c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b1c8:	e002      	b.n	801b1d0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801b1d0:	69fb      	ldr	r3, [r7, #28]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	d011      	beq.n	801b1fc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b1d8:	69fb      	ldr	r3, [r7, #28]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	68db      	ldr	r3, [r3, #12]
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7f5 fd53 	bl	8010c8c <lwip_htonl>
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1ea:	68db      	ldr	r3, [r3, #12]
 801b1ec:	685b      	ldr	r3, [r3, #4]
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f7f5 fd4c 	bl	8010c8c <lwip_htonl>
 801b1f4:	4603      	mov	r3, r0
 801b1f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	dbe6      	blt.n	801b1ca <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801b1fc:	69fb      	ldr	r3, [r7, #28]
 801b1fe:	681a      	ldr	r2, [r3, #0]
 801b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b202:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801b204:	69fb      	ldr	r3, [r7, #28]
 801b206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b208:	601a      	str	r2, [r3, #0]
 801b20a:	e009      	b.n	801b220 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801b20c:	6a3b      	ldr	r3, [r7, #32]
 801b20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b210:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801b212:	6a3b      	ldr	r3, [r7, #32]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	623b      	str	r3, [r7, #32]
 801b218:	e002      	b.n	801b220 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801b21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b21c:	f7fc fc42 	bl	8017aa4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b224:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d012      	beq.n	801b252 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22e:	68db      	ldr	r3, [r3, #12]
 801b230:	685b      	ldr	r3, [r3, #4]
 801b232:	4618      	mov	r0, r3
 801b234:	f7f5 fd2a 	bl	8010c8c <lwip_htonl>
 801b238:	4602      	mov	r2, r0
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b23e:	1ad3      	subs	r3, r2, r3
 801b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b242:	8912      	ldrh	r2, [r2, #8]
 801b244:	4413      	add	r3, r2
  while (seg != NULL &&
 801b246:	69ba      	ldr	r2, [r7, #24]
 801b248:	429a      	cmp	r2, r3
 801b24a:	f4bf aeda 	bcs.w	801b002 <tcp_output+0x16a>
 801b24e:	e000      	b.n	801b252 <tcp_output+0x3ba>
      break;
 801b250:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b256:	2b00      	cmp	r3, #0
 801b258:	d108      	bne.n	801b26c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2200      	movs	r2, #0
 801b25e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801b262:	e004      	b.n	801b26e <tcp_output+0x3d6>
    goto output_done;
 801b264:	bf00      	nop
 801b266:	e002      	b.n	801b26e <tcp_output+0x3d6>
    goto output_done;
 801b268:	bf00      	nop
 801b26a:	e000      	b.n	801b26e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801b26c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	8b5b      	ldrh	r3, [r3, #26]
 801b272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b276:	b29a      	uxth	r2, r3
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b27c:	2300      	movs	r3, #0
}
 801b27e:	4618      	mov	r0, r3
 801b280:	3728      	adds	r7, #40	; 0x28
 801b282:	46bd      	mov	sp, r7
 801b284:	bdb0      	pop	{r4, r5, r7, pc}
 801b286:	bf00      	nop

0801b288 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b288:	b580      	push	{r7, lr}
 801b28a:	b082      	sub	sp, #8
 801b28c:	af00      	add	r7, sp, #0
 801b28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	2b00      	cmp	r3, #0
 801b294:	d106      	bne.n	801b2a4 <tcp_output_segment_busy+0x1c>
 801b296:	4b09      	ldr	r3, [pc, #36]	; (801b2bc <tcp_output_segment_busy+0x34>)
 801b298:	f240 529a 	movw	r2, #1434	; 0x59a
 801b29c:	4908      	ldr	r1, [pc, #32]	; (801b2c0 <tcp_output_segment_busy+0x38>)
 801b29e:	4809      	ldr	r0, [pc, #36]	; (801b2c4 <tcp_output_segment_busy+0x3c>)
 801b2a0:	f001 fb8a 	bl	801c9b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	685b      	ldr	r3, [r3, #4]
 801b2a8:	7b9b      	ldrb	r3, [r3, #14]
 801b2aa:	2b01      	cmp	r3, #1
 801b2ac:	d001      	beq.n	801b2b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	e000      	b.n	801b2b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b2b2:	2300      	movs	r3, #0
}
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	3708      	adds	r7, #8
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}
 801b2bc:	0801fba4 	.word	0x0801fba4
 801b2c0:	08020168 	.word	0x08020168
 801b2c4:	0801fc20 	.word	0x0801fc20

0801b2c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b2c8:	b5b0      	push	{r4, r5, r7, lr}
 801b2ca:	b08c      	sub	sp, #48	; 0x30
 801b2cc:	af04      	add	r7, sp, #16
 801b2ce:	60f8      	str	r0, [r7, #12]
 801b2d0:	60b9      	str	r1, [r7, #8]
 801b2d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b2d4:	68fb      	ldr	r3, [r7, #12]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d106      	bne.n	801b2e8 <tcp_output_segment+0x20>
 801b2da:	4b64      	ldr	r3, [pc, #400]	; (801b46c <tcp_output_segment+0x1a4>)
 801b2dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801b2e0:	4963      	ldr	r1, [pc, #396]	; (801b470 <tcp_output_segment+0x1a8>)
 801b2e2:	4864      	ldr	r0, [pc, #400]	; (801b474 <tcp_output_segment+0x1ac>)
 801b2e4:	f001 fb68 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b2e8:	68bb      	ldr	r3, [r7, #8]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d106      	bne.n	801b2fc <tcp_output_segment+0x34>
 801b2ee:	4b5f      	ldr	r3, [pc, #380]	; (801b46c <tcp_output_segment+0x1a4>)
 801b2f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801b2f4:	4960      	ldr	r1, [pc, #384]	; (801b478 <tcp_output_segment+0x1b0>)
 801b2f6:	485f      	ldr	r0, [pc, #380]	; (801b474 <tcp_output_segment+0x1ac>)
 801b2f8:	f001 fb5e 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d106      	bne.n	801b310 <tcp_output_segment+0x48>
 801b302:	4b5a      	ldr	r3, [pc, #360]	; (801b46c <tcp_output_segment+0x1a4>)
 801b304:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801b308:	495c      	ldr	r1, [pc, #368]	; (801b47c <tcp_output_segment+0x1b4>)
 801b30a:	485a      	ldr	r0, [pc, #360]	; (801b474 <tcp_output_segment+0x1ac>)
 801b30c:	f001 fb54 	bl	801c9b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b310:	68f8      	ldr	r0, [r7, #12]
 801b312:	f7ff ffb9 	bl	801b288 <tcp_output_segment_busy>
 801b316:	4603      	mov	r3, r0
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d001      	beq.n	801b320 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b31c:	2300      	movs	r3, #0
 801b31e:	e0a0      	b.n	801b462 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b320:	68bb      	ldr	r3, [r7, #8]
 801b322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	68dc      	ldr	r4, [r3, #12]
 801b328:	4610      	mov	r0, r2
 801b32a:	f7f5 fcaf 	bl	8010c8c <lwip_htonl>
 801b32e:	4603      	mov	r3, r0
 801b330:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b332:	68bb      	ldr	r3, [r7, #8]
 801b334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801b336:	68fb      	ldr	r3, [r7, #12]
 801b338:	68dc      	ldr	r4, [r3, #12]
 801b33a:	4610      	mov	r0, r2
 801b33c:	f7f5 fc91 	bl	8010c62 <lwip_htons>
 801b340:	4603      	mov	r3, r0
 801b342:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b344:	68bb      	ldr	r3, [r7, #8]
 801b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b348:	68ba      	ldr	r2, [r7, #8]
 801b34a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b34c:	441a      	add	r2, r3
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	68db      	ldr	r3, [r3, #12]
 801b356:	3314      	adds	r3, #20
 801b358:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	7a9b      	ldrb	r3, [r3, #10]
 801b35e:	f003 0301 	and.w	r3, r3, #1
 801b362:	2b00      	cmp	r3, #0
 801b364:	d015      	beq.n	801b392 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b366:	68bb      	ldr	r3, [r7, #8]
 801b368:	3304      	adds	r3, #4
 801b36a:	461a      	mov	r2, r3
 801b36c:	6879      	ldr	r1, [r7, #4]
 801b36e:	f44f 7006 	mov.w	r0, #536	; 0x218
 801b372:	f7fc fe8d 	bl	8018090 <tcp_eff_send_mss_netif>
 801b376:	4603      	mov	r3, r0
 801b378:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b37a:	8b7b      	ldrh	r3, [r7, #26]
 801b37c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801b380:	4618      	mov	r0, r3
 801b382:	f7f5 fc83 	bl	8010c8c <lwip_htonl>
 801b386:	4602      	mov	r2, r0
 801b388:	69fb      	ldr	r3, [r7, #28]
 801b38a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b38c:	69fb      	ldr	r3, [r7, #28]
 801b38e:	3304      	adds	r3, #4
 801b390:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b392:	68bb      	ldr	r3, [r7, #8]
 801b394:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b398:	2b00      	cmp	r3, #0
 801b39a:	da02      	bge.n	801b3a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	2200      	movs	r2, #0
 801b3a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d10c      	bne.n	801b3c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b3aa:	4b35      	ldr	r3, [pc, #212]	; (801b480 <tcp_output_segment+0x1b8>)
 801b3ac:	681a      	ldr	r2, [r3, #0]
 801b3ae:	68bb      	ldr	r3, [r7, #8]
 801b3b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	68db      	ldr	r3, [r3, #12]
 801b3b6:	685b      	ldr	r3, [r3, #4]
 801b3b8:	4618      	mov	r0, r3
 801b3ba:	f7f5 fc67 	bl	8010c8c <lwip_htonl>
 801b3be:	4602      	mov	r2, r0
 801b3c0:	68bb      	ldr	r3, [r7, #8]
 801b3c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	68db      	ldr	r3, [r3, #12]
 801b3c8:	461a      	mov	r2, r3
 801b3ca:	68fb      	ldr	r3, [r7, #12]
 801b3cc:	685b      	ldr	r3, [r3, #4]
 801b3ce:	685b      	ldr	r3, [r3, #4]
 801b3d0:	1ad3      	subs	r3, r2, r3
 801b3d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b3d4:	68fb      	ldr	r3, [r7, #12]
 801b3d6:	685b      	ldr	r3, [r3, #4]
 801b3d8:	8959      	ldrh	r1, [r3, #10]
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	685b      	ldr	r3, [r3, #4]
 801b3de:	8b3a      	ldrh	r2, [r7, #24]
 801b3e0:	1a8a      	subs	r2, r1, r2
 801b3e2:	b292      	uxth	r2, r2
 801b3e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	685b      	ldr	r3, [r3, #4]
 801b3ea:	8919      	ldrh	r1, [r3, #8]
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	685b      	ldr	r3, [r3, #4]
 801b3f0:	8b3a      	ldrh	r2, [r7, #24]
 801b3f2:	1a8a      	subs	r2, r1, r2
 801b3f4:	b292      	uxth	r2, r2
 801b3f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	685b      	ldr	r3, [r3, #4]
 801b3fc:	68fa      	ldr	r2, [r7, #12]
 801b3fe:	68d2      	ldr	r2, [r2, #12]
 801b400:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b402:	68fb      	ldr	r3, [r7, #12]
 801b404:	68db      	ldr	r3, [r3, #12]
 801b406:	2200      	movs	r2, #0
 801b408:	741a      	strb	r2, [r3, #16]
 801b40a:	2200      	movs	r2, #0
 801b40c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	68db      	ldr	r3, [r3, #12]
 801b412:	f103 0214 	add.w	r2, r3, #20
 801b416:	68fb      	ldr	r3, [r7, #12]
 801b418:	7a9b      	ldrb	r3, [r3, #10]
 801b41a:	009b      	lsls	r3, r3, #2
 801b41c:	f003 0304 	and.w	r3, r3, #4
 801b420:	4413      	add	r3, r2
 801b422:	69fa      	ldr	r2, [r7, #28]
 801b424:	429a      	cmp	r2, r3
 801b426:	d006      	beq.n	801b436 <tcp_output_segment+0x16e>
 801b428:	4b10      	ldr	r3, [pc, #64]	; (801b46c <tcp_output_segment+0x1a4>)
 801b42a:	f240 621c 	movw	r2, #1564	; 0x61c
 801b42e:	4915      	ldr	r1, [pc, #84]	; (801b484 <tcp_output_segment+0x1bc>)
 801b430:	4810      	ldr	r0, [pc, #64]	; (801b474 <tcp_output_segment+0x1ac>)
 801b432:	f001 fac1 	bl	801c9b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	6858      	ldr	r0, [r3, #4]
 801b43a:	68b9      	ldr	r1, [r7, #8]
 801b43c:	68bb      	ldr	r3, [r7, #8]
 801b43e:	1d1c      	adds	r4, r3, #4
 801b440:	68bb      	ldr	r3, [r7, #8]
 801b442:	7add      	ldrb	r5, [r3, #11]
 801b444:	68bb      	ldr	r3, [r7, #8]
 801b446:	7a9b      	ldrb	r3, [r3, #10]
 801b448:	687a      	ldr	r2, [r7, #4]
 801b44a:	9202      	str	r2, [sp, #8]
 801b44c:	2206      	movs	r2, #6
 801b44e:	9201      	str	r2, [sp, #4]
 801b450:	9300      	str	r3, [sp, #0]
 801b452:	462b      	mov	r3, r5
 801b454:	4622      	mov	r2, r4
 801b456:	f7f8 ff0f 	bl	8014278 <ip4_output_if>
 801b45a:	4603      	mov	r3, r0
 801b45c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b462:	4618      	mov	r0, r3
 801b464:	3720      	adds	r7, #32
 801b466:	46bd      	mov	sp, r7
 801b468:	bdb0      	pop	{r4, r5, r7, pc}
 801b46a:	bf00      	nop
 801b46c:	0801fba4 	.word	0x0801fba4
 801b470:	08020190 	.word	0x08020190
 801b474:	0801fc20 	.word	0x0801fc20
 801b478:	080201b0 	.word	0x080201b0
 801b47c:	080201d0 	.word	0x080201d0
 801b480:	24007688 	.word	0x24007688
 801b484:	080201f4 	.word	0x080201f4

0801b488 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b488:	b5b0      	push	{r4, r5, r7, lr}
 801b48a:	b084      	sub	sp, #16
 801b48c:	af00      	add	r7, sp, #0
 801b48e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	2b00      	cmp	r3, #0
 801b494:	d106      	bne.n	801b4a4 <tcp_rexmit_rto_prepare+0x1c>
 801b496:	4b31      	ldr	r3, [pc, #196]	; (801b55c <tcp_rexmit_rto_prepare+0xd4>)
 801b498:	f240 6263 	movw	r2, #1635	; 0x663
 801b49c:	4930      	ldr	r1, [pc, #192]	; (801b560 <tcp_rexmit_rto_prepare+0xd8>)
 801b49e:	4831      	ldr	r0, [pc, #196]	; (801b564 <tcp_rexmit_rto_prepare+0xdc>)
 801b4a0:	f001 fa8a 	bl	801c9b8 <iprintf>

  if (pcb->unacked == NULL) {
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4a8:	2b00      	cmp	r3, #0
 801b4aa:	d102      	bne.n	801b4b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b4ac:	f06f 0305 	mvn.w	r3, #5
 801b4b0:	e050      	b.n	801b554 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b4b6:	60fb      	str	r3, [r7, #12]
 801b4b8:	e00b      	b.n	801b4d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b4ba:	68f8      	ldr	r0, [r7, #12]
 801b4bc:	f7ff fee4 	bl	801b288 <tcp_output_segment_busy>
 801b4c0:	4603      	mov	r3, r0
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d002      	beq.n	801b4cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b4c6:	f06f 0305 	mvn.w	r3, #5
 801b4ca:	e043      	b.n	801b554 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	60fb      	str	r3, [r7, #12]
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d1ef      	bne.n	801b4ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b4da:	68f8      	ldr	r0, [r7, #12]
 801b4dc:	f7ff fed4 	bl	801b288 <tcp_output_segment_busy>
 801b4e0:	4603      	mov	r3, r0
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d002      	beq.n	801b4ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b4e6:	f06f 0305 	mvn.w	r3, #5
 801b4ea:	e033      	b.n	801b554 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801b4f0:	68fb      	ldr	r3, [r7, #12]
 801b4f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2200      	movs	r2, #0
 801b500:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	8b5b      	ldrh	r3, [r3, #26]
 801b506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b50a:	b29a      	uxth	r2, r3
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	68db      	ldr	r3, [r3, #12]
 801b514:	685b      	ldr	r3, [r3, #4]
 801b516:	4618      	mov	r0, r3
 801b518:	f7f5 fbb8 	bl	8010c8c <lwip_htonl>
 801b51c:	4604      	mov	r4, r0
 801b51e:	68fb      	ldr	r3, [r7, #12]
 801b520:	891b      	ldrh	r3, [r3, #8]
 801b522:	461d      	mov	r5, r3
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	68db      	ldr	r3, [r3, #12]
 801b528:	899b      	ldrh	r3, [r3, #12]
 801b52a:	b29b      	uxth	r3, r3
 801b52c:	4618      	mov	r0, r3
 801b52e:	f7f5 fb98 	bl	8010c62 <lwip_htons>
 801b532:	4603      	mov	r3, r0
 801b534:	b2db      	uxtb	r3, r3
 801b536:	f003 0303 	and.w	r3, r3, #3
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d001      	beq.n	801b542 <tcp_rexmit_rto_prepare+0xba>
 801b53e:	2301      	movs	r3, #1
 801b540:	e000      	b.n	801b544 <tcp_rexmit_rto_prepare+0xbc>
 801b542:	2300      	movs	r3, #0
 801b544:	442b      	add	r3, r5
 801b546:	18e2      	adds	r2, r4, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	2200      	movs	r2, #0
 801b550:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801b552:	2300      	movs	r3, #0
}
 801b554:	4618      	mov	r0, r3
 801b556:	3710      	adds	r7, #16
 801b558:	46bd      	mov	sp, r7
 801b55a:	bdb0      	pop	{r4, r5, r7, pc}
 801b55c:	0801fba4 	.word	0x0801fba4
 801b560:	08020208 	.word	0x08020208
 801b564:	0801fc20 	.word	0x0801fc20

0801b568 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b082      	sub	sp, #8
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	2b00      	cmp	r3, #0
 801b574:	d106      	bne.n	801b584 <tcp_rexmit_rto_commit+0x1c>
 801b576:	4b0d      	ldr	r3, [pc, #52]	; (801b5ac <tcp_rexmit_rto_commit+0x44>)
 801b578:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801b57c:	490c      	ldr	r1, [pc, #48]	; (801b5b0 <tcp_rexmit_rto_commit+0x48>)
 801b57e:	480d      	ldr	r0, [pc, #52]	; (801b5b4 <tcp_rexmit_rto_commit+0x4c>)
 801b580:	f001 fa1a 	bl	801c9b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b58a:	2bff      	cmp	r3, #255	; 0xff
 801b58c:	d007      	beq.n	801b59e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b594:	3301      	adds	r3, #1
 801b596:	b2da      	uxtb	r2, r3
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b59e:	6878      	ldr	r0, [r7, #4]
 801b5a0:	f7ff fc7a 	bl	801ae98 <tcp_output>
}
 801b5a4:	bf00      	nop
 801b5a6:	3708      	adds	r7, #8
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	0801fba4 	.word	0x0801fba4
 801b5b0:	0802022c 	.word	0x0802022c
 801b5b4:	0801fc20 	.word	0x0801fc20

0801b5b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b082      	sub	sp, #8
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d106      	bne.n	801b5d4 <tcp_rexmit_rto+0x1c>
 801b5c6:	4b0a      	ldr	r3, [pc, #40]	; (801b5f0 <tcp_rexmit_rto+0x38>)
 801b5c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801b5cc:	4909      	ldr	r1, [pc, #36]	; (801b5f4 <tcp_rexmit_rto+0x3c>)
 801b5ce:	480a      	ldr	r0, [pc, #40]	; (801b5f8 <tcp_rexmit_rto+0x40>)
 801b5d0:	f001 f9f2 	bl	801c9b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b5d4:	6878      	ldr	r0, [r7, #4]
 801b5d6:	f7ff ff57 	bl	801b488 <tcp_rexmit_rto_prepare>
 801b5da:	4603      	mov	r3, r0
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d102      	bne.n	801b5e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b5e0:	6878      	ldr	r0, [r7, #4]
 801b5e2:	f7ff ffc1 	bl	801b568 <tcp_rexmit_rto_commit>
  }
}
 801b5e6:	bf00      	nop
 801b5e8:	3708      	adds	r7, #8
 801b5ea:	46bd      	mov	sp, r7
 801b5ec:	bd80      	pop	{r7, pc}
 801b5ee:	bf00      	nop
 801b5f0:	0801fba4 	.word	0x0801fba4
 801b5f4:	08020250 	.word	0x08020250
 801b5f8:	0801fc20 	.word	0x0801fc20

0801b5fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b5fc:	b590      	push	{r4, r7, lr}
 801b5fe:	b085      	sub	sp, #20
 801b600:	af00      	add	r7, sp, #0
 801b602:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d106      	bne.n	801b618 <tcp_rexmit+0x1c>
 801b60a:	4b2f      	ldr	r3, [pc, #188]	; (801b6c8 <tcp_rexmit+0xcc>)
 801b60c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801b610:	492e      	ldr	r1, [pc, #184]	; (801b6cc <tcp_rexmit+0xd0>)
 801b612:	482f      	ldr	r0, [pc, #188]	; (801b6d0 <tcp_rexmit+0xd4>)
 801b614:	f001 f9d0 	bl	801c9b8 <iprintf>

  if (pcb->unacked == NULL) {
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d102      	bne.n	801b626 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b620:	f06f 0305 	mvn.w	r3, #5
 801b624:	e04c      	b.n	801b6c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b62a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b62c:	68b8      	ldr	r0, [r7, #8]
 801b62e:	f7ff fe2b 	bl	801b288 <tcp_output_segment_busy>
 801b632:	4603      	mov	r3, r0
 801b634:	2b00      	cmp	r3, #0
 801b636:	d002      	beq.n	801b63e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b638:	f06f 0305 	mvn.w	r3, #5
 801b63c:	e040      	b.n	801b6c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b63e:	68bb      	ldr	r3, [r7, #8]
 801b640:	681a      	ldr	r2, [r3, #0]
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	336c      	adds	r3, #108	; 0x6c
 801b64a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b64c:	e002      	b.n	801b654 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b64e:	68fb      	ldr	r3, [r7, #12]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d011      	beq.n	801b680 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	68db      	ldr	r3, [r3, #12]
 801b662:	685b      	ldr	r3, [r3, #4]
 801b664:	4618      	mov	r0, r3
 801b666:	f7f5 fb11 	bl	8010c8c <lwip_htonl>
 801b66a:	4604      	mov	r4, r0
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	68db      	ldr	r3, [r3, #12]
 801b670:	685b      	ldr	r3, [r3, #4]
 801b672:	4618      	mov	r0, r3
 801b674:	f7f5 fb0a 	bl	8010c8c <lwip_htonl>
 801b678:	4603      	mov	r3, r0
 801b67a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	dbe6      	blt.n	801b64e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	681a      	ldr	r2, [r3, #0]
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	68ba      	ldr	r2, [r7, #8]
 801b68c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b68e:	68bb      	ldr	r3, [r7, #8]
 801b690:	681b      	ldr	r3, [r3, #0]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d103      	bne.n	801b69e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	2200      	movs	r2, #0
 801b69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b6a4:	2bff      	cmp	r3, #255	; 0xff
 801b6a6:	d007      	beq.n	801b6b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b6a8:	687b      	ldr	r3, [r7, #4]
 801b6aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	b2da      	uxtb	r2, r3
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	2200      	movs	r2, #0
 801b6bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b6be:	2300      	movs	r3, #0
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3714      	adds	r7, #20
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd90      	pop	{r4, r7, pc}
 801b6c8:	0801fba4 	.word	0x0801fba4
 801b6cc:	0802026c 	.word	0x0802026c
 801b6d0:	0801fc20 	.word	0x0801fc20

0801b6d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b082      	sub	sp, #8
 801b6d8:	af00      	add	r7, sp, #0
 801b6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d106      	bne.n	801b6f0 <tcp_rexmit_fast+0x1c>
 801b6e2:	4b2f      	ldr	r3, [pc, #188]	; (801b7a0 <tcp_rexmit_fast+0xcc>)
 801b6e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801b6e8:	492e      	ldr	r1, [pc, #184]	; (801b7a4 <tcp_rexmit_fast+0xd0>)
 801b6ea:	482f      	ldr	r0, [pc, #188]	; (801b7a8 <tcp_rexmit_fast+0xd4>)
 801b6ec:	f001 f964 	bl	801c9b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6f4:	2b00      	cmp	r3, #0
 801b6f6:	d04f      	beq.n	801b798 <tcp_rexmit_fast+0xc4>
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	8b5b      	ldrh	r3, [r3, #26]
 801b6fc:	f003 0304 	and.w	r3, r3, #4
 801b700:	2b00      	cmp	r3, #0
 801b702:	d149      	bne.n	801b798 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b704:	6878      	ldr	r0, [r7, #4]
 801b706:	f7ff ff79 	bl	801b5fc <tcp_rexmit>
 801b70a:	4603      	mov	r3, r0
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d143      	bne.n	801b798 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b71c:	429a      	cmp	r2, r3
 801b71e:	d208      	bcs.n	801b732 <tcp_rexmit_fast+0x5e>
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b726:	2b00      	cmp	r3, #0
 801b728:	da00      	bge.n	801b72c <tcp_rexmit_fast+0x58>
 801b72a:	3301      	adds	r3, #1
 801b72c:	105b      	asrs	r3, r3, #1
 801b72e:	b29b      	uxth	r3, r3
 801b730:	e007      	b.n	801b742 <tcp_rexmit_fast+0x6e>
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b738:	2b00      	cmp	r3, #0
 801b73a:	da00      	bge.n	801b73e <tcp_rexmit_fast+0x6a>
 801b73c:	3301      	adds	r3, #1
 801b73e:	105b      	asrs	r3, r3, #1
 801b740:	b29b      	uxth	r3, r3
 801b742:	687a      	ldr	r2, [r7, #4]
 801b744:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b74e:	461a      	mov	r2, r3
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b754:	005b      	lsls	r3, r3, #1
 801b756:	429a      	cmp	r2, r3
 801b758:	d206      	bcs.n	801b768 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b75e:	005b      	lsls	r3, r3, #1
 801b760:	b29a      	uxth	r2, r3
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b772:	4619      	mov	r1, r3
 801b774:	0049      	lsls	r1, r1, #1
 801b776:	440b      	add	r3, r1
 801b778:	b29b      	uxth	r3, r3
 801b77a:	4413      	add	r3, r2
 801b77c:	b29a      	uxth	r2, r3
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	8b5b      	ldrh	r3, [r3, #26]
 801b788:	f043 0304 	orr.w	r3, r3, #4
 801b78c:	b29a      	uxth	r2, r3
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	2200      	movs	r2, #0
 801b796:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801b798:	bf00      	nop
 801b79a:	3708      	adds	r7, #8
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}
 801b7a0:	0801fba4 	.word	0x0801fba4
 801b7a4:	08020284 	.word	0x08020284
 801b7a8:	0801fc20 	.word	0x0801fc20

0801b7ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b7ac:	b580      	push	{r7, lr}
 801b7ae:	b086      	sub	sp, #24
 801b7b0:	af00      	add	r7, sp, #0
 801b7b2:	60f8      	str	r0, [r7, #12]
 801b7b4:	607b      	str	r3, [r7, #4]
 801b7b6:	460b      	mov	r3, r1
 801b7b8:	817b      	strh	r3, [r7, #10]
 801b7ba:	4613      	mov	r3, r2
 801b7bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b7be:	897a      	ldrh	r2, [r7, #10]
 801b7c0:	893b      	ldrh	r3, [r7, #8]
 801b7c2:	4413      	add	r3, r2
 801b7c4:	b29b      	uxth	r3, r3
 801b7c6:	3314      	adds	r3, #20
 801b7c8:	b29b      	uxth	r3, r3
 801b7ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b7ce:	4619      	mov	r1, r3
 801b7d0:	2022      	movs	r0, #34	; 0x22
 801b7d2:	f7fa fc0f 	bl	8015ff4 <pbuf_alloc>
 801b7d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b7d8:	697b      	ldr	r3, [r7, #20]
 801b7da:	2b00      	cmp	r3, #0
 801b7dc:	d04e      	beq.n	801b87c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b7de:	697b      	ldr	r3, [r7, #20]
 801b7e0:	895b      	ldrh	r3, [r3, #10]
 801b7e2:	461a      	mov	r2, r3
 801b7e4:	897b      	ldrh	r3, [r7, #10]
 801b7e6:	3314      	adds	r3, #20
 801b7e8:	429a      	cmp	r2, r3
 801b7ea:	da06      	bge.n	801b7fa <tcp_output_alloc_header_common+0x4e>
 801b7ec:	4b26      	ldr	r3, [pc, #152]	; (801b888 <tcp_output_alloc_header_common+0xdc>)
 801b7ee:	f240 7224 	movw	r2, #1828	; 0x724
 801b7f2:	4926      	ldr	r1, [pc, #152]	; (801b88c <tcp_output_alloc_header_common+0xe0>)
 801b7f4:	4826      	ldr	r0, [pc, #152]	; (801b890 <tcp_output_alloc_header_common+0xe4>)
 801b7f6:	f001 f8df 	bl	801c9b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b7fa:	697b      	ldr	r3, [r7, #20]
 801b7fc:	685b      	ldr	r3, [r3, #4]
 801b7fe:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b800:	8c3b      	ldrh	r3, [r7, #32]
 801b802:	4618      	mov	r0, r3
 801b804:	f7f5 fa2d 	bl	8010c62 <lwip_htons>
 801b808:	4603      	mov	r3, r0
 801b80a:	461a      	mov	r2, r3
 801b80c:	693b      	ldr	r3, [r7, #16]
 801b80e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b812:	4618      	mov	r0, r3
 801b814:	f7f5 fa25 	bl	8010c62 <lwip_htons>
 801b818:	4603      	mov	r3, r0
 801b81a:	461a      	mov	r2, r3
 801b81c:	693b      	ldr	r3, [r7, #16]
 801b81e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b820:	693b      	ldr	r3, [r7, #16]
 801b822:	687a      	ldr	r2, [r7, #4]
 801b824:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b826:	68f8      	ldr	r0, [r7, #12]
 801b828:	f7f5 fa30 	bl	8010c8c <lwip_htonl>
 801b82c:	4602      	mov	r2, r0
 801b82e:	693b      	ldr	r3, [r7, #16]
 801b830:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b832:	897b      	ldrh	r3, [r7, #10]
 801b834:	089b      	lsrs	r3, r3, #2
 801b836:	b29b      	uxth	r3, r3
 801b838:	3305      	adds	r3, #5
 801b83a:	b29b      	uxth	r3, r3
 801b83c:	031b      	lsls	r3, r3, #12
 801b83e:	b29a      	uxth	r2, r3
 801b840:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b844:	b29b      	uxth	r3, r3
 801b846:	4313      	orrs	r3, r2
 801b848:	b29b      	uxth	r3, r3
 801b84a:	4618      	mov	r0, r3
 801b84c:	f7f5 fa09 	bl	8010c62 <lwip_htons>
 801b850:	4603      	mov	r3, r0
 801b852:	461a      	mov	r2, r3
 801b854:	693b      	ldr	r3, [r7, #16]
 801b856:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b858:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801b85a:	4618      	mov	r0, r3
 801b85c:	f7f5 fa01 	bl	8010c62 <lwip_htons>
 801b860:	4603      	mov	r3, r0
 801b862:	461a      	mov	r2, r3
 801b864:	693b      	ldr	r3, [r7, #16]
 801b866:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b868:	693b      	ldr	r3, [r7, #16]
 801b86a:	2200      	movs	r2, #0
 801b86c:	741a      	strb	r2, [r3, #16]
 801b86e:	2200      	movs	r2, #0
 801b870:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b872:	693b      	ldr	r3, [r7, #16]
 801b874:	2200      	movs	r2, #0
 801b876:	749a      	strb	r2, [r3, #18]
 801b878:	2200      	movs	r2, #0
 801b87a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b87c:	697b      	ldr	r3, [r7, #20]
}
 801b87e:	4618      	mov	r0, r3
 801b880:	3718      	adds	r7, #24
 801b882:	46bd      	mov	sp, r7
 801b884:	bd80      	pop	{r7, pc}
 801b886:	bf00      	nop
 801b888:	0801fba4 	.word	0x0801fba4
 801b88c:	080202a4 	.word	0x080202a4
 801b890:	0801fc20 	.word	0x0801fc20

0801b894 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b894:	b5b0      	push	{r4, r5, r7, lr}
 801b896:	b08a      	sub	sp, #40	; 0x28
 801b898:	af04      	add	r7, sp, #16
 801b89a:	60f8      	str	r0, [r7, #12]
 801b89c:	607b      	str	r3, [r7, #4]
 801b89e:	460b      	mov	r3, r1
 801b8a0:	817b      	strh	r3, [r7, #10]
 801b8a2:	4613      	mov	r3, r2
 801b8a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	2b00      	cmp	r3, #0
 801b8aa:	d106      	bne.n	801b8ba <tcp_output_alloc_header+0x26>
 801b8ac:	4b15      	ldr	r3, [pc, #84]	; (801b904 <tcp_output_alloc_header+0x70>)
 801b8ae:	f240 7242 	movw	r2, #1858	; 0x742
 801b8b2:	4915      	ldr	r1, [pc, #84]	; (801b908 <tcp_output_alloc_header+0x74>)
 801b8b4:	4815      	ldr	r0, [pc, #84]	; (801b90c <tcp_output_alloc_header+0x78>)
 801b8b6:	f001 f87f 	bl	801c9b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801b8be:	68fb      	ldr	r3, [r7, #12]
 801b8c0:	8adb      	ldrh	r3, [r3, #22]
 801b8c2:	68fa      	ldr	r2, [r7, #12]
 801b8c4:	8b12      	ldrh	r2, [r2, #24]
 801b8c6:	68f9      	ldr	r1, [r7, #12]
 801b8c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801b8ca:	893d      	ldrh	r5, [r7, #8]
 801b8cc:	897c      	ldrh	r4, [r7, #10]
 801b8ce:	9103      	str	r1, [sp, #12]
 801b8d0:	2110      	movs	r1, #16
 801b8d2:	9102      	str	r1, [sp, #8]
 801b8d4:	9201      	str	r2, [sp, #4]
 801b8d6:	9300      	str	r3, [sp, #0]
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	462a      	mov	r2, r5
 801b8dc:	4621      	mov	r1, r4
 801b8de:	f7ff ff65 	bl	801b7ac <tcp_output_alloc_header_common>
 801b8e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b8e4:	697b      	ldr	r3, [r7, #20]
 801b8e6:	2b00      	cmp	r3, #0
 801b8e8:	d006      	beq.n	801b8f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b8ea:	68fb      	ldr	r3, [r7, #12]
 801b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8ee:	68fa      	ldr	r2, [r7, #12]
 801b8f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801b8f2:	441a      	add	r2, r3
 801b8f4:	68fb      	ldr	r3, [r7, #12]
 801b8f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801b8f8:	697b      	ldr	r3, [r7, #20]
}
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	3718      	adds	r7, #24
 801b8fe:	46bd      	mov	sp, r7
 801b900:	bdb0      	pop	{r4, r5, r7, pc}
 801b902:	bf00      	nop
 801b904:	0801fba4 	.word	0x0801fba4
 801b908:	080202d4 	.word	0x080202d4
 801b90c:	0801fc20 	.word	0x0801fc20

0801b910 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b910:	b580      	push	{r7, lr}
 801b912:	b088      	sub	sp, #32
 801b914:	af00      	add	r7, sp, #0
 801b916:	60f8      	str	r0, [r7, #12]
 801b918:	60b9      	str	r1, [r7, #8]
 801b91a:	4611      	mov	r1, r2
 801b91c:	461a      	mov	r2, r3
 801b91e:	460b      	mov	r3, r1
 801b920:	71fb      	strb	r3, [r7, #7]
 801b922:	4613      	mov	r3, r2
 801b924:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b926:	2300      	movs	r3, #0
 801b928:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b92a:	68bb      	ldr	r3, [r7, #8]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d106      	bne.n	801b93e <tcp_output_fill_options+0x2e>
 801b930:	4b13      	ldr	r3, [pc, #76]	; (801b980 <tcp_output_fill_options+0x70>)
 801b932:	f240 7256 	movw	r2, #1878	; 0x756
 801b936:	4913      	ldr	r1, [pc, #76]	; (801b984 <tcp_output_fill_options+0x74>)
 801b938:	4813      	ldr	r0, [pc, #76]	; (801b988 <tcp_output_fill_options+0x78>)
 801b93a:	f001 f83d 	bl	801c9b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b93e:	68bb      	ldr	r3, [r7, #8]
 801b940:	685b      	ldr	r3, [r3, #4]
 801b942:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b944:	69bb      	ldr	r3, [r7, #24]
 801b946:	3314      	adds	r3, #20
 801b948:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b94a:	69bb      	ldr	r3, [r7, #24]
 801b94c:	f103 0214 	add.w	r2, r3, #20
 801b950:	8bfb      	ldrh	r3, [r7, #30]
 801b952:	009b      	lsls	r3, r3, #2
 801b954:	4619      	mov	r1, r3
 801b956:	79fb      	ldrb	r3, [r7, #7]
 801b958:	009b      	lsls	r3, r3, #2
 801b95a:	f003 0304 	and.w	r3, r3, #4
 801b95e:	440b      	add	r3, r1
 801b960:	4413      	add	r3, r2
 801b962:	697a      	ldr	r2, [r7, #20]
 801b964:	429a      	cmp	r2, r3
 801b966:	d006      	beq.n	801b976 <tcp_output_fill_options+0x66>
 801b968:	4b05      	ldr	r3, [pc, #20]	; (801b980 <tcp_output_fill_options+0x70>)
 801b96a:	f240 7275 	movw	r2, #1909	; 0x775
 801b96e:	4907      	ldr	r1, [pc, #28]	; (801b98c <tcp_output_fill_options+0x7c>)
 801b970:	4805      	ldr	r0, [pc, #20]	; (801b988 <tcp_output_fill_options+0x78>)
 801b972:	f001 f821 	bl	801c9b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b976:	bf00      	nop
 801b978:	3720      	adds	r7, #32
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	0801fba4 	.word	0x0801fba4
 801b984:	080202fc 	.word	0x080202fc
 801b988:	0801fc20 	.word	0x0801fc20
 801b98c:	080201f4 	.word	0x080201f4

0801b990 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b990:	b580      	push	{r7, lr}
 801b992:	b08a      	sub	sp, #40	; 0x28
 801b994:	af04      	add	r7, sp, #16
 801b996:	60f8      	str	r0, [r7, #12]
 801b998:	60b9      	str	r1, [r7, #8]
 801b99a:	607a      	str	r2, [r7, #4]
 801b99c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b99e:	68bb      	ldr	r3, [r7, #8]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d106      	bne.n	801b9b2 <tcp_output_control_segment+0x22>
 801b9a4:	4b1c      	ldr	r3, [pc, #112]	; (801ba18 <tcp_output_control_segment+0x88>)
 801b9a6:	f240 7287 	movw	r2, #1927	; 0x787
 801b9aa:	491c      	ldr	r1, [pc, #112]	; (801ba1c <tcp_output_control_segment+0x8c>)
 801b9ac:	481c      	ldr	r0, [pc, #112]	; (801ba20 <tcp_output_control_segment+0x90>)
 801b9ae:	f001 f803 	bl	801c9b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b9b2:	683a      	ldr	r2, [r7, #0]
 801b9b4:	6879      	ldr	r1, [r7, #4]
 801b9b6:	68f8      	ldr	r0, [r7, #12]
 801b9b8:	f7fe ff2e 	bl	801a818 <tcp_route>
 801b9bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	2b00      	cmp	r3, #0
 801b9c2:	d102      	bne.n	801b9ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b9c4:	23fc      	movs	r3, #252	; 0xfc
 801b9c6:	75fb      	strb	r3, [r7, #23]
 801b9c8:	e01c      	b.n	801ba04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d006      	beq.n	801b9de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	7adb      	ldrb	r3, [r3, #11]
 801b9d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	7a9b      	ldrb	r3, [r3, #10]
 801b9da:	757b      	strb	r3, [r7, #21]
 801b9dc:	e003      	b.n	801b9e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b9de:	23ff      	movs	r3, #255	; 0xff
 801b9e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b9e2:	2300      	movs	r3, #0
 801b9e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b9e6:	7dba      	ldrb	r2, [r7, #22]
 801b9e8:	693b      	ldr	r3, [r7, #16]
 801b9ea:	9302      	str	r3, [sp, #8]
 801b9ec:	2306      	movs	r3, #6
 801b9ee:	9301      	str	r3, [sp, #4]
 801b9f0:	7d7b      	ldrb	r3, [r7, #21]
 801b9f2:	9300      	str	r3, [sp, #0]
 801b9f4:	4613      	mov	r3, r2
 801b9f6:	683a      	ldr	r2, [r7, #0]
 801b9f8:	6879      	ldr	r1, [r7, #4]
 801b9fa:	68b8      	ldr	r0, [r7, #8]
 801b9fc:	f7f8 fc3c 	bl	8014278 <ip4_output_if>
 801ba00:	4603      	mov	r3, r0
 801ba02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ba04:	68b8      	ldr	r0, [r7, #8]
 801ba06:	f7fa fdd5 	bl	80165b4 <pbuf_free>
  return err;
 801ba0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ba0e:	4618      	mov	r0, r3
 801ba10:	3718      	adds	r7, #24
 801ba12:	46bd      	mov	sp, r7
 801ba14:	bd80      	pop	{r7, pc}
 801ba16:	bf00      	nop
 801ba18:	0801fba4 	.word	0x0801fba4
 801ba1c:	08020324 	.word	0x08020324
 801ba20:	0801fc20 	.word	0x0801fc20

0801ba24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ba24:	b590      	push	{r4, r7, lr}
 801ba26:	b08b      	sub	sp, #44	; 0x2c
 801ba28:	af04      	add	r7, sp, #16
 801ba2a:	60f8      	str	r0, [r7, #12]
 801ba2c:	60b9      	str	r1, [r7, #8]
 801ba2e:	607a      	str	r2, [r7, #4]
 801ba30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ba32:	683b      	ldr	r3, [r7, #0]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d106      	bne.n	801ba46 <tcp_rst+0x22>
 801ba38:	4b1f      	ldr	r3, [pc, #124]	; (801bab8 <tcp_rst+0x94>)
 801ba3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ba3e:	491f      	ldr	r1, [pc, #124]	; (801babc <tcp_rst+0x98>)
 801ba40:	481f      	ldr	r0, [pc, #124]	; (801bac0 <tcp_rst+0x9c>)
 801ba42:	f000 ffb9 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ba46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d106      	bne.n	801ba5a <tcp_rst+0x36>
 801ba4c:	4b1a      	ldr	r3, [pc, #104]	; (801bab8 <tcp_rst+0x94>)
 801ba4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ba52:	491c      	ldr	r1, [pc, #112]	; (801bac4 <tcp_rst+0xa0>)
 801ba54:	481a      	ldr	r0, [pc, #104]	; (801bac0 <tcp_rst+0x9c>)
 801ba56:	f000 ffaf 	bl	801c9b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ba5e:	f246 0308 	movw	r3, #24584	; 0x6008
 801ba62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ba64:	7dfb      	ldrb	r3, [r7, #23]
 801ba66:	b29c      	uxth	r4, r3
 801ba68:	68b8      	ldr	r0, [r7, #8]
 801ba6a:	f7f5 f90f 	bl	8010c8c <lwip_htonl>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	8abb      	ldrh	r3, [r7, #20]
 801ba72:	9303      	str	r3, [sp, #12]
 801ba74:	2314      	movs	r3, #20
 801ba76:	9302      	str	r3, [sp, #8]
 801ba78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ba7a:	9301      	str	r3, [sp, #4]
 801ba7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ba7e:	9300      	str	r3, [sp, #0]
 801ba80:	4613      	mov	r3, r2
 801ba82:	2200      	movs	r2, #0
 801ba84:	4621      	mov	r1, r4
 801ba86:	6878      	ldr	r0, [r7, #4]
 801ba88:	f7ff fe90 	bl	801b7ac <tcp_output_alloc_header_common>
 801ba8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ba8e:	693b      	ldr	r3, [r7, #16]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d00c      	beq.n	801baae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ba94:	7dfb      	ldrb	r3, [r7, #23]
 801ba96:	2200      	movs	r2, #0
 801ba98:	6939      	ldr	r1, [r7, #16]
 801ba9a:	68f8      	ldr	r0, [r7, #12]
 801ba9c:	f7ff ff38 	bl	801b910 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801baa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801baa2:	683a      	ldr	r2, [r7, #0]
 801baa4:	6939      	ldr	r1, [r7, #16]
 801baa6:	68f8      	ldr	r0, [r7, #12]
 801baa8:	f7ff ff72 	bl	801b990 <tcp_output_control_segment>
 801baac:	e000      	b.n	801bab0 <tcp_rst+0x8c>
    return;
 801baae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bab0:	371c      	adds	r7, #28
 801bab2:	46bd      	mov	sp, r7
 801bab4:	bd90      	pop	{r4, r7, pc}
 801bab6:	bf00      	nop
 801bab8:	0801fba4 	.word	0x0801fba4
 801babc:	08020350 	.word	0x08020350
 801bac0:	0801fc20 	.word	0x0801fc20
 801bac4:	0802036c 	.word	0x0802036c

0801bac8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bac8:	b590      	push	{r4, r7, lr}
 801baca:	b087      	sub	sp, #28
 801bacc:	af00      	add	r7, sp, #0
 801bace:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801bad0:	2300      	movs	r3, #0
 801bad2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801bad4:	2300      	movs	r3, #0
 801bad6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	2b00      	cmp	r3, #0
 801badc:	d106      	bne.n	801baec <tcp_send_empty_ack+0x24>
 801bade:	4b28      	ldr	r3, [pc, #160]	; (801bb80 <tcp_send_empty_ack+0xb8>)
 801bae0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bae4:	4927      	ldr	r1, [pc, #156]	; (801bb84 <tcp_send_empty_ack+0xbc>)
 801bae6:	4828      	ldr	r0, [pc, #160]	; (801bb88 <tcp_send_empty_ack+0xc0>)
 801bae8:	f000 ff66 	bl	801c9b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801baec:	7dfb      	ldrb	r3, [r7, #23]
 801baee:	009b      	lsls	r3, r3, #2
 801baf0:	b2db      	uxtb	r3, r3
 801baf2:	f003 0304 	and.w	r3, r3, #4
 801baf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801baf8:	7d7b      	ldrb	r3, [r7, #21]
 801bafa:	b29c      	uxth	r4, r3
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bb00:	4618      	mov	r0, r3
 801bb02:	f7f5 f8c3 	bl	8010c8c <lwip_htonl>
 801bb06:	4603      	mov	r3, r0
 801bb08:	2200      	movs	r2, #0
 801bb0a:	4621      	mov	r1, r4
 801bb0c:	6878      	ldr	r0, [r7, #4]
 801bb0e:	f7ff fec1 	bl	801b894 <tcp_output_alloc_header>
 801bb12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bb14:	693b      	ldr	r3, [r7, #16]
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d109      	bne.n	801bb2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	8b5b      	ldrh	r3, [r3, #26]
 801bb1e:	f043 0303 	orr.w	r3, r3, #3
 801bb22:	b29a      	uxth	r2, r3
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801bb28:	f06f 0301 	mvn.w	r3, #1
 801bb2c:	e023      	b.n	801bb76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bb2e:	7dbb      	ldrb	r3, [r7, #22]
 801bb30:	7dfa      	ldrb	r2, [r7, #23]
 801bb32:	6939      	ldr	r1, [r7, #16]
 801bb34:	6878      	ldr	r0, [r7, #4]
 801bb36:	f7ff feeb 	bl	801b910 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bb3a:	687a      	ldr	r2, [r7, #4]
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	3304      	adds	r3, #4
 801bb40:	6939      	ldr	r1, [r7, #16]
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	f7ff ff24 	bl	801b990 <tcp_output_control_segment>
 801bb48:	4603      	mov	r3, r0
 801bb4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801bb4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	d007      	beq.n	801bb64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	8b5b      	ldrh	r3, [r3, #26]
 801bb58:	f043 0303 	orr.w	r3, r3, #3
 801bb5c:	b29a      	uxth	r2, r3
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	835a      	strh	r2, [r3, #26]
 801bb62:	e006      	b.n	801bb72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	8b5b      	ldrh	r3, [r3, #26]
 801bb68:	f023 0303 	bic.w	r3, r3, #3
 801bb6c:	b29a      	uxth	r2, r3
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801bb72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	371c      	adds	r7, #28
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	bd90      	pop	{r4, r7, pc}
 801bb7e:	bf00      	nop
 801bb80:	0801fba4 	.word	0x0801fba4
 801bb84:	08020388 	.word	0x08020388
 801bb88:	0801fc20 	.word	0x0801fc20

0801bb8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801bb8c:	b590      	push	{r4, r7, lr}
 801bb8e:	b087      	sub	sp, #28
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bb94:	2300      	movs	r3, #0
 801bb96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d106      	bne.n	801bbac <tcp_keepalive+0x20>
 801bb9e:	4b18      	ldr	r3, [pc, #96]	; (801bc00 <tcp_keepalive+0x74>)
 801bba0:	f640 0224 	movw	r2, #2084	; 0x824
 801bba4:	4917      	ldr	r1, [pc, #92]	; (801bc04 <tcp_keepalive+0x78>)
 801bba6:	4818      	ldr	r0, [pc, #96]	; (801bc08 <tcp_keepalive+0x7c>)
 801bba8:	f000 ff06 	bl	801c9b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801bbac:	7dfb      	ldrb	r3, [r7, #23]
 801bbae:	b29c      	uxth	r4, r3
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bbb4:	3b01      	subs	r3, #1
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f7f5 f868 	bl	8010c8c <lwip_htonl>
 801bbbc:	4603      	mov	r3, r0
 801bbbe:	2200      	movs	r2, #0
 801bbc0:	4621      	mov	r1, r4
 801bbc2:	6878      	ldr	r0, [r7, #4]
 801bbc4:	f7ff fe66 	bl	801b894 <tcp_output_alloc_header>
 801bbc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801bbca:	693b      	ldr	r3, [r7, #16]
 801bbcc:	2b00      	cmp	r3, #0
 801bbce:	d102      	bne.n	801bbd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801bbd0:	f04f 33ff 	mov.w	r3, #4294967295
 801bbd4:	e010      	b.n	801bbf8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bbd6:	7dfb      	ldrb	r3, [r7, #23]
 801bbd8:	2200      	movs	r2, #0
 801bbda:	6939      	ldr	r1, [r7, #16]
 801bbdc:	6878      	ldr	r0, [r7, #4]
 801bbde:	f7ff fe97 	bl	801b910 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bbe2:	687a      	ldr	r2, [r7, #4]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	3304      	adds	r3, #4
 801bbe8:	6939      	ldr	r1, [r7, #16]
 801bbea:	6878      	ldr	r0, [r7, #4]
 801bbec:	f7ff fed0 	bl	801b990 <tcp_output_control_segment>
 801bbf0:	4603      	mov	r3, r0
 801bbf2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	371c      	adds	r7, #28
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bd90      	pop	{r4, r7, pc}
 801bc00:	0801fba4 	.word	0x0801fba4
 801bc04:	080203a8 	.word	0x080203a8
 801bc08:	0801fc20 	.word	0x0801fc20

0801bc0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801bc0c:	b590      	push	{r4, r7, lr}
 801bc0e:	b08b      	sub	sp, #44	; 0x2c
 801bc10:	af00      	add	r7, sp, #0
 801bc12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801bc14:	2300      	movs	r3, #0
 801bc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d106      	bne.n	801bc2e <tcp_zero_window_probe+0x22>
 801bc20:	4b4c      	ldr	r3, [pc, #304]	; (801bd54 <tcp_zero_window_probe+0x148>)
 801bc22:	f640 024f 	movw	r2, #2127	; 0x84f
 801bc26:	494c      	ldr	r1, [pc, #304]	; (801bd58 <tcp_zero_window_probe+0x14c>)
 801bc28:	484c      	ldr	r0, [pc, #304]	; (801bd5c <tcp_zero_window_probe+0x150>)
 801bc2a:	f000 fec5 	bl	801c9b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bc32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801bc34:	6a3b      	ldr	r3, [r7, #32]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d101      	bne.n	801bc3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801bc3a:	2300      	movs	r3, #0
 801bc3c:	e086      	b.n	801bd4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bc44:	2bff      	cmp	r3, #255	; 0xff
 801bc46:	d007      	beq.n	801bc58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801bc48:	687b      	ldr	r3, [r7, #4]
 801bc4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801bc4e:	3301      	adds	r3, #1
 801bc50:	b2da      	uxtb	r2, r3
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801bc58:	6a3b      	ldr	r3, [r7, #32]
 801bc5a:	68db      	ldr	r3, [r3, #12]
 801bc5c:	899b      	ldrh	r3, [r3, #12]
 801bc5e:	b29b      	uxth	r3, r3
 801bc60:	4618      	mov	r0, r3
 801bc62:	f7f4 fffe 	bl	8010c62 <lwip_htons>
 801bc66:	4603      	mov	r3, r0
 801bc68:	b2db      	uxtb	r3, r3
 801bc6a:	f003 0301 	and.w	r3, r3, #1
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d005      	beq.n	801bc7e <tcp_zero_window_probe+0x72>
 801bc72:	6a3b      	ldr	r3, [r7, #32]
 801bc74:	891b      	ldrh	r3, [r3, #8]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d101      	bne.n	801bc7e <tcp_zero_window_probe+0x72>
 801bc7a:	2301      	movs	r3, #1
 801bc7c:	e000      	b.n	801bc80 <tcp_zero_window_probe+0x74>
 801bc7e:	2300      	movs	r3, #0
 801bc80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801bc82:	7ffb      	ldrb	r3, [r7, #31]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	bf0c      	ite	eq
 801bc88:	2301      	moveq	r3, #1
 801bc8a:	2300      	movne	r3, #0
 801bc8c:	b2db      	uxtb	r3, r3
 801bc8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801bc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bc94:	b299      	uxth	r1, r3
 801bc96:	6a3b      	ldr	r3, [r7, #32]
 801bc98:	68db      	ldr	r3, [r3, #12]
 801bc9a:	685b      	ldr	r3, [r3, #4]
 801bc9c:	8bba      	ldrh	r2, [r7, #28]
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7ff fdf8 	bl	801b894 <tcp_output_alloc_header>
 801bca4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801bca6:	69bb      	ldr	r3, [r7, #24]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d102      	bne.n	801bcb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801bcac:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb0:	e04c      	b.n	801bd4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801bcb2:	69bb      	ldr	r3, [r7, #24]
 801bcb4:	685b      	ldr	r3, [r3, #4]
 801bcb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801bcb8:	7ffb      	ldrb	r3, [r7, #31]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d011      	beq.n	801bce2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	899b      	ldrh	r3, [r3, #12]
 801bcc2:	b29b      	uxth	r3, r3
 801bcc4:	b21b      	sxth	r3, r3
 801bcc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bcca:	b21c      	sxth	r4, r3
 801bccc:	2011      	movs	r0, #17
 801bcce:	f7f4 ffc8 	bl	8010c62 <lwip_htons>
 801bcd2:	4603      	mov	r3, r0
 801bcd4:	b21b      	sxth	r3, r3
 801bcd6:	4323      	orrs	r3, r4
 801bcd8:	b21b      	sxth	r3, r3
 801bcda:	b29a      	uxth	r2, r3
 801bcdc:	697b      	ldr	r3, [r7, #20]
 801bcde:	819a      	strh	r2, [r3, #12]
 801bce0:	e010      	b.n	801bd04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801bce2:	69bb      	ldr	r3, [r7, #24]
 801bce4:	685b      	ldr	r3, [r3, #4]
 801bce6:	3314      	adds	r3, #20
 801bce8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801bcea:	6a3b      	ldr	r3, [r7, #32]
 801bcec:	6858      	ldr	r0, [r3, #4]
 801bcee:	6a3b      	ldr	r3, [r7, #32]
 801bcf0:	685b      	ldr	r3, [r3, #4]
 801bcf2:	891a      	ldrh	r2, [r3, #8]
 801bcf4:	6a3b      	ldr	r3, [r7, #32]
 801bcf6:	891b      	ldrh	r3, [r3, #8]
 801bcf8:	1ad3      	subs	r3, r2, r3
 801bcfa:	b29b      	uxth	r3, r3
 801bcfc:	2201      	movs	r2, #1
 801bcfe:	6939      	ldr	r1, [r7, #16]
 801bd00:	f7fa fe52 	bl	80169a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801bd04:	6a3b      	ldr	r3, [r7, #32]
 801bd06:	68db      	ldr	r3, [r3, #12]
 801bd08:	685b      	ldr	r3, [r3, #4]
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	f7f4 ffbe 	bl	8010c8c <lwip_htonl>
 801bd10:	4603      	mov	r3, r0
 801bd12:	3301      	adds	r3, #1
 801bd14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	1ad3      	subs	r3, r2, r3
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	da02      	bge.n	801bd28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	68fa      	ldr	r2, [r7, #12]
 801bd26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bd28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	69b9      	ldr	r1, [r7, #24]
 801bd30:	6878      	ldr	r0, [r7, #4]
 801bd32:	f7ff fded 	bl	801b910 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bd36:	687a      	ldr	r2, [r7, #4]
 801bd38:	687b      	ldr	r3, [r7, #4]
 801bd3a:	3304      	adds	r3, #4
 801bd3c:	69b9      	ldr	r1, [r7, #24]
 801bd3e:	6878      	ldr	r0, [r7, #4]
 801bd40:	f7ff fe26 	bl	801b990 <tcp_output_control_segment>
 801bd44:	4603      	mov	r3, r0
 801bd46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801bd48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bd4c:	4618      	mov	r0, r3
 801bd4e:	372c      	adds	r7, #44	; 0x2c
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bd90      	pop	{r4, r7, pc}
 801bd54:	0801fba4 	.word	0x0801fba4
 801bd58:	080203c4 	.word	0x080203c4
 801bd5c:	0801fc20 	.word	0x0801fc20

0801bd60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b082      	sub	sp, #8
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bd68:	f7fa ff0c 	bl	8016b84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bd6c:	4b0a      	ldr	r3, [pc, #40]	; (801bd98 <tcpip_tcp_timer+0x38>)
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d103      	bne.n	801bd7c <tcpip_tcp_timer+0x1c>
 801bd74:	4b09      	ldr	r3, [pc, #36]	; (801bd9c <tcpip_tcp_timer+0x3c>)
 801bd76:	681b      	ldr	r3, [r3, #0]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d005      	beq.n	801bd88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bd7c:	2200      	movs	r2, #0
 801bd7e:	4908      	ldr	r1, [pc, #32]	; (801bda0 <tcpip_tcp_timer+0x40>)
 801bd80:	20fa      	movs	r0, #250	; 0xfa
 801bd82:	f000 f8f1 	bl	801bf68 <sys_timeout>
 801bd86:	e002      	b.n	801bd8e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bd88:	4b06      	ldr	r3, [pc, #24]	; (801bda4 <tcpip_tcp_timer+0x44>)
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	601a      	str	r2, [r3, #0]
  }
}
 801bd8e:	bf00      	nop
 801bd90:	3708      	adds	r7, #8
 801bd92:	46bd      	mov	sp, r7
 801bd94:	bd80      	pop	{r7, pc}
 801bd96:	bf00      	nop
 801bd98:	24007684 	.word	0x24007684
 801bd9c:	24007694 	.word	0x24007694
 801bda0:	0801bd61 	.word	0x0801bd61
 801bda4:	24000260 	.word	0x24000260

0801bda8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bdac:	4b0a      	ldr	r3, [pc, #40]	; (801bdd8 <tcp_timer_needed+0x30>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	d10f      	bne.n	801bdd4 <tcp_timer_needed+0x2c>
 801bdb4:	4b09      	ldr	r3, [pc, #36]	; (801bddc <tcp_timer_needed+0x34>)
 801bdb6:	681b      	ldr	r3, [r3, #0]
 801bdb8:	2b00      	cmp	r3, #0
 801bdba:	d103      	bne.n	801bdc4 <tcp_timer_needed+0x1c>
 801bdbc:	4b08      	ldr	r3, [pc, #32]	; (801bde0 <tcp_timer_needed+0x38>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d007      	beq.n	801bdd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bdc4:	4b04      	ldr	r3, [pc, #16]	; (801bdd8 <tcp_timer_needed+0x30>)
 801bdc6:	2201      	movs	r2, #1
 801bdc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bdca:	2200      	movs	r2, #0
 801bdcc:	4905      	ldr	r1, [pc, #20]	; (801bde4 <tcp_timer_needed+0x3c>)
 801bdce:	20fa      	movs	r0, #250	; 0xfa
 801bdd0:	f000 f8ca 	bl	801bf68 <sys_timeout>
  }
}
 801bdd4:	bf00      	nop
 801bdd6:	bd80      	pop	{r7, pc}
 801bdd8:	24000260 	.word	0x24000260
 801bddc:	24007684 	.word	0x24007684
 801bde0:	24007694 	.word	0x24007694
 801bde4:	0801bd61 	.word	0x0801bd61

0801bde8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bde8:	b580      	push	{r7, lr}
 801bdea:	b086      	sub	sp, #24
 801bdec:	af00      	add	r7, sp, #0
 801bdee:	60f8      	str	r0, [r7, #12]
 801bdf0:	60b9      	str	r1, [r7, #8]
 801bdf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bdf4:	2006      	movs	r0, #6
 801bdf6:	f7f9 fd9b 	bl	8015930 <memp_malloc>
 801bdfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bdfc:	693b      	ldr	r3, [r7, #16]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d109      	bne.n	801be16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d151      	bne.n	801beac <sys_timeout_abs+0xc4>
 801be08:	4b2a      	ldr	r3, [pc, #168]	; (801beb4 <sys_timeout_abs+0xcc>)
 801be0a:	22be      	movs	r2, #190	; 0xbe
 801be0c:	492a      	ldr	r1, [pc, #168]	; (801beb8 <sys_timeout_abs+0xd0>)
 801be0e:	482b      	ldr	r0, [pc, #172]	; (801bebc <sys_timeout_abs+0xd4>)
 801be10:	f000 fdd2 	bl	801c9b8 <iprintf>
    return;
 801be14:	e04a      	b.n	801beac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801be16:	693b      	ldr	r3, [r7, #16]
 801be18:	2200      	movs	r2, #0
 801be1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801be1c:	693b      	ldr	r3, [r7, #16]
 801be1e:	68ba      	ldr	r2, [r7, #8]
 801be20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	687a      	ldr	r2, [r7, #4]
 801be26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801be28:	693b      	ldr	r3, [r7, #16]
 801be2a:	68fa      	ldr	r2, [r7, #12]
 801be2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801be2e:	4b24      	ldr	r3, [pc, #144]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be30:	681b      	ldr	r3, [r3, #0]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d103      	bne.n	801be3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801be36:	4a22      	ldr	r2, [pc, #136]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be38:	693b      	ldr	r3, [r7, #16]
 801be3a:	6013      	str	r3, [r2, #0]
    return;
 801be3c:	e037      	b.n	801beae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801be3e:	693b      	ldr	r3, [r7, #16]
 801be40:	685a      	ldr	r2, [r3, #4]
 801be42:	4b1f      	ldr	r3, [pc, #124]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be44:	681b      	ldr	r3, [r3, #0]
 801be46:	685b      	ldr	r3, [r3, #4]
 801be48:	1ad3      	subs	r3, r2, r3
 801be4a:	0fdb      	lsrs	r3, r3, #31
 801be4c:	f003 0301 	and.w	r3, r3, #1
 801be50:	b2db      	uxtb	r3, r3
 801be52:	2b00      	cmp	r3, #0
 801be54:	d007      	beq.n	801be66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801be56:	4b1a      	ldr	r3, [pc, #104]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	693b      	ldr	r3, [r7, #16]
 801be5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801be5e:	4a18      	ldr	r2, [pc, #96]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be60:	693b      	ldr	r3, [r7, #16]
 801be62:	6013      	str	r3, [r2, #0]
 801be64:	e023      	b.n	801beae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801be66:	4b16      	ldr	r3, [pc, #88]	; (801bec0 <sys_timeout_abs+0xd8>)
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	617b      	str	r3, [r7, #20]
 801be6c:	e01a      	b.n	801bea4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801be6e:	697b      	ldr	r3, [r7, #20]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	2b00      	cmp	r3, #0
 801be74:	d00b      	beq.n	801be8e <sys_timeout_abs+0xa6>
 801be76:	693b      	ldr	r3, [r7, #16]
 801be78:	685a      	ldr	r2, [r3, #4]
 801be7a:	697b      	ldr	r3, [r7, #20]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	685b      	ldr	r3, [r3, #4]
 801be80:	1ad3      	subs	r3, r2, r3
 801be82:	0fdb      	lsrs	r3, r3, #31
 801be84:	f003 0301 	and.w	r3, r3, #1
 801be88:	b2db      	uxtb	r3, r3
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d007      	beq.n	801be9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	693b      	ldr	r3, [r7, #16]
 801be94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801be96:	697b      	ldr	r3, [r7, #20]
 801be98:	693a      	ldr	r2, [r7, #16]
 801be9a:	601a      	str	r2, [r3, #0]
        break;
 801be9c:	e007      	b.n	801beae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	617b      	str	r3, [r7, #20]
 801bea4:	697b      	ldr	r3, [r7, #20]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d1e1      	bne.n	801be6e <sys_timeout_abs+0x86>
 801beaa:	e000      	b.n	801beae <sys_timeout_abs+0xc6>
    return;
 801beac:	bf00      	nop
      }
    }
  }
}
 801beae:	3718      	adds	r7, #24
 801beb0:	46bd      	mov	sp, r7
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	080203e8 	.word	0x080203e8
 801beb8:	08020444 	.word	0x08020444
 801bebc:	08020484 	.word	0x08020484
 801bec0:	24000258 	.word	0x24000258

0801bec4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b086      	sub	sp, #24
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bed0:	697b      	ldr	r3, [r7, #20]
 801bed2:	685b      	ldr	r3, [r3, #4]
 801bed4:	4798      	blx	r3

  now = sys_now();
 801bed6:	f7f0 fab5 	bl	800c444 <sys_now>
 801beda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bedc:	697b      	ldr	r3, [r7, #20]
 801bede:	681a      	ldr	r2, [r3, #0]
 801bee0:	4b0f      	ldr	r3, [pc, #60]	; (801bf20 <lwip_cyclic_timer+0x5c>)
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	4413      	add	r3, r2
 801bee6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bee8:	68fa      	ldr	r2, [r7, #12]
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	1ad3      	subs	r3, r2, r3
 801beee:	0fdb      	lsrs	r3, r3, #31
 801bef0:	f003 0301 	and.w	r3, r3, #1
 801bef4:	b2db      	uxtb	r3, r3
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d009      	beq.n	801bf0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801befa:	697b      	ldr	r3, [r7, #20]
 801befc:	681a      	ldr	r2, [r3, #0]
 801befe:	693b      	ldr	r3, [r7, #16]
 801bf00:	4413      	add	r3, r2
 801bf02:	687a      	ldr	r2, [r7, #4]
 801bf04:	4907      	ldr	r1, [pc, #28]	; (801bf24 <lwip_cyclic_timer+0x60>)
 801bf06:	4618      	mov	r0, r3
 801bf08:	f7ff ff6e 	bl	801bde8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bf0c:	e004      	b.n	801bf18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801bf0e:	687a      	ldr	r2, [r7, #4]
 801bf10:	4904      	ldr	r1, [pc, #16]	; (801bf24 <lwip_cyclic_timer+0x60>)
 801bf12:	68f8      	ldr	r0, [r7, #12]
 801bf14:	f7ff ff68 	bl	801bde8 <sys_timeout_abs>
}
 801bf18:	bf00      	nop
 801bf1a:	3718      	adds	r7, #24
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}
 801bf20:	2400025c 	.word	0x2400025c
 801bf24:	0801bec5 	.word	0x0801bec5

0801bf28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bf28:	b580      	push	{r7, lr}
 801bf2a:	b082      	sub	sp, #8
 801bf2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bf2e:	2301      	movs	r3, #1
 801bf30:	607b      	str	r3, [r7, #4]
 801bf32:	e00e      	b.n	801bf52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bf34:	4a0a      	ldr	r2, [pc, #40]	; (801bf60 <sys_timeouts_init+0x38>)
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	00db      	lsls	r3, r3, #3
 801bf40:	4a07      	ldr	r2, [pc, #28]	; (801bf60 <sys_timeouts_init+0x38>)
 801bf42:	4413      	add	r3, r2
 801bf44:	461a      	mov	r2, r3
 801bf46:	4907      	ldr	r1, [pc, #28]	; (801bf64 <sys_timeouts_init+0x3c>)
 801bf48:	f000 f80e 	bl	801bf68 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	3301      	adds	r3, #1
 801bf50:	607b      	str	r3, [r7, #4]
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	2b04      	cmp	r3, #4
 801bf56:	d9ed      	bls.n	801bf34 <sys_timeouts_init+0xc>
  }
}
 801bf58:	bf00      	nop
 801bf5a:	3708      	adds	r7, #8
 801bf5c:	46bd      	mov	sp, r7
 801bf5e:	bd80      	pop	{r7, pc}
 801bf60:	08020de4 	.word	0x08020de4
 801bf64:	0801bec5 	.word	0x0801bec5

0801bf68 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b086      	sub	sp, #24
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	60f8      	str	r0, [r7, #12]
 801bf70:	60b9      	str	r1, [r7, #8]
 801bf72:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bf7a:	d306      	bcc.n	801bf8a <sys_timeout+0x22>
 801bf7c:	4b0a      	ldr	r3, [pc, #40]	; (801bfa8 <sys_timeout+0x40>)
 801bf7e:	f240 1229 	movw	r2, #297	; 0x129
 801bf82:	490a      	ldr	r1, [pc, #40]	; (801bfac <sys_timeout+0x44>)
 801bf84:	480a      	ldr	r0, [pc, #40]	; (801bfb0 <sys_timeout+0x48>)
 801bf86:	f000 fd17 	bl	801c9b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bf8a:	f7f0 fa5b 	bl	800c444 <sys_now>
 801bf8e:	4602      	mov	r2, r0
 801bf90:	68fb      	ldr	r3, [r7, #12]
 801bf92:	4413      	add	r3, r2
 801bf94:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bf96:	687a      	ldr	r2, [r7, #4]
 801bf98:	68b9      	ldr	r1, [r7, #8]
 801bf9a:	6978      	ldr	r0, [r7, #20]
 801bf9c:	f7ff ff24 	bl	801bde8 <sys_timeout_abs>
#endif
}
 801bfa0:	bf00      	nop
 801bfa2:	3718      	adds	r7, #24
 801bfa4:	46bd      	mov	sp, r7
 801bfa6:	bd80      	pop	{r7, pc}
 801bfa8:	080203e8 	.word	0x080203e8
 801bfac:	080204ac 	.word	0x080204ac
 801bfb0:	08020484 	.word	0x08020484

0801bfb4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801bfb4:	b580      	push	{r7, lr}
 801bfb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801bfb8:	f000 fd16 	bl	801c9e8 <rand>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801bfc4:	b29b      	uxth	r3, r3
 801bfc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	4b01      	ldr	r3, [pc, #4]	; (801bfd4 <udp_init+0x20>)
 801bfce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801bfd0:	bf00      	nop
 801bfd2:	bd80      	pop	{r7, pc}
 801bfd4:	2400001c 	.word	0x2400001c

0801bfd8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801bfd8:	b480      	push	{r7}
 801bfda:	b083      	sub	sp, #12
 801bfdc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801bfde:	2300      	movs	r3, #0
 801bfe0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801bfe2:	4b17      	ldr	r3, [pc, #92]	; (801c040 <udp_new_port+0x68>)
 801bfe4:	881b      	ldrh	r3, [r3, #0]
 801bfe6:	1c5a      	adds	r2, r3, #1
 801bfe8:	b291      	uxth	r1, r2
 801bfea:	4a15      	ldr	r2, [pc, #84]	; (801c040 <udp_new_port+0x68>)
 801bfec:	8011      	strh	r1, [r2, #0]
 801bfee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bff2:	4293      	cmp	r3, r2
 801bff4:	d103      	bne.n	801bffe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801bff6:	4b12      	ldr	r3, [pc, #72]	; (801c040 <udp_new_port+0x68>)
 801bff8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801bffc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801bffe:	4b11      	ldr	r3, [pc, #68]	; (801c044 <udp_new_port+0x6c>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	603b      	str	r3, [r7, #0]
 801c004:	e011      	b.n	801c02a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801c006:	683b      	ldr	r3, [r7, #0]
 801c008:	8a5a      	ldrh	r2, [r3, #18]
 801c00a:	4b0d      	ldr	r3, [pc, #52]	; (801c040 <udp_new_port+0x68>)
 801c00c:	881b      	ldrh	r3, [r3, #0]
 801c00e:	429a      	cmp	r2, r3
 801c010:	d108      	bne.n	801c024 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c012:	88fb      	ldrh	r3, [r7, #6]
 801c014:	3301      	adds	r3, #1
 801c016:	80fb      	strh	r3, [r7, #6]
 801c018:	88fb      	ldrh	r3, [r7, #6]
 801c01a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c01e:	d3e0      	bcc.n	801bfe2 <udp_new_port+0xa>
        return 0;
 801c020:	2300      	movs	r3, #0
 801c022:	e007      	b.n	801c034 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c024:	683b      	ldr	r3, [r7, #0]
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	603b      	str	r3, [r7, #0]
 801c02a:	683b      	ldr	r3, [r7, #0]
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d1ea      	bne.n	801c006 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801c030:	4b03      	ldr	r3, [pc, #12]	; (801c040 <udp_new_port+0x68>)
 801c032:	881b      	ldrh	r3, [r3, #0]
}
 801c034:	4618      	mov	r0, r3
 801c036:	370c      	adds	r7, #12
 801c038:	46bd      	mov	sp, r7
 801c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c03e:	4770      	bx	lr
 801c040:	2400001c 	.word	0x2400001c
 801c044:	2400769c 	.word	0x2400769c

0801c048 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801c048:	b580      	push	{r7, lr}
 801c04a:	b084      	sub	sp, #16
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	60f8      	str	r0, [r7, #12]
 801c050:	60b9      	str	r1, [r7, #8]
 801c052:	4613      	mov	r3, r2
 801c054:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d105      	bne.n	801c068 <udp_input_local_match+0x20>
 801c05c:	4b27      	ldr	r3, [pc, #156]	; (801c0fc <udp_input_local_match+0xb4>)
 801c05e:	2287      	movs	r2, #135	; 0x87
 801c060:	4927      	ldr	r1, [pc, #156]	; (801c100 <udp_input_local_match+0xb8>)
 801c062:	4828      	ldr	r0, [pc, #160]	; (801c104 <udp_input_local_match+0xbc>)
 801c064:	f000 fca8 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c068:	68bb      	ldr	r3, [r7, #8]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d105      	bne.n	801c07a <udp_input_local_match+0x32>
 801c06e:	4b23      	ldr	r3, [pc, #140]	; (801c0fc <udp_input_local_match+0xb4>)
 801c070:	2288      	movs	r2, #136	; 0x88
 801c072:	4925      	ldr	r1, [pc, #148]	; (801c108 <udp_input_local_match+0xc0>)
 801c074:	4823      	ldr	r0, [pc, #140]	; (801c104 <udp_input_local_match+0xbc>)
 801c076:	f000 fc9f 	bl	801c9b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	7a1b      	ldrb	r3, [r3, #8]
 801c07e:	2b00      	cmp	r3, #0
 801c080:	d00b      	beq.n	801c09a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	7a1a      	ldrb	r2, [r3, #8]
 801c086:	4b21      	ldr	r3, [pc, #132]	; (801c10c <udp_input_local_match+0xc4>)
 801c088:	685b      	ldr	r3, [r3, #4]
 801c08a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801c08e:	3301      	adds	r3, #1
 801c090:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c092:	429a      	cmp	r2, r3
 801c094:	d001      	beq.n	801c09a <udp_input_local_match+0x52>
    return 0;
 801c096:	2300      	movs	r3, #0
 801c098:	e02b      	b.n	801c0f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801c09a:	79fb      	ldrb	r3, [r7, #7]
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d018      	beq.n	801c0d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d013      	beq.n	801c0ce <udp_input_local_match+0x86>
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	2b00      	cmp	r3, #0
 801c0ac:	d00f      	beq.n	801c0ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c0ae:	4b17      	ldr	r3, [pc, #92]	; (801c10c <udp_input_local_match+0xc4>)
 801c0b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0b6:	d00a      	beq.n	801c0ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	681a      	ldr	r2, [r3, #0]
 801c0bc:	4b13      	ldr	r3, [pc, #76]	; (801c10c <udp_input_local_match+0xc4>)
 801c0be:	695b      	ldr	r3, [r3, #20]
 801c0c0:	405a      	eors	r2, r3
 801c0c2:	68bb      	ldr	r3, [r7, #8]
 801c0c4:	3308      	adds	r3, #8
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c0ca:	2b00      	cmp	r3, #0
 801c0cc:	d110      	bne.n	801c0f0 <udp_input_local_match+0xa8>
          return 1;
 801c0ce:	2301      	movs	r3, #1
 801c0d0:	e00f      	b.n	801c0f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d009      	beq.n	801c0ec <udp_input_local_match+0xa4>
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d005      	beq.n	801c0ec <udp_input_local_match+0xa4>
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	4b09      	ldr	r3, [pc, #36]	; (801c10c <udp_input_local_match+0xc4>)
 801c0e6:	695b      	ldr	r3, [r3, #20]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d101      	bne.n	801c0f0 <udp_input_local_match+0xa8>
        return 1;
 801c0ec:	2301      	movs	r3, #1
 801c0ee:	e000      	b.n	801c0f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801c0f0:	2300      	movs	r3, #0
}
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	3710      	adds	r7, #16
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd80      	pop	{r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	080204f8 	.word	0x080204f8
 801c100:	08020550 	.word	0x08020550
 801c104:	08020574 	.word	0x08020574
 801c108:	0802059c 	.word	0x0802059c
 801c10c:	24004774 	.word	0x24004774

0801c110 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c110:	b590      	push	{r4, r7, lr}
 801c112:	b08d      	sub	sp, #52	; 0x34
 801c114:	af02      	add	r7, sp, #8
 801c116:	6078      	str	r0, [r7, #4]
 801c118:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801c11a:	2300      	movs	r3, #0
 801c11c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	2b00      	cmp	r3, #0
 801c122:	d105      	bne.n	801c130 <udp_input+0x20>
 801c124:	4b7c      	ldr	r3, [pc, #496]	; (801c318 <udp_input+0x208>)
 801c126:	22cf      	movs	r2, #207	; 0xcf
 801c128:	497c      	ldr	r1, [pc, #496]	; (801c31c <udp_input+0x20c>)
 801c12a:	487d      	ldr	r0, [pc, #500]	; (801c320 <udp_input+0x210>)
 801c12c:	f000 fc44 	bl	801c9b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c130:	683b      	ldr	r3, [r7, #0]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d105      	bne.n	801c142 <udp_input+0x32>
 801c136:	4b78      	ldr	r3, [pc, #480]	; (801c318 <udp_input+0x208>)
 801c138:	22d0      	movs	r2, #208	; 0xd0
 801c13a:	497a      	ldr	r1, [pc, #488]	; (801c324 <udp_input+0x214>)
 801c13c:	4878      	ldr	r0, [pc, #480]	; (801c320 <udp_input+0x210>)
 801c13e:	f000 fc3b 	bl	801c9b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	895b      	ldrh	r3, [r3, #10]
 801c146:	2b07      	cmp	r3, #7
 801c148:	d803      	bhi.n	801c152 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c14a:	6878      	ldr	r0, [r7, #4]
 801c14c:	f7fa fa32 	bl	80165b4 <pbuf_free>
    goto end;
 801c150:	e0de      	b.n	801c310 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	685b      	ldr	r3, [r3, #4]
 801c156:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c158:	4b73      	ldr	r3, [pc, #460]	; (801c328 <udp_input+0x218>)
 801c15a:	695a      	ldr	r2, [r3, #20]
 801c15c:	4b72      	ldr	r3, [pc, #456]	; (801c328 <udp_input+0x218>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	4619      	mov	r1, r3
 801c162:	4610      	mov	r0, r2
 801c164:	f7f8 f960 	bl	8014428 <ip4_addr_isbroadcast_u32>
 801c168:	4603      	mov	r3, r0
 801c16a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c16c:	697b      	ldr	r3, [r7, #20]
 801c16e:	881b      	ldrh	r3, [r3, #0]
 801c170:	b29b      	uxth	r3, r3
 801c172:	4618      	mov	r0, r3
 801c174:	f7f4 fd75 	bl	8010c62 <lwip_htons>
 801c178:	4603      	mov	r3, r0
 801c17a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	885b      	ldrh	r3, [r3, #2]
 801c180:	b29b      	uxth	r3, r3
 801c182:	4618      	mov	r0, r3
 801c184:	f7f4 fd6d 	bl	8010c62 <lwip_htons>
 801c188:	4603      	mov	r3, r0
 801c18a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801c18c:	2300      	movs	r3, #0
 801c18e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801c190:	2300      	movs	r3, #0
 801c192:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c194:	2300      	movs	r3, #0
 801c196:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c198:	4b64      	ldr	r3, [pc, #400]	; (801c32c <udp_input+0x21c>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	627b      	str	r3, [r7, #36]	; 0x24
 801c19e:	e054      	b.n	801c24a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1a2:	8a5b      	ldrh	r3, [r3, #18]
 801c1a4:	89fa      	ldrh	r2, [r7, #14]
 801c1a6:	429a      	cmp	r2, r3
 801c1a8:	d14a      	bne.n	801c240 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c1aa:	7cfb      	ldrb	r3, [r7, #19]
 801c1ac:	461a      	mov	r2, r3
 801c1ae:	6839      	ldr	r1, [r7, #0]
 801c1b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c1b2:	f7ff ff49 	bl	801c048 <udp_input_local_match>
 801c1b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d041      	beq.n	801c240 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1be:	7c1b      	ldrb	r3, [r3, #16]
 801c1c0:	f003 0304 	and.w	r3, r3, #4
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d11d      	bne.n	801c204 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d102      	bne.n	801c1d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1d0:	61fb      	str	r3, [r7, #28]
 801c1d2:	e017      	b.n	801c204 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c1d4:	7cfb      	ldrb	r3, [r7, #19]
 801c1d6:	2b00      	cmp	r3, #0
 801c1d8:	d014      	beq.n	801c204 <udp_input+0xf4>
 801c1da:	4b53      	ldr	r3, [pc, #332]	; (801c328 <udp_input+0x218>)
 801c1dc:	695b      	ldr	r3, [r3, #20]
 801c1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1e2:	d10f      	bne.n	801c204 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c1e4:	69fb      	ldr	r3, [r7, #28]
 801c1e6:	681a      	ldr	r2, [r3, #0]
 801c1e8:	683b      	ldr	r3, [r7, #0]
 801c1ea:	3304      	adds	r3, #4
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d008      	beq.n	801c204 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1f4:	681a      	ldr	r2, [r3, #0]
 801c1f6:	683b      	ldr	r3, [r7, #0]
 801c1f8:	3304      	adds	r3, #4
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	429a      	cmp	r2, r3
 801c1fe:	d101      	bne.n	801c204 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c202:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c206:	8a9b      	ldrh	r3, [r3, #20]
 801c208:	8a3a      	ldrh	r2, [r7, #16]
 801c20a:	429a      	cmp	r2, r3
 801c20c:	d118      	bne.n	801c240 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c210:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c212:	2b00      	cmp	r3, #0
 801c214:	d005      	beq.n	801c222 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c218:	685a      	ldr	r2, [r3, #4]
 801c21a:	4b43      	ldr	r3, [pc, #268]	; (801c328 <udp_input+0x218>)
 801c21c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c21e:	429a      	cmp	r2, r3
 801c220:	d10e      	bne.n	801c240 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c222:	6a3b      	ldr	r3, [r7, #32]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d014      	beq.n	801c252 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c22a:	68da      	ldr	r2, [r3, #12]
 801c22c:	6a3b      	ldr	r3, [r7, #32]
 801c22e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c230:	4b3e      	ldr	r3, [pc, #248]	; (801c32c <udp_input+0x21c>)
 801c232:	681a      	ldr	r2, [r3, #0]
 801c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c236:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c238:	4a3c      	ldr	r2, [pc, #240]	; (801c32c <udp_input+0x21c>)
 801c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c23c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c23e:	e008      	b.n	801c252 <udp_input+0x142>
      }
    }

    prev = pcb;
 801c240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c242:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c246:	68db      	ldr	r3, [r3, #12]
 801c248:	627b      	str	r3, [r7, #36]	; 0x24
 801c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c24c:	2b00      	cmp	r3, #0
 801c24e:	d1a7      	bne.n	801c1a0 <udp_input+0x90>
 801c250:	e000      	b.n	801c254 <udp_input+0x144>
        break;
 801c252:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c256:	2b00      	cmp	r3, #0
 801c258:	d101      	bne.n	801c25e <udp_input+0x14e>
    pcb = uncon_pcb;
 801c25a:	69fb      	ldr	r3, [r7, #28]
 801c25c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c260:	2b00      	cmp	r3, #0
 801c262:	d002      	beq.n	801c26a <udp_input+0x15a>
    for_us = 1;
 801c264:	2301      	movs	r3, #1
 801c266:	76fb      	strb	r3, [r7, #27]
 801c268:	e00a      	b.n	801c280 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c26a:	683b      	ldr	r3, [r7, #0]
 801c26c:	3304      	adds	r3, #4
 801c26e:	681a      	ldr	r2, [r3, #0]
 801c270:	4b2d      	ldr	r3, [pc, #180]	; (801c328 <udp_input+0x218>)
 801c272:	695b      	ldr	r3, [r3, #20]
 801c274:	429a      	cmp	r2, r3
 801c276:	bf0c      	ite	eq
 801c278:	2301      	moveq	r3, #1
 801c27a:	2300      	movne	r3, #0
 801c27c:	b2db      	uxtb	r3, r3
 801c27e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c280:	7efb      	ldrb	r3, [r7, #27]
 801c282:	2b00      	cmp	r3, #0
 801c284:	d041      	beq.n	801c30a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c286:	2108      	movs	r1, #8
 801c288:	6878      	ldr	r0, [r7, #4]
 801c28a:	f7fa f90d 	bl	80164a8 <pbuf_remove_header>
 801c28e:	4603      	mov	r3, r0
 801c290:	2b00      	cmp	r3, #0
 801c292:	d00a      	beq.n	801c2aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c294:	4b20      	ldr	r3, [pc, #128]	; (801c318 <udp_input+0x208>)
 801c296:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c29a:	4925      	ldr	r1, [pc, #148]	; (801c330 <udp_input+0x220>)
 801c29c:	4820      	ldr	r0, [pc, #128]	; (801c320 <udp_input+0x210>)
 801c29e:	f000 fb8b 	bl	801c9b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c2a2:	6878      	ldr	r0, [r7, #4]
 801c2a4:	f7fa f986 	bl	80165b4 <pbuf_free>
      goto end;
 801c2a8:	e032      	b.n	801c310 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801c2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d012      	beq.n	801c2d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2b2:	699b      	ldr	r3, [r3, #24]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d00a      	beq.n	801c2ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2ba:	699c      	ldr	r4, [r3, #24]
 801c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2be:	69d8      	ldr	r0, [r3, #28]
 801c2c0:	8a3b      	ldrh	r3, [r7, #16]
 801c2c2:	9300      	str	r3, [sp, #0]
 801c2c4:	4b1b      	ldr	r3, [pc, #108]	; (801c334 <udp_input+0x224>)
 801c2c6:	687a      	ldr	r2, [r7, #4]
 801c2c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c2ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c2cc:	e021      	b.n	801c312 <udp_input+0x202>
        pbuf_free(p);
 801c2ce:	6878      	ldr	r0, [r7, #4]
 801c2d0:	f7fa f970 	bl	80165b4 <pbuf_free>
        goto end;
 801c2d4:	e01c      	b.n	801c310 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c2d6:	7cfb      	ldrb	r3, [r7, #19]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d112      	bne.n	801c302 <udp_input+0x1f2>
 801c2dc:	4b12      	ldr	r3, [pc, #72]	; (801c328 <udp_input+0x218>)
 801c2de:	695b      	ldr	r3, [r3, #20]
 801c2e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c2e4:	2be0      	cmp	r3, #224	; 0xe0
 801c2e6:	d00c      	beq.n	801c302 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c2e8:	4b0f      	ldr	r3, [pc, #60]	; (801c328 <udp_input+0x218>)
 801c2ea:	899b      	ldrh	r3, [r3, #12]
 801c2ec:	3308      	adds	r3, #8
 801c2ee:	b29b      	uxth	r3, r3
 801c2f0:	b21b      	sxth	r3, r3
 801c2f2:	4619      	mov	r1, r3
 801c2f4:	6878      	ldr	r0, [r7, #4]
 801c2f6:	f7fa f94a 	bl	801658e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c2fa:	2103      	movs	r1, #3
 801c2fc:	6878      	ldr	r0, [r7, #4]
 801c2fe:	f7f7 fc7b 	bl	8013bf8 <icmp_dest_unreach>
      pbuf_free(p);
 801c302:	6878      	ldr	r0, [r7, #4]
 801c304:	f7fa f956 	bl	80165b4 <pbuf_free>
  return;
 801c308:	e003      	b.n	801c312 <udp_input+0x202>
    pbuf_free(p);
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	f7fa f952 	bl	80165b4 <pbuf_free>
  return;
 801c310:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c312:	372c      	adds	r7, #44	; 0x2c
 801c314:	46bd      	mov	sp, r7
 801c316:	bd90      	pop	{r4, r7, pc}
 801c318:	080204f8 	.word	0x080204f8
 801c31c:	080205c4 	.word	0x080205c4
 801c320:	08020574 	.word	0x08020574
 801c324:	080205dc 	.word	0x080205dc
 801c328:	24004774 	.word	0x24004774
 801c32c:	2400769c 	.word	0x2400769c
 801c330:	080205f8 	.word	0x080205f8
 801c334:	24004784 	.word	0x24004784

0801c338 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b088      	sub	sp, #32
 801c33c:	af02      	add	r7, sp, #8
 801c33e:	60f8      	str	r0, [r7, #12]
 801c340:	60b9      	str	r1, [r7, #8]
 801c342:	607a      	str	r2, [r7, #4]
 801c344:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d109      	bne.n	801c360 <udp_sendto_if+0x28>
 801c34c:	4b2e      	ldr	r3, [pc, #184]	; (801c408 <udp_sendto_if+0xd0>)
 801c34e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c352:	492e      	ldr	r1, [pc, #184]	; (801c40c <udp_sendto_if+0xd4>)
 801c354:	482e      	ldr	r0, [pc, #184]	; (801c410 <udp_sendto_if+0xd8>)
 801c356:	f000 fb2f 	bl	801c9b8 <iprintf>
 801c35a:	f06f 030f 	mvn.w	r3, #15
 801c35e:	e04f      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c360:	68bb      	ldr	r3, [r7, #8]
 801c362:	2b00      	cmp	r3, #0
 801c364:	d109      	bne.n	801c37a <udp_sendto_if+0x42>
 801c366:	4b28      	ldr	r3, [pc, #160]	; (801c408 <udp_sendto_if+0xd0>)
 801c368:	f240 2281 	movw	r2, #641	; 0x281
 801c36c:	4929      	ldr	r1, [pc, #164]	; (801c414 <udp_sendto_if+0xdc>)
 801c36e:	4828      	ldr	r0, [pc, #160]	; (801c410 <udp_sendto_if+0xd8>)
 801c370:	f000 fb22 	bl	801c9b8 <iprintf>
 801c374:	f06f 030f 	mvn.w	r3, #15
 801c378:	e042      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d109      	bne.n	801c394 <udp_sendto_if+0x5c>
 801c380:	4b21      	ldr	r3, [pc, #132]	; (801c408 <udp_sendto_if+0xd0>)
 801c382:	f240 2282 	movw	r2, #642	; 0x282
 801c386:	4924      	ldr	r1, [pc, #144]	; (801c418 <udp_sendto_if+0xe0>)
 801c388:	4821      	ldr	r0, [pc, #132]	; (801c410 <udp_sendto_if+0xd8>)
 801c38a:	f000 fb15 	bl	801c9b8 <iprintf>
 801c38e:	f06f 030f 	mvn.w	r3, #15
 801c392:	e035      	b.n	801c400 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c394:	6a3b      	ldr	r3, [r7, #32]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d109      	bne.n	801c3ae <udp_sendto_if+0x76>
 801c39a:	4b1b      	ldr	r3, [pc, #108]	; (801c408 <udp_sendto_if+0xd0>)
 801c39c:	f240 2283 	movw	r2, #643	; 0x283
 801c3a0:	491e      	ldr	r1, [pc, #120]	; (801c41c <udp_sendto_if+0xe4>)
 801c3a2:	481b      	ldr	r0, [pc, #108]	; (801c410 <udp_sendto_if+0xd8>)
 801c3a4:	f000 fb08 	bl	801c9b8 <iprintf>
 801c3a8:	f06f 030f 	mvn.w	r3, #15
 801c3ac:	e028      	b.n	801c400 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d009      	beq.n	801c3c8 <udp_sendto_if+0x90>
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d005      	beq.n	801c3c8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	681b      	ldr	r3, [r3, #0]
 801c3c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c3c4:	2be0      	cmp	r3, #224	; 0xe0
 801c3c6:	d103      	bne.n	801c3d0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c3c8:	6a3b      	ldr	r3, [r7, #32]
 801c3ca:	3304      	adds	r3, #4
 801c3cc:	617b      	str	r3, [r7, #20]
 801c3ce:	e00b      	b.n	801c3e8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	681a      	ldr	r2, [r3, #0]
 801c3d4:	6a3b      	ldr	r3, [r7, #32]
 801c3d6:	3304      	adds	r3, #4
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	429a      	cmp	r2, r3
 801c3dc:	d002      	beq.n	801c3e4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c3de:	f06f 0303 	mvn.w	r3, #3
 801c3e2:	e00d      	b.n	801c400 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c3e8:	887a      	ldrh	r2, [r7, #2]
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	9301      	str	r3, [sp, #4]
 801c3ee:	6a3b      	ldr	r3, [r7, #32]
 801c3f0:	9300      	str	r3, [sp, #0]
 801c3f2:	4613      	mov	r3, r2
 801c3f4:	687a      	ldr	r2, [r7, #4]
 801c3f6:	68b9      	ldr	r1, [r7, #8]
 801c3f8:	68f8      	ldr	r0, [r7, #12]
 801c3fa:	f000 f811 	bl	801c420 <udp_sendto_if_src>
 801c3fe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c400:	4618      	mov	r0, r3
 801c402:	3718      	adds	r7, #24
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}
 801c408:	080204f8 	.word	0x080204f8
 801c40c:	08020694 	.word	0x08020694
 801c410:	08020574 	.word	0x08020574
 801c414:	080206b0 	.word	0x080206b0
 801c418:	080206cc 	.word	0x080206cc
 801c41c:	080206ec 	.word	0x080206ec

0801c420 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b08c      	sub	sp, #48	; 0x30
 801c424:	af04      	add	r7, sp, #16
 801c426:	60f8      	str	r0, [r7, #12]
 801c428:	60b9      	str	r1, [r7, #8]
 801c42a:	607a      	str	r2, [r7, #4]
 801c42c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	2b00      	cmp	r3, #0
 801c432:	d109      	bne.n	801c448 <udp_sendto_if_src+0x28>
 801c434:	4b65      	ldr	r3, [pc, #404]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c436:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c43a:	4965      	ldr	r1, [pc, #404]	; (801c5d0 <udp_sendto_if_src+0x1b0>)
 801c43c:	4865      	ldr	r0, [pc, #404]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c43e:	f000 fabb 	bl	801c9b8 <iprintf>
 801c442:	f06f 030f 	mvn.w	r3, #15
 801c446:	e0bc      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d109      	bne.n	801c462 <udp_sendto_if_src+0x42>
 801c44e:	4b5f      	ldr	r3, [pc, #380]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c450:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c454:	4960      	ldr	r1, [pc, #384]	; (801c5d8 <udp_sendto_if_src+0x1b8>)
 801c456:	485f      	ldr	r0, [pc, #380]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c458:	f000 faae 	bl	801c9b8 <iprintf>
 801c45c:	f06f 030f 	mvn.w	r3, #15
 801c460:	e0af      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d109      	bne.n	801c47c <udp_sendto_if_src+0x5c>
 801c468:	4b58      	ldr	r3, [pc, #352]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c46a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c46e:	495b      	ldr	r1, [pc, #364]	; (801c5dc <udp_sendto_if_src+0x1bc>)
 801c470:	4858      	ldr	r0, [pc, #352]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c472:	f000 faa1 	bl	801c9b8 <iprintf>
 801c476:	f06f 030f 	mvn.w	r3, #15
 801c47a:	e0a2      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d109      	bne.n	801c496 <udp_sendto_if_src+0x76>
 801c482:	4b52      	ldr	r3, [pc, #328]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c484:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c488:	4955      	ldr	r1, [pc, #340]	; (801c5e0 <udp_sendto_if_src+0x1c0>)
 801c48a:	4852      	ldr	r0, [pc, #328]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c48c:	f000 fa94 	bl	801c9b8 <iprintf>
 801c490:	f06f 030f 	mvn.w	r3, #15
 801c494:	e095      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d109      	bne.n	801c4b0 <udp_sendto_if_src+0x90>
 801c49c:	4b4b      	ldr	r3, [pc, #300]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c49e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c4a2:	4950      	ldr	r1, [pc, #320]	; (801c5e4 <udp_sendto_if_src+0x1c4>)
 801c4a4:	484b      	ldr	r0, [pc, #300]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c4a6:	f000 fa87 	bl	801c9b8 <iprintf>
 801c4aa:	f06f 030f 	mvn.w	r3, #15
 801c4ae:	e088      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	8a5b      	ldrh	r3, [r3, #18]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d10f      	bne.n	801c4d8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c4b8:	68f9      	ldr	r1, [r7, #12]
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	8a5b      	ldrh	r3, [r3, #18]
 801c4be:	461a      	mov	r2, r3
 801c4c0:	68f8      	ldr	r0, [r7, #12]
 801c4c2:	f000 f893 	bl	801c5ec <udp_bind>
 801c4c6:	4603      	mov	r3, r0
 801c4c8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c4ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d002      	beq.n	801c4d8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801c4d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c4d6:	e074      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c4d8:	68bb      	ldr	r3, [r7, #8]
 801c4da:	891b      	ldrh	r3, [r3, #8]
 801c4dc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801c4e0:	4293      	cmp	r3, r2
 801c4e2:	d902      	bls.n	801c4ea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801c4e4:	f04f 33ff 	mov.w	r3, #4294967295
 801c4e8:	e06b      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c4ea:	2108      	movs	r1, #8
 801c4ec:	68b8      	ldr	r0, [r7, #8]
 801c4ee:	f7f9 ffcb 	bl	8016488 <pbuf_add_header>
 801c4f2:	4603      	mov	r3, r0
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d015      	beq.n	801c524 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c4f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4fc:	2108      	movs	r1, #8
 801c4fe:	2022      	movs	r0, #34	; 0x22
 801c500:	f7f9 fd78 	bl	8015ff4 <pbuf_alloc>
 801c504:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c506:	69fb      	ldr	r3, [r7, #28]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d102      	bne.n	801c512 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801c50c:	f04f 33ff 	mov.w	r3, #4294967295
 801c510:	e057      	b.n	801c5c2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801c512:	68bb      	ldr	r3, [r7, #8]
 801c514:	891b      	ldrh	r3, [r3, #8]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d006      	beq.n	801c528 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c51a:	68b9      	ldr	r1, [r7, #8]
 801c51c:	69f8      	ldr	r0, [r7, #28]
 801c51e:	f7fa f961 	bl	80167e4 <pbuf_chain>
 801c522:	e001      	b.n	801c528 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c528:	69fb      	ldr	r3, [r7, #28]
 801c52a:	895b      	ldrh	r3, [r3, #10]
 801c52c:	2b07      	cmp	r3, #7
 801c52e:	d806      	bhi.n	801c53e <udp_sendto_if_src+0x11e>
 801c530:	4b26      	ldr	r3, [pc, #152]	; (801c5cc <udp_sendto_if_src+0x1ac>)
 801c532:	f240 320e 	movw	r2, #782	; 0x30e
 801c536:	492c      	ldr	r1, [pc, #176]	; (801c5e8 <udp_sendto_if_src+0x1c8>)
 801c538:	4826      	ldr	r0, [pc, #152]	; (801c5d4 <udp_sendto_if_src+0x1b4>)
 801c53a:	f000 fa3d 	bl	801c9b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c53e:	69fb      	ldr	r3, [r7, #28]
 801c540:	685b      	ldr	r3, [r3, #4]
 801c542:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c544:	68fb      	ldr	r3, [r7, #12]
 801c546:	8a5b      	ldrh	r3, [r3, #18]
 801c548:	4618      	mov	r0, r3
 801c54a:	f7f4 fb8a 	bl	8010c62 <lwip_htons>
 801c54e:	4603      	mov	r3, r0
 801c550:	461a      	mov	r2, r3
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c556:	887b      	ldrh	r3, [r7, #2]
 801c558:	4618      	mov	r0, r3
 801c55a:	f7f4 fb82 	bl	8010c62 <lwip_htons>
 801c55e:	4603      	mov	r3, r0
 801c560:	461a      	mov	r2, r3
 801c562:	697b      	ldr	r3, [r7, #20]
 801c564:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	2200      	movs	r2, #0
 801c56a:	719a      	strb	r2, [r3, #6]
 801c56c:	2200      	movs	r2, #0
 801c56e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801c570:	69fb      	ldr	r3, [r7, #28]
 801c572:	891b      	ldrh	r3, [r3, #8]
 801c574:	4618      	mov	r0, r3
 801c576:	f7f4 fb74 	bl	8010c62 <lwip_htons>
 801c57a:	4603      	mov	r3, r0
 801c57c:	461a      	mov	r2, r3
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c582:	2311      	movs	r3, #17
 801c584:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	7adb      	ldrb	r3, [r3, #11]
 801c58a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c58c:	68fb      	ldr	r3, [r7, #12]
 801c58e:	7a9b      	ldrb	r3, [r3, #10]
 801c590:	7cb9      	ldrb	r1, [r7, #18]
 801c592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c594:	9202      	str	r2, [sp, #8]
 801c596:	7cfa      	ldrb	r2, [r7, #19]
 801c598:	9201      	str	r2, [sp, #4]
 801c59a:	9300      	str	r3, [sp, #0]
 801c59c:	460b      	mov	r3, r1
 801c59e:	687a      	ldr	r2, [r7, #4]
 801c5a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c5a2:	69f8      	ldr	r0, [r7, #28]
 801c5a4:	f7f7 fe92 	bl	80142cc <ip4_output_if_src>
 801c5a8:	4603      	mov	r3, r0
 801c5aa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c5ac:	69fa      	ldr	r2, [r7, #28]
 801c5ae:	68bb      	ldr	r3, [r7, #8]
 801c5b0:	429a      	cmp	r2, r3
 801c5b2:	d004      	beq.n	801c5be <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801c5b4:	69f8      	ldr	r0, [r7, #28]
 801c5b6:	f7f9 fffd 	bl	80165b4 <pbuf_free>
    q = NULL;
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801c5be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c5c2:	4618      	mov	r0, r3
 801c5c4:	3720      	adds	r7, #32
 801c5c6:	46bd      	mov	sp, r7
 801c5c8:	bd80      	pop	{r7, pc}
 801c5ca:	bf00      	nop
 801c5cc:	080204f8 	.word	0x080204f8
 801c5d0:	0802070c 	.word	0x0802070c
 801c5d4:	08020574 	.word	0x08020574
 801c5d8:	0802072c 	.word	0x0802072c
 801c5dc:	0802074c 	.word	0x0802074c
 801c5e0:	08020770 	.word	0x08020770
 801c5e4:	08020794 	.word	0x08020794
 801c5e8:	080207b8 	.word	0x080207b8

0801c5ec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b086      	sub	sp, #24
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	60f8      	str	r0, [r7, #12]
 801c5f4:	60b9      	str	r1, [r7, #8]
 801c5f6:	4613      	mov	r3, r2
 801c5f8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c5fa:	68bb      	ldr	r3, [r7, #8]
 801c5fc:	2b00      	cmp	r3, #0
 801c5fe:	d101      	bne.n	801c604 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c600:	4b39      	ldr	r3, [pc, #228]	; (801c6e8 <udp_bind+0xfc>)
 801c602:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c604:	68fb      	ldr	r3, [r7, #12]
 801c606:	2b00      	cmp	r3, #0
 801c608:	d109      	bne.n	801c61e <udp_bind+0x32>
 801c60a:	4b38      	ldr	r3, [pc, #224]	; (801c6ec <udp_bind+0x100>)
 801c60c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c610:	4937      	ldr	r1, [pc, #220]	; (801c6f0 <udp_bind+0x104>)
 801c612:	4838      	ldr	r0, [pc, #224]	; (801c6f4 <udp_bind+0x108>)
 801c614:	f000 f9d0 	bl	801c9b8 <iprintf>
 801c618:	f06f 030f 	mvn.w	r3, #15
 801c61c:	e060      	b.n	801c6e0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801c61e:	2300      	movs	r3, #0
 801c620:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c622:	4b35      	ldr	r3, [pc, #212]	; (801c6f8 <udp_bind+0x10c>)
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	617b      	str	r3, [r7, #20]
 801c628:	e009      	b.n	801c63e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c62a:	68fa      	ldr	r2, [r7, #12]
 801c62c:	697b      	ldr	r3, [r7, #20]
 801c62e:	429a      	cmp	r2, r3
 801c630:	d102      	bne.n	801c638 <udp_bind+0x4c>
      rebind = 1;
 801c632:	2301      	movs	r3, #1
 801c634:	74fb      	strb	r3, [r7, #19]
      break;
 801c636:	e005      	b.n	801c644 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c638:	697b      	ldr	r3, [r7, #20]
 801c63a:	68db      	ldr	r3, [r3, #12]
 801c63c:	617b      	str	r3, [r7, #20]
 801c63e:	697b      	ldr	r3, [r7, #20]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d1f2      	bne.n	801c62a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c644:	88fb      	ldrh	r3, [r7, #6]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d109      	bne.n	801c65e <udp_bind+0x72>
    port = udp_new_port();
 801c64a:	f7ff fcc5 	bl	801bfd8 <udp_new_port>
 801c64e:	4603      	mov	r3, r0
 801c650:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c652:	88fb      	ldrh	r3, [r7, #6]
 801c654:	2b00      	cmp	r3, #0
 801c656:	d12c      	bne.n	801c6b2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801c658:	f06f 0307 	mvn.w	r3, #7
 801c65c:	e040      	b.n	801c6e0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c65e:	4b26      	ldr	r3, [pc, #152]	; (801c6f8 <udp_bind+0x10c>)
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	617b      	str	r3, [r7, #20]
 801c664:	e022      	b.n	801c6ac <udp_bind+0xc0>
      if (pcb != ipcb) {
 801c666:	68fa      	ldr	r2, [r7, #12]
 801c668:	697b      	ldr	r3, [r7, #20]
 801c66a:	429a      	cmp	r2, r3
 801c66c:	d01b      	beq.n	801c6a6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c66e:	697b      	ldr	r3, [r7, #20]
 801c670:	8a5b      	ldrh	r3, [r3, #18]
 801c672:	88fa      	ldrh	r2, [r7, #6]
 801c674:	429a      	cmp	r2, r3
 801c676:	d116      	bne.n	801c6a6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c678:	697b      	ldr	r3, [r7, #20]
 801c67a:	681a      	ldr	r2, [r3, #0]
 801c67c:	68bb      	ldr	r3, [r7, #8]
 801c67e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c680:	429a      	cmp	r2, r3
 801c682:	d00d      	beq.n	801c6a0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	2b00      	cmp	r3, #0
 801c688:	d00a      	beq.n	801c6a0 <udp_bind+0xb4>
 801c68a:	68bb      	ldr	r3, [r7, #8]
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d006      	beq.n	801c6a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c692:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c694:	2b00      	cmp	r3, #0
 801c696:	d003      	beq.n	801c6a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801c698:	697b      	ldr	r3, [r7, #20]
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	d102      	bne.n	801c6a6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c6a0:	f06f 0307 	mvn.w	r3, #7
 801c6a4:	e01c      	b.n	801c6e0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	68db      	ldr	r3, [r3, #12]
 801c6aa:	617b      	str	r3, [r7, #20]
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d1d9      	bne.n	801c666 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c6b2:	68bb      	ldr	r3, [r7, #8]
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	d002      	beq.n	801c6be <udp_bind+0xd2>
 801c6b8:	68bb      	ldr	r3, [r7, #8]
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	e000      	b.n	801c6c0 <udp_bind+0xd4>
 801c6be:	2300      	movs	r3, #0
 801c6c0:	68fa      	ldr	r2, [r7, #12]
 801c6c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	88fa      	ldrh	r2, [r7, #6]
 801c6c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c6ca:	7cfb      	ldrb	r3, [r7, #19]
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	d106      	bne.n	801c6de <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c6d0:	4b09      	ldr	r3, [pc, #36]	; (801c6f8 <udp_bind+0x10c>)
 801c6d2:	681a      	ldr	r2, [r3, #0]
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c6d8:	4a07      	ldr	r2, [pc, #28]	; (801c6f8 <udp_bind+0x10c>)
 801c6da:	68fb      	ldr	r3, [r7, #12]
 801c6dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801c6de:	2300      	movs	r3, #0
}
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	3718      	adds	r7, #24
 801c6e4:	46bd      	mov	sp, r7
 801c6e6:	bd80      	pop	{r7, pc}
 801c6e8:	08020d24 	.word	0x08020d24
 801c6ec:	080204f8 	.word	0x080204f8
 801c6f0:	080207e8 	.word	0x080207e8
 801c6f4:	08020574 	.word	0x08020574
 801c6f8:	2400769c 	.word	0x2400769c

0801c6fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b086      	sub	sp, #24
 801c700:	af00      	add	r7, sp, #0
 801c702:	60f8      	str	r0, [r7, #12]
 801c704:	60b9      	str	r1, [r7, #8]
 801c706:	4613      	mov	r3, r2
 801c708:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801c70a:	68fb      	ldr	r3, [r7, #12]
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d109      	bne.n	801c724 <udp_connect+0x28>
 801c710:	4b2c      	ldr	r3, [pc, #176]	; (801c7c4 <udp_connect+0xc8>)
 801c712:	f240 4235 	movw	r2, #1077	; 0x435
 801c716:	492c      	ldr	r1, [pc, #176]	; (801c7c8 <udp_connect+0xcc>)
 801c718:	482c      	ldr	r0, [pc, #176]	; (801c7cc <udp_connect+0xd0>)
 801c71a:	f000 f94d 	bl	801c9b8 <iprintf>
 801c71e:	f06f 030f 	mvn.w	r3, #15
 801c722:	e04b      	b.n	801c7bc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d109      	bne.n	801c73e <udp_connect+0x42>
 801c72a:	4b26      	ldr	r3, [pc, #152]	; (801c7c4 <udp_connect+0xc8>)
 801c72c:	f240 4236 	movw	r2, #1078	; 0x436
 801c730:	4927      	ldr	r1, [pc, #156]	; (801c7d0 <udp_connect+0xd4>)
 801c732:	4826      	ldr	r0, [pc, #152]	; (801c7cc <udp_connect+0xd0>)
 801c734:	f000 f940 	bl	801c9b8 <iprintf>
 801c738:	f06f 030f 	mvn.w	r3, #15
 801c73c:	e03e      	b.n	801c7bc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	8a5b      	ldrh	r3, [r3, #18]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d10f      	bne.n	801c766 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c746:	68f9      	ldr	r1, [r7, #12]
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	8a5b      	ldrh	r3, [r3, #18]
 801c74c:	461a      	mov	r2, r3
 801c74e:	68f8      	ldr	r0, [r7, #12]
 801c750:	f7ff ff4c 	bl	801c5ec <udp_bind>
 801c754:	4603      	mov	r3, r0
 801c756:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801c758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d002      	beq.n	801c766 <udp_connect+0x6a>
      return err;
 801c760:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c764:	e02a      	b.n	801c7bc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	2b00      	cmp	r3, #0
 801c76a:	d002      	beq.n	801c772 <udp_connect+0x76>
 801c76c:	68bb      	ldr	r3, [r7, #8]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	e000      	b.n	801c774 <udp_connect+0x78>
 801c772:	2300      	movs	r3, #0
 801c774:	68fa      	ldr	r2, [r7, #12]
 801c776:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	88fa      	ldrh	r2, [r7, #6]
 801c77c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	7c1b      	ldrb	r3, [r3, #16]
 801c782:	f043 0304 	orr.w	r3, r3, #4
 801c786:	b2da      	uxtb	r2, r3
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c78c:	4b11      	ldr	r3, [pc, #68]	; (801c7d4 <udp_connect+0xd8>)
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	617b      	str	r3, [r7, #20]
 801c792:	e008      	b.n	801c7a6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801c794:	68fa      	ldr	r2, [r7, #12]
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	429a      	cmp	r2, r3
 801c79a:	d101      	bne.n	801c7a0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801c79c:	2300      	movs	r3, #0
 801c79e:	e00d      	b.n	801c7bc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c7a0:	697b      	ldr	r3, [r7, #20]
 801c7a2:	68db      	ldr	r3, [r3, #12]
 801c7a4:	617b      	str	r3, [r7, #20]
 801c7a6:	697b      	ldr	r3, [r7, #20]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d1f3      	bne.n	801c794 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801c7ac:	4b09      	ldr	r3, [pc, #36]	; (801c7d4 <udp_connect+0xd8>)
 801c7ae:	681a      	ldr	r2, [r3, #0]
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801c7b4:	4a07      	ldr	r2, [pc, #28]	; (801c7d4 <udp_connect+0xd8>)
 801c7b6:	68fb      	ldr	r3, [r7, #12]
 801c7b8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801c7ba:	2300      	movs	r3, #0
}
 801c7bc:	4618      	mov	r0, r3
 801c7be:	3718      	adds	r7, #24
 801c7c0:	46bd      	mov	sp, r7
 801c7c2:	bd80      	pop	{r7, pc}
 801c7c4:	080204f8 	.word	0x080204f8
 801c7c8:	08020800 	.word	0x08020800
 801c7cc:	08020574 	.word	0x08020574
 801c7d0:	0802081c 	.word	0x0802081c
 801c7d4:	2400769c 	.word	0x2400769c

0801c7d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801c7d8:	b580      	push	{r7, lr}
 801c7da:	b084      	sub	sp, #16
 801c7dc:	af00      	add	r7, sp, #0
 801c7de:	60f8      	str	r0, [r7, #12]
 801c7e0:	60b9      	str	r1, [r7, #8]
 801c7e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d107      	bne.n	801c7fa <udp_recv+0x22>
 801c7ea:	4b08      	ldr	r3, [pc, #32]	; (801c80c <udp_recv+0x34>)
 801c7ec:	f240 428a 	movw	r2, #1162	; 0x48a
 801c7f0:	4907      	ldr	r1, [pc, #28]	; (801c810 <udp_recv+0x38>)
 801c7f2:	4808      	ldr	r0, [pc, #32]	; (801c814 <udp_recv+0x3c>)
 801c7f4:	f000 f8e0 	bl	801c9b8 <iprintf>
 801c7f8:	e005      	b.n	801c806 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c7fa:	68fb      	ldr	r3, [r7, #12]
 801c7fc:	68ba      	ldr	r2, [r7, #8]
 801c7fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c800:	68fb      	ldr	r3, [r7, #12]
 801c802:	687a      	ldr	r2, [r7, #4]
 801c804:	61da      	str	r2, [r3, #28]
}
 801c806:	3710      	adds	r7, #16
 801c808:	46bd      	mov	sp, r7
 801c80a:	bd80      	pop	{r7, pc}
 801c80c:	080204f8 	.word	0x080204f8
 801c810:	08020854 	.word	0x08020854
 801c814:	08020574 	.word	0x08020574

0801c818 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b084      	sub	sp, #16
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c820:	687b      	ldr	r3, [r7, #4]
 801c822:	2b00      	cmp	r3, #0
 801c824:	d107      	bne.n	801c836 <udp_remove+0x1e>
 801c826:	4b19      	ldr	r3, [pc, #100]	; (801c88c <udp_remove+0x74>)
 801c828:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801c82c:	4918      	ldr	r1, [pc, #96]	; (801c890 <udp_remove+0x78>)
 801c82e:	4819      	ldr	r0, [pc, #100]	; (801c894 <udp_remove+0x7c>)
 801c830:	f000 f8c2 	bl	801c9b8 <iprintf>
 801c834:	e026      	b.n	801c884 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c836:	4b18      	ldr	r3, [pc, #96]	; (801c898 <udp_remove+0x80>)
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	687a      	ldr	r2, [r7, #4]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d105      	bne.n	801c84c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c840:	4b15      	ldr	r3, [pc, #84]	; (801c898 <udp_remove+0x80>)
 801c842:	681b      	ldr	r3, [r3, #0]
 801c844:	68db      	ldr	r3, [r3, #12]
 801c846:	4a14      	ldr	r2, [pc, #80]	; (801c898 <udp_remove+0x80>)
 801c848:	6013      	str	r3, [r2, #0]
 801c84a:	e017      	b.n	801c87c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c84c:	4b12      	ldr	r3, [pc, #72]	; (801c898 <udp_remove+0x80>)
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	60fb      	str	r3, [r7, #12]
 801c852:	e010      	b.n	801c876 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c854:	68fb      	ldr	r3, [r7, #12]
 801c856:	68db      	ldr	r3, [r3, #12]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	d009      	beq.n	801c870 <udp_remove+0x58>
 801c85c:	68fb      	ldr	r3, [r7, #12]
 801c85e:	68db      	ldr	r3, [r3, #12]
 801c860:	687a      	ldr	r2, [r7, #4]
 801c862:	429a      	cmp	r2, r3
 801c864:	d104      	bne.n	801c870 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	68da      	ldr	r2, [r3, #12]
 801c86a:	68fb      	ldr	r3, [r7, #12]
 801c86c:	60da      	str	r2, [r3, #12]
        break;
 801c86e:	e005      	b.n	801c87c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	60fb      	str	r3, [r7, #12]
 801c876:	68fb      	ldr	r3, [r7, #12]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d1eb      	bne.n	801c854 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c87c:	6879      	ldr	r1, [r7, #4]
 801c87e:	2000      	movs	r0, #0
 801c880:	f7f9 f8a2 	bl	80159c8 <memp_free>
}
 801c884:	3710      	adds	r7, #16
 801c886:	46bd      	mov	sp, r7
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	bf00      	nop
 801c88c:	080204f8 	.word	0x080204f8
 801c890:	0802086c 	.word	0x0802086c
 801c894:	08020574 	.word	0x08020574
 801c898:	2400769c 	.word	0x2400769c

0801c89c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c89c:	b580      	push	{r7, lr}
 801c89e:	b082      	sub	sp, #8
 801c8a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c8a2:	2000      	movs	r0, #0
 801c8a4:	f7f9 f844 	bl	8015930 <memp_malloc>
 801c8a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d007      	beq.n	801c8c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c8b0:	2220      	movs	r2, #32
 801c8b2:	2100      	movs	r1, #0
 801c8b4:	6878      	ldr	r0, [r7, #4]
 801c8b6:	f000 f877 	bl	801c9a8 <memset>
    pcb->ttl = UDP_TTL;
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	22ff      	movs	r2, #255	; 0xff
 801c8be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c8c0:	687b      	ldr	r3, [r7, #4]
}
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	3708      	adds	r7, #8
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}
	...

0801c8cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c8cc:	b480      	push	{r7}
 801c8ce:	b085      	sub	sp, #20
 801c8d0:	af00      	add	r7, sp, #0
 801c8d2:	6078      	str	r0, [r7, #4]
 801c8d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d01e      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8dc:	687b      	ldr	r3, [r7, #4]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d01a      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8e4:	683b      	ldr	r3, [r7, #0]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d017      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
 801c8ea:	683b      	ldr	r3, [r7, #0]
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d013      	beq.n	801c91a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c8f2:	4b0d      	ldr	r3, [pc, #52]	; (801c928 <udp_netif_ip_addr_changed+0x5c>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	60fb      	str	r3, [r7, #12]
 801c8f8:	e00c      	b.n	801c914 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c8fa:	68fb      	ldr	r3, [r7, #12]
 801c8fc:	681a      	ldr	r2, [r3, #0]
 801c8fe:	687b      	ldr	r3, [r7, #4]
 801c900:	681b      	ldr	r3, [r3, #0]
 801c902:	429a      	cmp	r2, r3
 801c904:	d103      	bne.n	801c90e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c906:	683b      	ldr	r3, [r7, #0]
 801c908:	681a      	ldr	r2, [r3, #0]
 801c90a:	68fb      	ldr	r3, [r7, #12]
 801c90c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c90e:	68fb      	ldr	r3, [r7, #12]
 801c910:	68db      	ldr	r3, [r3, #12]
 801c912:	60fb      	str	r3, [r7, #12]
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d1ef      	bne.n	801c8fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c91a:	bf00      	nop
 801c91c:	3714      	adds	r7, #20
 801c91e:	46bd      	mov	sp, r7
 801c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c924:	4770      	bx	lr
 801c926:	bf00      	nop
 801c928:	2400769c 	.word	0x2400769c

0801c92c <__libc_init_array>:
 801c92c:	b570      	push	{r4, r5, r6, lr}
 801c92e:	4e0d      	ldr	r6, [pc, #52]	; (801c964 <__libc_init_array+0x38>)
 801c930:	4c0d      	ldr	r4, [pc, #52]	; (801c968 <__libc_init_array+0x3c>)
 801c932:	1ba4      	subs	r4, r4, r6
 801c934:	10a4      	asrs	r4, r4, #2
 801c936:	2500      	movs	r5, #0
 801c938:	42a5      	cmp	r5, r4
 801c93a:	d109      	bne.n	801c950 <__libc_init_array+0x24>
 801c93c:	4e0b      	ldr	r6, [pc, #44]	; (801c96c <__libc_init_array+0x40>)
 801c93e:	4c0c      	ldr	r4, [pc, #48]	; (801c970 <__libc_init_array+0x44>)
 801c940:	f000 ff5a 	bl	801d7f8 <_init>
 801c944:	1ba4      	subs	r4, r4, r6
 801c946:	10a4      	asrs	r4, r4, #2
 801c948:	2500      	movs	r5, #0
 801c94a:	42a5      	cmp	r5, r4
 801c94c:	d105      	bne.n	801c95a <__libc_init_array+0x2e>
 801c94e:	bd70      	pop	{r4, r5, r6, pc}
 801c950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c954:	4798      	blx	r3
 801c956:	3501      	adds	r5, #1
 801c958:	e7ee      	b.n	801c938 <__libc_init_array+0xc>
 801c95a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801c95e:	4798      	blx	r3
 801c960:	3501      	adds	r5, #1
 801c962:	e7f2      	b.n	801c94a <__libc_init_array+0x1e>
 801c964:	08020eac 	.word	0x08020eac
 801c968:	08020eac 	.word	0x08020eac
 801c96c:	08020eac 	.word	0x08020eac
 801c970:	08020eb0 	.word	0x08020eb0

0801c974 <memcmp>:
 801c974:	b530      	push	{r4, r5, lr}
 801c976:	2400      	movs	r4, #0
 801c978:	42a2      	cmp	r2, r4
 801c97a:	d101      	bne.n	801c980 <memcmp+0xc>
 801c97c:	2000      	movs	r0, #0
 801c97e:	e007      	b.n	801c990 <memcmp+0x1c>
 801c980:	5d03      	ldrb	r3, [r0, r4]
 801c982:	3401      	adds	r4, #1
 801c984:	190d      	adds	r5, r1, r4
 801c986:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801c98a:	42ab      	cmp	r3, r5
 801c98c:	d0f4      	beq.n	801c978 <memcmp+0x4>
 801c98e:	1b58      	subs	r0, r3, r5
 801c990:	bd30      	pop	{r4, r5, pc}

0801c992 <memcpy>:
 801c992:	b510      	push	{r4, lr}
 801c994:	1e43      	subs	r3, r0, #1
 801c996:	440a      	add	r2, r1
 801c998:	4291      	cmp	r1, r2
 801c99a:	d100      	bne.n	801c99e <memcpy+0xc>
 801c99c:	bd10      	pop	{r4, pc}
 801c99e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c9a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c9a6:	e7f7      	b.n	801c998 <memcpy+0x6>

0801c9a8 <memset>:
 801c9a8:	4402      	add	r2, r0
 801c9aa:	4603      	mov	r3, r0
 801c9ac:	4293      	cmp	r3, r2
 801c9ae:	d100      	bne.n	801c9b2 <memset+0xa>
 801c9b0:	4770      	bx	lr
 801c9b2:	f803 1b01 	strb.w	r1, [r3], #1
 801c9b6:	e7f9      	b.n	801c9ac <memset+0x4>

0801c9b8 <iprintf>:
 801c9b8:	b40f      	push	{r0, r1, r2, r3}
 801c9ba:	4b0a      	ldr	r3, [pc, #40]	; (801c9e4 <iprintf+0x2c>)
 801c9bc:	b513      	push	{r0, r1, r4, lr}
 801c9be:	681c      	ldr	r4, [r3, #0]
 801c9c0:	b124      	cbz	r4, 801c9cc <iprintf+0x14>
 801c9c2:	69a3      	ldr	r3, [r4, #24]
 801c9c4:	b913      	cbnz	r3, 801c9cc <iprintf+0x14>
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f000 f882 	bl	801cad0 <__sinit>
 801c9cc:	ab05      	add	r3, sp, #20
 801c9ce:	9a04      	ldr	r2, [sp, #16]
 801c9d0:	68a1      	ldr	r1, [r4, #8]
 801c9d2:	9301      	str	r3, [sp, #4]
 801c9d4:	4620      	mov	r0, r4
 801c9d6:	f000 f9df 	bl	801cd98 <_vfiprintf_r>
 801c9da:	b002      	add	sp, #8
 801c9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c9e0:	b004      	add	sp, #16
 801c9e2:	4770      	bx	lr
 801c9e4:	24000020 	.word	0x24000020

0801c9e8 <rand>:
 801c9e8:	b538      	push	{r3, r4, r5, lr}
 801c9ea:	4b13      	ldr	r3, [pc, #76]	; (801ca38 <rand+0x50>)
 801c9ec:	681c      	ldr	r4, [r3, #0]
 801c9ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801c9f0:	b97b      	cbnz	r3, 801ca12 <rand+0x2a>
 801c9f2:	2018      	movs	r0, #24
 801c9f4:	f000 f8f6 	bl	801cbe4 <malloc>
 801c9f8:	4a10      	ldr	r2, [pc, #64]	; (801ca3c <rand+0x54>)
 801c9fa:	4b11      	ldr	r3, [pc, #68]	; (801ca40 <rand+0x58>)
 801c9fc:	63a0      	str	r0, [r4, #56]	; 0x38
 801c9fe:	e9c0 2300 	strd	r2, r3, [r0]
 801ca02:	4b10      	ldr	r3, [pc, #64]	; (801ca44 <rand+0x5c>)
 801ca04:	6083      	str	r3, [r0, #8]
 801ca06:	230b      	movs	r3, #11
 801ca08:	8183      	strh	r3, [r0, #12]
 801ca0a:	2201      	movs	r2, #1
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ca12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ca14:	480c      	ldr	r0, [pc, #48]	; (801ca48 <rand+0x60>)
 801ca16:	690a      	ldr	r2, [r1, #16]
 801ca18:	694b      	ldr	r3, [r1, #20]
 801ca1a:	4c0c      	ldr	r4, [pc, #48]	; (801ca4c <rand+0x64>)
 801ca1c:	4350      	muls	r0, r2
 801ca1e:	fb04 0003 	mla	r0, r4, r3, r0
 801ca22:	fba2 2304 	umull	r2, r3, r2, r4
 801ca26:	4403      	add	r3, r0
 801ca28:	1c54      	adds	r4, r2, #1
 801ca2a:	f143 0500 	adc.w	r5, r3, #0
 801ca2e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801ca32:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801ca36:	bd38      	pop	{r3, r4, r5, pc}
 801ca38:	24000020 	.word	0x24000020
 801ca3c:	abcd330e 	.word	0xabcd330e
 801ca40:	e66d1234 	.word	0xe66d1234
 801ca44:	0005deec 	.word	0x0005deec
 801ca48:	5851f42d 	.word	0x5851f42d
 801ca4c:	4c957f2d 	.word	0x4c957f2d

0801ca50 <std>:
 801ca50:	2300      	movs	r3, #0
 801ca52:	b510      	push	{r4, lr}
 801ca54:	4604      	mov	r4, r0
 801ca56:	e9c0 3300 	strd	r3, r3, [r0]
 801ca5a:	6083      	str	r3, [r0, #8]
 801ca5c:	8181      	strh	r1, [r0, #12]
 801ca5e:	6643      	str	r3, [r0, #100]	; 0x64
 801ca60:	81c2      	strh	r2, [r0, #14]
 801ca62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ca66:	6183      	str	r3, [r0, #24]
 801ca68:	4619      	mov	r1, r3
 801ca6a:	2208      	movs	r2, #8
 801ca6c:	305c      	adds	r0, #92	; 0x5c
 801ca6e:	f7ff ff9b 	bl	801c9a8 <memset>
 801ca72:	4b05      	ldr	r3, [pc, #20]	; (801ca88 <std+0x38>)
 801ca74:	6263      	str	r3, [r4, #36]	; 0x24
 801ca76:	4b05      	ldr	r3, [pc, #20]	; (801ca8c <std+0x3c>)
 801ca78:	62a3      	str	r3, [r4, #40]	; 0x28
 801ca7a:	4b05      	ldr	r3, [pc, #20]	; (801ca90 <std+0x40>)
 801ca7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ca7e:	4b05      	ldr	r3, [pc, #20]	; (801ca94 <std+0x44>)
 801ca80:	6224      	str	r4, [r4, #32]
 801ca82:	6323      	str	r3, [r4, #48]	; 0x30
 801ca84:	bd10      	pop	{r4, pc}
 801ca86:	bf00      	nop
 801ca88:	0801d2f5 	.word	0x0801d2f5
 801ca8c:	0801d317 	.word	0x0801d317
 801ca90:	0801d34f 	.word	0x0801d34f
 801ca94:	0801d373 	.word	0x0801d373

0801ca98 <_cleanup_r>:
 801ca98:	4901      	ldr	r1, [pc, #4]	; (801caa0 <_cleanup_r+0x8>)
 801ca9a:	f000 b885 	b.w	801cba8 <_fwalk_reent>
 801ca9e:	bf00      	nop
 801caa0:	0801d64d 	.word	0x0801d64d

0801caa4 <__sfmoreglue>:
 801caa4:	b570      	push	{r4, r5, r6, lr}
 801caa6:	1e4a      	subs	r2, r1, #1
 801caa8:	2568      	movs	r5, #104	; 0x68
 801caaa:	4355      	muls	r5, r2
 801caac:	460e      	mov	r6, r1
 801caae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cab2:	f000 f8ed 	bl	801cc90 <_malloc_r>
 801cab6:	4604      	mov	r4, r0
 801cab8:	b140      	cbz	r0, 801cacc <__sfmoreglue+0x28>
 801caba:	2100      	movs	r1, #0
 801cabc:	e9c0 1600 	strd	r1, r6, [r0]
 801cac0:	300c      	adds	r0, #12
 801cac2:	60a0      	str	r0, [r4, #8]
 801cac4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cac8:	f7ff ff6e 	bl	801c9a8 <memset>
 801cacc:	4620      	mov	r0, r4
 801cace:	bd70      	pop	{r4, r5, r6, pc}

0801cad0 <__sinit>:
 801cad0:	6983      	ldr	r3, [r0, #24]
 801cad2:	b510      	push	{r4, lr}
 801cad4:	4604      	mov	r4, r0
 801cad6:	bb33      	cbnz	r3, 801cb26 <__sinit+0x56>
 801cad8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801cadc:	6503      	str	r3, [r0, #80]	; 0x50
 801cade:	4b12      	ldr	r3, [pc, #72]	; (801cb28 <__sinit+0x58>)
 801cae0:	4a12      	ldr	r2, [pc, #72]	; (801cb2c <__sinit+0x5c>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	6282      	str	r2, [r0, #40]	; 0x28
 801cae6:	4298      	cmp	r0, r3
 801cae8:	bf04      	itt	eq
 801caea:	2301      	moveq	r3, #1
 801caec:	6183      	streq	r3, [r0, #24]
 801caee:	f000 f81f 	bl	801cb30 <__sfp>
 801caf2:	6060      	str	r0, [r4, #4]
 801caf4:	4620      	mov	r0, r4
 801caf6:	f000 f81b 	bl	801cb30 <__sfp>
 801cafa:	60a0      	str	r0, [r4, #8]
 801cafc:	4620      	mov	r0, r4
 801cafe:	f000 f817 	bl	801cb30 <__sfp>
 801cb02:	2200      	movs	r2, #0
 801cb04:	60e0      	str	r0, [r4, #12]
 801cb06:	2104      	movs	r1, #4
 801cb08:	6860      	ldr	r0, [r4, #4]
 801cb0a:	f7ff ffa1 	bl	801ca50 <std>
 801cb0e:	2201      	movs	r2, #1
 801cb10:	2109      	movs	r1, #9
 801cb12:	68a0      	ldr	r0, [r4, #8]
 801cb14:	f7ff ff9c 	bl	801ca50 <std>
 801cb18:	2202      	movs	r2, #2
 801cb1a:	2112      	movs	r1, #18
 801cb1c:	68e0      	ldr	r0, [r4, #12]
 801cb1e:	f7ff ff97 	bl	801ca50 <std>
 801cb22:	2301      	movs	r3, #1
 801cb24:	61a3      	str	r3, [r4, #24]
 801cb26:	bd10      	pop	{r4, pc}
 801cb28:	08020e0c 	.word	0x08020e0c
 801cb2c:	0801ca99 	.word	0x0801ca99

0801cb30 <__sfp>:
 801cb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb32:	4b1b      	ldr	r3, [pc, #108]	; (801cba0 <__sfp+0x70>)
 801cb34:	681e      	ldr	r6, [r3, #0]
 801cb36:	69b3      	ldr	r3, [r6, #24]
 801cb38:	4607      	mov	r7, r0
 801cb3a:	b913      	cbnz	r3, 801cb42 <__sfp+0x12>
 801cb3c:	4630      	mov	r0, r6
 801cb3e:	f7ff ffc7 	bl	801cad0 <__sinit>
 801cb42:	3648      	adds	r6, #72	; 0x48
 801cb44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cb48:	3b01      	subs	r3, #1
 801cb4a:	d503      	bpl.n	801cb54 <__sfp+0x24>
 801cb4c:	6833      	ldr	r3, [r6, #0]
 801cb4e:	b133      	cbz	r3, 801cb5e <__sfp+0x2e>
 801cb50:	6836      	ldr	r6, [r6, #0]
 801cb52:	e7f7      	b.n	801cb44 <__sfp+0x14>
 801cb54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cb58:	b16d      	cbz	r5, 801cb76 <__sfp+0x46>
 801cb5a:	3468      	adds	r4, #104	; 0x68
 801cb5c:	e7f4      	b.n	801cb48 <__sfp+0x18>
 801cb5e:	2104      	movs	r1, #4
 801cb60:	4638      	mov	r0, r7
 801cb62:	f7ff ff9f 	bl	801caa4 <__sfmoreglue>
 801cb66:	6030      	str	r0, [r6, #0]
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	d1f1      	bne.n	801cb50 <__sfp+0x20>
 801cb6c:	230c      	movs	r3, #12
 801cb6e:	603b      	str	r3, [r7, #0]
 801cb70:	4604      	mov	r4, r0
 801cb72:	4620      	mov	r0, r4
 801cb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb76:	4b0b      	ldr	r3, [pc, #44]	; (801cba4 <__sfp+0x74>)
 801cb78:	6665      	str	r5, [r4, #100]	; 0x64
 801cb7a:	e9c4 5500 	strd	r5, r5, [r4]
 801cb7e:	60a5      	str	r5, [r4, #8]
 801cb80:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cb84:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801cb88:	2208      	movs	r2, #8
 801cb8a:	4629      	mov	r1, r5
 801cb8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cb90:	f7ff ff0a 	bl	801c9a8 <memset>
 801cb94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cb98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cb9c:	e7e9      	b.n	801cb72 <__sfp+0x42>
 801cb9e:	bf00      	nop
 801cba0:	08020e0c 	.word	0x08020e0c
 801cba4:	ffff0001 	.word	0xffff0001

0801cba8 <_fwalk_reent>:
 801cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cbac:	4680      	mov	r8, r0
 801cbae:	4689      	mov	r9, r1
 801cbb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cbb4:	2600      	movs	r6, #0
 801cbb6:	b914      	cbnz	r4, 801cbbe <_fwalk_reent+0x16>
 801cbb8:	4630      	mov	r0, r6
 801cbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cbbe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801cbc2:	3f01      	subs	r7, #1
 801cbc4:	d501      	bpl.n	801cbca <_fwalk_reent+0x22>
 801cbc6:	6824      	ldr	r4, [r4, #0]
 801cbc8:	e7f5      	b.n	801cbb6 <_fwalk_reent+0xe>
 801cbca:	89ab      	ldrh	r3, [r5, #12]
 801cbcc:	2b01      	cmp	r3, #1
 801cbce:	d907      	bls.n	801cbe0 <_fwalk_reent+0x38>
 801cbd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cbd4:	3301      	adds	r3, #1
 801cbd6:	d003      	beq.n	801cbe0 <_fwalk_reent+0x38>
 801cbd8:	4629      	mov	r1, r5
 801cbda:	4640      	mov	r0, r8
 801cbdc:	47c8      	blx	r9
 801cbde:	4306      	orrs	r6, r0
 801cbe0:	3568      	adds	r5, #104	; 0x68
 801cbe2:	e7ee      	b.n	801cbc2 <_fwalk_reent+0x1a>

0801cbe4 <malloc>:
 801cbe4:	4b02      	ldr	r3, [pc, #8]	; (801cbf0 <malloc+0xc>)
 801cbe6:	4601      	mov	r1, r0
 801cbe8:	6818      	ldr	r0, [r3, #0]
 801cbea:	f000 b851 	b.w	801cc90 <_malloc_r>
 801cbee:	bf00      	nop
 801cbf0:	24000020 	.word	0x24000020

0801cbf4 <_free_r>:
 801cbf4:	b538      	push	{r3, r4, r5, lr}
 801cbf6:	4605      	mov	r5, r0
 801cbf8:	2900      	cmp	r1, #0
 801cbfa:	d045      	beq.n	801cc88 <_free_r+0x94>
 801cbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cc00:	1f0c      	subs	r4, r1, #4
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	bfb8      	it	lt
 801cc06:	18e4      	addlt	r4, r4, r3
 801cc08:	f000 fdc0 	bl	801d78c <__malloc_lock>
 801cc0c:	4a1f      	ldr	r2, [pc, #124]	; (801cc8c <_free_r+0x98>)
 801cc0e:	6813      	ldr	r3, [r2, #0]
 801cc10:	4610      	mov	r0, r2
 801cc12:	b933      	cbnz	r3, 801cc22 <_free_r+0x2e>
 801cc14:	6063      	str	r3, [r4, #4]
 801cc16:	6014      	str	r4, [r2, #0]
 801cc18:	4628      	mov	r0, r5
 801cc1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cc1e:	f000 bdb6 	b.w	801d78e <__malloc_unlock>
 801cc22:	42a3      	cmp	r3, r4
 801cc24:	d90c      	bls.n	801cc40 <_free_r+0x4c>
 801cc26:	6821      	ldr	r1, [r4, #0]
 801cc28:	1862      	adds	r2, r4, r1
 801cc2a:	4293      	cmp	r3, r2
 801cc2c:	bf04      	itt	eq
 801cc2e:	681a      	ldreq	r2, [r3, #0]
 801cc30:	685b      	ldreq	r3, [r3, #4]
 801cc32:	6063      	str	r3, [r4, #4]
 801cc34:	bf04      	itt	eq
 801cc36:	1852      	addeq	r2, r2, r1
 801cc38:	6022      	streq	r2, [r4, #0]
 801cc3a:	6004      	str	r4, [r0, #0]
 801cc3c:	e7ec      	b.n	801cc18 <_free_r+0x24>
 801cc3e:	4613      	mov	r3, r2
 801cc40:	685a      	ldr	r2, [r3, #4]
 801cc42:	b10a      	cbz	r2, 801cc48 <_free_r+0x54>
 801cc44:	42a2      	cmp	r2, r4
 801cc46:	d9fa      	bls.n	801cc3e <_free_r+0x4a>
 801cc48:	6819      	ldr	r1, [r3, #0]
 801cc4a:	1858      	adds	r0, r3, r1
 801cc4c:	42a0      	cmp	r0, r4
 801cc4e:	d10b      	bne.n	801cc68 <_free_r+0x74>
 801cc50:	6820      	ldr	r0, [r4, #0]
 801cc52:	4401      	add	r1, r0
 801cc54:	1858      	adds	r0, r3, r1
 801cc56:	4282      	cmp	r2, r0
 801cc58:	6019      	str	r1, [r3, #0]
 801cc5a:	d1dd      	bne.n	801cc18 <_free_r+0x24>
 801cc5c:	6810      	ldr	r0, [r2, #0]
 801cc5e:	6852      	ldr	r2, [r2, #4]
 801cc60:	605a      	str	r2, [r3, #4]
 801cc62:	4401      	add	r1, r0
 801cc64:	6019      	str	r1, [r3, #0]
 801cc66:	e7d7      	b.n	801cc18 <_free_r+0x24>
 801cc68:	d902      	bls.n	801cc70 <_free_r+0x7c>
 801cc6a:	230c      	movs	r3, #12
 801cc6c:	602b      	str	r3, [r5, #0]
 801cc6e:	e7d3      	b.n	801cc18 <_free_r+0x24>
 801cc70:	6820      	ldr	r0, [r4, #0]
 801cc72:	1821      	adds	r1, r4, r0
 801cc74:	428a      	cmp	r2, r1
 801cc76:	bf04      	itt	eq
 801cc78:	6811      	ldreq	r1, [r2, #0]
 801cc7a:	6852      	ldreq	r2, [r2, #4]
 801cc7c:	6062      	str	r2, [r4, #4]
 801cc7e:	bf04      	itt	eq
 801cc80:	1809      	addeq	r1, r1, r0
 801cc82:	6021      	streq	r1, [r4, #0]
 801cc84:	605c      	str	r4, [r3, #4]
 801cc86:	e7c7      	b.n	801cc18 <_free_r+0x24>
 801cc88:	bd38      	pop	{r3, r4, r5, pc}
 801cc8a:	bf00      	nop
 801cc8c:	24000264 	.word	0x24000264

0801cc90 <_malloc_r>:
 801cc90:	b570      	push	{r4, r5, r6, lr}
 801cc92:	1ccd      	adds	r5, r1, #3
 801cc94:	f025 0503 	bic.w	r5, r5, #3
 801cc98:	3508      	adds	r5, #8
 801cc9a:	2d0c      	cmp	r5, #12
 801cc9c:	bf38      	it	cc
 801cc9e:	250c      	movcc	r5, #12
 801cca0:	2d00      	cmp	r5, #0
 801cca2:	4606      	mov	r6, r0
 801cca4:	db01      	blt.n	801ccaa <_malloc_r+0x1a>
 801cca6:	42a9      	cmp	r1, r5
 801cca8:	d903      	bls.n	801ccb2 <_malloc_r+0x22>
 801ccaa:	230c      	movs	r3, #12
 801ccac:	6033      	str	r3, [r6, #0]
 801ccae:	2000      	movs	r0, #0
 801ccb0:	bd70      	pop	{r4, r5, r6, pc}
 801ccb2:	f000 fd6b 	bl	801d78c <__malloc_lock>
 801ccb6:	4a21      	ldr	r2, [pc, #132]	; (801cd3c <_malloc_r+0xac>)
 801ccb8:	6814      	ldr	r4, [r2, #0]
 801ccba:	4621      	mov	r1, r4
 801ccbc:	b991      	cbnz	r1, 801cce4 <_malloc_r+0x54>
 801ccbe:	4c20      	ldr	r4, [pc, #128]	; (801cd40 <_malloc_r+0xb0>)
 801ccc0:	6823      	ldr	r3, [r4, #0]
 801ccc2:	b91b      	cbnz	r3, 801cccc <_malloc_r+0x3c>
 801ccc4:	4630      	mov	r0, r6
 801ccc6:	f000 fb05 	bl	801d2d4 <_sbrk_r>
 801ccca:	6020      	str	r0, [r4, #0]
 801cccc:	4629      	mov	r1, r5
 801ccce:	4630      	mov	r0, r6
 801ccd0:	f000 fb00 	bl	801d2d4 <_sbrk_r>
 801ccd4:	1c43      	adds	r3, r0, #1
 801ccd6:	d124      	bne.n	801cd22 <_malloc_r+0x92>
 801ccd8:	230c      	movs	r3, #12
 801ccda:	6033      	str	r3, [r6, #0]
 801ccdc:	4630      	mov	r0, r6
 801ccde:	f000 fd56 	bl	801d78e <__malloc_unlock>
 801cce2:	e7e4      	b.n	801ccae <_malloc_r+0x1e>
 801cce4:	680b      	ldr	r3, [r1, #0]
 801cce6:	1b5b      	subs	r3, r3, r5
 801cce8:	d418      	bmi.n	801cd1c <_malloc_r+0x8c>
 801ccea:	2b0b      	cmp	r3, #11
 801ccec:	d90f      	bls.n	801cd0e <_malloc_r+0x7e>
 801ccee:	600b      	str	r3, [r1, #0]
 801ccf0:	50cd      	str	r5, [r1, r3]
 801ccf2:	18cc      	adds	r4, r1, r3
 801ccf4:	4630      	mov	r0, r6
 801ccf6:	f000 fd4a 	bl	801d78e <__malloc_unlock>
 801ccfa:	f104 000b 	add.w	r0, r4, #11
 801ccfe:	1d23      	adds	r3, r4, #4
 801cd00:	f020 0007 	bic.w	r0, r0, #7
 801cd04:	1ac3      	subs	r3, r0, r3
 801cd06:	d0d3      	beq.n	801ccb0 <_malloc_r+0x20>
 801cd08:	425a      	negs	r2, r3
 801cd0a:	50e2      	str	r2, [r4, r3]
 801cd0c:	e7d0      	b.n	801ccb0 <_malloc_r+0x20>
 801cd0e:	428c      	cmp	r4, r1
 801cd10:	684b      	ldr	r3, [r1, #4]
 801cd12:	bf16      	itet	ne
 801cd14:	6063      	strne	r3, [r4, #4]
 801cd16:	6013      	streq	r3, [r2, #0]
 801cd18:	460c      	movne	r4, r1
 801cd1a:	e7eb      	b.n	801ccf4 <_malloc_r+0x64>
 801cd1c:	460c      	mov	r4, r1
 801cd1e:	6849      	ldr	r1, [r1, #4]
 801cd20:	e7cc      	b.n	801ccbc <_malloc_r+0x2c>
 801cd22:	1cc4      	adds	r4, r0, #3
 801cd24:	f024 0403 	bic.w	r4, r4, #3
 801cd28:	42a0      	cmp	r0, r4
 801cd2a:	d005      	beq.n	801cd38 <_malloc_r+0xa8>
 801cd2c:	1a21      	subs	r1, r4, r0
 801cd2e:	4630      	mov	r0, r6
 801cd30:	f000 fad0 	bl	801d2d4 <_sbrk_r>
 801cd34:	3001      	adds	r0, #1
 801cd36:	d0cf      	beq.n	801ccd8 <_malloc_r+0x48>
 801cd38:	6025      	str	r5, [r4, #0]
 801cd3a:	e7db      	b.n	801ccf4 <_malloc_r+0x64>
 801cd3c:	24000264 	.word	0x24000264
 801cd40:	24000268 	.word	0x24000268

0801cd44 <__sfputc_r>:
 801cd44:	6893      	ldr	r3, [r2, #8]
 801cd46:	3b01      	subs	r3, #1
 801cd48:	2b00      	cmp	r3, #0
 801cd4a:	b410      	push	{r4}
 801cd4c:	6093      	str	r3, [r2, #8]
 801cd4e:	da08      	bge.n	801cd62 <__sfputc_r+0x1e>
 801cd50:	6994      	ldr	r4, [r2, #24]
 801cd52:	42a3      	cmp	r3, r4
 801cd54:	db01      	blt.n	801cd5a <__sfputc_r+0x16>
 801cd56:	290a      	cmp	r1, #10
 801cd58:	d103      	bne.n	801cd62 <__sfputc_r+0x1e>
 801cd5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd5e:	f000 bb0d 	b.w	801d37c <__swbuf_r>
 801cd62:	6813      	ldr	r3, [r2, #0]
 801cd64:	1c58      	adds	r0, r3, #1
 801cd66:	6010      	str	r0, [r2, #0]
 801cd68:	7019      	strb	r1, [r3, #0]
 801cd6a:	4608      	mov	r0, r1
 801cd6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd70:	4770      	bx	lr

0801cd72 <__sfputs_r>:
 801cd72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd74:	4606      	mov	r6, r0
 801cd76:	460f      	mov	r7, r1
 801cd78:	4614      	mov	r4, r2
 801cd7a:	18d5      	adds	r5, r2, r3
 801cd7c:	42ac      	cmp	r4, r5
 801cd7e:	d101      	bne.n	801cd84 <__sfputs_r+0x12>
 801cd80:	2000      	movs	r0, #0
 801cd82:	e007      	b.n	801cd94 <__sfputs_r+0x22>
 801cd84:	463a      	mov	r2, r7
 801cd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd8a:	4630      	mov	r0, r6
 801cd8c:	f7ff ffda 	bl	801cd44 <__sfputc_r>
 801cd90:	1c43      	adds	r3, r0, #1
 801cd92:	d1f3      	bne.n	801cd7c <__sfputs_r+0xa>
 801cd94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cd98 <_vfiprintf_r>:
 801cd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd9c:	460c      	mov	r4, r1
 801cd9e:	b09d      	sub	sp, #116	; 0x74
 801cda0:	4617      	mov	r7, r2
 801cda2:	461d      	mov	r5, r3
 801cda4:	4606      	mov	r6, r0
 801cda6:	b118      	cbz	r0, 801cdb0 <_vfiprintf_r+0x18>
 801cda8:	6983      	ldr	r3, [r0, #24]
 801cdaa:	b90b      	cbnz	r3, 801cdb0 <_vfiprintf_r+0x18>
 801cdac:	f7ff fe90 	bl	801cad0 <__sinit>
 801cdb0:	4b7c      	ldr	r3, [pc, #496]	; (801cfa4 <_vfiprintf_r+0x20c>)
 801cdb2:	429c      	cmp	r4, r3
 801cdb4:	d158      	bne.n	801ce68 <_vfiprintf_r+0xd0>
 801cdb6:	6874      	ldr	r4, [r6, #4]
 801cdb8:	89a3      	ldrh	r3, [r4, #12]
 801cdba:	0718      	lsls	r0, r3, #28
 801cdbc:	d55e      	bpl.n	801ce7c <_vfiprintf_r+0xe4>
 801cdbe:	6923      	ldr	r3, [r4, #16]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d05b      	beq.n	801ce7c <_vfiprintf_r+0xe4>
 801cdc4:	2300      	movs	r3, #0
 801cdc6:	9309      	str	r3, [sp, #36]	; 0x24
 801cdc8:	2320      	movs	r3, #32
 801cdca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cdce:	2330      	movs	r3, #48	; 0x30
 801cdd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cdd4:	9503      	str	r5, [sp, #12]
 801cdd6:	f04f 0b01 	mov.w	fp, #1
 801cdda:	46b8      	mov	r8, r7
 801cddc:	4645      	mov	r5, r8
 801cdde:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cde2:	b10b      	cbz	r3, 801cde8 <_vfiprintf_r+0x50>
 801cde4:	2b25      	cmp	r3, #37	; 0x25
 801cde6:	d154      	bne.n	801ce92 <_vfiprintf_r+0xfa>
 801cde8:	ebb8 0a07 	subs.w	sl, r8, r7
 801cdec:	d00b      	beq.n	801ce06 <_vfiprintf_r+0x6e>
 801cdee:	4653      	mov	r3, sl
 801cdf0:	463a      	mov	r2, r7
 801cdf2:	4621      	mov	r1, r4
 801cdf4:	4630      	mov	r0, r6
 801cdf6:	f7ff ffbc 	bl	801cd72 <__sfputs_r>
 801cdfa:	3001      	adds	r0, #1
 801cdfc:	f000 80c2 	beq.w	801cf84 <_vfiprintf_r+0x1ec>
 801ce00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce02:	4453      	add	r3, sl
 801ce04:	9309      	str	r3, [sp, #36]	; 0x24
 801ce06:	f898 3000 	ldrb.w	r3, [r8]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	f000 80ba 	beq.w	801cf84 <_vfiprintf_r+0x1ec>
 801ce10:	2300      	movs	r3, #0
 801ce12:	f04f 32ff 	mov.w	r2, #4294967295
 801ce16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ce1a:	9304      	str	r3, [sp, #16]
 801ce1c:	9307      	str	r3, [sp, #28]
 801ce1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ce22:	931a      	str	r3, [sp, #104]	; 0x68
 801ce24:	46a8      	mov	r8, r5
 801ce26:	2205      	movs	r2, #5
 801ce28:	f818 1b01 	ldrb.w	r1, [r8], #1
 801ce2c:	485e      	ldr	r0, [pc, #376]	; (801cfa8 <_vfiprintf_r+0x210>)
 801ce2e:	f7e3 fa57 	bl	80002e0 <memchr>
 801ce32:	9b04      	ldr	r3, [sp, #16]
 801ce34:	bb78      	cbnz	r0, 801ce96 <_vfiprintf_r+0xfe>
 801ce36:	06d9      	lsls	r1, r3, #27
 801ce38:	bf44      	itt	mi
 801ce3a:	2220      	movmi	r2, #32
 801ce3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ce40:	071a      	lsls	r2, r3, #28
 801ce42:	bf44      	itt	mi
 801ce44:	222b      	movmi	r2, #43	; 0x2b
 801ce46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ce4a:	782a      	ldrb	r2, [r5, #0]
 801ce4c:	2a2a      	cmp	r2, #42	; 0x2a
 801ce4e:	d02a      	beq.n	801cea6 <_vfiprintf_r+0x10e>
 801ce50:	9a07      	ldr	r2, [sp, #28]
 801ce52:	46a8      	mov	r8, r5
 801ce54:	2000      	movs	r0, #0
 801ce56:	250a      	movs	r5, #10
 801ce58:	4641      	mov	r1, r8
 801ce5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce5e:	3b30      	subs	r3, #48	; 0x30
 801ce60:	2b09      	cmp	r3, #9
 801ce62:	d969      	bls.n	801cf38 <_vfiprintf_r+0x1a0>
 801ce64:	b360      	cbz	r0, 801cec0 <_vfiprintf_r+0x128>
 801ce66:	e024      	b.n	801ceb2 <_vfiprintf_r+0x11a>
 801ce68:	4b50      	ldr	r3, [pc, #320]	; (801cfac <_vfiprintf_r+0x214>)
 801ce6a:	429c      	cmp	r4, r3
 801ce6c:	d101      	bne.n	801ce72 <_vfiprintf_r+0xda>
 801ce6e:	68b4      	ldr	r4, [r6, #8]
 801ce70:	e7a2      	b.n	801cdb8 <_vfiprintf_r+0x20>
 801ce72:	4b4f      	ldr	r3, [pc, #316]	; (801cfb0 <_vfiprintf_r+0x218>)
 801ce74:	429c      	cmp	r4, r3
 801ce76:	bf08      	it	eq
 801ce78:	68f4      	ldreq	r4, [r6, #12]
 801ce7a:	e79d      	b.n	801cdb8 <_vfiprintf_r+0x20>
 801ce7c:	4621      	mov	r1, r4
 801ce7e:	4630      	mov	r0, r6
 801ce80:	f000 fae0 	bl	801d444 <__swsetup_r>
 801ce84:	2800      	cmp	r0, #0
 801ce86:	d09d      	beq.n	801cdc4 <_vfiprintf_r+0x2c>
 801ce88:	f04f 30ff 	mov.w	r0, #4294967295
 801ce8c:	b01d      	add	sp, #116	; 0x74
 801ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce92:	46a8      	mov	r8, r5
 801ce94:	e7a2      	b.n	801cddc <_vfiprintf_r+0x44>
 801ce96:	4a44      	ldr	r2, [pc, #272]	; (801cfa8 <_vfiprintf_r+0x210>)
 801ce98:	1a80      	subs	r0, r0, r2
 801ce9a:	fa0b f000 	lsl.w	r0, fp, r0
 801ce9e:	4318      	orrs	r0, r3
 801cea0:	9004      	str	r0, [sp, #16]
 801cea2:	4645      	mov	r5, r8
 801cea4:	e7be      	b.n	801ce24 <_vfiprintf_r+0x8c>
 801cea6:	9a03      	ldr	r2, [sp, #12]
 801cea8:	1d11      	adds	r1, r2, #4
 801ceaa:	6812      	ldr	r2, [r2, #0]
 801ceac:	9103      	str	r1, [sp, #12]
 801ceae:	2a00      	cmp	r2, #0
 801ceb0:	db01      	blt.n	801ceb6 <_vfiprintf_r+0x11e>
 801ceb2:	9207      	str	r2, [sp, #28]
 801ceb4:	e004      	b.n	801cec0 <_vfiprintf_r+0x128>
 801ceb6:	4252      	negs	r2, r2
 801ceb8:	f043 0302 	orr.w	r3, r3, #2
 801cebc:	9207      	str	r2, [sp, #28]
 801cebe:	9304      	str	r3, [sp, #16]
 801cec0:	f898 3000 	ldrb.w	r3, [r8]
 801cec4:	2b2e      	cmp	r3, #46	; 0x2e
 801cec6:	d10e      	bne.n	801cee6 <_vfiprintf_r+0x14e>
 801cec8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801cecc:	2b2a      	cmp	r3, #42	; 0x2a
 801cece:	d138      	bne.n	801cf42 <_vfiprintf_r+0x1aa>
 801ced0:	9b03      	ldr	r3, [sp, #12]
 801ced2:	1d1a      	adds	r2, r3, #4
 801ced4:	681b      	ldr	r3, [r3, #0]
 801ced6:	9203      	str	r2, [sp, #12]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	bfb8      	it	lt
 801cedc:	f04f 33ff 	movlt.w	r3, #4294967295
 801cee0:	f108 0802 	add.w	r8, r8, #2
 801cee4:	9305      	str	r3, [sp, #20]
 801cee6:	4d33      	ldr	r5, [pc, #204]	; (801cfb4 <_vfiprintf_r+0x21c>)
 801cee8:	f898 1000 	ldrb.w	r1, [r8]
 801ceec:	2203      	movs	r2, #3
 801ceee:	4628      	mov	r0, r5
 801cef0:	f7e3 f9f6 	bl	80002e0 <memchr>
 801cef4:	b140      	cbz	r0, 801cf08 <_vfiprintf_r+0x170>
 801cef6:	2340      	movs	r3, #64	; 0x40
 801cef8:	1b40      	subs	r0, r0, r5
 801cefa:	fa03 f000 	lsl.w	r0, r3, r0
 801cefe:	9b04      	ldr	r3, [sp, #16]
 801cf00:	4303      	orrs	r3, r0
 801cf02:	f108 0801 	add.w	r8, r8, #1
 801cf06:	9304      	str	r3, [sp, #16]
 801cf08:	f898 1000 	ldrb.w	r1, [r8]
 801cf0c:	482a      	ldr	r0, [pc, #168]	; (801cfb8 <_vfiprintf_r+0x220>)
 801cf0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cf12:	2206      	movs	r2, #6
 801cf14:	f108 0701 	add.w	r7, r8, #1
 801cf18:	f7e3 f9e2 	bl	80002e0 <memchr>
 801cf1c:	2800      	cmp	r0, #0
 801cf1e:	d037      	beq.n	801cf90 <_vfiprintf_r+0x1f8>
 801cf20:	4b26      	ldr	r3, [pc, #152]	; (801cfbc <_vfiprintf_r+0x224>)
 801cf22:	bb1b      	cbnz	r3, 801cf6c <_vfiprintf_r+0x1d4>
 801cf24:	9b03      	ldr	r3, [sp, #12]
 801cf26:	3307      	adds	r3, #7
 801cf28:	f023 0307 	bic.w	r3, r3, #7
 801cf2c:	3308      	adds	r3, #8
 801cf2e:	9303      	str	r3, [sp, #12]
 801cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cf32:	444b      	add	r3, r9
 801cf34:	9309      	str	r3, [sp, #36]	; 0x24
 801cf36:	e750      	b.n	801cdda <_vfiprintf_r+0x42>
 801cf38:	fb05 3202 	mla	r2, r5, r2, r3
 801cf3c:	2001      	movs	r0, #1
 801cf3e:	4688      	mov	r8, r1
 801cf40:	e78a      	b.n	801ce58 <_vfiprintf_r+0xc0>
 801cf42:	2300      	movs	r3, #0
 801cf44:	f108 0801 	add.w	r8, r8, #1
 801cf48:	9305      	str	r3, [sp, #20]
 801cf4a:	4619      	mov	r1, r3
 801cf4c:	250a      	movs	r5, #10
 801cf4e:	4640      	mov	r0, r8
 801cf50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf54:	3a30      	subs	r2, #48	; 0x30
 801cf56:	2a09      	cmp	r2, #9
 801cf58:	d903      	bls.n	801cf62 <_vfiprintf_r+0x1ca>
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d0c3      	beq.n	801cee6 <_vfiprintf_r+0x14e>
 801cf5e:	9105      	str	r1, [sp, #20]
 801cf60:	e7c1      	b.n	801cee6 <_vfiprintf_r+0x14e>
 801cf62:	fb05 2101 	mla	r1, r5, r1, r2
 801cf66:	2301      	movs	r3, #1
 801cf68:	4680      	mov	r8, r0
 801cf6a:	e7f0      	b.n	801cf4e <_vfiprintf_r+0x1b6>
 801cf6c:	ab03      	add	r3, sp, #12
 801cf6e:	9300      	str	r3, [sp, #0]
 801cf70:	4622      	mov	r2, r4
 801cf72:	4b13      	ldr	r3, [pc, #76]	; (801cfc0 <_vfiprintf_r+0x228>)
 801cf74:	a904      	add	r1, sp, #16
 801cf76:	4630      	mov	r0, r6
 801cf78:	f3af 8000 	nop.w
 801cf7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801cf80:	4681      	mov	r9, r0
 801cf82:	d1d5      	bne.n	801cf30 <_vfiprintf_r+0x198>
 801cf84:	89a3      	ldrh	r3, [r4, #12]
 801cf86:	065b      	lsls	r3, r3, #25
 801cf88:	f53f af7e 	bmi.w	801ce88 <_vfiprintf_r+0xf0>
 801cf8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cf8e:	e77d      	b.n	801ce8c <_vfiprintf_r+0xf4>
 801cf90:	ab03      	add	r3, sp, #12
 801cf92:	9300      	str	r3, [sp, #0]
 801cf94:	4622      	mov	r2, r4
 801cf96:	4b0a      	ldr	r3, [pc, #40]	; (801cfc0 <_vfiprintf_r+0x228>)
 801cf98:	a904      	add	r1, sp, #16
 801cf9a:	4630      	mov	r0, r6
 801cf9c:	f000 f888 	bl	801d0b0 <_printf_i>
 801cfa0:	e7ec      	b.n	801cf7c <_vfiprintf_r+0x1e4>
 801cfa2:	bf00      	nop
 801cfa4:	08020e30 	.word	0x08020e30
 801cfa8:	08020e70 	.word	0x08020e70
 801cfac:	08020e50 	.word	0x08020e50
 801cfb0:	08020e10 	.word	0x08020e10
 801cfb4:	08020e76 	.word	0x08020e76
 801cfb8:	08020e7a 	.word	0x08020e7a
 801cfbc:	00000000 	.word	0x00000000
 801cfc0:	0801cd73 	.word	0x0801cd73

0801cfc4 <_printf_common>:
 801cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc8:	4691      	mov	r9, r2
 801cfca:	461f      	mov	r7, r3
 801cfcc:	688a      	ldr	r2, [r1, #8]
 801cfce:	690b      	ldr	r3, [r1, #16]
 801cfd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cfd4:	4293      	cmp	r3, r2
 801cfd6:	bfb8      	it	lt
 801cfd8:	4613      	movlt	r3, r2
 801cfda:	f8c9 3000 	str.w	r3, [r9]
 801cfde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cfe2:	4606      	mov	r6, r0
 801cfe4:	460c      	mov	r4, r1
 801cfe6:	b112      	cbz	r2, 801cfee <_printf_common+0x2a>
 801cfe8:	3301      	adds	r3, #1
 801cfea:	f8c9 3000 	str.w	r3, [r9]
 801cfee:	6823      	ldr	r3, [r4, #0]
 801cff0:	0699      	lsls	r1, r3, #26
 801cff2:	bf42      	ittt	mi
 801cff4:	f8d9 3000 	ldrmi.w	r3, [r9]
 801cff8:	3302      	addmi	r3, #2
 801cffa:	f8c9 3000 	strmi.w	r3, [r9]
 801cffe:	6825      	ldr	r5, [r4, #0]
 801d000:	f015 0506 	ands.w	r5, r5, #6
 801d004:	d107      	bne.n	801d016 <_printf_common+0x52>
 801d006:	f104 0a19 	add.w	sl, r4, #25
 801d00a:	68e3      	ldr	r3, [r4, #12]
 801d00c:	f8d9 2000 	ldr.w	r2, [r9]
 801d010:	1a9b      	subs	r3, r3, r2
 801d012:	42ab      	cmp	r3, r5
 801d014:	dc28      	bgt.n	801d068 <_printf_common+0xa4>
 801d016:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d01a:	6822      	ldr	r2, [r4, #0]
 801d01c:	3300      	adds	r3, #0
 801d01e:	bf18      	it	ne
 801d020:	2301      	movne	r3, #1
 801d022:	0692      	lsls	r2, r2, #26
 801d024:	d42d      	bmi.n	801d082 <_printf_common+0xbe>
 801d026:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d02a:	4639      	mov	r1, r7
 801d02c:	4630      	mov	r0, r6
 801d02e:	47c0      	blx	r8
 801d030:	3001      	adds	r0, #1
 801d032:	d020      	beq.n	801d076 <_printf_common+0xb2>
 801d034:	6823      	ldr	r3, [r4, #0]
 801d036:	68e5      	ldr	r5, [r4, #12]
 801d038:	f8d9 2000 	ldr.w	r2, [r9]
 801d03c:	f003 0306 	and.w	r3, r3, #6
 801d040:	2b04      	cmp	r3, #4
 801d042:	bf08      	it	eq
 801d044:	1aad      	subeq	r5, r5, r2
 801d046:	68a3      	ldr	r3, [r4, #8]
 801d048:	6922      	ldr	r2, [r4, #16]
 801d04a:	bf0c      	ite	eq
 801d04c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d050:	2500      	movne	r5, #0
 801d052:	4293      	cmp	r3, r2
 801d054:	bfc4      	itt	gt
 801d056:	1a9b      	subgt	r3, r3, r2
 801d058:	18ed      	addgt	r5, r5, r3
 801d05a:	f04f 0900 	mov.w	r9, #0
 801d05e:	341a      	adds	r4, #26
 801d060:	454d      	cmp	r5, r9
 801d062:	d11a      	bne.n	801d09a <_printf_common+0xd6>
 801d064:	2000      	movs	r0, #0
 801d066:	e008      	b.n	801d07a <_printf_common+0xb6>
 801d068:	2301      	movs	r3, #1
 801d06a:	4652      	mov	r2, sl
 801d06c:	4639      	mov	r1, r7
 801d06e:	4630      	mov	r0, r6
 801d070:	47c0      	blx	r8
 801d072:	3001      	adds	r0, #1
 801d074:	d103      	bne.n	801d07e <_printf_common+0xba>
 801d076:	f04f 30ff 	mov.w	r0, #4294967295
 801d07a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d07e:	3501      	adds	r5, #1
 801d080:	e7c3      	b.n	801d00a <_printf_common+0x46>
 801d082:	18e1      	adds	r1, r4, r3
 801d084:	1c5a      	adds	r2, r3, #1
 801d086:	2030      	movs	r0, #48	; 0x30
 801d088:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d08c:	4422      	add	r2, r4
 801d08e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d092:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d096:	3302      	adds	r3, #2
 801d098:	e7c5      	b.n	801d026 <_printf_common+0x62>
 801d09a:	2301      	movs	r3, #1
 801d09c:	4622      	mov	r2, r4
 801d09e:	4639      	mov	r1, r7
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	47c0      	blx	r8
 801d0a4:	3001      	adds	r0, #1
 801d0a6:	d0e6      	beq.n	801d076 <_printf_common+0xb2>
 801d0a8:	f109 0901 	add.w	r9, r9, #1
 801d0ac:	e7d8      	b.n	801d060 <_printf_common+0x9c>
	...

0801d0b0 <_printf_i>:
 801d0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d0b8:	460c      	mov	r4, r1
 801d0ba:	7e09      	ldrb	r1, [r1, #24]
 801d0bc:	b085      	sub	sp, #20
 801d0be:	296e      	cmp	r1, #110	; 0x6e
 801d0c0:	4617      	mov	r7, r2
 801d0c2:	4606      	mov	r6, r0
 801d0c4:	4698      	mov	r8, r3
 801d0c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d0c8:	f000 80b3 	beq.w	801d232 <_printf_i+0x182>
 801d0cc:	d822      	bhi.n	801d114 <_printf_i+0x64>
 801d0ce:	2963      	cmp	r1, #99	; 0x63
 801d0d0:	d036      	beq.n	801d140 <_printf_i+0x90>
 801d0d2:	d80a      	bhi.n	801d0ea <_printf_i+0x3a>
 801d0d4:	2900      	cmp	r1, #0
 801d0d6:	f000 80b9 	beq.w	801d24c <_printf_i+0x19c>
 801d0da:	2958      	cmp	r1, #88	; 0x58
 801d0dc:	f000 8083 	beq.w	801d1e6 <_printf_i+0x136>
 801d0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d0e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d0e8:	e032      	b.n	801d150 <_printf_i+0xa0>
 801d0ea:	2964      	cmp	r1, #100	; 0x64
 801d0ec:	d001      	beq.n	801d0f2 <_printf_i+0x42>
 801d0ee:	2969      	cmp	r1, #105	; 0x69
 801d0f0:	d1f6      	bne.n	801d0e0 <_printf_i+0x30>
 801d0f2:	6820      	ldr	r0, [r4, #0]
 801d0f4:	6813      	ldr	r3, [r2, #0]
 801d0f6:	0605      	lsls	r5, r0, #24
 801d0f8:	f103 0104 	add.w	r1, r3, #4
 801d0fc:	d52a      	bpl.n	801d154 <_printf_i+0xa4>
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	6011      	str	r1, [r2, #0]
 801d102:	2b00      	cmp	r3, #0
 801d104:	da03      	bge.n	801d10e <_printf_i+0x5e>
 801d106:	222d      	movs	r2, #45	; 0x2d
 801d108:	425b      	negs	r3, r3
 801d10a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d10e:	486f      	ldr	r0, [pc, #444]	; (801d2cc <_printf_i+0x21c>)
 801d110:	220a      	movs	r2, #10
 801d112:	e039      	b.n	801d188 <_printf_i+0xd8>
 801d114:	2973      	cmp	r1, #115	; 0x73
 801d116:	f000 809d 	beq.w	801d254 <_printf_i+0x1a4>
 801d11a:	d808      	bhi.n	801d12e <_printf_i+0x7e>
 801d11c:	296f      	cmp	r1, #111	; 0x6f
 801d11e:	d020      	beq.n	801d162 <_printf_i+0xb2>
 801d120:	2970      	cmp	r1, #112	; 0x70
 801d122:	d1dd      	bne.n	801d0e0 <_printf_i+0x30>
 801d124:	6823      	ldr	r3, [r4, #0]
 801d126:	f043 0320 	orr.w	r3, r3, #32
 801d12a:	6023      	str	r3, [r4, #0]
 801d12c:	e003      	b.n	801d136 <_printf_i+0x86>
 801d12e:	2975      	cmp	r1, #117	; 0x75
 801d130:	d017      	beq.n	801d162 <_printf_i+0xb2>
 801d132:	2978      	cmp	r1, #120	; 0x78
 801d134:	d1d4      	bne.n	801d0e0 <_printf_i+0x30>
 801d136:	2378      	movs	r3, #120	; 0x78
 801d138:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d13c:	4864      	ldr	r0, [pc, #400]	; (801d2d0 <_printf_i+0x220>)
 801d13e:	e055      	b.n	801d1ec <_printf_i+0x13c>
 801d140:	6813      	ldr	r3, [r2, #0]
 801d142:	1d19      	adds	r1, r3, #4
 801d144:	681b      	ldr	r3, [r3, #0]
 801d146:	6011      	str	r1, [r2, #0]
 801d148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d150:	2301      	movs	r3, #1
 801d152:	e08c      	b.n	801d26e <_printf_i+0x1be>
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	6011      	str	r1, [r2, #0]
 801d158:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d15c:	bf18      	it	ne
 801d15e:	b21b      	sxthne	r3, r3
 801d160:	e7cf      	b.n	801d102 <_printf_i+0x52>
 801d162:	6813      	ldr	r3, [r2, #0]
 801d164:	6825      	ldr	r5, [r4, #0]
 801d166:	1d18      	adds	r0, r3, #4
 801d168:	6010      	str	r0, [r2, #0]
 801d16a:	0628      	lsls	r0, r5, #24
 801d16c:	d501      	bpl.n	801d172 <_printf_i+0xc2>
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	e002      	b.n	801d178 <_printf_i+0xc8>
 801d172:	0668      	lsls	r0, r5, #25
 801d174:	d5fb      	bpl.n	801d16e <_printf_i+0xbe>
 801d176:	881b      	ldrh	r3, [r3, #0]
 801d178:	4854      	ldr	r0, [pc, #336]	; (801d2cc <_printf_i+0x21c>)
 801d17a:	296f      	cmp	r1, #111	; 0x6f
 801d17c:	bf14      	ite	ne
 801d17e:	220a      	movne	r2, #10
 801d180:	2208      	moveq	r2, #8
 801d182:	2100      	movs	r1, #0
 801d184:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d188:	6865      	ldr	r5, [r4, #4]
 801d18a:	60a5      	str	r5, [r4, #8]
 801d18c:	2d00      	cmp	r5, #0
 801d18e:	f2c0 8095 	blt.w	801d2bc <_printf_i+0x20c>
 801d192:	6821      	ldr	r1, [r4, #0]
 801d194:	f021 0104 	bic.w	r1, r1, #4
 801d198:	6021      	str	r1, [r4, #0]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d13d      	bne.n	801d21a <_printf_i+0x16a>
 801d19e:	2d00      	cmp	r5, #0
 801d1a0:	f040 808e 	bne.w	801d2c0 <_printf_i+0x210>
 801d1a4:	4665      	mov	r5, ip
 801d1a6:	2a08      	cmp	r2, #8
 801d1a8:	d10b      	bne.n	801d1c2 <_printf_i+0x112>
 801d1aa:	6823      	ldr	r3, [r4, #0]
 801d1ac:	07db      	lsls	r3, r3, #31
 801d1ae:	d508      	bpl.n	801d1c2 <_printf_i+0x112>
 801d1b0:	6923      	ldr	r3, [r4, #16]
 801d1b2:	6862      	ldr	r2, [r4, #4]
 801d1b4:	429a      	cmp	r2, r3
 801d1b6:	bfde      	ittt	le
 801d1b8:	2330      	movle	r3, #48	; 0x30
 801d1ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d1be:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d1c2:	ebac 0305 	sub.w	r3, ip, r5
 801d1c6:	6123      	str	r3, [r4, #16]
 801d1c8:	f8cd 8000 	str.w	r8, [sp]
 801d1cc:	463b      	mov	r3, r7
 801d1ce:	aa03      	add	r2, sp, #12
 801d1d0:	4621      	mov	r1, r4
 801d1d2:	4630      	mov	r0, r6
 801d1d4:	f7ff fef6 	bl	801cfc4 <_printf_common>
 801d1d8:	3001      	adds	r0, #1
 801d1da:	d14d      	bne.n	801d278 <_printf_i+0x1c8>
 801d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d1e0:	b005      	add	sp, #20
 801d1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d1e6:	4839      	ldr	r0, [pc, #228]	; (801d2cc <_printf_i+0x21c>)
 801d1e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d1ec:	6813      	ldr	r3, [r2, #0]
 801d1ee:	6821      	ldr	r1, [r4, #0]
 801d1f0:	1d1d      	adds	r5, r3, #4
 801d1f2:	681b      	ldr	r3, [r3, #0]
 801d1f4:	6015      	str	r5, [r2, #0]
 801d1f6:	060a      	lsls	r2, r1, #24
 801d1f8:	d50b      	bpl.n	801d212 <_printf_i+0x162>
 801d1fa:	07ca      	lsls	r2, r1, #31
 801d1fc:	bf44      	itt	mi
 801d1fe:	f041 0120 	orrmi.w	r1, r1, #32
 801d202:	6021      	strmi	r1, [r4, #0]
 801d204:	b91b      	cbnz	r3, 801d20e <_printf_i+0x15e>
 801d206:	6822      	ldr	r2, [r4, #0]
 801d208:	f022 0220 	bic.w	r2, r2, #32
 801d20c:	6022      	str	r2, [r4, #0]
 801d20e:	2210      	movs	r2, #16
 801d210:	e7b7      	b.n	801d182 <_printf_i+0xd2>
 801d212:	064d      	lsls	r5, r1, #25
 801d214:	bf48      	it	mi
 801d216:	b29b      	uxthmi	r3, r3
 801d218:	e7ef      	b.n	801d1fa <_printf_i+0x14a>
 801d21a:	4665      	mov	r5, ip
 801d21c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d220:	fb02 3311 	mls	r3, r2, r1, r3
 801d224:	5cc3      	ldrb	r3, [r0, r3]
 801d226:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d22a:	460b      	mov	r3, r1
 801d22c:	2900      	cmp	r1, #0
 801d22e:	d1f5      	bne.n	801d21c <_printf_i+0x16c>
 801d230:	e7b9      	b.n	801d1a6 <_printf_i+0xf6>
 801d232:	6813      	ldr	r3, [r2, #0]
 801d234:	6825      	ldr	r5, [r4, #0]
 801d236:	6961      	ldr	r1, [r4, #20]
 801d238:	1d18      	adds	r0, r3, #4
 801d23a:	6010      	str	r0, [r2, #0]
 801d23c:	0628      	lsls	r0, r5, #24
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	d501      	bpl.n	801d246 <_printf_i+0x196>
 801d242:	6019      	str	r1, [r3, #0]
 801d244:	e002      	b.n	801d24c <_printf_i+0x19c>
 801d246:	066a      	lsls	r2, r5, #25
 801d248:	d5fb      	bpl.n	801d242 <_printf_i+0x192>
 801d24a:	8019      	strh	r1, [r3, #0]
 801d24c:	2300      	movs	r3, #0
 801d24e:	6123      	str	r3, [r4, #16]
 801d250:	4665      	mov	r5, ip
 801d252:	e7b9      	b.n	801d1c8 <_printf_i+0x118>
 801d254:	6813      	ldr	r3, [r2, #0]
 801d256:	1d19      	adds	r1, r3, #4
 801d258:	6011      	str	r1, [r2, #0]
 801d25a:	681d      	ldr	r5, [r3, #0]
 801d25c:	6862      	ldr	r2, [r4, #4]
 801d25e:	2100      	movs	r1, #0
 801d260:	4628      	mov	r0, r5
 801d262:	f7e3 f83d 	bl	80002e0 <memchr>
 801d266:	b108      	cbz	r0, 801d26c <_printf_i+0x1bc>
 801d268:	1b40      	subs	r0, r0, r5
 801d26a:	6060      	str	r0, [r4, #4]
 801d26c:	6863      	ldr	r3, [r4, #4]
 801d26e:	6123      	str	r3, [r4, #16]
 801d270:	2300      	movs	r3, #0
 801d272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d276:	e7a7      	b.n	801d1c8 <_printf_i+0x118>
 801d278:	6923      	ldr	r3, [r4, #16]
 801d27a:	462a      	mov	r2, r5
 801d27c:	4639      	mov	r1, r7
 801d27e:	4630      	mov	r0, r6
 801d280:	47c0      	blx	r8
 801d282:	3001      	adds	r0, #1
 801d284:	d0aa      	beq.n	801d1dc <_printf_i+0x12c>
 801d286:	6823      	ldr	r3, [r4, #0]
 801d288:	079b      	lsls	r3, r3, #30
 801d28a:	d413      	bmi.n	801d2b4 <_printf_i+0x204>
 801d28c:	68e0      	ldr	r0, [r4, #12]
 801d28e:	9b03      	ldr	r3, [sp, #12]
 801d290:	4298      	cmp	r0, r3
 801d292:	bfb8      	it	lt
 801d294:	4618      	movlt	r0, r3
 801d296:	e7a3      	b.n	801d1e0 <_printf_i+0x130>
 801d298:	2301      	movs	r3, #1
 801d29a:	464a      	mov	r2, r9
 801d29c:	4639      	mov	r1, r7
 801d29e:	4630      	mov	r0, r6
 801d2a0:	47c0      	blx	r8
 801d2a2:	3001      	adds	r0, #1
 801d2a4:	d09a      	beq.n	801d1dc <_printf_i+0x12c>
 801d2a6:	3501      	adds	r5, #1
 801d2a8:	68e3      	ldr	r3, [r4, #12]
 801d2aa:	9a03      	ldr	r2, [sp, #12]
 801d2ac:	1a9b      	subs	r3, r3, r2
 801d2ae:	42ab      	cmp	r3, r5
 801d2b0:	dcf2      	bgt.n	801d298 <_printf_i+0x1e8>
 801d2b2:	e7eb      	b.n	801d28c <_printf_i+0x1dc>
 801d2b4:	2500      	movs	r5, #0
 801d2b6:	f104 0919 	add.w	r9, r4, #25
 801d2ba:	e7f5      	b.n	801d2a8 <_printf_i+0x1f8>
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d1ac      	bne.n	801d21a <_printf_i+0x16a>
 801d2c0:	7803      	ldrb	r3, [r0, #0]
 801d2c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d2c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d2ca:	e76c      	b.n	801d1a6 <_printf_i+0xf6>
 801d2cc:	08020e81 	.word	0x08020e81
 801d2d0:	08020e92 	.word	0x08020e92

0801d2d4 <_sbrk_r>:
 801d2d4:	b538      	push	{r3, r4, r5, lr}
 801d2d6:	4c06      	ldr	r4, [pc, #24]	; (801d2f0 <_sbrk_r+0x1c>)
 801d2d8:	2300      	movs	r3, #0
 801d2da:	4605      	mov	r5, r0
 801d2dc:	4608      	mov	r0, r1
 801d2de:	6023      	str	r3, [r4, #0]
 801d2e0:	f7e4 f8ce 	bl	8001480 <_sbrk>
 801d2e4:	1c43      	adds	r3, r0, #1
 801d2e6:	d102      	bne.n	801d2ee <_sbrk_r+0x1a>
 801d2e8:	6823      	ldr	r3, [r4, #0]
 801d2ea:	b103      	cbz	r3, 801d2ee <_sbrk_r+0x1a>
 801d2ec:	602b      	str	r3, [r5, #0]
 801d2ee:	bd38      	pop	{r3, r4, r5, pc}
 801d2f0:	240076a0 	.word	0x240076a0

0801d2f4 <__sread>:
 801d2f4:	b510      	push	{r4, lr}
 801d2f6:	460c      	mov	r4, r1
 801d2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2fc:	f000 fa48 	bl	801d790 <_read_r>
 801d300:	2800      	cmp	r0, #0
 801d302:	bfab      	itete	ge
 801d304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d306:	89a3      	ldrhlt	r3, [r4, #12]
 801d308:	181b      	addge	r3, r3, r0
 801d30a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d30e:	bfac      	ite	ge
 801d310:	6563      	strge	r3, [r4, #84]	; 0x54
 801d312:	81a3      	strhlt	r3, [r4, #12]
 801d314:	bd10      	pop	{r4, pc}

0801d316 <__swrite>:
 801d316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d31a:	461f      	mov	r7, r3
 801d31c:	898b      	ldrh	r3, [r1, #12]
 801d31e:	05db      	lsls	r3, r3, #23
 801d320:	4605      	mov	r5, r0
 801d322:	460c      	mov	r4, r1
 801d324:	4616      	mov	r6, r2
 801d326:	d505      	bpl.n	801d334 <__swrite+0x1e>
 801d328:	2302      	movs	r3, #2
 801d32a:	2200      	movs	r2, #0
 801d32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d330:	f000 f9b6 	bl	801d6a0 <_lseek_r>
 801d334:	89a3      	ldrh	r3, [r4, #12]
 801d336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d33a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d33e:	81a3      	strh	r3, [r4, #12]
 801d340:	4632      	mov	r2, r6
 801d342:	463b      	mov	r3, r7
 801d344:	4628      	mov	r0, r5
 801d346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d34a:	f000 b869 	b.w	801d420 <_write_r>

0801d34e <__sseek>:
 801d34e:	b510      	push	{r4, lr}
 801d350:	460c      	mov	r4, r1
 801d352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d356:	f000 f9a3 	bl	801d6a0 <_lseek_r>
 801d35a:	1c43      	adds	r3, r0, #1
 801d35c:	89a3      	ldrh	r3, [r4, #12]
 801d35e:	bf15      	itete	ne
 801d360:	6560      	strne	r0, [r4, #84]	; 0x54
 801d362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d36a:	81a3      	strheq	r3, [r4, #12]
 801d36c:	bf18      	it	ne
 801d36e:	81a3      	strhne	r3, [r4, #12]
 801d370:	bd10      	pop	{r4, pc}

0801d372 <__sclose>:
 801d372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d376:	f000 b8d3 	b.w	801d520 <_close_r>
	...

0801d37c <__swbuf_r>:
 801d37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d37e:	460e      	mov	r6, r1
 801d380:	4614      	mov	r4, r2
 801d382:	4605      	mov	r5, r0
 801d384:	b118      	cbz	r0, 801d38e <__swbuf_r+0x12>
 801d386:	6983      	ldr	r3, [r0, #24]
 801d388:	b90b      	cbnz	r3, 801d38e <__swbuf_r+0x12>
 801d38a:	f7ff fba1 	bl	801cad0 <__sinit>
 801d38e:	4b21      	ldr	r3, [pc, #132]	; (801d414 <__swbuf_r+0x98>)
 801d390:	429c      	cmp	r4, r3
 801d392:	d12a      	bne.n	801d3ea <__swbuf_r+0x6e>
 801d394:	686c      	ldr	r4, [r5, #4]
 801d396:	69a3      	ldr	r3, [r4, #24]
 801d398:	60a3      	str	r3, [r4, #8]
 801d39a:	89a3      	ldrh	r3, [r4, #12]
 801d39c:	071a      	lsls	r2, r3, #28
 801d39e:	d52e      	bpl.n	801d3fe <__swbuf_r+0x82>
 801d3a0:	6923      	ldr	r3, [r4, #16]
 801d3a2:	b363      	cbz	r3, 801d3fe <__swbuf_r+0x82>
 801d3a4:	6923      	ldr	r3, [r4, #16]
 801d3a6:	6820      	ldr	r0, [r4, #0]
 801d3a8:	1ac0      	subs	r0, r0, r3
 801d3aa:	6963      	ldr	r3, [r4, #20]
 801d3ac:	b2f6      	uxtb	r6, r6
 801d3ae:	4283      	cmp	r3, r0
 801d3b0:	4637      	mov	r7, r6
 801d3b2:	dc04      	bgt.n	801d3be <__swbuf_r+0x42>
 801d3b4:	4621      	mov	r1, r4
 801d3b6:	4628      	mov	r0, r5
 801d3b8:	f000 f948 	bl	801d64c <_fflush_r>
 801d3bc:	bb28      	cbnz	r0, 801d40a <__swbuf_r+0x8e>
 801d3be:	68a3      	ldr	r3, [r4, #8]
 801d3c0:	3b01      	subs	r3, #1
 801d3c2:	60a3      	str	r3, [r4, #8]
 801d3c4:	6823      	ldr	r3, [r4, #0]
 801d3c6:	1c5a      	adds	r2, r3, #1
 801d3c8:	6022      	str	r2, [r4, #0]
 801d3ca:	701e      	strb	r6, [r3, #0]
 801d3cc:	6963      	ldr	r3, [r4, #20]
 801d3ce:	3001      	adds	r0, #1
 801d3d0:	4283      	cmp	r3, r0
 801d3d2:	d004      	beq.n	801d3de <__swbuf_r+0x62>
 801d3d4:	89a3      	ldrh	r3, [r4, #12]
 801d3d6:	07db      	lsls	r3, r3, #31
 801d3d8:	d519      	bpl.n	801d40e <__swbuf_r+0x92>
 801d3da:	2e0a      	cmp	r6, #10
 801d3dc:	d117      	bne.n	801d40e <__swbuf_r+0x92>
 801d3de:	4621      	mov	r1, r4
 801d3e0:	4628      	mov	r0, r5
 801d3e2:	f000 f933 	bl	801d64c <_fflush_r>
 801d3e6:	b190      	cbz	r0, 801d40e <__swbuf_r+0x92>
 801d3e8:	e00f      	b.n	801d40a <__swbuf_r+0x8e>
 801d3ea:	4b0b      	ldr	r3, [pc, #44]	; (801d418 <__swbuf_r+0x9c>)
 801d3ec:	429c      	cmp	r4, r3
 801d3ee:	d101      	bne.n	801d3f4 <__swbuf_r+0x78>
 801d3f0:	68ac      	ldr	r4, [r5, #8]
 801d3f2:	e7d0      	b.n	801d396 <__swbuf_r+0x1a>
 801d3f4:	4b09      	ldr	r3, [pc, #36]	; (801d41c <__swbuf_r+0xa0>)
 801d3f6:	429c      	cmp	r4, r3
 801d3f8:	bf08      	it	eq
 801d3fa:	68ec      	ldreq	r4, [r5, #12]
 801d3fc:	e7cb      	b.n	801d396 <__swbuf_r+0x1a>
 801d3fe:	4621      	mov	r1, r4
 801d400:	4628      	mov	r0, r5
 801d402:	f000 f81f 	bl	801d444 <__swsetup_r>
 801d406:	2800      	cmp	r0, #0
 801d408:	d0cc      	beq.n	801d3a4 <__swbuf_r+0x28>
 801d40a:	f04f 37ff 	mov.w	r7, #4294967295
 801d40e:	4638      	mov	r0, r7
 801d410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d412:	bf00      	nop
 801d414:	08020e30 	.word	0x08020e30
 801d418:	08020e50 	.word	0x08020e50
 801d41c:	08020e10 	.word	0x08020e10

0801d420 <_write_r>:
 801d420:	b538      	push	{r3, r4, r5, lr}
 801d422:	4c07      	ldr	r4, [pc, #28]	; (801d440 <_write_r+0x20>)
 801d424:	4605      	mov	r5, r0
 801d426:	4608      	mov	r0, r1
 801d428:	4611      	mov	r1, r2
 801d42a:	2200      	movs	r2, #0
 801d42c:	6022      	str	r2, [r4, #0]
 801d42e:	461a      	mov	r2, r3
 801d430:	f7e3 ffd5 	bl	80013de <_write>
 801d434:	1c43      	adds	r3, r0, #1
 801d436:	d102      	bne.n	801d43e <_write_r+0x1e>
 801d438:	6823      	ldr	r3, [r4, #0]
 801d43a:	b103      	cbz	r3, 801d43e <_write_r+0x1e>
 801d43c:	602b      	str	r3, [r5, #0]
 801d43e:	bd38      	pop	{r3, r4, r5, pc}
 801d440:	240076a0 	.word	0x240076a0

0801d444 <__swsetup_r>:
 801d444:	4b32      	ldr	r3, [pc, #200]	; (801d510 <__swsetup_r+0xcc>)
 801d446:	b570      	push	{r4, r5, r6, lr}
 801d448:	681d      	ldr	r5, [r3, #0]
 801d44a:	4606      	mov	r6, r0
 801d44c:	460c      	mov	r4, r1
 801d44e:	b125      	cbz	r5, 801d45a <__swsetup_r+0x16>
 801d450:	69ab      	ldr	r3, [r5, #24]
 801d452:	b913      	cbnz	r3, 801d45a <__swsetup_r+0x16>
 801d454:	4628      	mov	r0, r5
 801d456:	f7ff fb3b 	bl	801cad0 <__sinit>
 801d45a:	4b2e      	ldr	r3, [pc, #184]	; (801d514 <__swsetup_r+0xd0>)
 801d45c:	429c      	cmp	r4, r3
 801d45e:	d10f      	bne.n	801d480 <__swsetup_r+0x3c>
 801d460:	686c      	ldr	r4, [r5, #4]
 801d462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d466:	b29a      	uxth	r2, r3
 801d468:	0715      	lsls	r5, r2, #28
 801d46a:	d42c      	bmi.n	801d4c6 <__swsetup_r+0x82>
 801d46c:	06d0      	lsls	r0, r2, #27
 801d46e:	d411      	bmi.n	801d494 <__swsetup_r+0x50>
 801d470:	2209      	movs	r2, #9
 801d472:	6032      	str	r2, [r6, #0]
 801d474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d478:	81a3      	strh	r3, [r4, #12]
 801d47a:	f04f 30ff 	mov.w	r0, #4294967295
 801d47e:	e03e      	b.n	801d4fe <__swsetup_r+0xba>
 801d480:	4b25      	ldr	r3, [pc, #148]	; (801d518 <__swsetup_r+0xd4>)
 801d482:	429c      	cmp	r4, r3
 801d484:	d101      	bne.n	801d48a <__swsetup_r+0x46>
 801d486:	68ac      	ldr	r4, [r5, #8]
 801d488:	e7eb      	b.n	801d462 <__swsetup_r+0x1e>
 801d48a:	4b24      	ldr	r3, [pc, #144]	; (801d51c <__swsetup_r+0xd8>)
 801d48c:	429c      	cmp	r4, r3
 801d48e:	bf08      	it	eq
 801d490:	68ec      	ldreq	r4, [r5, #12]
 801d492:	e7e6      	b.n	801d462 <__swsetup_r+0x1e>
 801d494:	0751      	lsls	r1, r2, #29
 801d496:	d512      	bpl.n	801d4be <__swsetup_r+0x7a>
 801d498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d49a:	b141      	cbz	r1, 801d4ae <__swsetup_r+0x6a>
 801d49c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4a0:	4299      	cmp	r1, r3
 801d4a2:	d002      	beq.n	801d4aa <__swsetup_r+0x66>
 801d4a4:	4630      	mov	r0, r6
 801d4a6:	f7ff fba5 	bl	801cbf4 <_free_r>
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	6363      	str	r3, [r4, #52]	; 0x34
 801d4ae:	89a3      	ldrh	r3, [r4, #12]
 801d4b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d4b4:	81a3      	strh	r3, [r4, #12]
 801d4b6:	2300      	movs	r3, #0
 801d4b8:	6063      	str	r3, [r4, #4]
 801d4ba:	6923      	ldr	r3, [r4, #16]
 801d4bc:	6023      	str	r3, [r4, #0]
 801d4be:	89a3      	ldrh	r3, [r4, #12]
 801d4c0:	f043 0308 	orr.w	r3, r3, #8
 801d4c4:	81a3      	strh	r3, [r4, #12]
 801d4c6:	6923      	ldr	r3, [r4, #16]
 801d4c8:	b94b      	cbnz	r3, 801d4de <__swsetup_r+0x9a>
 801d4ca:	89a3      	ldrh	r3, [r4, #12]
 801d4cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d4d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d4d4:	d003      	beq.n	801d4de <__swsetup_r+0x9a>
 801d4d6:	4621      	mov	r1, r4
 801d4d8:	4630      	mov	r0, r6
 801d4da:	f000 f917 	bl	801d70c <__smakebuf_r>
 801d4de:	89a2      	ldrh	r2, [r4, #12]
 801d4e0:	f012 0301 	ands.w	r3, r2, #1
 801d4e4:	d00c      	beq.n	801d500 <__swsetup_r+0xbc>
 801d4e6:	2300      	movs	r3, #0
 801d4e8:	60a3      	str	r3, [r4, #8]
 801d4ea:	6963      	ldr	r3, [r4, #20]
 801d4ec:	425b      	negs	r3, r3
 801d4ee:	61a3      	str	r3, [r4, #24]
 801d4f0:	6923      	ldr	r3, [r4, #16]
 801d4f2:	b953      	cbnz	r3, 801d50a <__swsetup_r+0xc6>
 801d4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4f8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d4fc:	d1ba      	bne.n	801d474 <__swsetup_r+0x30>
 801d4fe:	bd70      	pop	{r4, r5, r6, pc}
 801d500:	0792      	lsls	r2, r2, #30
 801d502:	bf58      	it	pl
 801d504:	6963      	ldrpl	r3, [r4, #20]
 801d506:	60a3      	str	r3, [r4, #8]
 801d508:	e7f2      	b.n	801d4f0 <__swsetup_r+0xac>
 801d50a:	2000      	movs	r0, #0
 801d50c:	e7f7      	b.n	801d4fe <__swsetup_r+0xba>
 801d50e:	bf00      	nop
 801d510:	24000020 	.word	0x24000020
 801d514:	08020e30 	.word	0x08020e30
 801d518:	08020e50 	.word	0x08020e50
 801d51c:	08020e10 	.word	0x08020e10

0801d520 <_close_r>:
 801d520:	b538      	push	{r3, r4, r5, lr}
 801d522:	4c06      	ldr	r4, [pc, #24]	; (801d53c <_close_r+0x1c>)
 801d524:	2300      	movs	r3, #0
 801d526:	4605      	mov	r5, r0
 801d528:	4608      	mov	r0, r1
 801d52a:	6023      	str	r3, [r4, #0]
 801d52c:	f7e3 ff73 	bl	8001416 <_close>
 801d530:	1c43      	adds	r3, r0, #1
 801d532:	d102      	bne.n	801d53a <_close_r+0x1a>
 801d534:	6823      	ldr	r3, [r4, #0]
 801d536:	b103      	cbz	r3, 801d53a <_close_r+0x1a>
 801d538:	602b      	str	r3, [r5, #0]
 801d53a:	bd38      	pop	{r3, r4, r5, pc}
 801d53c:	240076a0 	.word	0x240076a0

0801d540 <__sflush_r>:
 801d540:	898a      	ldrh	r2, [r1, #12]
 801d542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d546:	4605      	mov	r5, r0
 801d548:	0710      	lsls	r0, r2, #28
 801d54a:	460c      	mov	r4, r1
 801d54c:	d458      	bmi.n	801d600 <__sflush_r+0xc0>
 801d54e:	684b      	ldr	r3, [r1, #4]
 801d550:	2b00      	cmp	r3, #0
 801d552:	dc05      	bgt.n	801d560 <__sflush_r+0x20>
 801d554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d556:	2b00      	cmp	r3, #0
 801d558:	dc02      	bgt.n	801d560 <__sflush_r+0x20>
 801d55a:	2000      	movs	r0, #0
 801d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d562:	2e00      	cmp	r6, #0
 801d564:	d0f9      	beq.n	801d55a <__sflush_r+0x1a>
 801d566:	2300      	movs	r3, #0
 801d568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d56c:	682f      	ldr	r7, [r5, #0]
 801d56e:	6a21      	ldr	r1, [r4, #32]
 801d570:	602b      	str	r3, [r5, #0]
 801d572:	d032      	beq.n	801d5da <__sflush_r+0x9a>
 801d574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d576:	89a3      	ldrh	r3, [r4, #12]
 801d578:	075a      	lsls	r2, r3, #29
 801d57a:	d505      	bpl.n	801d588 <__sflush_r+0x48>
 801d57c:	6863      	ldr	r3, [r4, #4]
 801d57e:	1ac0      	subs	r0, r0, r3
 801d580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d582:	b10b      	cbz	r3, 801d588 <__sflush_r+0x48>
 801d584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d586:	1ac0      	subs	r0, r0, r3
 801d588:	2300      	movs	r3, #0
 801d58a:	4602      	mov	r2, r0
 801d58c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d58e:	6a21      	ldr	r1, [r4, #32]
 801d590:	4628      	mov	r0, r5
 801d592:	47b0      	blx	r6
 801d594:	1c43      	adds	r3, r0, #1
 801d596:	89a3      	ldrh	r3, [r4, #12]
 801d598:	d106      	bne.n	801d5a8 <__sflush_r+0x68>
 801d59a:	6829      	ldr	r1, [r5, #0]
 801d59c:	291d      	cmp	r1, #29
 801d59e:	d848      	bhi.n	801d632 <__sflush_r+0xf2>
 801d5a0:	4a29      	ldr	r2, [pc, #164]	; (801d648 <__sflush_r+0x108>)
 801d5a2:	40ca      	lsrs	r2, r1
 801d5a4:	07d6      	lsls	r6, r2, #31
 801d5a6:	d544      	bpl.n	801d632 <__sflush_r+0xf2>
 801d5a8:	2200      	movs	r2, #0
 801d5aa:	6062      	str	r2, [r4, #4]
 801d5ac:	04d9      	lsls	r1, r3, #19
 801d5ae:	6922      	ldr	r2, [r4, #16]
 801d5b0:	6022      	str	r2, [r4, #0]
 801d5b2:	d504      	bpl.n	801d5be <__sflush_r+0x7e>
 801d5b4:	1c42      	adds	r2, r0, #1
 801d5b6:	d101      	bne.n	801d5bc <__sflush_r+0x7c>
 801d5b8:	682b      	ldr	r3, [r5, #0]
 801d5ba:	b903      	cbnz	r3, 801d5be <__sflush_r+0x7e>
 801d5bc:	6560      	str	r0, [r4, #84]	; 0x54
 801d5be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d5c0:	602f      	str	r7, [r5, #0]
 801d5c2:	2900      	cmp	r1, #0
 801d5c4:	d0c9      	beq.n	801d55a <__sflush_r+0x1a>
 801d5c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d5ca:	4299      	cmp	r1, r3
 801d5cc:	d002      	beq.n	801d5d4 <__sflush_r+0x94>
 801d5ce:	4628      	mov	r0, r5
 801d5d0:	f7ff fb10 	bl	801cbf4 <_free_r>
 801d5d4:	2000      	movs	r0, #0
 801d5d6:	6360      	str	r0, [r4, #52]	; 0x34
 801d5d8:	e7c0      	b.n	801d55c <__sflush_r+0x1c>
 801d5da:	2301      	movs	r3, #1
 801d5dc:	4628      	mov	r0, r5
 801d5de:	47b0      	blx	r6
 801d5e0:	1c41      	adds	r1, r0, #1
 801d5e2:	d1c8      	bne.n	801d576 <__sflush_r+0x36>
 801d5e4:	682b      	ldr	r3, [r5, #0]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d0c5      	beq.n	801d576 <__sflush_r+0x36>
 801d5ea:	2b1d      	cmp	r3, #29
 801d5ec:	d001      	beq.n	801d5f2 <__sflush_r+0xb2>
 801d5ee:	2b16      	cmp	r3, #22
 801d5f0:	d101      	bne.n	801d5f6 <__sflush_r+0xb6>
 801d5f2:	602f      	str	r7, [r5, #0]
 801d5f4:	e7b1      	b.n	801d55a <__sflush_r+0x1a>
 801d5f6:	89a3      	ldrh	r3, [r4, #12]
 801d5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d5fc:	81a3      	strh	r3, [r4, #12]
 801d5fe:	e7ad      	b.n	801d55c <__sflush_r+0x1c>
 801d600:	690f      	ldr	r7, [r1, #16]
 801d602:	2f00      	cmp	r7, #0
 801d604:	d0a9      	beq.n	801d55a <__sflush_r+0x1a>
 801d606:	0793      	lsls	r3, r2, #30
 801d608:	680e      	ldr	r6, [r1, #0]
 801d60a:	bf08      	it	eq
 801d60c:	694b      	ldreq	r3, [r1, #20]
 801d60e:	600f      	str	r7, [r1, #0]
 801d610:	bf18      	it	ne
 801d612:	2300      	movne	r3, #0
 801d614:	eba6 0807 	sub.w	r8, r6, r7
 801d618:	608b      	str	r3, [r1, #8]
 801d61a:	f1b8 0f00 	cmp.w	r8, #0
 801d61e:	dd9c      	ble.n	801d55a <__sflush_r+0x1a>
 801d620:	4643      	mov	r3, r8
 801d622:	463a      	mov	r2, r7
 801d624:	6a21      	ldr	r1, [r4, #32]
 801d626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d628:	4628      	mov	r0, r5
 801d62a:	47b0      	blx	r6
 801d62c:	2800      	cmp	r0, #0
 801d62e:	dc06      	bgt.n	801d63e <__sflush_r+0xfe>
 801d630:	89a3      	ldrh	r3, [r4, #12]
 801d632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d636:	81a3      	strh	r3, [r4, #12]
 801d638:	f04f 30ff 	mov.w	r0, #4294967295
 801d63c:	e78e      	b.n	801d55c <__sflush_r+0x1c>
 801d63e:	4407      	add	r7, r0
 801d640:	eba8 0800 	sub.w	r8, r8, r0
 801d644:	e7e9      	b.n	801d61a <__sflush_r+0xda>
 801d646:	bf00      	nop
 801d648:	20400001 	.word	0x20400001

0801d64c <_fflush_r>:
 801d64c:	b538      	push	{r3, r4, r5, lr}
 801d64e:	690b      	ldr	r3, [r1, #16]
 801d650:	4605      	mov	r5, r0
 801d652:	460c      	mov	r4, r1
 801d654:	b1db      	cbz	r3, 801d68e <_fflush_r+0x42>
 801d656:	b118      	cbz	r0, 801d660 <_fflush_r+0x14>
 801d658:	6983      	ldr	r3, [r0, #24]
 801d65a:	b90b      	cbnz	r3, 801d660 <_fflush_r+0x14>
 801d65c:	f7ff fa38 	bl	801cad0 <__sinit>
 801d660:	4b0c      	ldr	r3, [pc, #48]	; (801d694 <_fflush_r+0x48>)
 801d662:	429c      	cmp	r4, r3
 801d664:	d109      	bne.n	801d67a <_fflush_r+0x2e>
 801d666:	686c      	ldr	r4, [r5, #4]
 801d668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d66c:	b17b      	cbz	r3, 801d68e <_fflush_r+0x42>
 801d66e:	4621      	mov	r1, r4
 801d670:	4628      	mov	r0, r5
 801d672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d676:	f7ff bf63 	b.w	801d540 <__sflush_r>
 801d67a:	4b07      	ldr	r3, [pc, #28]	; (801d698 <_fflush_r+0x4c>)
 801d67c:	429c      	cmp	r4, r3
 801d67e:	d101      	bne.n	801d684 <_fflush_r+0x38>
 801d680:	68ac      	ldr	r4, [r5, #8]
 801d682:	e7f1      	b.n	801d668 <_fflush_r+0x1c>
 801d684:	4b05      	ldr	r3, [pc, #20]	; (801d69c <_fflush_r+0x50>)
 801d686:	429c      	cmp	r4, r3
 801d688:	bf08      	it	eq
 801d68a:	68ec      	ldreq	r4, [r5, #12]
 801d68c:	e7ec      	b.n	801d668 <_fflush_r+0x1c>
 801d68e:	2000      	movs	r0, #0
 801d690:	bd38      	pop	{r3, r4, r5, pc}
 801d692:	bf00      	nop
 801d694:	08020e30 	.word	0x08020e30
 801d698:	08020e50 	.word	0x08020e50
 801d69c:	08020e10 	.word	0x08020e10

0801d6a0 <_lseek_r>:
 801d6a0:	b538      	push	{r3, r4, r5, lr}
 801d6a2:	4c07      	ldr	r4, [pc, #28]	; (801d6c0 <_lseek_r+0x20>)
 801d6a4:	4605      	mov	r5, r0
 801d6a6:	4608      	mov	r0, r1
 801d6a8:	4611      	mov	r1, r2
 801d6aa:	2200      	movs	r2, #0
 801d6ac:	6022      	str	r2, [r4, #0]
 801d6ae:	461a      	mov	r2, r3
 801d6b0:	f7e3 fed8 	bl	8001464 <_lseek>
 801d6b4:	1c43      	adds	r3, r0, #1
 801d6b6:	d102      	bne.n	801d6be <_lseek_r+0x1e>
 801d6b8:	6823      	ldr	r3, [r4, #0]
 801d6ba:	b103      	cbz	r3, 801d6be <_lseek_r+0x1e>
 801d6bc:	602b      	str	r3, [r5, #0]
 801d6be:	bd38      	pop	{r3, r4, r5, pc}
 801d6c0:	240076a0 	.word	0x240076a0

0801d6c4 <__swhatbuf_r>:
 801d6c4:	b570      	push	{r4, r5, r6, lr}
 801d6c6:	460e      	mov	r6, r1
 801d6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6cc:	2900      	cmp	r1, #0
 801d6ce:	b096      	sub	sp, #88	; 0x58
 801d6d0:	4614      	mov	r4, r2
 801d6d2:	461d      	mov	r5, r3
 801d6d4:	da07      	bge.n	801d6e6 <__swhatbuf_r+0x22>
 801d6d6:	2300      	movs	r3, #0
 801d6d8:	602b      	str	r3, [r5, #0]
 801d6da:	89b3      	ldrh	r3, [r6, #12]
 801d6dc:	061a      	lsls	r2, r3, #24
 801d6de:	d410      	bmi.n	801d702 <__swhatbuf_r+0x3e>
 801d6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d6e4:	e00e      	b.n	801d704 <__swhatbuf_r+0x40>
 801d6e6:	466a      	mov	r2, sp
 801d6e8:	f000 f864 	bl	801d7b4 <_fstat_r>
 801d6ec:	2800      	cmp	r0, #0
 801d6ee:	dbf2      	blt.n	801d6d6 <__swhatbuf_r+0x12>
 801d6f0:	9a01      	ldr	r2, [sp, #4]
 801d6f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d6f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d6fa:	425a      	negs	r2, r3
 801d6fc:	415a      	adcs	r2, r3
 801d6fe:	602a      	str	r2, [r5, #0]
 801d700:	e7ee      	b.n	801d6e0 <__swhatbuf_r+0x1c>
 801d702:	2340      	movs	r3, #64	; 0x40
 801d704:	2000      	movs	r0, #0
 801d706:	6023      	str	r3, [r4, #0]
 801d708:	b016      	add	sp, #88	; 0x58
 801d70a:	bd70      	pop	{r4, r5, r6, pc}

0801d70c <__smakebuf_r>:
 801d70c:	898b      	ldrh	r3, [r1, #12]
 801d70e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d710:	079d      	lsls	r5, r3, #30
 801d712:	4606      	mov	r6, r0
 801d714:	460c      	mov	r4, r1
 801d716:	d507      	bpl.n	801d728 <__smakebuf_r+0x1c>
 801d718:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d71c:	6023      	str	r3, [r4, #0]
 801d71e:	6123      	str	r3, [r4, #16]
 801d720:	2301      	movs	r3, #1
 801d722:	6163      	str	r3, [r4, #20]
 801d724:	b002      	add	sp, #8
 801d726:	bd70      	pop	{r4, r5, r6, pc}
 801d728:	ab01      	add	r3, sp, #4
 801d72a:	466a      	mov	r2, sp
 801d72c:	f7ff ffca 	bl	801d6c4 <__swhatbuf_r>
 801d730:	9900      	ldr	r1, [sp, #0]
 801d732:	4605      	mov	r5, r0
 801d734:	4630      	mov	r0, r6
 801d736:	f7ff faab 	bl	801cc90 <_malloc_r>
 801d73a:	b948      	cbnz	r0, 801d750 <__smakebuf_r+0x44>
 801d73c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d740:	059a      	lsls	r2, r3, #22
 801d742:	d4ef      	bmi.n	801d724 <__smakebuf_r+0x18>
 801d744:	f023 0303 	bic.w	r3, r3, #3
 801d748:	f043 0302 	orr.w	r3, r3, #2
 801d74c:	81a3      	strh	r3, [r4, #12]
 801d74e:	e7e3      	b.n	801d718 <__smakebuf_r+0xc>
 801d750:	4b0d      	ldr	r3, [pc, #52]	; (801d788 <__smakebuf_r+0x7c>)
 801d752:	62b3      	str	r3, [r6, #40]	; 0x28
 801d754:	89a3      	ldrh	r3, [r4, #12]
 801d756:	6020      	str	r0, [r4, #0]
 801d758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d75c:	81a3      	strh	r3, [r4, #12]
 801d75e:	9b00      	ldr	r3, [sp, #0]
 801d760:	6163      	str	r3, [r4, #20]
 801d762:	9b01      	ldr	r3, [sp, #4]
 801d764:	6120      	str	r0, [r4, #16]
 801d766:	b15b      	cbz	r3, 801d780 <__smakebuf_r+0x74>
 801d768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d76c:	4630      	mov	r0, r6
 801d76e:	f000 f833 	bl	801d7d8 <_isatty_r>
 801d772:	b128      	cbz	r0, 801d780 <__smakebuf_r+0x74>
 801d774:	89a3      	ldrh	r3, [r4, #12]
 801d776:	f023 0303 	bic.w	r3, r3, #3
 801d77a:	f043 0301 	orr.w	r3, r3, #1
 801d77e:	81a3      	strh	r3, [r4, #12]
 801d780:	89a3      	ldrh	r3, [r4, #12]
 801d782:	431d      	orrs	r5, r3
 801d784:	81a5      	strh	r5, [r4, #12]
 801d786:	e7cd      	b.n	801d724 <__smakebuf_r+0x18>
 801d788:	0801ca99 	.word	0x0801ca99

0801d78c <__malloc_lock>:
 801d78c:	4770      	bx	lr

0801d78e <__malloc_unlock>:
 801d78e:	4770      	bx	lr

0801d790 <_read_r>:
 801d790:	b538      	push	{r3, r4, r5, lr}
 801d792:	4c07      	ldr	r4, [pc, #28]	; (801d7b0 <_read_r+0x20>)
 801d794:	4605      	mov	r5, r0
 801d796:	4608      	mov	r0, r1
 801d798:	4611      	mov	r1, r2
 801d79a:	2200      	movs	r2, #0
 801d79c:	6022      	str	r2, [r4, #0]
 801d79e:	461a      	mov	r2, r3
 801d7a0:	f7e3 fe00 	bl	80013a4 <_read>
 801d7a4:	1c43      	adds	r3, r0, #1
 801d7a6:	d102      	bne.n	801d7ae <_read_r+0x1e>
 801d7a8:	6823      	ldr	r3, [r4, #0]
 801d7aa:	b103      	cbz	r3, 801d7ae <_read_r+0x1e>
 801d7ac:	602b      	str	r3, [r5, #0]
 801d7ae:	bd38      	pop	{r3, r4, r5, pc}
 801d7b0:	240076a0 	.word	0x240076a0

0801d7b4 <_fstat_r>:
 801d7b4:	b538      	push	{r3, r4, r5, lr}
 801d7b6:	4c07      	ldr	r4, [pc, #28]	; (801d7d4 <_fstat_r+0x20>)
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	4605      	mov	r5, r0
 801d7bc:	4608      	mov	r0, r1
 801d7be:	4611      	mov	r1, r2
 801d7c0:	6023      	str	r3, [r4, #0]
 801d7c2:	f7e3 fe34 	bl	800142e <_fstat>
 801d7c6:	1c43      	adds	r3, r0, #1
 801d7c8:	d102      	bne.n	801d7d0 <_fstat_r+0x1c>
 801d7ca:	6823      	ldr	r3, [r4, #0]
 801d7cc:	b103      	cbz	r3, 801d7d0 <_fstat_r+0x1c>
 801d7ce:	602b      	str	r3, [r5, #0]
 801d7d0:	bd38      	pop	{r3, r4, r5, pc}
 801d7d2:	bf00      	nop
 801d7d4:	240076a0 	.word	0x240076a0

0801d7d8 <_isatty_r>:
 801d7d8:	b538      	push	{r3, r4, r5, lr}
 801d7da:	4c06      	ldr	r4, [pc, #24]	; (801d7f4 <_isatty_r+0x1c>)
 801d7dc:	2300      	movs	r3, #0
 801d7de:	4605      	mov	r5, r0
 801d7e0:	4608      	mov	r0, r1
 801d7e2:	6023      	str	r3, [r4, #0]
 801d7e4:	f7e3 fe33 	bl	800144e <_isatty>
 801d7e8:	1c43      	adds	r3, r0, #1
 801d7ea:	d102      	bne.n	801d7f2 <_isatty_r+0x1a>
 801d7ec:	6823      	ldr	r3, [r4, #0]
 801d7ee:	b103      	cbz	r3, 801d7f2 <_isatty_r+0x1a>
 801d7f0:	602b      	str	r3, [r5, #0]
 801d7f2:	bd38      	pop	{r3, r4, r5, pc}
 801d7f4:	240076a0 	.word	0x240076a0

0801d7f8 <_init>:
 801d7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7fa:	bf00      	nop
 801d7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d7fe:	bc08      	pop	{r3}
 801d800:	469e      	mov	lr, r3
 801d802:	4770      	bx	lr

0801d804 <_fini>:
 801d804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d806:	bf00      	nop
 801d808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d80a:	bc08      	pop	{r3}
 801d80c:	469e      	mov	lr, r3
 801d80e:	4770      	bx	lr
